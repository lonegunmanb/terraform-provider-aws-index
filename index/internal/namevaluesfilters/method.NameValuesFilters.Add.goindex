package github.com/hashicorp/terraform-provider-aws/internal/namevaluesfilters
import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (filters NameValuesFilters) Add(v any) NameValuesFilters {
	switch v := v.(type) {
	case map[string]string:
		for name, v := range v {
			if values, ok := filters[name]; ok {
				filters[name] = append(values, v)
			} else {
				values = []string{v}
				filters[name] = values
			}
		}

	case map[string][]string:
		// We can't use fallthrough here, so recurse.
		return filters.Add(NameValuesFilters(v))

	case NameValuesFilters:
		for name, v := range v {
			if values, ok := filters[name]; ok {
				filters[name] = append(values, v...)
			} else {
				values = make([]string, len(v))
				copy(values, v)
				filters[name] = values
			}
		}

	case *schema.Set:
		// The set of filters described by Schema().
		for _, tfMapRaw := range v.List() {
			tfMap := tfMapRaw.(map[string]any)
			name := tfMap[names.AttrName].(string)

			for _, v := range tfMap[names.AttrValues].(*schema.Set).List() {
				v := v.(string)
				if values, ok := filters[name]; ok {
					filters[name] = append(values, v)
				} else {
					values = []string{v}
					filters[name] = values
				}
			}
		}
	}

	return filters
}
