package github.com/hashicorp/terraform-provider-aws/internal/retry
import (
	"context"
	"errors"
	"time"

	"github.com/hashicorp/terraform-provider-aws/internal/backoff"
)
func (op opFunc[T]) If(predicate predicateFunc[T]) runFunc[T] {
	// The default predicate short-circuits a retry loop if the operation returns any error.
	if predicate == nil {
		predicate = func(_ T, err error) (bool, error) {
			return err != nil, err
		}
	}

	return func(ctx context.Context, timeout time.Duration, opts ...backoff.Option) (T, error) {
		// We explicitly don't set a deadline on the context here to maintain compatibility
		// with the Plugin SDKv2 implementation. A parent context may have set a deadline.
		var (
			l   *backoff.Loop
			t   T
			err error
		)
		for l = backoff.NewLoopWithOptions(timeout, opts...); l.Continue(ctx); {
			t, err = op(ctx)

			var retry bool
			if retry, err = predicate(t, err); !retry {
				return t, err
			}
		}

		if err == nil {
			if l.Remaining() == 0 || errors.Is(err, context.Cause(ctx)) {
				err = &TimeoutError{
					// LastError must be nil for `TimedOut` to return true.
					// LastError:     err,
					LastState:     "retryableerror",
					Timeout:       timeout,
					ExpectedState: []string{"success"},
				}
			}
		}

		return t, err
	}
}
