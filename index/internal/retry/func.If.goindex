package github.com/hashicorp/terraform-provider-aws/internal/retry
import (
	"context"
	"errors"
	"time"

	"github.com/hashicorp/terraform-provider-aws/internal/backoff"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
)
func (op opFunc[T]) If(predicate predicateFunc[T]) runFunc[T] {
	// The default predicate short-circuits a retry loop if the operation returns any error.
	if predicate == nil {
		predicate = func(_ T, err error) (bool, error) {
			return err != nil, err
		}
	}

	return func(ctx context.Context, timeout time.Duration, opts ...backoff.Option) (T, error) {
		// We explicitly don't set a deadline on the context here to maintain compatibility
		// with the Plugin SDKv2 implementation. A parent context may have set a deadline.
		var l *backoff.Loop
		for l = backoff.NewLoopWithOptions(timeout, opts...); l.Continue(ctx); {
			t, err := op(ctx)

			if retry, err := predicate(t, err); !retry {
				return t, err
			}
		}

		var err error
		if l.Remaining() == 0 {
			err = inttypes.ErrDeadlineExceeded
		} else {
			err = context.Cause(ctx)
		}

		if errors.Is(err, inttypes.ErrDeadlineExceeded) || errors.Is(err, context.DeadlineExceeded) {
			err = &TimeoutError{
				// LastError must be nil for `TimedOut` to return true.
				// LastError:     err,
				LastState:     "retryableerror",
				Timeout:       timeout,
				ExpectedState: []string{"success"},
			}
		}

		var zero T
		return zero, err
	}
}
