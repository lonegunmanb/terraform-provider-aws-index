package github.com/hashicorp/terraform-provider-aws/internal/acctest/statecheck
import (
	"context"
	"fmt"
	"unique"

	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
)
func (e expectFullTagsCheck) CheckState(ctx context.Context, req statecheck.CheckStateRequest, resp *statecheck.CheckStateResponse) {
	res, ok := e.base.ResourceFromState(req, resp)
	if !ok {
		return
	}

	sp := e.servicePackage

	tagsSpec := e.tagSpecFinder(ctx, sp, res.Type)

	if tfunique.IsHandleNil(tagsSpec) {
		resp.Error = fmt.Errorf("no tagging specification found for %s type %s", e.entity, res.Type)
		return
	}

	identifierAttr := tagsSpec.Value().IdentifierAttribute
	if identifierAttr == "" {
		resp.Error = fmt.Errorf("no tag identifier attribute defined for %s type %s", e.entity, res.Type)
		return
	}

	identifier, ok := res.AttributeValues[identifierAttr]
	if !ok {
		resp.Error = fmt.Errorf("attribute %q not found in %s %s", identifierAttr, e.entity, e.base.ResourceAddress())
		return
	}

	ctx = tftags.NewContext(ctx, nil, nil)

	var err error
	if v, ok := sp.(tftags.ServiceTagLister); ok {
		err = v.ListTags(ctx, acctest.Provider.Meta(), identifier.(string)) // Sets tags in Context
	} else if v, ok := sp.(tftags.ResourceTypeTagLister); ok {
		if tagsSpec.Value().ResourceType == "" {
			err = fmt.Errorf("ListTags method for service %s requires ResourceType, but none was set", sp.ServicePackageName())
		} else {
			err = v.ListTags(ctx, acctest.Provider.Meta(), identifier.(string), tagsSpec.Value().ResourceType) // Sets tags in Context
		}
	} else {
		err = fmt.Errorf("no ListTags method found for service %s", sp.ServicePackageName())
	}
	if err != nil {
		resp.Error = fmt.Errorf("listing tags for %s: %w", e.base.ResourceAddress(), err)
		return
	}

	tagsInContext, ok := tftags.FromContext(ctx)
	if !ok {
		resp.Error = fmt.Errorf("Unable to retrieve tags from context")
		return
	}

	var tags tftags.KeyValueTags
	if tagsInContext.TagsOut.IsSome() {
		tags, _ = tagsInContext.TagsOut.Unwrap()
	} else {
		resp.Error = fmt.Errorf("No output tags found in context")
		return
	}

	tags = tags.IgnoreSystem(sp.ServicePackageName())

	tagsMap := tfmaps.ApplyToAllValues(tags.Map(), func(s string) any {
		return s
	})

	if err := e.knownValue.CheckValue(tagsMap); err != nil {
		resp.Error = fmt.Errorf("error checking remote tags for %s: %w", e.base.ResourceAddress(), err) // nosemgrep:ci.semgrep.errors.no-fmt.Errorf-leading-error
		return
	}
}
