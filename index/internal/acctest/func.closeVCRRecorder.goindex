package github.com/hashicorp/terraform-provider-aws/internal/acctest
import (
	"bytes"
	"context"
	"crypto/tls"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"os"
	"path/filepath"
	"reflect"
	"strconv"
	"strings"
	"testing"

	cleanhttp "github.com/hashicorp/go-cleanhttp"
	"github.com/hashicorp/terraform-plugin-go/tfprotov5"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/provider"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"gopkg.in/dnaeon/go-vcr.v4/pkg/cassette"
	"gopkg.in/dnaeon/go-vcr.v4/pkg/recorder"
)
func closeVCRRecorder(ctx context.Context, t *testing.T) {
	t.Helper()

	// Don't close the recorder if we're running because of a panic.
	if p := recover(); p != nil {
		panic(p)
	}

	testName := t.Name()
	providerMetas.Lock()
	meta, ok := providerMetas[testName]
	defer providerMetas.Unlock()

	if ok {
		if !t.Failed() {
			if v, ok := meta.HTTPClient(ctx).Transport.(*recorder.Recorder); ok {
				t.Log("stopping VCR recorder")
				if err := v.Stop(); err != nil {
					t.Error(err)
				}
			}
		}

		delete(providerMetas, testName)
	}

	// Save the randomness seed.
	randomnessSources.Lock()
	s, ok := randomnessSources[testName]
	defer randomnessSources.Unlock()

	if ok {
		if !t.Failed() {
			t.Log("persisting randomness seed")
			if err := writeSeedToFile(s.seed, vcrSeedFile(vcr.Path(), t.Name())); err != nil {
				t.Error(err)
			}
		}

		delete(randomnessSources, testName)
	}
}
