package github.com/hashicorp/terraform-provider-aws/internal/acctest
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/path"
	fwresource "github.com/hashicorp/terraform-plugin-framework/resource"
	rschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func deleteFrameworkResource(
	ctx context.Context,
	provo *schema.Provider,
	factory func(context.Context) (fwresource.ResourceWithConfigure, error),
	n string,
	stateFunc func(ctx context.Context, state *tfsdk.State, is *terraform.InstanceState) error,
) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("resource not found: %s", n)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("resource ID missing: %s", n)
		}

		resource, err := factory(ctx)
		if err != nil {
			return err
		}

		resource.Configure(ctx, fwresource.ConfigureRequest{ProviderData: provo.Meta()}, &fwresource.ConfigureResponse{})

		schemaResp := fwresource.SchemaResponse{}
		resource.Schema(ctx, fwresource.SchemaRequest{}, &schemaResp)

		// Construct a simple Framework State that contains just top-level attributes.
		state := tfsdk.State{
			Raw:    tftypes.NewValue(schemaResp.Schema.Type().TerraformType(ctx), nil),
			Schema: schemaResp.Schema,
		}

		if err := stateFunc(ctx, &state, rs.Primary); err != nil {
			return err
		}

		response := fwresource.DeleteResponse{}
		resource.Delete(ctx, fwresource.DeleteRequest{State: state}, &response)

		if response.Diagnostics.HasError() {
			err := fwdiag.DiagnosticsError(response.Diagnostics)
			if errs.Contains(err, "Value Conversion Error") {
				// Hack for per-resource Region override.
				// Inject a top-level region attribute into the schema and retry.
				schemaResp.Schema.Attributes[names.AttrRegion] = rschema.StringAttribute{
					Optional: true,
					Computed: true,
				}
				state := tfsdk.State{
					Raw:    tftypes.NewValue(schemaResp.Schema.Type().TerraformType(ctx), nil),
					Schema: schemaResp.Schema,
				}

				if err := stateFunc(ctx, &state, rs.Primary); err != nil {
					return err
				}

				response := fwresource.DeleteResponse{}
				resource.Delete(ctx, fwresource.DeleteRequest{State: state}, &response)

				err = nil
				if response.Diagnostics.HasError() {
					err = fwdiag.DiagnosticsError(response.Diagnostics)
				}
			}

			if err != nil {
				return err
			}
		}

		return nil
	}
}
