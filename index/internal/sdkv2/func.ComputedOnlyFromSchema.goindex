package github.com/hashicorp/terraform-provider-aws/internal/sdkv2
import (
	"sync"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)
func ComputedOnlyFromSchema(s *schema.Schema) *schema.Schema {
	cs := &schema.Schema{
		Computed:    true,
		Description: s.Description,
		Type:        s.Type,
	}

	switch s.Type {
	case schema.TypeSet:
		cs.Set = s.Set
		fallthrough
	case schema.TypeList, schema.TypeMap:
		// List & Set types are generally used for 2 cases:
		// - a list/set of simple primitive values (e.g. list of strings)
		// - a sub resource
		// Maps are usually used for maps of simple primitives
		switch elem := s.Elem.(type) {
		case *schema.Resource:
			// handle the case where the Element is a sub-resource
			cs.Elem = ComputedOnlyFromResource(elem)
		case *schema.Schema:
			// handle simple primitive case
			cs.Elem = &schema.Schema{Type: elem.Type}
		}
	}

	return cs
}
