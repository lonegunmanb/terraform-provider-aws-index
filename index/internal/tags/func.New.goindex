package github.com/hashicorp/terraform-provider-aws/internal/tags
import (
	"context"
	"fmt"
	"maps"
	"net/url"
	"reflect"
	"slices"
	"strconv"
	"strings"

	"github.com/hashicorp/go-cty/cty"
	fwdiag "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func New(ctx context.Context, i any) KeyValueTags {
	switch value := i.(type) {
	case KeyValueTags:
		return make(KeyValueTags).Merge(value)
	case map[string]*TagData:
		return make(KeyValueTags).Merge(KeyValueTags(value))
	case map[string]string:
		kvtm := make(KeyValueTags, len(value))

		for k, v := range value {
			kvtm[k] = &TagData{Value: &v}
		}

		return kvtm
	case map[string]*string:
		kvtm := make(KeyValueTags, len(value))

		for k, v := range value {
			if v == nil {
				kvtm[k] = nil
				continue
			}

			kvtm[k] = &TagData{Value: v}
		}

		return kvtm
	case map[string]any:
		kvtm := make(KeyValueTags, len(value))

		for k, v := range value {
			kvtm[k] = &TagData{}

			v, ok := v.(string)

			if ok {
				kvtm[k].Value = &v
			}
		}

		return kvtm
	case []string:
		kvtm := make(KeyValueTags, len(value))

		for _, v := range value {
			kvtm[v] = nil
		}

		return kvtm
	case []any:
		kvtm := make(KeyValueTags, len(value))

		for _, v := range value {
			kvtm[v.(string)] = nil
		}

		return kvtm
	case types.Map:
		return New(ctx, flex.ExpandFrameworkStringMap(ctx, value))
	case Map:
		return New(ctx, flex.ExpandFrameworkStringMap(ctx, value))
	default:
		return make(KeyValueTags)
	}
}
