package github.com/hashicorp/terraform-provider-aws/internal/tags
import (
	"context"
	"fmt"
	"maps"
	"net/url"
	"reflect"
	"slices"
	"strconv"
	"strings"

	"github.com/hashicorp/go-cty/cty"
	fwdiag "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (tags KeyValueTags) ResolveDuplicatesFramework(ctx context.Context, defaultConfig *DefaultConfig, ignoreConfig *IgnoreConfig, resp *resource.ReadResponse, diags *fwdiag.Diagnostics) KeyValueTags {
	// remove default config.
	t := tags.RemoveDefaultConfig(defaultConfig)

	var tagsAll Map
	diags.Append(resp.State.GetAttribute(ctx, path.Root("tags"), &tagsAll)...)

	if diags.HasError() {
		return KeyValueTags{}
	}

	result := make(map[string]string, len(t))
	for k, v := range t {
		result[k] = v.ValueString()
	}

	for k, v := range tagsAll.Elements() {
		if _, ok := result[k]; !ok {
			if defaultConfig != nil {
				s, err := strconv.Unquote(v.String()) // TODO rework to use Framework Map.Equals() value

				if err != nil {
					diags.AddError(
						"unable to normalize string",
						"unable to normalize string default value",
					)
				}

				if val, ok := defaultConfig.Tags[k]; ok && val.ValueString() == s {
					result[k] = s
				}
			}
		}
	}

	return New(ctx, result).IgnoreConfig(ignoreConfig)
}
