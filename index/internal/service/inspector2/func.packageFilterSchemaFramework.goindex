package github.com/hashicorp/terraform-provider-aws/internal/service/inspector2
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/inspector2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/inspector2/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func packageFilterSchemaFramework(ctx context.Context, maxSize int) schema.SetNestedBlock {
	return schema.SetNestedBlock{
		CustomType: fwtypes.NewSetNestedObjectTypeOf[packageFilterModel](ctx),
		Validators: []validator.Set{
			setvalidator.SizeAtMost(maxSize),
		},
		NestedObject: schema.NestedBlockObject{
			Blocks: map[string]schema.Block{
				"architecture": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				"epoch": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[numberFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(maxSize),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"lower_inclusive": schema.Float64Attribute{
								Required: true,
							},
							"upper_inclusive": schema.Float64Attribute{
								Required: true,
							},
						},
					},
				},
				"file_path": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				names.AttrName: schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				"release": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				"source_lambda_layer_arn": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				"source_layer_hash": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
				names.AttrVersion: schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[stringFilterModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"comparison": schema.StringAttribute{
								CustomType: fwtypes.StringEnumType[awstypes.StringComparison](),
								Required:   true,
							},
							names.AttrValue: schema.StringAttribute{
								Required: true,
							},
						},
					},
				},
			},
		},
	}
}
