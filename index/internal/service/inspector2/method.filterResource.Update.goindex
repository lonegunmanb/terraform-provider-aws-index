package github.com/hashicorp/terraform-provider-aws/internal/service/inspector2
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/inspector2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/inspector2/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *filterResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var new, old filterResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().Inspector2Client(ctx)

	if !new.Action.Equal(old.Action) ||
		!new.Description.Equal(old.Description) ||
		!new.FilterCriteria.Equal(old.FilterCriteria) ||
		!new.Name.Equal(old.Name) ||
		!new.Reason.Equal(old.Reason) {
		var input inspector2.UpdateFilterInput
		response.Diagnostics.Append(fwflex.Expand(ctx, new, &input, fwflex.WithFieldNamePrefix("Filter"))...)
		if response.Diagnostics.HasError() {
			return
		}

		// Additional fields.
		input.FilterArn = fwflex.StringFromFramework(ctx, new.ARN)

		_, err := conn.UpdateFilter(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Inspector2 Filter (%s)", new.ARN.ValueString()), err.Error())

			return
		}
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
