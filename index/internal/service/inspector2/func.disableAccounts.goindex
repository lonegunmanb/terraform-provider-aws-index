package github.com/hashicorp/terraform-provider-aws/internal/service/inspector2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/inspector2"
	"github.com/aws/aws-sdk-go-v2/service/inspector2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
	"github.com/mitchellh/mapstructure"
)
func disableAccounts(ctx context.Context, conn *inspector2.Client, d *schema.ResourceData, accountIDs []string) diag.Diagnostics {
	var diags diag.Diagnostics

	s, err := AccountStatuses(ctx, conn, accountIDs)
	if err != nil {
		return create.AppendDiagError(diags, names.Inspector2, create.ErrActionReading, ResNameEnabler, d.Id(), err)
	}

	var resourceTypes []types.ResourceScanType
	for _, st := range s {
		for k, a := range st.ResourceStatuses {
			if a != types.StatusDisabled && !slices.Contains(resourceTypes, k) {
				resourceTypes = append(resourceTypes, k)
			}
		}
	}

	if len(resourceTypes) == 0 {
		return diags
	}

	in := &inspector2.DisableInput{
		AccountIds:    accountIDs,
		ResourceTypes: resourceTypes,
	}

	out, err := conn.Disable(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.Inspector2, create.ErrActionDeleting, ResNameEnabler, d.Id(), err)
	}
	if out == nil {
		return create.AppendDiagError(diags, names.Inspector2, create.ErrActionDeleting, ResNameEnabler, d.Id(), tfresource.NewEmptyResultError(nil))
	}

	var errs []error
	for _, acct := range out.FailedAccounts {
		if acct.ErrorCode != types.ErrorCodeAccessDenied {
			errs = append(errs, newFailedAccountError(acct))
		}
	}
	err = errors.Join(errs...)

	if err != nil {
		return create.AppendDiagError(diags, names.Inspector2, create.ErrActionDeleting, ResNameEnabler, d.Id(), err)
	}

	if err := waitDisabled(ctx, conn, accountIDs, d.Timeout(schema.TimeoutDelete)); err != nil {
		return create.AppendDiagError(diags, names.Inspector2, create.ErrActionWaitingForDeletion, ResNameEnabler, d.Id(), err)
	}

	return diags
}
