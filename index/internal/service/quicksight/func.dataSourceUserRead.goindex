package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceUserRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).QuickSightClient(ctx)

	awsAccountID := meta.(*conns.AWSClient).AccountID(ctx)
	if v, ok := d.GetOk(names.AttrAWSAccountID); ok {
		awsAccountID = v.(string)
	}
	namespace := d.Get(names.AttrNamespace).(string)
	userName := d.Get(names.AttrUserName).(string)
	id := userCreateResourceID(awsAccountID, namespace, userName)

	user, err := findUserByThreePartKey(ctx, conn, awsAccountID, namespace, userName)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QuickSight User (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("active", user.Active)
	d.Set(names.AttrARN, user.Arn)
	d.Set(names.AttrAWSAccountID, awsAccountID)
	d.Set("custom_permissions_name", user.CustomPermissionsName)
	d.Set(names.AttrEmail, user.Email)
	d.Set("identity_type", user.IdentityType)
	d.Set("principal_id", user.PrincipalId)
	d.Set(names.AttrUserName, user.UserName)
	d.Set("user_role", user.Role)

	return diags
}
