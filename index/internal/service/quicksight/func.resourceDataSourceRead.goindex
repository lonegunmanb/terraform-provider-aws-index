package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDataSourceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).QuickSightClient(ctx)

	awsAccountID, dataSourceID, err := dataSourceParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	dataSource, err := findDataSourceByTwoPartKey(ctx, conn, awsAccountID, dataSourceID)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] QuickSight Data Source (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QuickSight Data Source (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, dataSource.Arn)
	d.Set(names.AttrAWSAccountID, awsAccountID)
	d.Set("data_source_id", dataSource.DataSourceId)
	d.Set(names.AttrName, dataSource.Name)
	if err := d.Set(names.AttrParameters, quicksightschema.FlattenDataSourceParameters(dataSource.DataSourceParameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting parameters: %s", err)
	}
	if err := d.Set("ssl_properties", quicksightschema.FlattenSSLProperties(dataSource.SslProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ssl_properties: %s", err)
	}
	d.Set(names.AttrType, dataSource.Type)
	if err := d.Set("vpc_connection_properties", quicksightschema.FlattenVPCConnectionProperties(dataSource.VpcConnectionProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting vpc_connection_properties: %s", err)
	}

	permissions, err := findDataSourcePermissionsByTwoPartKey(ctx, conn, awsAccountID, dataSourceID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QuickSight Data Source (%s) permissions: %s", d.Id(), err)
	}

	if err := d.Set("permission", quicksightschema.FlattenPermissions(permissions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting permission: %s", err)
	}

	return diags
}
