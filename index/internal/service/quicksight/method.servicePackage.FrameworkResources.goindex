package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newAccountSettingsResource,
			TypeName: "aws_quicksight_account_settings",
			Name:     "Account Settings",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  newCustomPermissionsResource,
			TypeName: "aws_quicksight_custom_permissions",
			Name:     "Custom Permissions",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newFolderMembershipResource,
			TypeName: "aws_quicksight_folder_membership",
			Name:     "Folder Membership",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIAMPolicyAssignmentResource,
			TypeName: "aws_quicksight_iam_policy_assignment",
			Name:     "IAM Policy Assignment",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIngestionResource,
			TypeName: "aws_quicksight_ingestion",
			Name:     "Ingestion",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIPRestrictionResource,
			TypeName: "aws_quicksight_ip_restriction",
			Name:     "IP Restriction",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newKeyRegistrationResource,
			TypeName: "aws_quicksight_key_registration",
			Name:     "Key Registration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newNamespaceResource,
			TypeName: "aws_quicksight_namespace",
			Name:     "Namespace",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newRefreshScheduleResource,
			TypeName: "aws_quicksight_refresh_schedule",
			Name:     "Refresh Schedule",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newRoleCustomPermissionResource,
			TypeName: "aws_quicksight_role_custom_permission",
			Name:     "Role Custom Permission",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newRoleMembershipResource,
			TypeName: "aws_quicksight_role_membership",
			Name:     "Role Membership",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTemplateAliasResource,
			TypeName: "aws_quicksight_template_alias",
			Name:     "Template Alias",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newUserCustomPermissionResource,
			TypeName: "aws_quicksight_user_custom_permission",
			Name:     "User Custom Permission",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCConnectionResource,
			TypeName: "aws_quicksight_vpc_connection",
			Name:     "VPC Connection",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
