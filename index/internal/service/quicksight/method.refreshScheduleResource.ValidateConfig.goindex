package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/helpers/validatordiag"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *refreshScheduleResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	scheduleFrequencyPath := path.Root(names.AttrSchedule).AtListIndex(0).AtName("schedule_frequency").AtListIndex(0)

	var scheduleFrequency refreshFrequencyModel
	resp.Diagnostics.Append(req.Config.GetAttribute(ctx, scheduleFrequencyPath, &scheduleFrequency)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if scheduleFrequency.Interval.IsUnknown() {
		// Field is required, if it's unknown, the value is likely coming from a dynamic block and
		// ValidateConfig will be called again later with the actual value.
		return
	}

	refreshOnDayPath := scheduleFrequencyPath.AtName("refresh_on_day")

	var refreshOnDay []refreshOnDayModel
	resp.Diagnostics.Append(scheduleFrequency.RefreshOnDay.ElementsAs(ctx, &refreshOnDay, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	switch interval := scheduleFrequency.Interval.ValueString(); interval {
	case string(awstypes.RefreshIntervalWeekly):
		if len(refreshOnDay) == 0 || refreshOnDay[0].DayOfWeek.IsNull() {
			resp.Diagnostics.Append(fwdiag.NewAttributeRequiredWhenError(
				refreshOnDayPath.AtListIndex(0).AtName("day_of_week"),
				scheduleFrequencyPath.AtName(names.AttrInterval),
				interval,
			))
		}
	case string(awstypes.RefreshIntervalMonthly):
		if len(refreshOnDay) == 0 || refreshOnDay[0].DayOfMonth.IsNull() {
			resp.Diagnostics.Append(fwdiag.NewAttributeRequiredWhenError(
				refreshOnDayPath.AtListIndex(0).AtName("day_of_month"),
				scheduleFrequencyPath.AtName(names.AttrInterval),
				interval,
			))
		}

	default:
		if len(refreshOnDay) != 0 {
			resp.Diagnostics.Append(fwdiag.NewAttributeConflictsWhenError(
				refreshOnDayPath,
				scheduleFrequencyPath.AtName(names.AttrInterval),
				interval,
			))
		}
	}
}
