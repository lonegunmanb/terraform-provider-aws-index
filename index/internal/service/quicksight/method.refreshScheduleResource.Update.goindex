package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/helpers/validatordiag"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *refreshScheduleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().QuickSightClient(ctx)

	var config, plan, state refreshScheduleResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	awsAccountID, dataSetID, scheduleID, err := refreshScheduleParseResourceID(plan.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.QuickSight, create.ErrActionUpdating, resNameRefreshSchedule, plan.ID.String(), nil),
			err.Error(),
		)
		return
	}

	if !plan.Schedule.Equal(state.Schedule) {
		var in quicksight.UpdateRefreshScheduleInput
		resp.Diagnostics.Append(flex.Expand(ctx, plan, &in)...)
		if resp.Diagnostics.HasError() {
			return
		}
		in.Schedule.ScheduleId = plan.ScheduleID.ValueStringPointer()
		in.Schedule.Arn = plan.ARN.ValueStringPointer()

		// Because StartAfterDateTime is a string and not a time type, we have to handle it outside of AutoFlex
		planSchedule, diags := plan.Schedule.ToPtr(ctx)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		if !planSchedule.StartAfterDateTime.IsUnknown() && !planSchedule.StartAfterDateTime.IsNull() {
			start, _ := time.Parse(startAfterDateTimeLayout, planSchedule.StartAfterDateTime.ValueString())
			in.Schedule.StartAfterDateTime = aws.Time(start)
		}

		out, err := conn.UpdateRefreshSchedule(ctx, &in)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QuickSight, create.ErrActionUpdating, resNameRefreshSchedule, plan.ID.String(), nil),
				err.Error(),
			)
			return
		}
		if out == nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QuickSight, create.ErrActionUpdating, resNameRefreshSchedule, plan.ID.String(), nil),
				errors.New("empty output").Error(),
			)
			return
		}

		_, outFind, err := findRefreshScheduleByThreePartKey(ctx, conn, awsAccountID, dataSetID, scheduleID)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QuickSight, create.ErrActionReading, resNameRefreshSchedule, plan.ID.String(), nil),
				err.Error(),
			)
			return
		}

		resp.Diagnostics.Append(plan.refreshFromRead(ctx, out.Arn, outFind)...)
		// resp.Diagnostics.Append(flex.Flatten(ctx, outFind, &plan)...)

		resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
	}
}
