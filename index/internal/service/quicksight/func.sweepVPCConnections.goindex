package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepVPCConnections(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.QuickSightClient(ctx)
	sweepResources := make([]sweep.Sweepable, 0)
	awsAccountID := client.AccountID(ctx)
	input := &quicksight.ListVPCConnectionsInput{
		AwsAccountId: aws.String(awsAccountID),
	}

	pages := quicksight.NewListVPCConnectionsPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if skipSweepError(err) {
			log.Printf("[WARN] Skipping QuickSight VPC Connection sweep for %s: %s", region, err)
			return nil
		}

		if err != nil {
			return fmt.Errorf("error listing QuickSight VPC Connections (%s): %w", region, err)
		}

		for _, v := range page.VPCConnectionSummaries {
			vpcConnectionID := aws.ToString(v.VPCConnectionId)

			if status := v.Status; status == awstypes.VPCConnectionResourceStatusDeleted || status == awstypes.VPCConnectionResourceStatusDeletionFailed {
				log.Printf("[INFO] Skipping QuickSight Group %s: Status=%s", vpcConnectionID, status)
				continue
			}

			sweepResources = append(sweepResources, framework.NewSweepResource(newVPCConnectionResource, client,
				framework.NewAttribute(names.AttrID, vpcConnectionCreateResourceID(awsAccountID, vpcConnectionID)),
				framework.NewAttribute(names.AttrAWSAccountID, awsAccountID),
				framework.NewAttribute("vpc_connection_id", vpcConnectionID),
			))
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping QuickSight VPC Connections (%s): %w", region, err)
	}

	return nil
}
