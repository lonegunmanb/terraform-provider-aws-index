package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSheetDefinition(tfMap map[string]any) *awstypes.SheetDefinition {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.SheetDefinition{}

	if v, ok := tfMap["sheet_id"].(string); ok && v != "" {
		apiObject.SheetId = aws.String(v)
	}
	if v, ok := tfMap[names.AttrContentType].(string); ok && v != "" {
		apiObject.ContentType = awstypes.SheetContentType(v)
	}
	if v, ok := tfMap[names.AttrDescription].(string); ok && v != "" {
		apiObject.Description = aws.String(v)
	}
	if v, ok := tfMap[names.AttrName].(string); ok && v != "" {
		apiObject.Name = aws.String(v)
	}
	if v, ok := tfMap["title"].(string); ok && v != "" {
		apiObject.Title = aws.String(v)
	}
	if v, ok := tfMap["filter_controls"].([]any); ok && len(v) > 0 {
		apiObject.FilterControls = expandFilterControls(v)
	}
	if v, ok := tfMap["layouts"].([]any); ok && len(v) > 0 {
		apiObject.Layouts = expandLayouts(v)
	}
	if v, ok := tfMap["parameter_controls"].([]any); ok && len(v) > 0 {
		apiObject.ParameterControls = expandParameterControls(v)
	}
	if v, ok := tfMap["sheet_control_layouts"].([]any); ok && len(v) > 0 {
		apiObject.SheetControlLayouts = expandSheetControlLayouts(v)
	}
	if v, ok := tfMap["text_boxes"].([]any); ok && len(v) > 0 {
		apiObject.TextBoxes = expandSheetTextBoxes(v)
	}
	if v, ok := tfMap["visuals"].([]any); ok && len(v) > 0 {
		apiObject.Visuals = expandVisuals(v)
	}

	return apiObject
}
