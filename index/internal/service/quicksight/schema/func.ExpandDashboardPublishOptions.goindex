package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ExpandDashboardPublishOptions(tfList []any) *awstypes.DashboardPublishOptions {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.DashboardPublishOptions{}

	if v, ok := tfMap["ad_hoc_filtering_option"].([]any); ok && len(v) > 0 {
		apiObject.AdHocFilteringOption = expandAdHocFilteringOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["data_point_drill_up_down_option"].([]any); ok && len(v) > 0 {
		apiObject.DataPointDrillUpDownOption = expandDataPointDrillUpDownOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["data_point_menu_label_option"].([]any); ok && len(v) > 0 {
		apiObject.DataPointMenuLabelOption = expandDataPointMenuLabelOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["data_point_tooltip_option"].([]any); ok && len(v) > 0 {
		apiObject.DataPointTooltipOption = expandDataPointTooltipOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["export_to_csv_option"].([]any); ok && len(v) > 0 {
		apiObject.ExportToCSVOption = expandExportToCSVOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["export_with_hidden_fields_option"].([]any); ok && len(v) > 0 {
		apiObject.ExportWithHiddenFieldsOption = expandExportWithHiddenFieldsOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["sheet_controls_option"].([]any); ok && len(v) > 0 {
		apiObject.SheetControlsOption = expandSheetControlsOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["sheet_layout_element_maximization_option"].([]any); ok && len(v) > 0 {
		apiObject.SheetLayoutElementMaximizationOption = expandSheetLayoutElementMaximizationOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["visual_axis_sort_option"].([]any); ok && len(v) > 0 {
		apiObject.VisualAxisSortOption = expandVisualAxisSortOption(v[0].(map[string]any))
	}
	if v, ok := tfMap["visual_menu_option"].([]any); ok && len(v) > 0 {
		apiObject.VisualMenuOption = expandVisualMenuOption(v[0].(map[string]any))
	}

	return apiObject
}
