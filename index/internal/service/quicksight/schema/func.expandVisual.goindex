package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVisual(tfMap map[string]any) *awstypes.Visual {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.Visual{}

	if v, ok := tfMap["bar_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.BarChartVisual = expandBarChartVisual(v)
	}
	if v, ok := tfMap["box_plot_visual"].([]any); ok && len(v) > 0 {
		apiObject.BoxPlotVisual = expandBoxPlotVisual(v)
	}
	if v, ok := tfMap["combo_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.ComboChartVisual = expandComboChartVisual(v)
	}
	if v, ok := tfMap["custom_content_visual"].([]any); ok && len(v) > 0 {
		apiObject.CustomContentVisual = expandCustomContentVisual(v)
	}
	if v, ok := tfMap["empty_visual"].([]any); ok && len(v) > 0 {
		apiObject.EmptyVisual = expandEmptyVisual(v)
	}
	if v, ok := tfMap["filled_map_visual"].([]any); ok && len(v) > 0 {
		apiObject.FilledMapVisual = expandFilledMapVisual(v)
	}
	if v, ok := tfMap["funnel_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.FunnelChartVisual = expandFunnelChartVisual(v)
	}
	if v, ok := tfMap["gauge_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.GaugeChartVisual = expandGaugeChartVisual(v)
	}
	if v, ok := tfMap["geospatial_map_visual"].([]any); ok && len(v) > 0 {
		apiObject.GeospatialMapVisual = expandGeospatialMapVisual(v)
	}
	if v, ok := tfMap["heat_map_visual"].([]any); ok && len(v) > 0 {
		apiObject.HeatMapVisual = expandHeatMapVisual(v)
	}
	if v, ok := tfMap["histogram_visual"].([]any); ok && len(v) > 0 {
		apiObject.HistogramVisual = expandHistogramVisual(v)
	}
	if v, ok := tfMap["insight_visual"].([]any); ok && len(v) > 0 {
		apiObject.InsightVisual = expandInsightVisual(v)
	}
	if v, ok := tfMap["kpi_visual"].([]any); ok && len(v) > 0 {
		apiObject.KPIVisual = expandKPIVisual(v)
	}
	if v, ok := tfMap["line_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.LineChartVisual = expandLineChartVisual(v)
	}
	if v, ok := tfMap["pie_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.PieChartVisual = expandPieChartVisual(v)
	}
	if v, ok := tfMap["pivot_table_visual"].([]any); ok && len(v) > 0 {
		apiObject.PivotTableVisual = expandPivotTableVisual(v)
	}
	if v, ok := tfMap["radar_chart_visual"].([]any); ok && len(v) > 0 {
		apiObject.RadarChartVisual = expandRadarChartVisual(v)
	}
	if v, ok := tfMap["sankey_diagram_visual"].([]any); ok && len(v) > 0 {
		apiObject.SankeyDiagramVisual = expandSankeyDiagramVisual(v)
	}
	if v, ok := tfMap["scatter_plot_visual"].([]any); ok && len(v) > 0 {
		apiObject.ScatterPlotVisual = expandScatterPlotVisual(v)
	}
	if v, ok := tfMap["table_visual"].([]any); ok && len(v) > 0 {
		apiObject.TableVisual = expandTableVisual(v)
	}
	if v, ok := tfMap["tree_map_visual"].([]any); ok && len(v) > 0 {
		apiObject.TreeMapVisual = expandTreeMapVisual(v)
	}
	if v, ok := tfMap["waterfall_visual"].([]any); ok && len(v) > 0 {
		apiObject.WaterfallVisual = expandWaterfallVisual(v)
	}
	if v, ok := tfMap["word_cloud_visual"].([]any); ok && len(v) > 0 {
		apiObject.WordCloudVisual = expandWordCloudVisual(v)
	}

	return apiObject
}
