package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenNumericRangeFilter(apiObject *awstypes.NumericRangeFilter) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if apiObject.AggregationFunction != nil {
		tfMap["aggregation_function"] = flattenAggregationFunction(apiObject.AggregationFunction)
	}
	if apiObject.Column != nil {
		tfMap["column"] = flattenColumnIdentifier(apiObject.Column)
	}
	if apiObject.FilterId != nil {
		tfMap["filter_id"] = aws.ToString(apiObject.FilterId)
	}
	if apiObject.IncludeMaximum != nil {
		tfMap["include_maximum"] = aws.ToBool(apiObject.IncludeMaximum)
	}
	if apiObject.IncludeMinimum != nil {
		tfMap["include_minimum"] = aws.ToBool(apiObject.IncludeMinimum)
	}
	tfMap["null_option"] = apiObject.NullOption
	if apiObject.RangeMaximum != nil {
		tfMap["range_maximum"] = flattenNumericRangeFilterValue(apiObject.RangeMaximum)
	}
	if apiObject.RangeMinimum != nil {
		tfMap["range_minimum"] = flattenNumericRangeFilterValue(apiObject.RangeMinimum)
	}
	tfMap["select_all_options"] = apiObject.SelectAllOptions

	return []any{tfMap}
}
