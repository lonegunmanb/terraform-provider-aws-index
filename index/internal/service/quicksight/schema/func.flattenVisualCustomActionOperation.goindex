package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenVisualCustomActionOperation(apiObjects []awstypes.VisualCustomActionOperation) []any {
	if len(apiObjects) == 0 {
		return nil
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		if apiObject.FilterOperation != nil {
			tfMap["filter_operation"] = flattenCustomActionFilterOperation(apiObject.FilterOperation)
		}
		if apiObject.NavigationOperation != nil {
			tfMap["navigation_operation"] = flattenCustomActionNavigationOperation(apiObject.NavigationOperation)
		}
		if apiObject.SetParametersOperation != nil {
			tfMap["set_parameters_operation"] = flattenCustomActionSetParametersOperation(apiObject.SetParametersOperation)
		}
		if apiObject.URLOperation != nil {
			tfMap["url_operation"] = flattenCustomActionURLOperation(apiObject.URLOperation)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
