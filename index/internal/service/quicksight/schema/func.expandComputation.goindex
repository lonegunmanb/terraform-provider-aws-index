package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandComputation(tfMap map[string]any) *awstypes.Computation {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.Computation{}

	if v, ok := tfMap["forecast"].([]any); ok && len(v) > 0 {
		apiObject.Forecast = expandForecastComputation(v)
	}
	if v, ok := tfMap["growth_rate"].([]any); ok && len(v) > 0 {
		apiObject.GrowthRate = expandGrowthRateComputation(v)
	}
	if v, ok := tfMap["maximum_minimum"].([]any); ok && len(v) > 0 {
		apiObject.MaximumMinimum = expandMaximumMinimumComputation(v)
	}
	if v, ok := tfMap["metric_comparison"].([]any); ok && len(v) > 0 {
		apiObject.MetricComparison = expandMetricComparisonComputation(v)
	}
	if v, ok := tfMap["period_over_period"].([]any); ok && len(v) > 0 {
		apiObject.PeriodOverPeriod = expandPeriodOverPeriodComputation(v)
	}
	if v, ok := tfMap["period_to_date"].([]any); ok && len(v) > 0 {
		apiObject.PeriodToDate = expandPeriodToDateComputation(v)
	}
	if v, ok := tfMap["top_bottom_movers"].([]any); ok && len(v) > 0 {
		apiObject.TopBottomMovers = expandTopBottomMoversComputation(v)
	}
	if v, ok := tfMap["top_bottom_ranked"].([]any); ok && len(v) > 0 {
		apiObject.TopBottomRanked = expandTopBottomRankedComputation(v)
	}
	if v, ok := tfMap["total_aggregation"].([]any); ok && len(v) > 0 {
		apiObject.TotalAggregation = expandTotalAggregationComputation(v)
	}
	if v, ok := tfMap["unique_values"].([]any); ok && len(v) > 0 {
		apiObject.UniqueValues = expandUniqueValuesComputation(v)
	}

	return apiObject
}
