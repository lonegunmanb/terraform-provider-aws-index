package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ExpandDataSourceParameters(tfList []any) awstypes.DataSourceParameters {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	var apiObject awstypes.DataSourceParameters

	if v, ok := tfMap["amazon_elasticsearch"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberAmazonElasticsearchParameters{}

			if v, ok := tfMap[names.AttrDomain].(string); ok && v != "" {
				ps.Value.Domain = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["athena"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberAthenaParameters{}

			if v, ok := tfMap["work_group"].(string); ok && v != "" {
				ps.Value.WorkGroup = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["aurora"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberAuroraParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v, ok := tfMap["aurora_postgresql"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberAuroraPostgreSqlParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["aws_iot_analytics"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberAwsIotAnalyticsParameters{}

			if v, ok := tfMap["data_set_name"].(string); ok && v != "" {
				ps.Value.DataSetName = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["databricks"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberDatabricksParameters{}

			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}
			if v, ok := tfMap["sql_endpoint_path"].(string); ok && v != "" {
				ps.Value.SqlEndpointPath = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["jira"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberJiraParameters{}

			if v, ok := tfMap["site_base_url"].(string); ok && v != "" {
				ps.Value.SiteBaseUrl = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["maria_db"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberMariaDbParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["mysql"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberMySqlParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["oracle"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberOracleParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["postgresql"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberPostgreSqlParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["presto"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberPrestoParameters{}

			if v, ok := tfMap["catalog"].(string); ok && v != "" {
				ps.Value.Catalog = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["rds"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberRdsParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap[names.AttrInstanceID].(string); ok && v != "" {
				ps.Value.InstanceId = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["redshift"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberRedshiftParameters{}

			if v, ok := tfMap["cluster_id"].(string); ok && v != "" {
				ps.Value.ClusterId = aws.String(v)
			}
			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = int32(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["s3"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberS3Parameters{}

			if v, ok := tfMap["manifest_file_location"].([]any); ok && len(v) > 0 && v[0] != nil {
				if tfMap, ok := v[0].(map[string]any); ok {
					apiObject := &awstypes.ManifestFileLocation{}

					if v, ok := tfMap[names.AttrBucket].(string); ok && v != "" {
						apiObject.Bucket = aws.String(v)
					}
					if v, ok := tfMap[names.AttrKey].(string); ok && v != "" {
						apiObject.Key = aws.String(v)
					}

					ps.Value.ManifestFileLocation = apiObject
				}
			}

			if v, ok := tfMap[names.AttrRoleARN].(string); ok && v != "" {
				ps.Value.RoleArn = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["service_now"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberServiceNowParameters{}

			if v, ok := tfMap["site_base_url"].(string); ok && v != "" {
				ps.Value.SiteBaseUrl = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["snowflake"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberSnowflakeParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap["warehouse"].(string); ok && v != "" {
				ps.Value.Warehouse = aws.String(v)
			}

			apiObject = ps
		}
	}

	if v := tfMap["spark"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberSparkParameters{}

			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["sql_server"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberSqlServerParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["teradata"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberTeradataParameters{}

			if v, ok := tfMap[names.AttrDatabase].(string); ok && v != "" {
				ps.Value.Database = aws.String(v)
			}
			if v, ok := tfMap["host"].(string); ok && v != "" {
				ps.Value.Host = aws.String(v)
			}
			if v, ok := tfMap[names.AttrPort].(int); ok {
				ps.Value.Port = aws.Int32(int32(v))
			}

			apiObject = ps
		}
	}

	if v := tfMap["twitter"].([]any); ok && len(v) > 0 && v != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ps := &awstypes.DataSourceParametersMemberTwitterParameters{}

			if v, ok := tfMap["max_rows"].(int); ok {
				ps.Value.MaxRows = aws.Int32(int32(v))
			}
			if v, ok := tfMap["query"].(string); ok && v != "" {
				ps.Value.Query = aws.String(v)
			}

			apiObject = ps
		}
	}

	return apiObject
}
