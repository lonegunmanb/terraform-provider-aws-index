package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"reflect"
	"sync"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandFilterGroup(tfMap map[string]any) *awstypes.FilterGroup {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.FilterGroup{}

	if v, ok := tfMap["cross_dataset"].(string); ok && v != "" {
		apiObject.CrossDataset = awstypes.CrossDatasetTypes(v)
	}
	if v, ok := tfMap["filter_group_id"].(string); ok && v != "" {
		apiObject.FilterGroupId = aws.String(v)
	}
	if v, ok := tfMap[names.AttrStatus].(string); ok && v != "" {
		apiObject.Status = awstypes.WidgetStatus(v)
	}
	if v, ok := tfMap["filters"].([]any); ok && len(v) > 0 {
		apiObject.Filters = expandFilters(v)
	}
	if v, ok := tfMap["scope_configuration"].([]any); ok && len(v) > 0 {
		apiObject.ScopeConfiguration = expandFilterScopeConfiguration(v)
	}

	return apiObject
}
