package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTransformOperations(apiObjects []awstypes.TransformOperation) []any {
	if len(apiObjects) == 0 {
		return nil
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		switch v := apiObject.(type) {
		case *awstypes.TransformOperationMemberCastColumnTypeOperation:
			tfMap["cast_column_type_operation"] = flattenCastColumnTypeOperation(&v.Value)
		case *awstypes.TransformOperationMemberCreateColumnsOperation:
			tfMap["create_columns_operation"] = flattenCreateColumnsOperation(&v.Value)
		case *awstypes.TransformOperationMemberFilterOperation:
			tfMap["filter_operation"] = flattenFilterOperation(&v.Value)
		case *awstypes.TransformOperationMemberProjectOperation:
			tfMap["project_operation"] = flattenProjectOperation(&v.Value)
		case *awstypes.TransformOperationMemberRenameColumnOperation:
			tfMap["rename_column_operation"] = flattenRenameColumnOperation(&v.Value)
		case *awstypes.TransformOperationMemberTagColumnOperation:
			tfMap["tag_column_operation"] = flattenTagColumnOperation(&v.Value)
		case *awstypes.TransformOperationMemberUntagColumnOperation:
			tfMap["untag_column_operation"] = flattenUntagColumnOperation(&v.Value)
		default:
			continue
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
