package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTimeBasedForecastProperties(apiObject *awstypes.TimeBasedForecastProperties) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if apiObject.LowerBoundary != nil {
		tfMap["lower_boundary"] = aws.ToFloat64(apiObject.LowerBoundary)
	}
	if apiObject.PeriodsBackward != nil {
		tfMap["periods_backward"] = aws.ToInt32(apiObject.PeriodsBackward)
	}
	if apiObject.PeriodsForward != nil {
		tfMap["periods_forward"] = aws.ToInt32(apiObject.PeriodsForward)
	}
	if apiObject.PredictionInterval != nil {
		tfMap["prediction_interval"] = aws.ToInt32(apiObject.PredictionInterval)
	}
	if apiObject.Seasonality != nil {
		tfMap["seasonality"] = aws.ToInt32(apiObject.Seasonality)
	}
	if apiObject.UpperBoundary != nil {
		tfMap["upper_boundary"] = aws.ToFloat64(apiObject.UpperBoundary)
	}

	return []any{tfMap}
}
