package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTimeBasedForecastProperties(tfList []any) *awstypes.TimeBasedForecastProperties {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.TimeBasedForecastProperties{}

	if v, ok := tfMap["lower_boundary"].(float64); ok {
		apiObject.LowerBoundary = aws.Float64(v)
	}
	if v, ok := tfMap["periods_backward"].(int); ok {
		apiObject.PeriodsBackward = aws.Int32(int32(v))
	}
	if v, ok := tfMap["periods_forward"].(int); ok {
		apiObject.PeriodsForward = aws.Int32(int32(v))
	}
	if v, ok := tfMap["prediction_interval"].(int); ok {
		apiObject.PredictionInterval = aws.Int32(int32(v))
	}
	if v, ok := tfMap["seasonality"].(int); ok {
		apiObject.Seasonality = aws.Int32(int32(v))
	}
	if v, ok := tfMap["upper_boundary"].(float64); ok {
		apiObject.UpperBoundary = aws.Float64(v)
	}

	return apiObject
}
