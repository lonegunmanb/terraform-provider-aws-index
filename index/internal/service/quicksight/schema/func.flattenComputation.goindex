package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenComputation(apiObjects []awstypes.Computation) []any {
	if len(apiObjects) == 0 {
		return nil
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		if apiObject.Forecast != nil {
			tfMap["forecast"] = flattenForecastComputation(apiObject.Forecast)
		}
		if apiObject.GrowthRate != nil {
			tfMap["growth_rate"] = flattenGrowthRateComputation(apiObject.GrowthRate)
		}
		if apiObject.MaximumMinimum != nil {
			tfMap["maximum_minimum"] = flattenMaximumMinimumComputation(apiObject.MaximumMinimum)
		}
		if apiObject.MetricComparison != nil {
			tfMap["metric_comparison"] = flattenMetricComparisonComputation(apiObject.MetricComparison)
		}
		if apiObject.PeriodOverPeriod != nil {
			tfMap["period_over_period"] = flattenPeriodOverPeriodComputation(apiObject.PeriodOverPeriod)
		}
		if apiObject.PeriodToDate != nil {
			tfMap["period_to_date"] = flattenPeriodToDateComputation(apiObject.PeriodToDate)
		}
		if apiObject.TopBottomMovers != nil {
			tfMap["top_bottom_movers"] = flattenTopBottomMoversComputation(apiObject.TopBottomMovers)
		}
		if apiObject.TopBottomRanked != nil {
			tfMap["top_bottom_ranked"] = flattenTopBottomRankedComputation(apiObject.TopBottomRanked)
		}
		if apiObject.TotalAggregation != nil {
			tfMap["total_aggregation"] = flattenTotalAggregationComputation(apiObject.TotalAggregation)
		}
		if apiObject.UniqueValues != nil {
			tfMap["unique_values"] = flattenUniqueValuesComputation(apiObject.UniqueValues)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
