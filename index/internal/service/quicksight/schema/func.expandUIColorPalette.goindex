package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
)
func expandUIColorPalette(tfList []any) *awstypes.UIColorPalette {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.UIColorPalette{}

	if v, ok := tfMap["accent"].(string); ok && v != "" {
		apiObject.Accent = aws.String(v)
	}
	if v, ok := tfMap["accent_foreground"].(string); ok && v != "" {
		apiObject.AccentForeground = aws.String(v)
	}
	if v, ok := tfMap["danger"].(string); ok && v != "" {
		apiObject.Danger = aws.String(v)
	}
	if v, ok := tfMap["danger_foreground"].(string); ok && v != "" {
		apiObject.DangerForeground = aws.String(v)
	}
	if v, ok := tfMap["dimension"].(string); ok && v != "" {
		apiObject.Dimension = aws.String(v)
	}
	if v, ok := tfMap["dimension_foreground"].(string); ok && v != "" {
		apiObject.DimensionForeground = aws.String(v)
	}
	if v, ok := tfMap["measure"].(string); ok && v != "" {
		apiObject.Measure = aws.String(v)
	}
	if v, ok := tfMap["measure_foreground"].(string); ok && v != "" {
		apiObject.MeasureForeground = aws.String(v)
	}
	if v, ok := tfMap["primary_background"].(string); ok && v != "" {
		apiObject.PrimaryBackground = aws.String(v)
	}
	if v, ok := tfMap["primary_foreground"].(string); ok && v != "" {
		apiObject.PrimaryForeground = aws.String(v)
	}
	if v, ok := tfMap["secondary_background"].(string); ok && v != "" {
		apiObject.SecondaryBackground = aws.String(v)
	}
	if v, ok := tfMap["secondary_foreground"].(string); ok && v != "" {
		apiObject.SecondaryForeground = aws.String(v)
	}
	if v, ok := tfMap["success"].(string); ok && v != "" {
		apiObject.Success = aws.String(v)
	}
	if v, ok := tfMap["success_foreground"].(string); ok && v != "" {
		apiObject.SuccessForeground = aws.String(v)
	}
	if v, ok := tfMap["warning"].(string); ok && v != "" {
		apiObject.Warning = aws.String(v)
	}
	if v, ok := tfMap["warning_foreground"].(string); ok && v != "" {
		apiObject.WarningForeground = aws.String(v)
	}

	return apiObject
}
