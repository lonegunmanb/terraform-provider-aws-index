package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func DiffPermissions(o, n []any) ([]awstypes.ResourcePermission, []awstypes.ResourcePermission) {
	old := ExpandResourcePermissions(o)
	new := ExpandResourcePermissions(n)

	var toGrant, toRevoke []awstypes.ResourcePermission

	for _, op := range old {
		found := false

		for _, np := range new {
			if aws.ToString(np.Principal) != aws.ToString(op.Principal) {
				continue
			}

			found = true
			newActions := flex.FlattenStringValueSet(np.Actions)
			oldActions := flex.FlattenStringValueSet(op.Actions)

			if newActions.Equal(oldActions) {
				break
			}

			toRemove := oldActions.Difference(newActions)

			if toRemove.Len() > 0 {
				toRevoke = append(toRevoke, awstypes.ResourcePermission{
					Actions:   flex.ExpandStringValueSet(toRemove),
					Principal: np.Principal,
				})
			}

			if newActions.Len() > 0 {
				toGrant = append(toGrant, awstypes.ResourcePermission{
					Actions:   flex.ExpandStringValueSet(newActions),
					Principal: np.Principal,
				})
			}
		}

		if !found {
			toRevoke = append(toRevoke, op)
		}
	}

	for _, np := range new {
		found := false

		for _, op := range old {
			if aws.ToString(np.Principal) == aws.ToString(op.Principal) {
				found = true
				break
			}
		}

		if !found {
			toGrant = append(toGrant, np)
		}
	}

	return toGrant, toRevoke
}
