package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRadarChartConfiguration(apiObject *awstypes.RadarChartConfiguration) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"alternate_band_colors_visibility": apiObject.AlternateBandColorsVisibility,
	}

	if apiObject.AlternateBandEvenColor != nil {
		tfMap["alternate_band_even_color"] = aws.ToString(apiObject.AlternateBandEvenColor)
	}
	if apiObject.AlternateBandOddColor != nil {
		tfMap["alternate_band_odd_color"] = aws.ToString(apiObject.AlternateBandOddColor)
	}
	if apiObject.BaseSeriesSettings != nil {
		tfMap["base_series_settings"] = flattenRadarChartSeriesSettings(apiObject.BaseSeriesSettings)
	}
	if apiObject.CategoryAxis != nil {
		tfMap["category_axis"] = flattenAxisDisplayOptions(apiObject.CategoryAxis)
	}
	if apiObject.CategoryLabelOptions != nil {
		tfMap["category_label_options"] = flattenChartAxisLabelOptions(apiObject.CategoryLabelOptions)
	}
	if apiObject.ColorAxis != nil {
		tfMap["color_axis"] = flattenAxisDisplayOptions(apiObject.ColorAxis)
	}
	if apiObject.ColorLabelOptions != nil {
		tfMap["color_label_options"] = flattenChartAxisLabelOptions(apiObject.ColorLabelOptions)
	}
	if apiObject.FieldWells != nil {
		tfMap["field_wells"] = flattenRadarChartFieldWells(apiObject.FieldWells)
	}
	if apiObject.Legend != nil {
		tfMap["legend"] = flattenLegendOptions(apiObject.Legend)
	}
	tfMap["shape"] = apiObject.Shape
	if apiObject.SortConfiguration != nil {
		tfMap["sort_configuration"] = flattenRadarChartSortConfiguration(apiObject.SortConfiguration)
	}
	if apiObject.StartAngle != nil {
		tfMap["start_angle"] = aws.ToFloat64(apiObject.StartAngle)
	}
	if apiObject.VisualPalette != nil {
		tfMap["visual_palette"] = flattenVisualPalette(apiObject.VisualPalette)
	}

	return []any{tfMap}
}
