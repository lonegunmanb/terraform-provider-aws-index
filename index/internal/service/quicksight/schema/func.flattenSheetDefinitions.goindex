package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"reflect"
	"sync"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenSheetDefinitions(apiObjects []awstypes.SheetDefinition) []any {
	if len(apiObjects) == 0 {
		return nil
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{
			"sheet_id": aws.ToString(apiObject.SheetId),
		}

		tfMap[names.AttrContentType] = apiObject.ContentType
		if apiObject.Description != nil {
			tfMap[names.AttrDescription] = aws.ToString(apiObject.Description)
		}
		if apiObject.FilterControls != nil {
			tfMap["filter_controls"] = flattenFilterControls(apiObject.FilterControls)
		}
		if apiObject.Layouts != nil {
			tfMap["layouts"] = flattenLayouts(apiObject.Layouts)
		}
		if apiObject.Name != nil {
			tfMap[names.AttrName] = aws.ToString(apiObject.Name)
		}
		if apiObject.ParameterControls != nil {
			tfMap["parameter_controls"] = flattenParameterControls(apiObject.ParameterControls)
		}
		if apiObject.SheetControlLayouts != nil {
			tfMap["sheet_control_layouts"] = flattenSheetControlLayouts(apiObject.SheetControlLayouts)
		}
		if apiObject.TextBoxes != nil {
			tfMap["text_boxes"] = flattenTextBoxes(apiObject.TextBoxes)
		}
		if apiObject.Title != nil {
			tfMap["title"] = aws.ToString(apiObject.Title)
		}
		if apiObject.Visuals != nil {
			tfMap["visuals"] = flattenVisuals(apiObject.Visuals)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
