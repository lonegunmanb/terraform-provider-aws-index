package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func DataSetLogicalTableMapSchema() *schema.Schema {
	logicalTableMapSchema := func() *schema.Resource {
		return &schema.Resource{
			Schema: map[string]*schema.Schema{
				names.AttrAlias: stringLenBetweenSchema(attrRequired, 1, 64),
				"data_transforms": {
					Type:     schema.TypeList,
					Computed: true,
					Optional: true,
					MinItems: 1,
					MaxItems: 2048,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"cast_column_type_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"column_name":     stringLenBetweenSchema(attrRequired, 1, 128),
										names.AttrFormat:  stringLenBetweenSchema(attrOptionalComputed, 0, 32),
										"new_column_type": stringEnumSchema[awstypes.ColumnDataType](attrRequired),
									},
								},
							},
							"create_columns_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"columns": {
											Type:     schema.TypeList,
											Required: true,
											MinItems: 1,
											MaxItems: 128,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"column_id":          stringLenBetweenSchema(attrRequired, 1, 64),
													"column_name":        stringLenBetweenSchema(attrRequired, 1, 128),
													names.AttrExpression: stringLenBetweenSchema(attrRequired, 1, 4096),
												},
											},
										},
									},
								},
							},
							"filter_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"condition_expression": stringLenBetweenSchema(attrRequired, 1, 4096),
									},
								},
							},
							"project_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"projected_columns": {
											Type:     schema.TypeList,
											Required: true,
											MinItems: 1,
											MaxItems: 2000,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
									},
								},
							},
							"rename_column_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"column_name":     stringLenBetweenSchema(attrRequired, 1, 128),
										"new_column_name": stringLenBetweenSchema(attrRequired, 1, 128),
									},
								},
							},
							"tag_column_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"column_name": stringLenBetweenSchema(attrRequired, 1, 128),
										names.AttrTags: {
											Type:     schema.TypeList,
											Required: true,
											MinItems: 1,
											MaxItems: 16,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"column_description": {
														Type:     schema.TypeList,
														Computed: true,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"text": stringLenBetweenSchema(attrOptionalComputed, 0, 500),
															},
														},
													},
													"column_geographic_role": stringEnumSchema[awstypes.GeoSpatialDataRole](attrOptionalComputed),
												},
											},
										},
									},
								},
							},
							"untag_column_operation": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"column_name": stringLenBetweenSchema(attrRequired, 1, 128),
										"tag_names": {
											Type:     schema.TypeList,
											Required: true,
											Elem:     stringEnumSchema[awstypes.ColumnTagName](attrElem),
										},
									},
								},
							},
						},
					},
				},
				"logical_table_map_id": {
					Type:     schema.TypeString,
					Required: true,
				},
				names.AttrSource: {
					Type:     schema.TypeList,
					Required: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"data_set_arn": {
								Type:     schema.TypeString,
								Computed: true,
								Optional: true,
							},
							"join_instruction": {
								Type:     schema.TypeList,
								Computed: true,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"left_join_key_properties": {
											Type:     schema.TypeList,
											Computed: true,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"unique_key": {
														Type:     schema.TypeBool,
														Computed: true,
														Optional: true,
													},
												},
											},
										},
										"left_operand": stringLenBetweenSchema(attrRequired, 1, 64),
										"on_clause":    stringLenBetweenSchema(attrRequired, 1, 512),
										"right_join_key_properties": {
											Type:     schema.TypeList,
											Computed: true,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"unique_key": {
														Type:     schema.TypeBool,
														Computed: true,
														Optional: true,
													},
												},
											},
										},
										"right_operand": stringLenBetweenSchema(attrRequired, 1, 64),
										names.AttrType:  stringEnumSchema[awstypes.JoinType](attrRequired),
									},
								},
							},
							"physical_table_id": stringLenBetweenSchema(attrOptionalComputed, 1, 64),
						},
					},
				},
			},
		}
	}

	return &schema.Schema{
		Type:     schema.TypeSet,
		Optional: true,
		Computed: true,
		MaxItems: 64,
		Elem:     logicalTableMapSchema(),
	}
}
