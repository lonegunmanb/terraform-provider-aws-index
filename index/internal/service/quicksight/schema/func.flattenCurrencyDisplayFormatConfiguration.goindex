package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenCurrencyDisplayFormatConfiguration(apiObject *awstypes.CurrencyDisplayFormatConfiguration) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if apiObject.DecimalPlacesConfiguration != nil {
		tfMap["decimal_places_configuration"] = flattenDecimalPlacesConfiguration(apiObject.DecimalPlacesConfiguration)
	}
	if apiObject.NegativeValueConfiguration != nil {
		tfMap["negative_value_configuration"] = flattenNegativeValueConfiguration(apiObject.NegativeValueConfiguration)
	}
	if apiObject.NullValueFormatConfiguration != nil {
		tfMap["null_value_format_configuration"] = flattenNullValueFormatConfiguration(apiObject.NullValueFormatConfiguration)
	}
	tfMap["number_scale"] = apiObject.NumberScale
	if apiObject.Prefix != nil {
		tfMap[names.AttrPrefix] = aws.ToString(apiObject.Prefix)
	}
	if apiObject.SeparatorConfiguration != nil {
		tfMap["separator_configuration"] = flattenNumericSeparatorConfiguration(apiObject.SeparatorConfiguration)
	}
	if apiObject.Suffix != nil {
		tfMap["suffix"] = aws.ToString(apiObject.Suffix)
	}
	if apiObject.Symbol != nil {
		tfMap["symbol"] = aws.ToString(apiObject.Symbol)
	}

	return []any{tfMap}
}
