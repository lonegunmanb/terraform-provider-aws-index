package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRadarChartConfiguration(tfList []any) *awstypes.RadarChartConfiguration {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.RadarChartConfiguration{}

	if v, ok := tfMap["alternate_band_colors_visibility"].(string); ok && v != "" {
		apiObject.AlternateBandColorsVisibility = awstypes.Visibility(v)
	}
	if v, ok := tfMap["alternate_band_even_color"].(string); ok && v != "" {
		apiObject.AlternateBandEvenColor = aws.String(v)
	}
	if v, ok := tfMap["alternate_band_odd_color"].(string); ok && v != "" {
		apiObject.AlternateBandOddColor = aws.String(v)
	}
	if v, ok := tfMap["shape"].(string); ok && v != "" {
		apiObject.Shape = awstypes.RadarChartShape(v)
	}
	if v, ok := tfMap["start_angle"].(float64); ok {
		apiObject.StartAngle = aws.Float64(v)
	}
	if v, ok := tfMap["base_series_settings"].([]any); ok && len(v) > 0 {
		apiObject.BaseSeriesSettings = expandRadarChartSeriesSettings(v)
	}
	if v, ok := tfMap["category_axis"].([]any); ok && len(v) > 0 {
		apiObject.CategoryAxis = expandAxisDisplayOptions(v)
	}
	if v, ok := tfMap["category_label_options"].([]any); ok && len(v) > 0 {
		apiObject.CategoryLabelOptions = expandChartAxisLabelOptions(v)
	}
	if v, ok := tfMap["color_axis"].([]any); ok && len(v) > 0 {
		apiObject.ColorAxis = expandAxisDisplayOptions(v)
	}
	if v, ok := tfMap["color_label_options"].([]any); ok && len(v) > 0 {
		apiObject.ColorLabelOptions = expandChartAxisLabelOptions(v)
	}
	if v, ok := tfMap["field_wells"].([]any); ok && len(v) > 0 {
		apiObject.FieldWells = expandRadarChartFieldWells(v)
	}
	if v, ok := tfMap["legend"].([]any); ok && len(v) > 0 {
		apiObject.Legend = expandLegendOptions(v)
	}
	if v, ok := tfMap["sort_configuration"].([]any); ok && len(v) > 0 {
		apiObject.SortConfiguration = expandRadarChartSortConfiguration(v)
	}
	if v, ok := tfMap["visual_palette"].([]any); ok && len(v) > 0 {
		apiObject.VisualPalette = expandVisualPalette(v)
	}

	return apiObject
}
