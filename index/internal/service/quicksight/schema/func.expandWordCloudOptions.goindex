package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandWordCloudOptions(tfList []any) *awstypes.WordCloudOptions {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.WordCloudOptions{}

	if v, ok := tfMap["cloud_layout"].(string); ok && v != "" {
		apiObject.CloudLayout = awstypes.WordCloudCloudLayout(v)
	}
	if v, ok := tfMap["maximum_string_length"].(int); ok {
		apiObject.MaximumStringLength = aws.Int32(int32(v))
	}
	if v, ok := tfMap["word_casing"].(string); ok && v != "" {
		apiObject.WordCasing = awstypes.WordCloudWordCasing(v)
	}
	if v, ok := tfMap["word_orientation"].(string); ok && v != "" {
		apiObject.WordOrientation = awstypes.WordCloudWordOrientation(v)
	}
	if v, ok := tfMap["word_padding"].(string); ok && v != "" {
		apiObject.WordPadding = awstypes.WordCloudWordPadding(v)
	}
	if v, ok := tfMap["word_padding"].(string); ok && v != "" {
		apiObject.WordScaling = awstypes.WordCloudWordScaling(v)
	}

	return apiObject
}
