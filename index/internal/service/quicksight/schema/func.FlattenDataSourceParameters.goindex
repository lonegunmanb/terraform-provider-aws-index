package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func FlattenDataSourceParameters(apiObject awstypes.DataSourceParameters) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{}

	switch v := apiObject.(type) {
	case *awstypes.DataSourceParametersMemberAmazonElasticsearchParameters:
		tfMap["amazon_elasticsearch"] = []any{
			map[string]any{
				names.AttrDomain: aws.ToString(v.Value.Domain),
			},
		}
	case *awstypes.DataSourceParametersMemberAthenaParameters:
		tfMap["athena"] = []any{
			map[string]any{
				"work_group": aws.ToString(v.Value.WorkGroup),
			},
		}
	case *awstypes.DataSourceParametersMemberAuroraParameters:
		tfMap["aurora"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberAuroraPostgreSqlParameters:
		tfMap["aurora_postgresql"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberAwsIotAnalyticsParameters:
		tfMap["aws_iot_analytics"] = []any{
			map[string]any{
				"data_set_name": aws.ToString(v.Value.DataSetName),
			},
		}
	case *awstypes.DataSourceParametersMemberDatabricksParameters:
		tfMap["databricks"] = []any{
			map[string]any{
				"host":              aws.ToString(v.Value.Host),
				names.AttrPort:      aws.ToInt32(v.Value.Port),
				"sql_endpoint_path": aws.ToString(v.Value.SqlEndpointPath),
			},
		}
	case *awstypes.DataSourceParametersMemberJiraParameters:
		tfMap["jira"] = []any{
			map[string]any{
				"site_base_url": aws.ToString(v.Value.SiteBaseUrl),
			},
		}
	case *awstypes.DataSourceParametersMemberMariaDbParameters:
		tfMap["maria_db"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberMySqlParameters:
		tfMap["mysql"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberOracleParameters:
		tfMap["oracle"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberPostgreSqlParameters:
		tfMap["postgresql"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberPrestoParameters:
		tfMap["postgresql"] = []any{
			map[string]any{
				"catalog":      aws.ToString(v.Value.Catalog),
				"host":         aws.ToString(v.Value.Host),
				names.AttrPort: aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberRdsParameters:
		tfMap["rds"] = []any{
			map[string]any{
				names.AttrDatabase:   aws.ToString(v.Value.Database),
				names.AttrInstanceID: aws.ToString(v.Value.InstanceId),
			},
		}
	case *awstypes.DataSourceParametersMemberRedshiftParameters:
		tfMap["redshift"] = []any{
			map[string]any{
				"cluster_id":       aws.ToString(v.Value.ClusterId),
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     v.Value.Port,
			},
		}
	case *awstypes.DataSourceParametersMemberS3Parameters:
		tfMap["s3"] = []any{
			map[string]any{
				"manifest_file_location": []any{
					map[string]any{
						names.AttrBucket: aws.ToString(v.Value.ManifestFileLocation.Bucket),
						names.AttrKey:    aws.ToString(v.Value.ManifestFileLocation.Key),
					},
				},
				names.AttrRoleARN: aws.ToString(v.Value.RoleArn),
			},
		}
	case *awstypes.DataSourceParametersMemberServiceNowParameters:
		tfMap["service_now"] = []any{
			map[string]any{
				"site_base_url": aws.ToString(v.Value.SiteBaseUrl),
			},
		}
	case *awstypes.DataSourceParametersMemberSnowflakeParameters:
		tfMap["snowflake"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				"warehouse":        aws.ToString(v.Value.Warehouse),
			},
		}
	case *awstypes.DataSourceParametersMemberSparkParameters:
		tfMap["snowflake"] = []any{
			map[string]any{
				"host":         aws.ToString(v.Value.Host),
				names.AttrPort: aws.ToInt32(v.Value.Port),
			},
		}
	case *awstypes.DataSourceParametersMemberSqlServerParameters:
		tfMap["sql_server"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     v.Value.Port,
			},
		}
	case *awstypes.DataSourceParametersMemberTeradataParameters:
		tfMap["teradata"] = []any{
			map[string]any{
				names.AttrDatabase: aws.ToString(v.Value.Database),
				"host":             aws.ToString(v.Value.Host),
				names.AttrPort:     v.Value.Port,
			},
		}
	case *awstypes.DataSourceParametersMemberTwitterParameters:
		tfMap["teradata"] = []any{
			map[string]any{
				"max_rows": aws.ToInt32(v.Value.MaxRows),
				"query":    aws.ToString(v.Value.Query),
			},
		}
	default:
		return nil
	}

	return []any{tfMap}
}
