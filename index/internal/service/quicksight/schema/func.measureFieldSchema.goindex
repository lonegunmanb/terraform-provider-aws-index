package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func measureFieldSchema(maxItems measureFieldsSize) *schema.Schema {
	id := meaureFieldSchemaIdentity(maxItems)

	s, ok := measureFieldSchemaCache.Load(id)
	if ok {
		return s
	}

	// Use a separate `LoadOrStore` to avoid allocation if item is already in the cache
	// Use `LoadOrStore` instead of `Store` in case there is a race
	s, _ = measureFieldSchemaCache.LoadOrStore(
		id,
		&schema.Schema{ // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_MeasureField.html
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: int(maxItems),
			Optional: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"calculated_measure_field": { // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CalculatedMeasureField.html
						Type:     schema.TypeList,
						MinItems: 1,
						MaxItems: 1,
						Optional: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								names.AttrExpression: stringLenBetweenSchema(attrRequired, 1, 4096),
								"field_id":           stringLenBetweenSchema(attrRequired, 1, 512),
							},
						},
					},
					"categorical_measure_field": { // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CategoricalMeasureField.html
						Type:     schema.TypeList,
						MinItems: 1,
						MaxItems: 1,
						Optional: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"column":               columnSchema(true), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnIdentifier.html
								"field_id":             stringLenBetweenSchema(attrRequired, 1, 512),
								"aggregation_function": stringEnumSchema[awstypes.CategoricalAggregationFunction](attrOptional),
								"format_configuration": stringFormatConfigurationSchema(), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_StringFormatConfiguration.html
							},
						},
					},
					"date_measure_field": { // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateMeasureField.html
						Type:     schema.TypeList,
						MinItems: 1,
						MaxItems: 1,
						Optional: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"column":               columnSchema(true), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnIdentifier.html
								"field_id":             stringLenBetweenSchema(attrRequired, 1, 512),
								"aggregation_function": stringEnumSchema[awstypes.DateAggregationFunction](attrOptional),
								"format_configuration": dateTimeFormatConfigurationSchema(), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DateTimeFormatConfiguration.html
							},
						},
					},
					"numerical_measure_field": { // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_NumericalMeasureField.html
						Type:     schema.TypeList,
						MinItems: 1,
						MaxItems: 1,
						Optional: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"column":               columnSchema(true), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnIdentifier.html
								"field_id":             stringLenBetweenSchema(attrRequired, 1, 512),
								"aggregation_function": numericalAggregationFunctionSchema(false), // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_NumericalAggregationFunction.html
								"format_configuration": numberFormatConfigurationSchema(),         // https://docs.aws.amazon.com/quicksight/latest/APIReference/API_NumberFormatConfiguration.html
							},
						},
					},
				},
			},
		},
	)
	return s
}
