package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func DataSourceParametersSchema() *schema.Schema {
	exactlyOneOf := []string{
		"parameters.0.amazon_elasticsearch",
		"parameters.0.athena",
		"parameters.0.aurora",
		"parameters.0.aurora_postgresql",
		"parameters.0.aws_iot_analytics",
		"parameters.0.databricks",
		"parameters.0.jira",
		"parameters.0.maria_db",
		"parameters.0.mysql",
		"parameters.0.oracle",
		"parameters.0.postgresql",
		"parameters.0.presto",
		"parameters.0.rds",
		"parameters.0.redshift",
		"parameters.0.s3",
		"parameters.0.service_now",
		"parameters.0.snowflake",
		"parameters.0.spark",
		"parameters.0.sql_server",
		"parameters.0.teradata",
		"parameters.0.twitter",
	}

	return &schema.Schema{
		Type:     schema.TypeList,
		Required: true,
		MaxItems: 1,
		MinItems: 1,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"amazon_elasticsearch": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDomain: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"athena": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"work_group": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"aurora": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"aurora_postgresql": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"aws_iot_analytics": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"data_set_name": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"databricks": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
							"sql_endpoint_path": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"jira": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"site_base_url": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"maria_db": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"mysql": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"oracle": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"postgresql": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"presto": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"catalog": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"rds": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrInstanceID: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"redshift": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"cluster_id": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:     schema.TypeString,
								Optional: true,
							},
							names.AttrPort: {
								Type:     schema.TypeInt,
								Optional: true,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"s3": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"manifest_file_location": {
								Type:     schema.TypeList,
								Required: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrBucket: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.NoZeroValues,
										},
										names.AttrKey: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.NoZeroValues,
										},
									},
								},
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"service_now": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"site_base_url": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"snowflake": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"warehouse": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"spark": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"sql_server": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"teradata": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							"host": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
							names.AttrPort: {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
				"twitter": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"max_rows": {
								Type:         schema.TypeInt,
								Required:     true,
								ValidateFunc: validation.IntAtLeast(1),
							},
							"query": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.NoZeroValues,
							},
						},
					},
					ExactlyOneOf: exactlyOneOf,
				},
			},
		},
	}
}
