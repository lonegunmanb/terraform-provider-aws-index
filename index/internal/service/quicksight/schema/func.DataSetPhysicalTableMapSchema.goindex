package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func DataSetPhysicalTableMapSchema() *schema.Schema {
	physicalTableMapSchema := func() *schema.Resource {
		return &schema.Resource{
			Schema: map[string]*schema.Schema{
				"custom_sql": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"columns": {
								Type:     schema.TypeList,
								Optional: true,
								MinItems: 1,
								MaxItems: 2048,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: stringLenBetweenSchema(attrRequired, 1, 128),
										names.AttrType: stringEnumSchema[awstypes.InputColumnDataType](attrRequired),
									},
								},
							},
							"data_source_arn": arnStringSchema(attrRequired),
							names.AttrName:    stringLenBetweenSchema(attrRequired, 1, 64),
							"sql_query":       stringLenBetweenSchema(attrRequired, 1, 65536),
						},
					},
				},
				"physical_table_map_id": {
					Type:     schema.TypeString,
					Required: true,
				},
				"relational_table": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"catalog":         stringLenBetweenSchema(attrOptional, 0, 256),
							"data_source_arn": arnStringSchema(attrRequired),
							"input_columns": {
								Type:     schema.TypeList,
								Required: true,
								MinItems: 1,
								MaxItems: 2048,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: stringLenBetweenSchema(attrRequired, 1, 128),
										names.AttrType: stringEnumSchema[awstypes.InputColumnDataType](attrRequired),
									},
								},
							},
							names.AttrName: stringLenBetweenSchema(attrRequired, 1, 256),
							names.AttrSchema: {
								Type:     schema.TypeString,
								Optional: true,
							},
						},
					},
				},
				"s3_source": {
					Type:     schema.TypeList,
					Computed: true,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"data_source_arn": arnStringSchema(attrRequired),
							"input_columns": {
								Type:     schema.TypeList,
								Required: true,
								MinItems: 1,
								MaxItems: 2048,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: stringLenBetweenSchema(attrRequired, 1, 128),
										names.AttrType: stringEnumSchema[awstypes.InputColumnDataType](attrRequired),
									},
								},
							},
							"upload_settings": {
								Type:     schema.TypeList,
								Required: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"contains_header": {
											Type:     schema.TypeBool,
											Computed: true,
											Optional: true,
										},
										"delimiter":      stringLenBetweenSchema(attrOptionalComputed, 1, 1),
										names.AttrFormat: stringEnumSchema[awstypes.FileFormat](attrOptionalComputed),
										"start_from_row": {
											Type:         schema.TypeInt,
											Computed:     true,
											Optional:     true,
											ValidateFunc: validation.IntAtLeast(1),
										},
										"text_qualifier": stringEnumSchema[awstypes.TextQualifier](attrOptionalComputed),
									},
								},
							},
						},
					},
				},
			},
		}
	}

	return &schema.Schema{
		Type:     schema.TypeSet,
		Optional: true,
		MaxItems: 32,
		Elem:     physicalTableMapSchema(),
	}
}
