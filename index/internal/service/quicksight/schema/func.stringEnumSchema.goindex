package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"reflect"
	"sync"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func stringEnumSchema[T enum.Valueser[T]](handling attrHandling) *schema.Schema {
	id := stringEnumIdentity{
		handling: handling,
		typ:      reflect.TypeFor[T](),
	}

	s, ok := stringEnumSchemaCache.Load(id)
	if ok {
		return s
	}

	// Use a separate `LoadOrStore` to avoid allocation if item is already in the cache
	// Use `LoadOrStore` instead of `Store` in case there is a race
	s, _ = stringEnumSchemaCache.LoadOrStore(
		id,
		&schema.Schema{
			Type:             schema.TypeString,
			Required:         handling.isRequired(),
			Optional:         handling.isOptional(),
			Computed:         handling.isComputed(),
			ValidateDiagFunc: enum.Validate[T](),
		},
	)
	return s
}
