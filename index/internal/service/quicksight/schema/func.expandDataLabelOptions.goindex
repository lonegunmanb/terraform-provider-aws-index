package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDataLabelOptions(tfList []any) *awstypes.DataLabelOptions {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &awstypes.DataLabelOptions{}

	if v, ok := tfMap["category_label_visibility"].(string); ok && v != "" {
		apiObject.CategoryLabelVisibility = awstypes.Visibility(v)
	}
	if v, ok := tfMap["label_color"].(string); ok && v != "" {
		apiObject.LabelColor = aws.String(v)
	}
	if v, ok := tfMap["label_content"].(string); ok && v != "" {
		apiObject.LabelContent = awstypes.DataLabelContent(v)
	}
	if v, ok := tfMap["measure_label_visibility"].(string); ok && v != "" {
		apiObject.MeasureLabelVisibility = awstypes.Visibility(v)
	}
	if v, ok := tfMap["overlap"].(string); ok && v != "" {
		apiObject.Overlap = awstypes.DataLabelOverlap(v)
	}
	if v, ok := tfMap["position"].(string); ok && v != "" {
		apiObject.Position = awstypes.DataLabelPosition(v)
	}
	if v, ok := tfMap["visibility"].(string); ok && v != "" {
		apiObject.Visibility = awstypes.Visibility(v)
	}
	if v, ok := tfMap["data_label_types"].([]any); ok && len(v) > 0 {
		apiObject.DataLabelTypes = expandDataLabelTypes(v)
	}
	if v, ok := tfMap["label_font_configuration"].([]any); ok && len(v) > 0 {
		apiObject.LabelFontConfiguration = expandFontConfiguration(v)
	}

	return apiObject
}
