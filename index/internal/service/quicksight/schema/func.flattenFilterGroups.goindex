package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema
import (
	"reflect"
	"sync"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenFilterGroups(apiObjects []awstypes.FilterGroup) []any {
	if len(apiObjects) == 0 {
		return nil
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		tfMap["cross_dataset"] = apiObject.CrossDataset
		if apiObject.FilterGroupId != nil {
			tfMap["filter_group_id"] = aws.ToString(apiObject.FilterGroupId)
		}
		if apiObject.Filters != nil {
			tfMap["filters"] = flattenFilters(apiObject.Filters)
		}
		if apiObject.ScopeConfiguration != nil {
			tfMap["scope_configuration"] = flattenFilterScopeConfiguration(apiObject.ScopeConfiguration)
		}
		tfMap[names.AttrStatus] = apiObject.Status

		tfList = append(tfList, tfMap)
	}

	return tfList
}
