package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTemplateRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).QuickSightClient(ctx)

	awsAccountID, templateID, err := templateParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	template, err := findTemplateByTwoPartKey(ctx, conn, awsAccountID, templateID)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] QuickSight Template (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QuickSight Template (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, template.Arn)
	d.Set(names.AttrAWSAccountID, awsAccountID)
	d.Set(names.AttrCreatedTime, template.CreatedTime.Format(time.RFC3339))
	d.Set(names.AttrLastUpdatedTime, template.LastUpdatedTime.Format(time.RFC3339))
	d.Set(names.AttrName, template.Name)
	d.Set(names.AttrStatus, template.Version.Status)
	d.Set("source_entity_arn", template.Version.SourceEntityArn)
	d.Set("template_id", template.TemplateId)
	d.Set("version_description", template.Version.Description)
	version := aws.ToInt64(template.Version.VersionNumber)
	d.Set("version_number", version)

	definition, err := findTemplateDefinitionByThreePartKey(ctx, conn, awsAccountID, templateID, version)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "describing QuickSight Template (%s) definition: %s", d.Id(), err)
	}

	if err := d.Set("definition", quicksightschema.FlattenTemplateDefinition(definition)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting definition: %s", err)
	}

	permissions, err := findTemplatePermissionsByTwoPartKey(ctx, conn, awsAccountID, templateID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QuickSight Template (%s) permissions: %s", d.Id(), err)
	}

	if err := d.Set(names.AttrPermissions, quicksightschema.FlattenPermissions(permissions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting permissions: %s", err)
	}

	return diags
}
