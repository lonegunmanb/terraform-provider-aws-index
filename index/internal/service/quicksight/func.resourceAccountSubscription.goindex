package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccountSubscription() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceAccountSubscriptionCreate,
		ReadWithoutTimeout:   resourceAccountSubscriptionRead,
		DeleteWithoutTimeout: resourceAccountSubscriptionDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Read:   schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(10 * time.Minute),
		},

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"account_name": {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
				},
				"account_subscription_status": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"active_directory_name": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"admin_group": {
					Type:     schema.TypeList,
					Optional: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
					ForceNew: true,
				},
				"admin_pro_group": {
					Type:     schema.TypeList,
					Optional: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
					ForceNew: true,
				},
				"authentication_method": {
					Type:             schema.TypeString,
					Required:         true,
					ForceNew:         true,
					ValidateDiagFunc: enum.Validate[awstypes.AuthenticationMethodOption](),
				},
				"author_group": {
					Type:     schema.TypeList,
					Optional: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
					ForceNew: true,
				},
				"author_pro_group": {
					Type:     schema.TypeList,
					Optional: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
					ForceNew: true,
				},
				names.AttrAWSAccountID: quicksightschema.AWSAccountIDSchema(),
				"contact_number": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"directory_id": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"edition": {
					Type:             schema.TypeString,
					Required:         true,
					ForceNew:         true,
					ValidateDiagFunc: enum.Validate[awstypes.Edition](),
				},
				"email_address": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"first_name": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"iam_identity_center_instance_arn": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"last_name": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				"notification_email": {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
				},
				"reader_group": {
					Type:     schema.TypeList,
					Optional: true,
					ForceNew: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"reader_pro_group": {
					Type:     schema.TypeList,
					Optional: true,
					ForceNew: true,
					MinItems: 1,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"realm": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
			}
		},
	}
}
