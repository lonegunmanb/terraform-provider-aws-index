package github.com/hashicorp/terraform-provider-aws/internal/service/quicksight
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	awstypes "github.com/aws/aws-sdk-go-v2/service/quicksight/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	quicksightschema "github.com/hashicorp/terraform-provider-aws/internal/service/quicksight/schema"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDataSetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).QuickSightClient(ctx)

	awsAccountID := meta.(*conns.AWSClient).AccountID(ctx)
	if v, ok := d.GetOk(names.AttrAWSAccountID); ok {
		awsAccountID = v.(string)
	}
	dataSetID := d.Get("data_set_id").(string)
	id := dataSetCreateResourceID(awsAccountID, dataSetID)
	input := &quicksight.CreateDataSetInput{
		AwsAccountId:     aws.String(awsAccountID),
		DataSetId:        aws.String(dataSetID),
		ImportMode:       awstypes.DataSetImportMode(d.Get("import_mode").(string)),
		PhysicalTableMap: quicksightschema.ExpandPhysicalTableMap(d.Get("physical_table_map").(*schema.Set).List()),
		Name:             aws.String(d.Get(names.AttrName).(string)),
		Tags:             getTagsIn(ctx),
	}

	if v, ok := d.GetOk("column_groups"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ColumnGroups = quicksightschema.ExpandColumnGroups(v.([]any))
	}

	if v, ok := d.GetOk("column_level_permission_rules"); ok && len(v.([]any)) > 0 {
		input.ColumnLevelPermissionRules = quicksightschema.ExpandColumnLevelPermissionRules(v.([]any))
	}

	if v, ok := d.GetOk("data_set_usage_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DataSetUsageConfiguration = quicksightschema.ExpandDataSetUsageConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("field_folders"); ok && v.(*schema.Set).Len() != 0 {
		input.FieldFolders = quicksightschema.ExpandFieldFolders(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("logical_table_map"); ok && v.(*schema.Set).Len() != 0 {
		input.LogicalTableMap = quicksightschema.ExpandLogicalTableMap(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk(names.AttrPermissions); ok && v.(*schema.Set).Len() != 0 {
		input.Permissions = quicksightschema.ExpandResourcePermissions(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("row_level_permission_data_set"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.RowLevelPermissionDataSet = quicksightschema.ExpandRowLevelPermissionDataSet(v.([]any))
	}

	if v, ok := d.GetOk("row_level_permission_tag_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.RowLevelPermissionTagConfiguration = quicksightschema.ExpandRowLevelPermissionTagConfiguration(v.([]any))
	}

	_, err := conn.CreateDataSet(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating QuickSight Data Set (%s): %s", id, err)
	}

	d.SetId(id)

	if v, ok := d.GetOk("refresh_properties"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input := &quicksight.PutDataSetRefreshPropertiesInput{
			AwsAccountId:             aws.String(awsAccountID),
			DataSetId:                aws.String(dataSetID),
			DataSetRefreshProperties: quicksightschema.ExpandDataSetRefreshProperties(v.([]any)),
		}

		_, err := conn.PutDataSetRefreshProperties(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting QuickSight Data Set (%s) refresh properties: %s", d.Id(), err)
		}
	}

	return append(diags, resourceDataSetRead(ctx, d, meta)...)
}
