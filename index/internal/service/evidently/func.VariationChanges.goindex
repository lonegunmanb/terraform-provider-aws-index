package github.com/hashicorp/terraform-provider-aws/internal/service/evidently
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/evidently"
	awstypes "github.com/aws/aws-sdk-go-v2/service/evidently/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func VariationChanges(o, n any) (remove []string, addOrUpdate []awstypes.VariationConfig) {
	if o == nil {
		o = new(schema.Set)
	}
	if n == nil {
		n = new(schema.Set)
	}

	os := o.(*schema.Set)
	ns := n.(*schema.Set)

	om := make(map[string]awstypes.VariationConfig, os.Len())
	for _, raw := range os.List() {
		param := raw.(map[string]any)
		om[param[names.AttrName].(string)] = expandVariation(param)
	}
	nm := make(map[string]awstypes.VariationConfig, len(addOrUpdate))
	for _, raw := range ns.List() {
		param := raw.(map[string]any)
		nm[param[names.AttrName].(string)] = expandVariation(param)
	}

	// Remove: key is in old, but not in new
	// commented out because remove is the list of names. Left here in the event the API changes
	// remove = make([]*cloudwatchevidently.VariationConfig, 0, os.Len())
	// for k := range om {
	// 	if _, ok := nm[k]; !ok {
	// 		remove = append(remove, om[k])
	// 	}
	// }
	// remove is a list of strings
	remove = make([]string, 0)
	for k := range om {
		if _, ok := nm[k]; !ok {
			remove = append(remove, k)
		}
	}

	// Add or Update: key is in new, but not in old or has changed value
	addOrUpdate = make([]awstypes.VariationConfig, 0, ns.Len())
	for k, nv := range nm {
		ov, ok := om[k]
		if !ok {
			// add new variations
			addOrUpdate = append(addOrUpdate, nm[k])
		} else {
			// updates to existing variations
			if nv.Value != nil && nv.Value != ov.Value {
				addOrUpdate = append(addOrUpdate, nm[k])
			}
		}
	}

	return remove, addOrUpdate
}
