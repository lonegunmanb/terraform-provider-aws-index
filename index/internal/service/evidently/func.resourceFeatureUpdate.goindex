package github.com/hashicorp/terraform-provider-aws/internal/service/evidently
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/evidently"
	awstypes "github.com/aws/aws-sdk-go-v2/service/evidently/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFeatureUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EvidentlyClient(ctx)

	if d.HasChanges("default_variation", names.AttrDescription, "entity_overrides", "evaluation_strategy", "variations") {
		name := d.Get(names.AttrName).(string)
		project := d.Get("project").(string)

		input := &evidently.UpdateFeatureInput{
			DefaultVariation:   aws.String(d.Get("default_variation").(string)),
			Description:        aws.String(d.Get(names.AttrDescription).(string)),
			EntityOverrides:    flex.ExpandStringValueMap(d.Get("entity_overrides").(map[string]any)),
			EvaluationStrategy: awstypes.FeatureEvaluationStrategy(d.Get("evaluation_strategy").(string)),
			Feature:            aws.String(name),
			Project:            aws.String(project),
		}

		if d.HasChange("variations") {
			o, n := d.GetChange("variations")
			toRemove, toAddOrUpdate := VariationChanges(o, n)

			log.Printf("[DEBUG] Updating variations (%s)", d.Id())
			log.Printf("[DEBUG] Variations to remove: %#v", toRemove)
			log.Printf("[DEBUG] Variations to add or update: %#v", toAddOrUpdate)
			input.AddOrUpdateVariations = toAddOrUpdate
			input.RemoveVariations = toRemove
		}
		_, err := conn.UpdateFeature(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating CloudWatch Evidently Feature (%s) for Project (%s): %s", name, project, err)
		}

		if _, err := waitFeatureUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for CloudWatch Evidently Feature (%s) for Project (%s) update: %s", name, project, err)
		}
	}

	return append(diags, resourceFeatureRead(ctx, d, meta)...)
}
