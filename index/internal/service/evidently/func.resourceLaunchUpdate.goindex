package github.com/hashicorp/terraform-provider-aws/internal/service/evidently
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/evidently"
	awstypes "github.com/aws/aws-sdk-go-v2/service/evidently/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLaunchUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EvidentlyClient(ctx)

	if d.HasChanges(names.AttrDescription, "groups", "metric_monitors", "randomization_salt", "scheduled_splits_config") {
		name := d.Get(names.AttrName).(string)
		project := d.Get("project").(string)

		input := &evidently.UpdateLaunchInput{
			Description:           aws.String(d.Get(names.AttrDescription).(string)),
			Groups:                expandGroups(d.Get("groups").([]any)),
			Launch:                aws.String(name),
			Project:               aws.String(project),
			MetricMonitors:        expandMetricMonitors(d.Get("metric_monitors").([]any)),
			RandomizationSalt:     aws.String(d.Get("randomization_salt").(string)),
			ScheduledSplitsConfig: expandScheduledSplitsConfig(d.Get("scheduled_splits_config").([]any)),
		}

		_, err := conn.UpdateLaunch(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating CloudWatch Evidently Launch (%s) for Project (%s): %s", name, project, err)
		}

		if _, err := waitLaunchUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for CloudWatch Evidently Launch (%s) for Project (%s) update: %s", name, project, err)
		}
	}

	return append(diags, resourceLaunchRead(ctx, d, meta)...)
}
