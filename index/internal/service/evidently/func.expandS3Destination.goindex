package github.com/hashicorp/terraform-provider-aws/internal/service/evidently
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/evidently"
	awstypes "github.com/aws/aws-sdk-go-v2/service/evidently/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandS3Destination(s3Destination []any) *awstypes.S3DestinationConfig {
	if len(s3Destination) == 0 || s3Destination[0] == nil {
		return nil
	}

	tfMap, ok := s3Destination[0].(map[string]any)
	if !ok {
		return nil
	}

	result := &awstypes.S3DestinationConfig{}

	if v, ok := tfMap[names.AttrBucket].(string); ok && v != "" {
		result.Bucket = aws.String(v)
	}

	if v, ok := tfMap[names.AttrPrefix].(string); ok && v != "" {
		result.Prefix = aws.String(v)
	}

	return result
}
