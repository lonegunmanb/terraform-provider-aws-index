package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidentity
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findPoolByName(ctx context.Context, conn *cognitoidentity.Client, name string) (*cognitoidentity.DescribeIdentityPoolOutput, error) {
	var poolID string
	listInout := cognitoidentity.ListIdentityPoolsInput{
		MaxResults: aws.Int32(ListPoolMaxResults),
	}

	p := cognitoidentity.NewListIdentityPoolsPaginator(conn, &listInout)
	for p.HasMorePages() {
		pools, err := p.NextPage(ctx)
		if err != nil {
			return nil, err
		}
		for _, pool := range pools.IdentityPools {
			if aws.ToString(pool.IdentityPoolName) == name {
				poolID = aws.ToString(pool.IdentityPoolId)
				break
			}
		}
	}

	if poolID == "" {
		return nil, fmt.Errorf("no identity pool found with name %q", name)
	}

	describeInput := cognitoidentity.DescribeIdentityPoolInput{
		IdentityPoolId: aws.String(poolID),
	}
	pool, err := conn.DescribeIdentityPool(ctx, &describeInput)

	if err != nil {
		return nil, err
	}

	return pool, nil
}
