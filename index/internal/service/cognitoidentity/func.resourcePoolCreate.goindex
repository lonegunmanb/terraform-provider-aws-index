package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidentity
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePoolCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CognitoIdentityClient(ctx)

	input := &cognitoidentity.CreateIdentityPoolInput{
		IdentityPoolName:               aws.String(d.Get("identity_pool_name").(string)),
		AllowUnauthenticatedIdentities: d.Get("allow_unauthenticated_identities").(bool),
		AllowClassicFlow:               aws.Bool(d.Get("allow_classic_flow").(bool)),
		IdentityPoolTags:               getTagsIn(ctx),
	}

	if v, ok := d.GetOk("developer_provider_name"); ok {
		input.DeveloperProviderName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("supported_login_providers"); ok {
		input.SupportedLoginProviders = expandSupportedLoginProviders(v.(map[string]any))
	}

	if v, ok := d.GetOk("cognito_identity_providers"); ok {
		input.CognitoIdentityProviders = expandIdentityProviders(v.(*schema.Set))
	}

	if v, ok := d.GetOk("saml_provider_arns"); ok {
		input.SamlProviderARNs = aws.ToStringSlice(flex.ExpandStringList(v.([]any)))
	}

	if v, ok := d.GetOk("openid_connect_provider_arns"); ok {
		input.OpenIdConnectProviderARNs = aws.ToStringSlice(flex.ExpandStringSet(v.(*schema.Set)))
	}

	entity, err := conn.CreateIdentityPool(ctx, input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cognito Identity Pool: %s", err)
	}

	d.SetId(aws.ToString(entity.IdentityPoolId))

	return append(diags, resourcePoolRead(ctx, d, meta)...)
}
