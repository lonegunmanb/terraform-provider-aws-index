package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidentity
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
)
func (e *openIDTokenForDeveloperIdentityEphemeralResource) Open(ctx context.Context, request ephemeral.OpenRequest, response *ephemeral.OpenResponse) {
	var data openIDTokenForDeveloperIdentityEphemeralResourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := e.Meta().CognitoIdentityClient(ctx)

	var input cognitoidentity.GetOpenIdTokenForDeveloperIdentityInput
	response.Diagnostics.Append(fwflex.Expand(ctx, data, &input)...)
	if response.Diagnostics.HasError() {
		return
	}

	output, err := conn.GetOpenIdTokenForDeveloperIdentity(ctx, &input)

	if err != nil {
		response.Diagnostics.AddError("creating Cognito Identity Open ID Connect Token For Developer Identity", err.Error())

		return
	}

	data.IdentityID = fwflex.StringToFramework(ctx, output.IdentityId)
	data.Token = fwflex.StringToFramework(ctx, output.Token)

	response.Diagnostics.Append(response.Result.Set(ctx, &data)...)
}
