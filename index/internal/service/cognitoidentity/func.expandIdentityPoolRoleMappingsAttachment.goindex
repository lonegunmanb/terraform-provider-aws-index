package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidentity
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentity/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIdentityPoolRoleMappingsAttachment(rms []any) map[string]awstypes.RoleMapping {
	values := make(map[string]awstypes.RoleMapping)

	if len(rms) == 0 {
		return values
	}

	for _, v := range rms {
		rm := v.(map[string]any)
		key := rm["identity_provider"].(string)

		roleMapping := awstypes.RoleMapping{
			Type: awstypes.RoleMappingType(rm[names.AttrType].(string)),
		}

		if sv, ok := rm["ambiguous_role_resolution"].(string); ok {
			roleMapping.AmbiguousRoleResolution = awstypes.AmbiguousRoleResolutionType(sv)
		}

		if mr, ok := rm["mapping_rule"].([]any); ok && len(mr) > 0 {
			rct := &awstypes.RulesConfigurationType{}
			mappingRules := make([]awstypes.MappingRule, 0)

			for _, r := range mr {
				rule := r.(map[string]any)
				mr := awstypes.MappingRule{
					Claim:     aws.String(rule["claim"].(string)),
					MatchType: awstypes.MappingRuleMatchType(rule["match_type"].(string)),
					RoleARN:   aws.String(rule[names.AttrRoleARN].(string)),
					Value:     aws.String(rule[names.AttrValue].(string)),
				}

				mappingRules = append(mappingRules, mr)
			}

			rct.Rules = mappingRules
			roleMapping.RulesConfiguration = rct
		}

		values[key] = roleMapping
	}

	return values
}
