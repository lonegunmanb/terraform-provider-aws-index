package github.com/hashicorp/terraform-provider-aws/internal/service/notifications
import (
	"context"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/notifications"
	awstypes "github.com/aws/aws-sdk-go-v2/service/notifications/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func statusEventRule(ctx context.Context, conn *notifications.Client, arn string) retry.StateRefreshFunc {
	return func() (any, string, error) {
		output, err := findEventRuleByARN(ctx, conn, arn)

		if tfresource.NotFound(err) {
			return nil, "", nil
		}

		if err != nil {
			return nil, "", err
		}

		allActive := true

		for _, v := range maps.Values(output.StatusSummaryByRegion) {
			switch status := v.Status; status {
			// If regions were added/deleted then rule status across regions can be a mix of "CREATING", "DELETING", "UPDATING"
			// Does not matter which is returned as any of these is valid for waitEventRuleUpdated implementation
			case awstypes.EventRuleStatusCreating,
				awstypes.EventRuleStatusUpdating,
				awstypes.EventRuleStatusDeleting:
				return output, string(status), nil
			case awstypes.EventRuleStatusInactive:
				allActive = false
			}
		}

		if allActive {
			return output, string(awstypes.EventRuleStatusActive), nil
		}

		return output, string(awstypes.EventRuleStatusInactive), nil
	}
}
