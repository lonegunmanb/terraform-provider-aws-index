package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *securityGroupIngressRuleResource) moveStateResourceSecurityGroupRule(ctx context.Context, request resource.MoveStateRequest, response *resource.MoveStateResponse) {
	if request.SourceTypeName != "aws_security_group_rule" {
		return
	}

	if request.SourceSchemaVersion != 2 {
		return
	}

	if !strings.HasSuffix(request.SourceProviderAddress, "hashicorp/aws") {
		return
	}

	var source legacySecurityGroupRuleResourceModel
	response.Diagnostics.Append(request.SourceState.Get(ctx, &source)...)
	if response.Diagnostics.HasError() {
		return
	}

	// TODO: Need to find the security group rule ID.

	// if typ := source.Type.ValueEnum(); typ != securityGroupRuleTypeIngress {
	// 	response.Diagnostics.AddError("Incorrect Type", string(typ))
	// 	return
	// }

	// nCIDRs := 0
	// if !source.CIDRBlocks.IsNull() {
	// 	nCIDRs += len(source.CIDRBlocks.Elements())
	// }
	// nIPv6CIDRs := 0
	// if !source.IPv6CIDRBlocksBlocks.IsNull() {
	// 	nIPv6CIDRs += len(source.IPv6CIDRBlocksBlocks.Elements())
	// }
	// nPrefxListIDs := 0
	// if !source.PrefixListIDs.IsNull() {
	// 	nPrefxListIDs += len(source.PrefixListIDs.Elements())
	// }
	// nSourceSecurityGroupIDs := 0
	// if !source.SourceSecurityGroupID.IsNull() && source.SourceSecurityGroupID.ValueString() != "" {
	// 	nSourceSecurityGroupIDs = 1
	// }

	// if nCIDRs+nIPv6CIDRs+nPrefxListIDs+nSourceSecurityGroupIDs > 1 {
	// 	response.Diagnostics.AddError("Multiple Sources", "Only one source is allowed")
	// 	return
	// }

	// target := &securityGroupRuleResourceModel{
	// 	// ARN: 				  r.securityGroupRuleARN(ctx, securityGroupRuleID),
	// 	Description: fwflex.EmptyStringAsNull(source.Description),
	// }

	// response.Diagnostics.Append(response.TargetState.Set(ctx, target)...)
}
