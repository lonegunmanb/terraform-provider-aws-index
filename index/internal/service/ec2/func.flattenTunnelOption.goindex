package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTunnelOption(d *schema.ResourceData, prefix string, apiObject awstypes.TunnelOption) error {
	var s []*string
	var i []*int32

	d.Set(prefix+"dpd_timeout_action", apiObject.DpdTimeoutAction)
	d.Set(prefix+"dpd_timeout_seconds", apiObject.DpdTimeoutSeconds)
	d.Set(prefix+"enable_tunnel_lifecycle_control", apiObject.EnableTunnelLifecycleControl)

	for _, v := range apiObject.IkeVersions {
		s = append(s, v.Value)
	}
	d.Set(prefix+"ike_versions", aws.ToStringSlice(s))
	s = nil

	if apiObject.LogOptions != nil {
		if err := d.Set(prefix+"log_options", []any{flattenVPNTunnelLogOptions(apiObject.LogOptions)}); err != nil {
			return fmt.Errorf("setting %s: %w", prefix+"log_options", err)
		}
	} else {
		d.Set(prefix+"log_options", nil)
	}

	for _, v := range apiObject.Phase1DHGroupNumbers {
		i = append(i, v.Value)
	}
	d.Set(prefix+"phase1_dh_group_numbers", aws.ToInt32Slice(i))
	i = nil

	for _, v := range apiObject.Phase1EncryptionAlgorithms {
		s = append(s, v.Value)
	}
	d.Set(prefix+"phase1_encryption_algorithms", aws.ToStringSlice(s))
	s = nil

	for _, v := range apiObject.Phase1IntegrityAlgorithms {
		s = append(s, v.Value)
	}
	d.Set(prefix+"phase1_integrity_algorithms", aws.ToStringSlice(s))
	s = nil

	d.Set(prefix+"phase1_lifetime_seconds", apiObject.Phase1LifetimeSeconds)

	for _, v := range apiObject.Phase2DHGroupNumbers {
		i = append(i, v.Value)
	}
	d.Set(prefix+"phase2_dh_group_numbers", aws.ToInt32Slice(i))

	for _, v := range apiObject.Phase2EncryptionAlgorithms {
		s = append(s, v.Value)
	}
	d.Set(prefix+"phase2_encryption_algorithms", aws.ToStringSlice(s))
	s = nil

	for _, v := range apiObject.Phase2IntegrityAlgorithms {
		s = append(s, v.Value)
	}
	d.Set(prefix+"phase2_integrity_algorithms", aws.ToStringSlice(s))

	d.Set(prefix+"phase2_lifetime_seconds", apiObject.Phase2LifetimeSeconds)
	d.Set(prefix+"rekey_fuzz_percentage", apiObject.RekeyFuzzPercentage)
	d.Set(prefix+"rekey_margin_time_seconds", apiObject.RekeyMarginTimeSeconds)
	d.Set(prefix+"replay_window_size", apiObject.ReplayWindowSize)
	d.Set(prefix+"startup_action", apiObject.StartupAction)
	d.Set(prefix+"inside_cidr", apiObject.TunnelInsideCidr)
	d.Set(prefix+"inside_ipv6_cidr", apiObject.TunnelInsideIpv6Cidr)

	return nil
}
