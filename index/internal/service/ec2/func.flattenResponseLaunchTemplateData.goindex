package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenResponseLaunchTemplateData(ctx context.Context, conn *ec2.Client, d *schema.ResourceData, apiObject *awstypes.ResponseLaunchTemplateData) error {
	instanceType := string(apiObject.InstanceType)

	if err := d.Set("block_device_mappings", flattenLaunchTemplateBlockDeviceMappings(apiObject.BlockDeviceMappings)); err != nil {
		return fmt.Errorf("setting block_device_mappings: %w", err)
	}
	if apiObject.CapacityReservationSpecification != nil {
		if err := d.Set("capacity_reservation_specification", []any{flattenLaunchTemplateCapacityReservationSpecificationResponse(apiObject.CapacityReservationSpecification)}); err != nil {
			return fmt.Errorf("setting capacity_reservation_specification: %w", err)
		}
	} else {
		d.Set("capacity_reservation_specification", nil)
	}
	if apiObject.CpuOptions != nil {
		if err := d.Set("cpu_options", []any{flattenLaunchTemplateCPUOptions(apiObject.CpuOptions)}); err != nil {
			return fmt.Errorf("setting cpu_options: %w", err)
		}
	} else {
		d.Set("cpu_options", nil)
	}
	if apiObject.CreditSpecification != nil && instanceType != "" {
		instanceTypeInfo, err := findInstanceTypeByName(ctx, conn, instanceType)
		if err != nil {
			return fmt.Errorf("reading EC2 Instance Type (%s): %w", instanceType, err)
		}

		if aws.ToBool(instanceTypeInfo.BurstablePerformanceSupported) {
			if err := d.Set("credit_specification", []any{flattenCreditSpecification(apiObject.CreditSpecification)}); err != nil {
				return fmt.Errorf("setting credit_specification: %w", err)
			}
		}
	} // Don't overwrite any configured value.
	d.Set("disable_api_stop", apiObject.DisableApiStop)
	d.Set("disable_api_termination", apiObject.DisableApiTermination)
	if apiObject.EbsOptimized != nil {
		d.Set("ebs_optimized", flex.BoolToStringValue(apiObject.EbsOptimized))
	} else {
		d.Set("ebs_optimized", "")
	}
	if apiObject.EnclaveOptions != nil {
		tfMap := map[string]any{
			names.AttrEnabled: aws.ToBool(apiObject.EnclaveOptions.Enabled),
		}

		if err := d.Set("enclave_options", []any{tfMap}); err != nil {
			return fmt.Errorf("setting enclave_options: %w", err)
		}
	} else {
		d.Set("enclave_options", nil)
	}
	if apiObject.HibernationOptions != nil {
		tfMap := map[string]any{
			"configured": aws.ToBool(apiObject.HibernationOptions.Configured),
		}

		if err := d.Set("hibernation_options", []any{tfMap}); err != nil {
			return fmt.Errorf("setting hibernation_options: %w", err)
		}
	} else {
		d.Set("hibernation_options", nil)
	}
	if apiObject.IamInstanceProfile != nil {
		if err := d.Set("iam_instance_profile", []any{flattenLaunchTemplateIAMInstanceProfileSpecification(apiObject.IamInstanceProfile)}); err != nil {
			return fmt.Errorf("setting iam_instance_profile: %w", err)
		}
	} else {
		d.Set("iam_instance_profile", nil)
	}
	d.Set("image_id", apiObject.ImageId)
	d.Set("instance_initiated_shutdown_behavior", apiObject.InstanceInitiatedShutdownBehavior)
	if apiObject.InstanceMarketOptions != nil {
		if err := d.Set("instance_market_options", []any{flattenLaunchTemplateInstanceMarketOptions(apiObject.InstanceMarketOptions)}); err != nil {
			return fmt.Errorf("setting instance_market_options: %w", err)
		}
	} else {
		d.Set("instance_market_options", nil)
	}
	if apiObject.InstanceRequirements != nil {
		if err := d.Set("instance_requirements", []any{flattenInstanceRequirements(apiObject.InstanceRequirements)}); err != nil {
			return fmt.Errorf("setting instance_requirements: %w", err)
		}
	} else {
		d.Set("instance_requirements", nil)
	}
	d.Set(names.AttrInstanceType, instanceType)
	d.Set("kernel_id", apiObject.KernelId)
	d.Set("key_name", apiObject.KeyName)
	if err := d.Set("license_specification", flattenLaunchTemplateLicenseConfigurations(apiObject.LicenseSpecifications)); err != nil {
		return fmt.Errorf("setting license_specification: %w", err)
	}
	if apiObject.MaintenanceOptions != nil {
		if err := d.Set("maintenance_options", []any{flattenLaunchTemplateInstanceMaintenanceOptions(apiObject.MaintenanceOptions)}); err != nil {
			return fmt.Errorf("setting maintenance_options: %w", err)
		}
	} else {
		d.Set("maintenance_options", nil)
	}
	if apiObject.MetadataOptions != nil {
		if err := d.Set("metadata_options", []any{flattenLaunchTemplateInstanceMetadataOptions(apiObject.MetadataOptions)}); err != nil {
			return fmt.Errorf("setting metadata_options: %w", err)
		}
	} else {
		d.Set("metadata_options", nil)
	}
	if apiObject.Monitoring != nil {
		tfMap := map[string]any{
			names.AttrEnabled: aws.ToBool(apiObject.Monitoring.Enabled),
		}

		if err := d.Set("monitoring", []any{tfMap}); err != nil {
			return fmt.Errorf("setting monitoring: %w", err)
		}
	} else {
		d.Set("monitoring", nil)
	}
	if err := d.Set("network_interfaces", flattenLaunchTemplateInstanceNetworkInterfaceSpecifications(apiObject.NetworkInterfaces)); err != nil {
		return fmt.Errorf("setting network_interfaces: %w", err)
	}
	if apiObject.Placement != nil {
		if err := d.Set("placement", []any{flattenLaunchTemplatePlacement(apiObject.Placement)}); err != nil {
			return fmt.Errorf("setting placement: %w", err)
		}
	} else {
		d.Set("placement", nil)
	}
	if apiObject.PrivateDnsNameOptions != nil {
		if err := d.Set("private_dns_name_options", []any{flattenLaunchTemplatePrivateDNSNameOptions(apiObject.PrivateDnsNameOptions)}); err != nil {
			return fmt.Errorf("setting private_dns_name_options: %w", err)
		}
	} else {
		d.Set("private_dns_name_options", nil)
	}
	d.Set("ram_disk_id", apiObject.RamDiskId)
	d.Set("security_group_names", apiObject.SecurityGroups)
	if err := d.Set("tag_specifications", flattenLaunchTemplateTagSpecifications(ctx, apiObject.TagSpecifications)); err != nil {
		return fmt.Errorf("setting tag_specifications: %w", err)
	}
	d.Set("user_data", apiObject.UserData)
	d.Set(names.AttrVPCSecurityGroupIDs, apiObject.SecurityGroupIds)

	return nil
}
