package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *vpcEndpointPrivateDNSResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var data vpcEndpointPrivateDNSResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().EC2Client(ctx)

	input := &ec2.ModifyVpcEndpointInput{
		PrivateDnsEnabled: fwflex.BoolFromFramework(ctx, data.PrivateDNSEnabled),
		VpcEndpointId:     fwflex.StringFromFramework(ctx, data.VPCEndpointID),
	}

	_, err := conn.ModifyVpcEndpoint(ctx, input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("Updating VPC Endpoint Private DNS (%s)", data.VPCEndpointID.ValueString()), err.Error())

		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
