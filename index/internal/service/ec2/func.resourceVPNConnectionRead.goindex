package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPNConnectionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.EC2Client(ctx)

	vpnConnection, err := findVPNConnectionByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EC2 VPN Connection (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPN Connection (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, vpnConnectionARN(ctx, c, d.Id()))
	d.Set("core_network_arn", vpnConnection.CoreNetworkArn)
	d.Set("core_network_attachment_arn", vpnConnection.CoreNetworkAttachmentArn)
	d.Set("customer_gateway_id", vpnConnection.CustomerGatewayId)
	d.Set("preshared_key_arn", vpnConnection.PreSharedKeyArn)
	d.Set(names.AttrType, vpnConnection.Type)
	d.Set("vpn_gateway_id", vpnConnection.VpnGatewayId)

	if v := vpnConnection.TransitGatewayId; v != nil {
		input := ec2.DescribeTransitGatewayAttachmentsInput{
			Filters: newAttributeFilterList(map[string]string{
				"resource-id":        d.Id(),
				"resource-type":      string(awstypes.TransitGatewayAttachmentResourceTypeVpn),
				"transit-gateway-id": aws.ToString(v),
			}),
		}

		output, err := findTransitGatewayAttachment(ctx, conn, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading EC2 VPN Connection (%s) Transit Gateway Attachment: %s", d.Id(), err)
		}

		d.Set(names.AttrTransitGatewayAttachmentID, output.TransitGatewayAttachmentId)
		d.Set(names.AttrTransitGatewayID, v)
	} else {
		d.Set(names.AttrTransitGatewayAttachmentID, nil)
		d.Set(names.AttrTransitGatewayID, nil)
	}

	if err := d.Set("routes", flattenVPNStaticRoutes(vpnConnection.Routes)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting routes: %s", err)
	}

	if err := d.Set("vgw_telemetry", flattenVGWTelemetries(vpnConnection.VgwTelemetry)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting vgw_telemetry: %s", err)
	}

	setTagsOut(ctx, vpnConnection.Tags)

	if v := vpnConnection.Options; v != nil {
		d.Set("enable_acceleration", v.EnableAcceleration)
		d.Set("local_ipv4_network_cidr", v.LocalIpv4NetworkCidr)
		d.Set("local_ipv6_network_cidr", v.LocalIpv6NetworkCidr)
		d.Set("outside_ip_address_type", v.OutsideIpAddressType)
		d.Set("remote_ipv4_network_cidr", v.RemoteIpv4NetworkCidr)
		d.Set("remote_ipv6_network_cidr", v.RemoteIpv6NetworkCidr)
		d.Set("static_routes_only", v.StaticRoutesOnly)
		d.Set("transport_transit_gateway_attachment_id", v.TransportTransitGatewayAttachmentId)
		d.Set("tunnel_inside_ip_version", v.TunnelInsideIpVersion)

		for i, prefix := range []string{"tunnel1_", "tunnel2_"} {
			if len(v.TunnelOptions) > i {
				if err := flattenTunnelOption(d, prefix, v.TunnelOptions[i]); err != nil {
					return sdkdiag.AppendErrorf(diags, "reading EC2 VPN Connection (%s): %s", d.Id(), err)
				}
			}
		}
	} else {
		d.Set("enable_acceleration", nil)
		d.Set("local_ipv4_network_cidr", nil)
		d.Set("local_ipv6_network_cidr", nil)
		d.Set("outside_ip_address_type", nil)
		d.Set("remote_ipv4_network_cidr", nil)
		d.Set("remote_ipv6_network_cidr", nil)
		d.Set("static_routes_only", nil)
		d.Set("transport_transit_gateway_attachment_id", nil)
		d.Set("tunnel_inside_ip_version", nil)
	}

	d.Set("customer_gateway_configuration", vpnConnection.CustomerGatewayConfiguration)

	tunnelInfo, err := customerGatewayConfigurationToTunnelInfo(
		aws.ToString(vpnConnection.CustomerGatewayConfiguration),
		d.Get("tunnel1_preshared_key").(string), // Not currently available during import
		d.Get("tunnel1_inside_cidr").(string),
		d.Get("tunnel1_inside_ipv6_cidr").(string),
	)

	if err == nil {
		d.Set("tunnel1_address", tunnelInfo.Tunnel1Address)
		d.Set("tunnel1_bgp_asn", tunnelInfo.Tunnel1BGPASN)
		d.Set("tunnel1_bgp_holdtime", tunnelInfo.Tunnel1BGPHoldTime)
		d.Set("tunnel1_cgw_inside_address", tunnelInfo.Tunnel1CgwInsideAddress)
		d.Set("tunnel1_preshared_key", tunnelInfo.Tunnel1PreSharedKey)
		d.Set("tunnel1_vgw_inside_address", tunnelInfo.Tunnel1VgwInsideAddress)
		d.Set("tunnel2_address", tunnelInfo.Tunnel2Address)
		d.Set("tunnel2_bgp_asn", tunnelInfo.Tunnel2BGPASN)
		d.Set("tunnel2_bgp_holdtime", tunnelInfo.Tunnel2BGPHoldTime)
		d.Set("tunnel2_cgw_inside_address", tunnelInfo.Tunnel2CgwInsideAddress)
		d.Set("tunnel2_preshared_key", tunnelInfo.Tunnel2PreSharedKey)
		d.Set("tunnel2_vgw_inside_address", tunnelInfo.Tunnel2VgwInsideAddress)
	} else {
		// This element is present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
		if vpnConnection.CustomerGatewayConfiguration != nil {
			log.Printf("[ERROR] Error unmarshaling Customer Gateway XML configuration for (%s): %s", d.Id(), err)
		}

		d.Set("tunnel1_address", nil)
		d.Set("tunnel1_bgp_asn", nil)
		d.Set("tunnel1_bgp_holdtime", nil)
		d.Set("tunnel1_cgw_inside_address", nil)
		d.Set("tunnel1_preshared_key", nil)
		d.Set("tunnel1_vgw_inside_address", nil)
		d.Set("tunnel2_address", nil)
		d.Set("tunnel2_bgp_asn", nil)
		d.Set("tunnel2_bgp_holdtime", nil)
		d.Set("tunnel2_cgw_inside_address", nil)
		d.Set("tunnel2_preshared_key", nil)
		d.Set("tunnel2_vgw_inside_address", nil)
	}

	if tunnelInfo != nil && regexache.MustCompile("REDACTED").MatchString(tunnelInfo.Tunnel1PreSharedKey) {
		d.Set("preshared_key_storage", preSharedKeyStorageTypeSecretsManager)
	} else {
		d.Set("preshared_key_storage", preSharedKeyStorageTypeStandard)
	}

	return diags
}
