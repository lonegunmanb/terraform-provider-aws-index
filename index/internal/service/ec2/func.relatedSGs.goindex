package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func relatedSGs(ctx context.Context, conn *ec2.Client, id string) ([]string, error) {
	relatedSGs := []string{id}

	sg, err := findSecurityGroupByID(ctx, conn, id)
	if err != nil {
		return nil, fmt.Errorf("reading Security Group (%s): %w", id, err)
	}

	if len(sg.IpPermissions) > 0 {
		for _, v := range sg.IpPermissions {
			for _, v := range v.UserIdGroupPairs {
				if v.GroupId != nil && aws.ToString(v.GroupId) != id {
					relatedSGs = append(relatedSGs, aws.ToString(v.GroupId))
				}
			}
		}
	}

	if len(sg.IpPermissionsEgress) > 0 {
		for _, v := range sg.IpPermissionsEgress {
			for _, v := range v.UserIdGroupPairs {
				if v.GroupId != nil && aws.ToString(v.GroupId) != id {
					relatedSGs = append(relatedSGs, aws.ToString(v.GroupId))
				}
			}
		}
	}

	return relatedSGs, nil
}
