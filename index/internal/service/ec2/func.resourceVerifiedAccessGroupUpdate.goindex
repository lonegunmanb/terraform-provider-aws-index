package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVerifiedAccessGroupUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	if d.HasChangesExcept("policy_document", names.AttrTags, names.AttrTagsAll, "sse_configuration") {
		input := &ec2.ModifyVerifiedAccessGroupInput{
			ClientToken:           aws.String(id.UniqueId()),
			VerifiedAccessGroupId: aws.String(d.Id()),
		}

		if d.HasChange(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange("verified_access_instance_id") {
			input.VerifiedAccessInstanceId = aws.String(d.Get(names.AttrDescription).(string))
		}

		_, err := conn.ModifyVerifiedAccessGroup(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Verified Access Group (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange("policy_document") {
		in := &ec2.ModifyVerifiedAccessGroupPolicyInput{
			PolicyDocument:        aws.String(d.Get("policy_document").(string)),
			VerifiedAccessGroupId: aws.String(d.Id()),
			PolicyEnabled:         aws.Bool(true),
		}

		_, err := conn.ModifyVerifiedAccessGroupPolicy(ctx, in)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Verified Access Group (%s) policy: %s", d.Id(), err)
		}
	}

	if d.HasChange("sse_configuration") {
		in := &ec2.ModifyVerifiedAccessGroupPolicyInput{
			VerifiedAccessGroupId: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("sse_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			in.SseSpecification = expandVerifiedAccessSseSpecificationRequest(v.([]any)[0].(map[string]any))
		}

		_, err := conn.ModifyVerifiedAccessGroupPolicy(ctx, in)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SSE on Verified Access Group (%s) policy: %s", d.Id(), err)
		}
	}

	return append(diags, resourceVerifiedAccessGroupRead(ctx, d, meta)...)
}
