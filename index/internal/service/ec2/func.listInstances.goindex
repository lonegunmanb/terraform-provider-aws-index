package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"iter"
	"slices"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func listInstances(ctx context.Context, conn *ec2.Client, input *ec2.DescribeInstancesInput) iter.Seq2[awstypes.Instance, error] {
	return func(yield func(awstypes.Instance, error) bool) {
		pages := ec2.NewDescribeInstancesPaginator(conn, input)
		for pages.HasMorePages() {
			page, err := pages.NextPage(ctx)

			if tfawserr.ErrCodeEquals(err, errCodeInvalidInstanceIDNotFound) {
				yield(awstypes.Instance{}, &retry.NotFoundError{
					LastError:   err,
					LastRequest: &input,
				})
				return
			}

			if err != nil {
				yield(awstypes.Instance{}, err)
				return
			}

			for _, v := range page.Reservations {
				for _, instance := range v.Instances {
					if !yield(instance, nil) {
						return
					}
				}
			}
		}
	}
}
