package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	fdiag "github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/list"
	listschema "github.com/hashicorp/terraform-plugin-framework/list/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
	"go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws"
	"go.opentelemetry.io/otel/attribute"
)
func resourceSubnetFlatten(ctx context.Context, subnet *awstypes.Subnet, rd *schema.ResourceData) {
	rd.Set(names.AttrARN, subnet.SubnetArn)
	rd.Set("assign_ipv6_address_on_creation", subnet.AssignIpv6AddressOnCreation)
	rd.Set(names.AttrAvailabilityZone, subnet.AvailabilityZone)
	rd.Set("availability_zone_id", subnet.AvailabilityZoneId)
	rd.Set(names.AttrCIDRBlock, subnet.CidrBlock)
	rd.Set("customer_owned_ipv4_pool", subnet.CustomerOwnedIpv4Pool)
	rd.Set("enable_dns64", subnet.EnableDns64)
	rd.Set("enable_lni_at_device_index", subnet.EnableLniAtDeviceIndex)
	rd.Set("ipv6_native", subnet.Ipv6Native)
	rd.Set("map_customer_owned_ip_on_launch", subnet.MapCustomerOwnedIpOnLaunch)
	rd.Set("map_public_ip_on_launch", subnet.MapPublicIpOnLaunch)
	rd.Set("outpost_arn", subnet.OutpostArn)
	rd.Set(names.AttrOwnerID, subnet.OwnerId)
	rd.Set(names.AttrVPCID, subnet.VpcId)

	// Make sure those values are set, if an IPv6 block exists it'll be set in the loop.
	rd.Set("ipv6_cidr_block_association_id", nil)
	rd.Set("ipv6_cidr_block", nil)

	for _, v := range subnet.Ipv6CidrBlockAssociationSet {
		if v.Ipv6CidrBlockState.State == awstypes.SubnetCidrBlockStateCodeAssociated { //we can only ever have 1 IPv6 block associated at once
			rd.Set("ipv6_cidr_block_association_id", v.AssociationId)
			rd.Set("ipv6_cidr_block", v.Ipv6CidrBlock)
			break
		}
	}

	if subnet.PrivateDnsNameOptionsOnLaunch != nil {
		rd.Set("enable_resource_name_dns_aaaa_record_on_launch", subnet.PrivateDnsNameOptionsOnLaunch.EnableResourceNameDnsAAAARecord)
		rd.Set("enable_resource_name_dns_a_record_on_launch", subnet.PrivateDnsNameOptionsOnLaunch.EnableResourceNameDnsARecord)
		rd.Set("private_dns_hostname_type_on_launch", subnet.PrivateDnsNameOptionsOnLaunch.HostnameType)
	} else {
		rd.Set("enable_resource_name_dns_aaaa_record_on_launch", nil)
		rd.Set("enable_resource_name_dns_a_record_on_launch", nil)
		rd.Set("private_dns_hostname_type_on_launch", nil)
	}

	setTagsOut(ctx, subnet.Tags)
}
