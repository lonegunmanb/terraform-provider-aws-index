package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSpotFleetRequestDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	terminateInstances := d.Get("terminate_instances_with_expiration").(bool)
	// If terminate_instances_on_delete is not null, its value is used.
	if v, null, _ := nullable.Bool(d.Get("terminate_instances_on_delete").(string)).ValueBool(); !null {
		terminateInstances = v
	}

	log.Printf("[INFO] Deleting EC2 Spot Fleet Request: %s", d.Id())
	input := ec2.CancelSpotFleetRequestsInput{
		SpotFleetRequestIds: []string{d.Id()},
		TerminateInstances:  aws.Bool(terminateInstances),
	}
	output, err := conn.CancelSpotFleetRequests(ctx, &input)

	if err == nil && output != nil {
		err = cancelSpotFleetRequestsError(output.UnsuccessfulFleetRequests)
	}

	if tfawserr.ErrCodeEquals(err, string(awstypes.CancelBatchErrorCodeFleetRequestIdDoesNotExist)) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "cancelling EC2 Spot Fleet Request (%s): %s", d.Id(), err)
	}

	// Only wait for instance termination if requested.
	if !terminateInstances {
		return diags
	}

	_, err = tfresource.RetryUntilNotFound(ctx, d.Timeout(schema.TimeoutDelete), func(ctx context.Context) (any, error) {
		input := ec2.DescribeSpotFleetInstancesInput{
			SpotFleetRequestId: aws.String(d.Id()),
		}
		output, err := findSpotFleetInstances(ctx, conn, &input)

		if err != nil {
			return nil, err
		}

		if len(output) == 0 {
			return nil, tfresource.NewEmptyResultError(input)
		}

		return output, nil
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EC2 Spot Fleet Request (%s) active instance count to reach 0: %s", d.Id(), err)
	}

	return diags
}
