package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLogFlowCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	var resourceID string
	var resourceType awstypes.FlowLogsResourceType
	for _, v := range []struct {
		ID   string
		Type awstypes.FlowLogsResourceType
	}{
		{
			ID:   d.Get(names.AttrVPCID).(string),
			Type: awstypes.FlowLogsResourceTypeVpc,
		},
		{
			ID:   d.Get(names.AttrTransitGatewayID).(string),
			Type: awstypes.FlowLogsResourceTypeTransitGateway,
		},
		{
			ID:   d.Get(names.AttrTransitGatewayAttachmentID).(string),
			Type: awstypes.FlowLogsResourceTypeTransitGatewayAttachment,
		},
		{
			ID:   d.Get(names.AttrSubnetID).(string),
			Type: awstypes.FlowLogsResourceTypeSubnet,
		},
		{
			ID:   d.Get("eni_id").(string),
			Type: awstypes.FlowLogsResourceTypeNetworkInterface,
		},
	} {
		if v.ID != "" {
			resourceID = v.ID
			resourceType = v.Type
			break
		}
	}

	input := &ec2.CreateFlowLogsInput{
		ClientToken:        aws.String(id.UniqueId()),
		LogDestinationType: awstypes.LogDestinationType(d.Get("log_destination_type").(string)),
		ResourceIds:        []string{resourceID},
		ResourceType:       resourceType,
		TagSpecifications:  getTagSpecificationsIn(ctx, awstypes.ResourceTypeVpcFlowLog),
	}

	if resourceType != awstypes.FlowLogsResourceTypeTransitGateway && resourceType != awstypes.FlowLogsResourceTypeTransitGatewayAttachment {
		if v, ok := d.GetOk("traffic_type"); ok {
			input.TrafficType = awstypes.TrafficType(v.(string))
		}
	}

	if v, ok := d.GetOk("destination_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DestinationOptions = expandDestinationOptionsRequest(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("deliver_cross_account_role"); ok {
		input.DeliverCrossAccountRole = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrIAMRoleARN); ok {
		input.DeliverLogsPermissionArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("log_destination"); ok {
		input.LogDestination = aws.String(strings.TrimSuffix(v.(string), ":*"))
	}

	if v, ok := d.GetOk("log_format"); ok {
		input.LogFormat = aws.String(v.(string))
	}

	if v, ok := d.GetOk("max_aggregation_interval"); ok {
		input.MaxAggregationInterval = aws.Int32(int32(v.(int)))
	}

	outputRaw, err := tfresource.RetryWhenAWSErrMessageContains(ctx, iamPropagationTimeout, func(ctx context.Context) (any, error) {
		return conn.CreateFlowLogs(ctx, input)
	}, errCodeInvalidParameter, "Unable to assume given IAM role")

	if err == nil && outputRaw != nil {
		err = unsuccessfulItemsError(outputRaw.(*ec2.CreateFlowLogsOutput).Unsuccessful)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Flow Log (%s): %s", resourceID, err)
	}

	d.SetId(outputRaw.(*ec2.CreateFlowLogsOutput).FlowLogIds[0])

	return append(diags, resourceLogFlowRead(ctx, d, meta)...)
}
