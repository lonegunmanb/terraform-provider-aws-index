package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPCEndpointServiceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.EC2Client(ctx)

	svcCfg, err := findVPCEndpointServiceConfigurationByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EC2 VPC Endpoint Service %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPC Endpoint Service (%s): %s", d.Id(), err)
	}

	d.Set("acceptance_required", svcCfg.AcceptanceRequired)
	d.Set(names.AttrARN, vpcEndpointServiceARN(ctx, c, d.Id()))
	d.Set(names.AttrAvailabilityZones, svcCfg.AvailabilityZones)
	d.Set("base_endpoint_dns_names", svcCfg.BaseEndpointDnsNames)
	d.Set("gateway_load_balancer_arns", svcCfg.GatewayLoadBalancerArns)
	d.Set("manages_vpc_endpoints", svcCfg.ManagesVpcEndpoints)
	d.Set("network_load_balancer_arns", svcCfg.NetworkLoadBalancerArns)
	d.Set("private_dns_name", svcCfg.PrivateDnsName)
	// The EC2 API can return a XML structure with no elements.
	if tfMap := flattenPrivateDNSNameConfiguration(svcCfg.PrivateDnsNameConfiguration); len(tfMap) > 0 {
		if err := d.Set("private_dns_name_configuration", []any{tfMap}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting private_dns_name_configuration: %s", err)
		}
	} else {
		d.Set("private_dns_name_configuration", nil)
	}
	d.Set(names.AttrServiceName, svcCfg.ServiceName)
	if len(svcCfg.ServiceType) > 0 {
		d.Set("service_type", svcCfg.ServiceType[0].ServiceType)
	} else {
		d.Set("service_type", nil)
	}
	d.Set(names.AttrState, svcCfg.ServiceState)
	d.Set("supported_ip_address_types", svcCfg.SupportedIpAddressTypes)
	d.Set("supported_regions", flattenSupportedRegionDetails(svcCfg.SupportedRegions))

	setTagsOut(ctx, svcCfg.Tags)

	allowedPrincipals, err := findVPCEndpointServicePermissionsByServiceID(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPC Endpoint Service (%s) permissions: %s", d.Id(), err)
	}

	d.Set("allowed_principals", flattenAllowedPrincipals(allowedPrincipals))

	return diags
}
