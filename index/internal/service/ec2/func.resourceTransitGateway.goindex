package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTransitGateway() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceTransitGatewayCreate,
		ReadWithoutTimeout:   resourceTransitGatewayRead,
		UpdateWithoutTimeout: resourceTransitGatewayUpdate,
		DeleteWithoutTimeout: resourceTransitGatewayDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(10 * time.Minute),
		},

		CustomizeDiff: customdiff.Sequence(
			customdiff.ForceNewIfChange("default_route_table_association", func(_ context.Context, old, new, meta any) bool {
				// Only changes from disable to enable for feature_set should force a new resource.
				return old.(string) == string(awstypes.DefaultRouteTableAssociationValueDisable) && new.(string) == string(awstypes.DefaultRouteTableAssociationValueEnable)
			}),
			customdiff.ForceNewIfChange("default_route_table_propagation", func(_ context.Context, old, new, meta any) bool {
				// Only changes from disable to enable for feature_set should force a new resource.
				return old.(string) == string(awstypes.DefaultRouteTablePropagationValueDisable) && new.(string) == string(awstypes.DefaultRouteTablePropagationValueEnable)
			}),
		),

		Schema: map[string]*schema.Schema{
			"amazon_side_asn": {
				Type:     schema.TypeInt,
				Optional: true,
				Default:  64512,
			},
			names.AttrARN: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"association_default_route_table_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"auto_accept_shared_attachments": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.AutoAcceptSharedAttachmentsValueDisable,
				ValidateDiagFunc: enum.Validate[awstypes.AutoAcceptSharedAttachmentsValue](),
			},
			"default_route_table_association": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.DefaultRouteTableAssociationValueEnable,
				ValidateDiagFunc: enum.Validate[awstypes.DefaultRouteTableAssociationValue](),
			},
			"default_route_table_propagation": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.DefaultRouteTablePropagationValueEnable,
				ValidateDiagFunc: enum.Validate[awstypes.DefaultRouteTablePropagationValue](),
			},
			names.AttrDescription: {
				Type:     schema.TypeString,
				Optional: true,
			},
			"dns_support": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.DnsSupportValueEnable,
				ValidateDiagFunc: enum.Validate[awstypes.DnsSupportValue](),
			},
			"multicast_support": {
				Type:             schema.TypeString,
				Optional:         true,
				ForceNew:         true,
				Default:          awstypes.MulticastSupportValueDisable,
				ValidateDiagFunc: enum.Validate[awstypes.MulticastSupportValue](),
			},
			names.AttrOwnerID: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"propagation_default_route_table_id": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"security_group_referencing_support": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.SecurityGroupReferencingSupportValueDisable,
				ValidateDiagFunc: enum.Validate[awstypes.SecurityGroupReferencingSupportValue](),
			},
			names.AttrTags:    tftags.TagsSchema(),
			names.AttrTagsAll: tftags.TagsSchemaComputed(),
			"transit_gateway_cidr_blocks": {
				Type:     schema.TypeSet,
				Optional: true,
				MaxItems: 5,
				Elem: &schema.Schema{
					Type: schema.TypeString,
					ValidateFunc: verify.IsIPv4CIDRBlockOrIPv6CIDRBlock(
						validation.All(
							validation.IsCIDRNetwork(0, 24),
							validation.StringDoesNotMatch(regexache.MustCompile(`^169\.254\.`), "must not be from range 169.254.0.0/16"),
						),
						validation.IsCIDRNetwork(0, 64),
					),
				},
			},
			"vpn_ecmp_support": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.VpnEcmpSupportValueEnable,
				ValidateDiagFunc: enum.Validate[awstypes.VpnEcmpSupportValue](),
			},
		},
	}
}
