package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (model *securityGroupRuleResourceModel) expandIPPermission(ctx context.Context) awstypes.IpPermission {
	apiObject := awstypes.IpPermission{
		FromPort:   fwflex.Int32FromFrameworkInt64(ctx, model.FromPort),
		IpProtocol: fwflex.StringFromFramework(ctx, model.IPProtocol),
		ToPort:     fwflex.Int32FromFrameworkInt64(ctx, model.ToPort),
	}

	if !model.CIDRIPv4.IsNull() {
		apiObject.IpRanges = []awstypes.IpRange{{
			CidrIp:      fwflex.StringFromFramework(ctx, model.CIDRIPv4),
			Description: fwflex.StringFromFramework(ctx, model.Description),
		}}
	}

	if !model.CIDRIPv6.IsNull() {
		apiObject.Ipv6Ranges = []awstypes.Ipv6Range{{
			CidrIpv6:    fwflex.StringFromFramework(ctx, model.CIDRIPv6),
			Description: fwflex.StringFromFramework(ctx, model.Description),
		}}
	}

	if !model.PrefixListID.IsNull() {
		apiObject.PrefixListIds = []awstypes.PrefixListId{{
			PrefixListId: fwflex.StringFromFramework(ctx, model.PrefixListID),
			Description:  fwflex.StringFromFramework(ctx, model.Description),
		}}
	}

	if !model.ReferencedSecurityGroupID.IsNull() {
		apiObject.UserIdGroupPairs = []awstypes.UserIdGroupPair{{
			Description: fwflex.StringFromFramework(ctx, model.Description),
		}}

		// [UserID/]GroupID.
		if parts := strings.Split(model.ReferencedSecurityGroupID.ValueString(), "/"); len(parts) == 2 {
			apiObject.UserIdGroupPairs[0].GroupId = aws.String(parts[1])
			apiObject.UserIdGroupPairs[0].UserId = aws.String(parts[0])
		} else {
			apiObject.UserIdGroupPairs[0].GroupId = fwflex.StringFromFramework(ctx, model.ReferencedSecurityGroupID)
		}
	}

	return apiObject
}
