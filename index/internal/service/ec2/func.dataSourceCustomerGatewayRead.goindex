package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCustomerGatewayRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.EC2Client(ctx)

	input := ec2.DescribeCustomerGatewaysInput{}

	if v, ok := d.GetOk(names.AttrFilter); ok {
		input.Filters = newCustomFilterList(v.(*schema.Set))
	}

	if v, ok := d.GetOk(names.AttrID); ok {
		input.CustomerGatewayIds = []string{v.(string)}
	}

	cgw, err := findCustomerGateway(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("EC2 Customer Gateway", err))
	}

	d.SetId(aws.ToString(cgw.CustomerGatewayId))
	d.Set(names.AttrARN, customerGatewayARN(ctx, c, d.Id()))
	if v := aws.ToString(cgw.BgpAsn); v != "" {
		v, err := strconv.ParseInt(v, 0, 0)

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		d.Set("bgp_asn", v)
	} else {
		d.Set("bgp_asn", nil)
	}
	if v := aws.ToString(cgw.BgpAsnExtended); v != "" {
		v, err := strconv.ParseInt(v, 0, 0)

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		d.Set("bgp_asn_extended", v)
	} else {
		d.Set("bgp_asn_extended", nil)
	}
	d.Set(names.AttrCertificateARN, cgw.CertificateArn)
	d.Set(names.AttrDeviceName, cgw.DeviceName)
	d.Set(names.AttrIPAddress, cgw.IpAddress)
	d.Set(names.AttrType, cgw.Type)

	setTagsOut(ctx, cgw.Tags)

	return diags
}
