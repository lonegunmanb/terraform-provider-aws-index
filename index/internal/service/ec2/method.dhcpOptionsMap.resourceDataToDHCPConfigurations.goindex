package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (m *dhcpOptionsMap) resourceDataToDHCPConfigurations(d *schema.ResourceData) ([]awstypes.NewDhcpConfiguration, error) {
	var output []awstypes.NewDhcpConfiguration

	for tfName, apiName := range m.tfToApi {
		value := d.Get(tfName)
		switch v := value.(type) {
		case string:
			if v != "" {
				output = append(output, awstypes.NewDhcpConfiguration{
					Key:    aws.String(apiName),
					Values: []string{v},
				})
			}
		case []any:
			var values []string
			for _, item := range v {
				if str, ok := item.(string); ok && str != "" {
					values = append(values, str)
				}
			}
			if len(values) > 0 {
				output = append(output, awstypes.NewDhcpConfiguration{
					Key:    aws.String(apiName),
					Values: values,
				})
			}
		default:
			return nil, fmt.Errorf("attribute (%s) is of unsupported type: %T", tfName, value)
		}
	}

	return output, nil
}
