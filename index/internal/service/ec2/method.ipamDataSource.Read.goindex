package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *ipamDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data ipamDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().EC2Client(ctx)

	ipam, err := findIPAMByID(ctx, conn, data.IpamID.ValueString())

	if err != nil {
		response.Diagnostics.AddError("reading IPAM", tfresource.SingularDataSourceFindError("IPAM", err).Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, ipam, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	setTagsOut(ctx, ipam.Tags)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
