package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceAMIRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	describeImagesInput := ec2.DescribeImagesInput{
		IncludeDeprecated: aws.Bool(d.Get("include_deprecated").(bool)),
	}

	if v, ok := d.GetOk("executable_users"); ok {
		describeImagesInput.ExecutableUsers = flex.ExpandStringValueList(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrFilter); ok {
		describeImagesInput.Filters = newCustomFilterList(v.(*schema.Set))
	}

	if v, ok := d.GetOk("owners"); ok && len(v.([]any)) > 0 {
		describeImagesInput.Owners = flex.ExpandStringValueList(v.([]any))
	}

	diags = checkMostRecentAndMissingFilters(diags, &describeImagesInput, d.Get(names.AttrMostRecent).(bool), d.Get("allow_unsafe_filter").(bool))

	images, err := findImages(ctx, conn, &describeImagesInput)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 AMIs: %s", err)
	}

	var filteredImages []awstypes.Image
	if v, ok := d.GetOk("name_regex"); ok {
		r := regexache.MustCompile(v.(string))
		for _, image := range images {
			name := aws.ToString(image.Name)

			// Check for a very rare case where the response would include no
			// image name. No name means nothing to attempt a match against,
			// therefore we are skipping such image.
			if name == "" {
				continue
			}

			if r.MatchString(name) {
				filteredImages = append(filteredImages, image)
			}
		}
	} else {
		filteredImages = images[:]
	}

	if len(filteredImages) < 1 {
		return sdkdiag.AppendErrorf(diags, "Your query returned no results. Please change your search criteria and try again.")
	}

	if len(filteredImages) > 1 && !d.Get(names.AttrMostRecent).(bool) {
		return sdkdiag.AppendErrorf(diags, "Your query returned more than one result. Please try a more "+
			"specific search criteria, or set `most_recent` attribute to true.")
	}

	image := slices.MaxFunc(filteredImages, func(a, b awstypes.Image) int {
		atime, _ := time.Parse(time.RFC3339, aws.ToString(a.CreationDate))
		btime, _ := time.Parse(time.RFC3339, aws.ToString(b.CreationDate))
		return atime.Compare(btime)
	})

	d.SetId(aws.ToString(image.ImageId))
	d.Set("architecture", image.Architecture)
	imageArn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Region:    meta.(*conns.AWSClient).Region(ctx),
		Service:   names.EC2,
		Resource:  fmt.Sprintf("image/%s", d.Id()),
	}.String()
	d.Set(names.AttrARN, imageArn)
	if err := d.Set("block_device_mappings", flattenAMIBlockDeviceMappings(image.BlockDeviceMappings)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting block_device_mappings: %s", err)
	}
	d.Set("boot_mode", image.BootMode)
	d.Set(names.AttrCreationDate, image.CreationDate)
	d.Set("deprecation_time", image.DeprecationTime)
	d.Set(names.AttrDescription, image.Description)
	d.Set("ena_support", image.EnaSupport)
	d.Set("hypervisor", image.Hypervisor)
	d.Set("image_id", image.ImageId)
	d.Set("image_location", image.ImageLocation)
	d.Set("image_owner_alias", image.ImageOwnerAlias)
	d.Set("image_type", image.ImageType)
	d.Set("imds_support", image.ImdsSupport)
	d.Set("kernel_id", image.KernelId)
	d.Set("last_launched_time", image.LastLaunchedTime)
	d.Set(names.AttrName, image.Name)
	d.Set(names.AttrOwnerID, image.OwnerId)
	d.Set("platform", image.Platform)
	d.Set("platform_details", image.PlatformDetails)
	if err := d.Set("product_codes", flattenAMIProductCodes(image.ProductCodes)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting product_codes: %s", err)
	}
	d.Set("public", image.Public)
	d.Set("ramdisk_id", image.RamdiskId)
	d.Set("root_device_name", image.RootDeviceName)
	d.Set("root_device_type", image.RootDeviceType)
	d.Set("root_snapshot_id", amiRootSnapshotId(image))
	d.Set("sriov_net_support", image.SriovNetSupport)
	d.Set(names.AttrState, image.State)
	if err := d.Set("state_reason", flattenAMIStateReason(image.StateReason)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting state_reason: %s", err)
	}
	d.Set("tpm_support", image.TpmSupport)
	d.Set("usage_operation", image.UsageOperation)
	d.Set("virtualization_type", image.VirtualizationType)

	getInstanceUEFIDataInput := ec2.GetInstanceUefiDataInput{
		InstanceId: aws.String(d.Id()),
	}
	instanceData, err := conn.GetInstanceUefiData(ctx, &getInstanceUEFIDataInput)
	if err == nil {
		d.Set("uefi_data", instanceData.UefiData)
	}

	setTagsOut(ctx, image.Tags)

	return diags
}
