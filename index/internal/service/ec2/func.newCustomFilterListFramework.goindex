package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	datasourceschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func newCustomFilterListFramework(ctx context.Context, customFilters customFilters) []awstypes.Filter {
	if customFilters.IsNull() || customFilters.IsUnknown() {
		return nil
	}

	var filters []awstypes.Filter

	for _, v := range customFilters.Elements() {
		var data customFilterModel

		if tfsdk.ValueAs(ctx, v, &data).HasError() {
			continue
		}

		if data.Name.IsNull() || data.Name.IsUnknown() {
			continue
		}

		if v := fwflex.ExpandFrameworkStringValueSet(ctx, data.Values); v != nil {
			filters = append(filters, awstypes.Filter{
				Name:   fwflex.StringFromFramework(ctx, data.Name),
				Values: v,
			})
		}
	}

	return filters
}
