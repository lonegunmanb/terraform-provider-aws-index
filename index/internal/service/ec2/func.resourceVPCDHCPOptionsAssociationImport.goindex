package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPCDHCPOptionsAssociationImport(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	vpc, err := findVPCByID(ctx, conn, d.Id())

	if err != nil {
		return nil, fmt.Errorf("reading EC2 VPC (%s): %w", d.Id(), err)
	}

	dhcpOptionsID := aws.ToString(vpc.DhcpOptionsId)
	vpcID := aws.ToString(vpc.VpcId)

	d.SetId(vpcDHCPOptionsAssociationCreateResourceID(dhcpOptionsID, vpcID))
	d.Set("dhcp_options_id", dhcpOptionsID)
	d.Set(names.AttrVPCID, vpcID)

	return []*schema.ResourceData{d}, nil
}
