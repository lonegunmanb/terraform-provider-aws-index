package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNATGatewayUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	switch awstypes.ConnectivityType(d.Get("connectivity_type").(string)) {
	case awstypes.ConnectivityTypePrivate:
		if d.HasChanges("secondary_private_ip_addresses") {
			o, n := d.GetChange("secondary_private_ip_addresses")
			os, ns := o.(*schema.Set), n.(*schema.Set)

			if add := ns.Difference(os); add.Len() > 0 {
				input := &ec2.AssignPrivateNatGatewayAddressInput{
					NatGatewayId:       aws.String(d.Id()),
					PrivateIpAddresses: flex.ExpandStringValueSet(add),
				}

				_, err := conn.AssignPrivateNatGatewayAddress(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "assigning EC2 NAT Gateway (%s) private IP addresses: %s", d.Id(), err)
				}

				for _, privateIP := range flex.ExpandStringValueSet(add) {
					if _, err := waitNATGatewayAddressAssigned(ctx, conn, d.Id(), privateIP, d.Timeout(schema.TimeoutUpdate)); err != nil {
						return sdkdiag.AppendErrorf(diags, "waiting for EC2 NAT Gateway (%s) private IP address (%s) assign: %s", d.Id(), privateIP, err)
					}
				}
			}

			if del := os.Difference(ns); del.Len() > 0 {
				input := &ec2.UnassignPrivateNatGatewayAddressInput{
					NatGatewayId:       aws.String(d.Id()),
					PrivateIpAddresses: flex.ExpandStringValueSet(del),
				}

				_, err := conn.UnassignPrivateNatGatewayAddress(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "unassigning EC2 NAT Gateway (%s) private IP addresses: %s", d.Id(), err)
				}

				for _, privateIP := range flex.ExpandStringValueSet(del) {
					if _, err := waitNATGatewayAddressUnassigned(ctx, conn, d.Id(), privateIP, d.Timeout(schema.TimeoutUpdate)); err != nil {
						return sdkdiag.AppendErrorf(diags, "waiting for EC2 NAT Gateway (%s) private IP address (%s) unassign: %s", d.Id(), privateIP, err)
					}
				}
			}
		}
	case awstypes.ConnectivityTypePublic:
		if !d.GetRawConfig().GetAttr("secondary_allocation_ids").IsNull() && d.HasChanges("secondary_allocation_ids") {
			o, n := d.GetChange("secondary_allocation_ids")
			os, ns := o.(*schema.Set), n.(*schema.Set)

			if add := ns.Difference(os); add.Len() > 0 {
				input := &ec2.AssociateNatGatewayAddressInput{
					AllocationIds: flex.ExpandStringValueSet(add),
					NatGatewayId:  aws.String(d.Id()),
				}

				if d.HasChanges("secondary_private_ip_addresses") {
					o, n := d.GetChange("secondary_private_ip_addresses")
					os, ns := o.(*schema.Set), n.(*schema.Set)

					if add := ns.Difference(os); add.Len() > 0 {
						input.PrivateIpAddresses = flex.ExpandStringValueSet(add)
					}
				}

				_, err := conn.AssociateNatGatewayAddress(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "associating EC2 NAT Gateway (%s) allocation IDs: %s", d.Id(), err)
				}

				for _, allocationID := range flex.ExpandStringValueSet(add) {
					if _, err := waitNATGatewayAddressAssociated(ctx, conn, d.Id(), allocationID, d.Timeout(schema.TimeoutUpdate)); err != nil {
						return sdkdiag.AppendErrorf(diags, "waiting for EC2 NAT Gateway (%s) allocation ID (%s) associate: %s", d.Id(), allocationID, err)
					}
				}
			}

			if del := os.Difference(ns); del.Len() > 0 {
				natGateway, err := findNATGatewayByID(ctx, conn, d.Id())

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "reading EC2 NAT Gateway (%s): %s", d.Id(), err)
				}

				allocationIDs := flex.ExpandStringValueSet(del)
				var associationIDs []string

				for _, natGatewayAddress := range natGateway.NatGatewayAddresses {
					if allocationID := aws.ToString(natGatewayAddress.AllocationId); slices.Contains(allocationIDs, allocationID) {
						associationIDs = append(associationIDs, aws.ToString(natGatewayAddress.AssociationId))
					}
				}

				input := &ec2.DisassociateNatGatewayAddressInput{
					AssociationIds: associationIDs,
					NatGatewayId:   aws.String(d.Id()),
				}

				_, err = conn.DisassociateNatGatewayAddress(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "disassociating EC2 NAT Gateway (%s) allocation IDs: %s", d.Id(), err)
				}

				for _, allocationID := range allocationIDs {
					if _, err := waitNATGatewayAddressDisassociated(ctx, conn, d.Id(), allocationID, d.Timeout(schema.TimeoutUpdate)); err != nil {
						return sdkdiag.AppendErrorf(diags, "waiting for EC2 NAT Gateway (%s) allocation ID (%s) disassociate: %s", d.Id(), allocationID, err)
					}
				}
			}
		}
	}

	return append(diags, resourceNATGatewayRead(ctx, d, meta)...)
}
