package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFleetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	fleetType := awstypes.FleetType(d.Get(names.AttrType).(string))
	input := ec2.CreateFleetInput{
		ClientToken:                 aws.String(id.UniqueId()),
		LaunchTemplateConfigs:       expandFleetLaunchTemplateConfigRequests(d.Get("launch_template_config").([]any)),
		TargetCapacitySpecification: expandTargetCapacitySpecificationRequest(d.Get("target_capacity_specification").([]any)[0].(map[string]any)),
		TagSpecifications:           getTagSpecificationsIn(ctx, awstypes.ResourceTypeFleet),
		Type:                        fleetType,
	}

	if v, ok := d.GetOk("context"); ok {
		input.Context = aws.String(v.(string))
	}

	// This argument is only valid for fleet_type of `maintain`, but was defaulted in the schema above, hence the extra check.
	if v, ok := d.GetOk("excess_capacity_termination_policy"); ok && v != "" && fleetType == awstypes.FleetTypeMaintain {
		input.ExcessCapacityTerminationPolicy = awstypes.FleetExcessCapacityTerminationPolicy(v.(string))
	}

	if v, ok := d.GetOk("on_demand_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.OnDemandOptions = expandOnDemandOptionsRequest(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("replace_unhealthy_instances"); ok {
		input.ReplaceUnhealthyInstances = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("spot_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.SpotOptions = expandSpotOptionsRequest(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("terminate_instances_with_expiration"); ok {
		input.TerminateInstancesWithExpiration = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("valid_from"); ok {
		validFrom, err := time.Parse(time.RFC3339, v.(string))
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "parsing valid_from: %s", err)
		}
		input.ValidFrom = aws.Time(validFrom)
	}

	if v, ok := d.GetOk("valid_until"); ok {
		validUntil, err := time.Parse(time.RFC3339, v.(string))
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "parsing valid_until: %s", err)
		}
		input.ValidUntil = aws.Time(validUntil)
	}

	output, err := conn.CreateFleet(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 Fleet: %s", err)
	}

	d.SetId(aws.ToString(output.FleetId))

	// If a request type is fulfilled immediately, we can miss the transition from active to deleted.
	// Instead of an error here, allow the Read function to trigger recreation.
	if input.ValidFrom == nil {
		targetStates := enum.Slice(awstypes.FleetStateCodeActive)
		if fleetType == awstypes.FleetTypeRequest {
			targetStates = append(targetStates, string(awstypes.FleetStateCodeDeleted), string(awstypes.FleetStateCodeDeletedRunning), string(awstypes.FleetStateCodeDeletedTerminatingInstances))
		}

		if err := waitFleet(ctx, conn, d.Id(), enum.Slice(awstypes.FleetStateCodeSubmitted), targetStates, d.Timeout(schema.TimeoutCreate), 0); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 Fleet (%s) create: %s", d.Id(), err)
		}
	}

	return append(diags, resourceFleetRead(ctx, d, meta)...)
}
