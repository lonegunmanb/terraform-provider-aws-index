package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"iter"
	"slices"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{
		{
			Factory:  newCapacityBlockOfferingDataSource,
			TypeName: "aws_ec2_capacity_block_offering",
			Name:     "Capacity Block Offering",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSpotDataFeedSubscriptionDataSource,
			TypeName: "aws_spot_datafeed_subscription",
			Name:     "Spot Data Feed Subscription Data Source",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCEndpointAssociationsDataSource,
			TypeName: "aws_vpc_endpoint_associations",
			Name:     "VPC Endpoint Associations",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIPAMDataSource,
			TypeName: "aws_vpc_ipam",
			Name:     "IPAM",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIPAMsDataSource,
			TypeName: "aws_vpc_ipams",
			Name:     "IPAMs",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSecurityGroupRuleDataSource,
			TypeName: "aws_vpc_security_group_rule",
			Name:     "Security Group Rule",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSecurityGroupRulesDataSource,
			TypeName: "aws_vpc_security_group_rules",
			Name:     "Security Group Rules",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
