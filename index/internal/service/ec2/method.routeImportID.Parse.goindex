package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (routeImportID) Parse(id string) (string, map[string]string, error) {
	parts := strings.Split(id, "_")
	if len(parts) != 2 || parts[0] == "" || parts[1] == "" {
		return "", nil, fmt.Errorf("unexpected format of ID (%q), expected ROUTETABLEID_DESTINATION", id)
	}

	routeTableID := parts[0]
	destination := parts[1]
	result := map[string]string{
		"route_table_id": routeTableID,
	}
	if strings.Contains(destination, ":") {
		result[routeDestinationIPv6CIDRBlock] = destination
	} else if strings.Contains(destination, ".") {
		result[routeDestinationCIDRBlock] = destination
	} else {
		result[routeDestinationPrefixListID] = destination
	}

	return routeCreateID(routeTableID, destination), result, nil
}
