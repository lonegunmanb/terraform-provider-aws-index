package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTransitGatewayRouteTableAssociation() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceTransitGatewayRouteTableAssociationCreate,
		ReadWithoutTimeout:   resourceTransitGatewayRouteTableAssociationRead,
		UpdateWithoutTimeout: schema.NoopContext,
		DeleteWithoutTimeout: resourceTransitGatewayRouteTableAssociationDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"replace_existing_association": {
				Type:     schema.TypeBool,
				Optional: true,
				Default:  false,
			},
			names.AttrResourceID: {
				Type:     schema.TypeString,
				Computed: true,
			},
			names.AttrResourceType: {
				Type:     schema.TypeString,
				Computed: true,
			},
			names.AttrTransitGatewayAttachmentID: {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: validation.NoZeroValues,
			},
			"transit_gateway_route_table_id": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.NoZeroValues,
			},
		},

		CustomizeDiff: customdiff.Sequence(
			func(_ context.Context, d *schema.ResourceDiff, meta any) error {
				if !d.HasChange(names.AttrTransitGatewayAttachmentID) {
					return nil
				}

				// See https://github.com/hashicorp/terraform-provider-aws/issues/30085
				// In all cases, changes should force new except:
				//   o is not empty string AND
				//   n is empty string AND
				//   plan is unknown AND
				//   state is known
				o, n := d.GetChange(names.AttrTransitGatewayAttachmentID)
				if o.(string) == "" || n.(string) != "" {
					return d.ForceNew(names.AttrTransitGatewayAttachmentID)
				}

				rawPlan := d.GetRawPlan()
				plan := rawPlan.GetAttr(names.AttrTransitGatewayAttachmentID)
				if plan.IsKnown() {
					return d.ForceNew(names.AttrTransitGatewayAttachmentID)
				}

				rawState := d.GetRawState()
				if rawState.IsNull() || !rawState.IsKnown() {
					return d.ForceNew(names.AttrTransitGatewayAttachmentID)
				}

				state := rawState.GetAttr(names.AttrTransitGatewayAttachmentID)
				if !state.IsKnown() {
					return d.ForceNew(names.AttrTransitGatewayAttachmentID)
				}

				return nil
			},
		),
	}
}
