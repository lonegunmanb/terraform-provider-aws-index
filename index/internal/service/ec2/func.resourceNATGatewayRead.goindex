package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNATGatewayRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	natGateway, err := findNATGatewayByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EC2 NAT Gateway (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 NAT Gateway (%s): %s", d.Id(), err)
	}

	var secondaryAllocationIDs, secondaryPrivateIPAddresses []string

	for _, natGatewayAddress := range natGateway.NatGatewayAddresses {
		// Length check guarantees the attributes are always set (#30865).
		if isPrimary := aws.ToBool(natGatewayAddress.IsPrimary); isPrimary || len(natGateway.NatGatewayAddresses) == 1 {
			d.Set("allocation_id", natGatewayAddress.AllocationId)
			d.Set(names.AttrAssociationID, natGatewayAddress.AssociationId)
			d.Set(names.AttrNetworkInterfaceID, natGatewayAddress.NetworkInterfaceId)
			d.Set("private_ip", natGatewayAddress.PrivateIp)
			d.Set("public_ip", natGatewayAddress.PublicIp)
		} else if !isPrimary {
			if allocationID := aws.ToString(natGatewayAddress.AllocationId); allocationID != "" {
				secondaryAllocationIDs = append(secondaryAllocationIDs, allocationID)
			}
			if privateIP := aws.ToString(natGatewayAddress.PrivateIp); privateIP != "" {
				secondaryPrivateIPAddresses = append(secondaryPrivateIPAddresses, privateIP)
			}
		}
	}

	d.Set("connectivity_type", natGateway.ConnectivityType)
	d.Set("secondary_allocation_ids", secondaryAllocationIDs)
	d.Set("secondary_private_ip_address_count", len(secondaryPrivateIPAddresses))
	d.Set("secondary_private_ip_addresses", secondaryPrivateIPAddresses)
	d.Set(names.AttrSubnetID, natGateway.SubnetId)

	setTagsOut(ctx, natGateway.Tags)

	return diags
}
