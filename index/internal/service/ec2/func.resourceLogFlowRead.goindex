package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLogFlowRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.EC2Client(ctx)

	fl, err := findFlowLogByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Flow Log %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Flow Log (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, flowLogARN(ctx, c, d.Id()))
	d.Set("deliver_cross_account_role", fl.DeliverCrossAccountRole)
	if fl.DestinationOptions != nil {
		if err := d.Set("destination_options", []any{flattenDestinationOptionsResponse(fl.DestinationOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting destination_options: %s", err)
		}
	} else {
		d.Set("destination_options", nil)
	}
	d.Set(names.AttrIAMRoleARN, fl.DeliverLogsPermissionArn)
	d.Set("log_destination", fl.LogDestination)
	d.Set("log_destination_type", fl.LogDestinationType)
	d.Set("log_format", fl.LogFormat)
	d.Set("max_aggregation_interval", fl.MaxAggregationInterval)
	switch resourceID := aws.ToString(fl.ResourceId); {
	case strings.HasPrefix(resourceID, "vpc-"):
		d.Set(names.AttrVPCID, resourceID)
	case strings.HasPrefix(resourceID, "tgw-"):
		if strings.HasPrefix(resourceID, "tgw-attach-") {
			d.Set(names.AttrTransitGatewayAttachmentID, resourceID)
		} else {
			d.Set(names.AttrTransitGatewayID, resourceID)
		}
	case strings.HasPrefix(resourceID, "subnet-"):
		d.Set(names.AttrSubnetID, resourceID)
	case strings.HasPrefix(resourceID, "eni-"):
		d.Set("eni_id", resourceID)
	}
	if !strings.HasPrefix(aws.ToString(fl.ResourceId), "tgw-") {
		d.Set("traffic_type", fl.TrafficType)
	}

	setTagsOut(ctx, fl.Tags)

	return diags
}
