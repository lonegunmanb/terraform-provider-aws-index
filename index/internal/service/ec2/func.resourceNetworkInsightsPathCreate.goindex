package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNetworkInsightsPathCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	input := ec2.CreateNetworkInsightsPathInput{
		ClientToken:       aws.String(sdkid.UniqueId()),
		Protocol:          awstypes.Protocol(d.Get(names.AttrProtocol).(string)),
		Source:            aws.String(d.Get(names.AttrSource).(string)),
		TagSpecifications: getTagSpecificationsIn(ctx, awstypes.ResourceTypeNetworkInsightsPath),
	}

	if v, ok := d.GetOk(names.AttrDestination); ok {
		input.Destination = aws.String(v.(string))
	}

	if v, ok := d.GetOk("destination_ip"); ok {
		input.DestinationIp = aws.String(v.(string))
	}

	if v, ok := d.GetOk("destination_port"); ok {
		input.DestinationPort = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("filter_at_destination"); ok && len(v.([]any)) > 0 {
		input.FilterAtDestination = expandPathRequestFilter(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("filter_at_source"); ok && len(v.([]any)) > 0 {
		input.FilterAtSource = expandPathRequestFilter(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("source_ip"); ok {
		input.SourceIp = aws.String(v.(string))
	}

	output, err := conn.CreateNetworkInsightsPath(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 Network Insights Path: %s", err)
	}

	d.SetId(aws.ToString(output.NetworkInsightsPath.NetworkInsightsPathId))

	return append(diags, resourceNetworkInsightsPathRead(ctx, d, meta)...)
}
