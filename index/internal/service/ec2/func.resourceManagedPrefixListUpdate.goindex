package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceManagedPrefixListUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	// MaxEntries & Entry cannot change in the same API call.
	//   If MaxEntry is increasing, complete before updating entry(s)
	//   If MaxEntry is decreasing, complete after updating entry(s)
	maxEntryChangedDecrease := false
	var newMaxEntryInt int32

	if d.HasChange("max_entries") {
		oldMaxEntry, newMaxEntry := d.GetChange("max_entries")
		newMaxEntryInt = int32(d.Get("max_entries").(int))

		if newMaxEntry.(int) < oldMaxEntry.(int) {
			maxEntryChangedDecrease = true
		} else {
			err := updateMaxEntry(ctx, conn, d.Id(), newMaxEntryInt)
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating EC2 Managed Prefix List (%s) increased MaxEntries : %s", d.Id(), err)
			}
		}
	}

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll, "max_entries") {
		input := &ec2.ModifyManagedPrefixListInput{
			PrefixListId: aws.String(d.Id()),
		}

		input.PrefixListName = aws.String(d.Get(names.AttrName).(string))
		currentVersion := int64(d.Get(names.AttrVersion).(int))
		wait := false

		oldAttr, newAttr := d.GetChange("entry")
		os := oldAttr.(*schema.Set)
		ns := newAttr.(*schema.Set)

		if addEntries := ns.Difference(os); addEntries.Len() > 0 {
			input.AddEntries = expandAddPrefixListEntries(addEntries.List())
			input.CurrentVersion = aws.Int64(currentVersion)
			wait = true
		}

		if removeEntries := os.Difference(ns); removeEntries.Len() > 0 {
			input.RemoveEntries = expandRemovePrefixListEntries(removeEntries.List())
			input.CurrentVersion = aws.Int64(currentVersion)
			wait = true
		}

		// Prevent the following error on description-only updates:
		//   InvalidParameterValue: Request cannot contain Cidr #.#.#.#/# in both AddPrefixListEntries and RemovePrefixListEntries
		// Attempting to just delete the RemoveEntries item causes:
		//   InvalidRequest: The request received was invalid.
		// Therefore it seems we must issue two ModifyManagedPrefixList calls,
		// one with a collection of all description-only removals and the
		// second one will add them all back.
		if len(input.AddEntries) > 0 && len(input.RemoveEntries) > 0 {
			descriptionOnlyRemovals := []awstypes.RemovePrefixListEntry{}
			removals := []awstypes.RemovePrefixListEntry{}

			for _, removeEntry := range input.RemoveEntries {
				inAddAndRemove := false

				for _, addEntry := range input.AddEntries {
					if aws.ToString(addEntry.Cidr) == aws.ToString(removeEntry.Cidr) {
						inAddAndRemove = true
						break
					}
				}

				if inAddAndRemove {
					descriptionOnlyRemovals = append(descriptionOnlyRemovals, removeEntry)
				} else {
					removals = append(removals, removeEntry)
				}
			}

			if len(descriptionOnlyRemovals) > 0 {
				removeInput := ec2.ModifyManagedPrefixListInput{
					CurrentVersion: input.CurrentVersion,
					PrefixListId:   aws.String(d.Id()),
					RemoveEntries:  descriptionOnlyRemovals,
				}
				_, err := conn.ModifyManagedPrefixList(ctx, &removeInput)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "updating EC2 Managed Prefix List (%s): %s", d.Id(), err)
				}

				managedPrefixList, err := waitManagedPrefixListModified(ctx, conn, d.Id())

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for EC2 Managed Prefix List (%s) update: %s", d.Id(), err)
				}

				input.CurrentVersion = managedPrefixList.Version
			}

			if len(removals) > 0 {
				input.RemoveEntries = removals
			} else {
				// Prevent this error if RemoveEntries is list with no elements after removals:
				//   InvalidRequest: The request received was invalid.
				input.RemoveEntries = nil
			}
		}

		_, err := conn.ModifyManagedPrefixList(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EC2 Managed Prefix List (%s): %s", d.Id(), err)
		}

		if wait {
			if _, err := waitManagedPrefixListModified(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for EC2 Managed Prefix List (%s) update: %s", d.Id(), err)
			}
		}
	}

	// Only decrease MaxEntries after entry(s) have had opportunity to be removed
	if maxEntryChangedDecrease {
		err := updateMaxEntry(ctx, conn, d.Id(), newMaxEntryInt)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EC2 Managed Prefix List (%s) decreased MaxEntries : %s", d.Id(), err)
		}
	}

	return append(diags, resourceManagedPrefixListRead(ctx, d, meta)...)
}
