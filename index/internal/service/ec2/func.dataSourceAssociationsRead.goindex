package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceAssociationsRead(ec2Assocations []awstypes.RouteTableAssociation) []map[string]any {
	associations := make([]map[string]any, 0, len(ec2Assocations))
	// Loop through the routes and add them to the set
	for _, a := range ec2Assocations {
		m := make(map[string]any)
		m["route_table_id"] = aws.ToString(a.RouteTableId)
		m["route_table_association_id"] = aws.ToString(a.RouteTableAssociationId)
		// GH[11134]
		if a.SubnetId != nil {
			m[names.AttrSubnetID] = aws.ToString(a.SubnetId)
		}
		if a.GatewayId != nil {
			m["gateway_id"] = aws.ToString(a.GatewayId)
		}
		m["main"] = aws.ToBool(a.Main)
		associations = append(associations, m)
	}
	return associations
}
