package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"cmp"
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecurityGroupRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EC2Client(ctx)
	securityGroupID := d.Get("security_group_id").(string)

	conns.GlobalMutexKV.Lock(securityGroupID)
	defer conns.GlobalMutexKV.Unlock(securityGroupID)

	sg, err := findSecurityGroupByID(ctx, conn, securityGroupID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Security Group (%s): %s", securityGroupID, err)
	}

	ipPermission := expandIPPermission(d, sg)
	ruleType := securityGroupRuleType(d.Get(names.AttrType).(string))
	id, err := securityGroupRuleCreateID(securityGroupID, string(ruleType), &ipPermission)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Security Group (%s): %s", securityGroupID, err)
	}

	switch ruleType {
	case securityGroupRuleTypeIngress:
		input := &ec2.AuthorizeSecurityGroupIngressInput{
			GroupId:       sg.GroupId,
			IpPermissions: []awstypes.IpPermission{ipPermission},
		}
		var output *ec2.AuthorizeSecurityGroupIngressOutput

		output, err = conn.AuthorizeSecurityGroupIngress(ctx, input)

		if err == nil {
			if len(output.SecurityGroupRules) == 1 {
				d.Set("security_group_rule_id", output.SecurityGroupRules[0].SecurityGroupRuleId)
			} else {
				d.Set("security_group_rule_id", nil)
			}
		}

	case securityGroupRuleTypeEgress:
		input := &ec2.AuthorizeSecurityGroupEgressInput{
			GroupId:       sg.GroupId,
			IpPermissions: []awstypes.IpPermission{ipPermission},
		}
		var output *ec2.AuthorizeSecurityGroupEgressOutput

		output, err = conn.AuthorizeSecurityGroupEgress(ctx, input)

		if err == nil {
			if len(output.SecurityGroupRules) == 1 {
				d.Set("security_group_rule_id", output.SecurityGroupRules[0].SecurityGroupRuleId)
			} else {
				d.Set("security_group_rule_id", nil)
			}
		}
	}

	if tfawserr.ErrCodeEquals(err, errCodeInvalidPermissionDuplicate) {
		return sdkdiag.AppendErrorf(diags, `[WARN] A duplicate Security Group rule was found on (%s). This may be
a side effect of a now-fixed Terraform issue causing two security groups with
identical attributes but different source_security_group_ids to overwrite each
other in the state. See https://github.com/hashicorp/terraform/pull/2376 for more
information and instructions for recovery. Error: %s`, securityGroupID, err)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "authorizing Security Group (%s) Rule (%s): %s", securityGroupID, id, err)
	}

	_, err = tfresource.RetryWhenNotFound(ctx, d.Timeout(schema.TimeoutCreate), func(ctx context.Context) (any, error) {
		sg, err := findSecurityGroupByID(ctx, conn, securityGroupID)

		if err != nil {
			return nil, err
		}

		var rules []awstypes.IpPermission

		if ruleType == securityGroupRuleTypeIngress {
			rules = sg.IpPermissions
		} else {
			rules = sg.IpPermissionsEgress
		}

		rule, _ := findRuleMatch(ipPermission, rules)

		if rule == nil {
			return nil, &retry.NotFoundError{}
		}

		return rule, nil
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Security Group (%s) Rule (%s) create: %s", securityGroupID, id, err)
	}

	d.SetId(id)

	return diags
}
