package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCreateVerifiedAccessEndpointRDSOptions(tfMap map[string]any) *awstypes.CreateVerifiedAccessEndpointRdsOptions {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.CreateVerifiedAccessEndpointRdsOptions{}

	if v, ok := tfMap[names.AttrPort].(int); ok {
		apiObject.Port = aws.Int32(int32(v))
	}

	if v, ok := tfMap[names.AttrProtocol].(string); ok && v != "" {
		apiObject.Protocol = awstypes.VerifiedAccessEndpointProtocol(v)
	}

	if v, ok := tfMap["rds_db_cluster_arn"].(string); ok && v != "" {
		apiObject.RdsDbClusterArn = aws.String(v)
	}

	if v, ok := tfMap["rds_db_instance_arn"].(string); ok && v != "" {
		apiObject.RdsDbInstanceArn = aws.String(v)
	}

	if v, ok := tfMap["rds_db_proxy_arn"].(string); ok && v != "" {
		apiObject.RdsDbProxyArn = aws.String(v)
	}

	if v, ok := tfMap["rds_endpoint"].(string); ok && v != "" {
		apiObject.RdsEndpoint = aws.String(v)
	}

	if v, ok := tfMap[names.AttrSubnetIDs].(*schema.Set); ok && v.Len() > 0 {
		apiObject.SubnetIds = flex.ExpandStringValueSet(v)
	}

	return apiObject
}
