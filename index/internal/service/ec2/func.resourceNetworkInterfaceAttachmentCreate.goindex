package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNetworkInterfaceAttachmentCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	input := ec2.AttachNetworkInterfaceInput{
		NetworkInterfaceId: aws.String(d.Get(names.AttrNetworkInterfaceID).(string)),
		InstanceId:         aws.String(d.Get(names.AttrInstanceID).(string)),
		DeviceIndex:        aws.Int32(int32(d.Get("device_index").(int))),
	}

	if v, ok := d.GetOk("network_card_index"); ok {
		if v, ok := v.(int); ok {
			input.NetworkCardIndex = aws.Int32(int32(v))
		}
	}

	attachmentID, err := attachNetworkInterface(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if attachmentID != "" {
		d.SetId(attachmentID)
	}

	return append(diags, resourceNetworkInterfaceAttachmentRead(ctx, d, meta)...)
}
