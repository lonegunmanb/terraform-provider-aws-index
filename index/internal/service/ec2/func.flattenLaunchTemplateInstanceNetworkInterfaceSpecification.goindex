package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenLaunchTemplateInstanceNetworkInterfaceSpecification(apiObject awstypes.LaunchTemplateInstanceNetworkInterfaceSpecification) map[string]any {
	tfMap := map[string]any{}

	if v := apiObject.AssociateCarrierIpAddress; v != nil {
		tfMap["associate_carrier_ip_address"] = flex.BoolToStringValue(v)
	}

	if v := apiObject.AssociatePublicIpAddress; v != nil {
		tfMap["associate_public_ip_address"] = flex.BoolToStringValue(v)
	}

	if v := apiObject.ConnectionTrackingSpecification; v != nil {
		tfMap["connection_tracking_specification"] = []any{flattenConnectionTrackingSpecification(v)}
	}

	if v := apiObject.DeleteOnTermination; v != nil {
		tfMap[names.AttrDeleteOnTermination] = flex.BoolToStringValue(v)
	}

	if v := apiObject.Description; v != nil {
		tfMap[names.AttrDescription] = aws.ToString(v)
	}

	if v := apiObject.DeviceIndex; v != nil {
		tfMap["device_index"] = aws.ToInt32(v)
	}

	if v := apiObject.EnaSrdSpecification; v != nil {
		tfMap["ena_srd_specification"] = []any{flattenLaunchTemplateEnaSrdSpecification(v)}
	}

	if v := apiObject.InterfaceType; v != nil {
		tfMap["interface_type"] = aws.ToString(v)
	}

	if v := apiObject.SecondaryPrivateIpAddressCount; v != nil {
		tfMap["ipv4_address_count"] = aws.ToInt32(v)
	}

	if v := apiObject.PrivateIpAddresses; len(v) > 0 {
		var ipv4Addresses []string

		for _, v := range v {
			ipv4Addresses = append(ipv4Addresses, aws.ToString(v.PrivateIpAddress))
		}

		tfMap["ipv4_addresses"] = ipv4Addresses
	}

	if v := apiObject.Ipv4PrefixCount; v != nil {
		tfMap["ipv4_prefix_count"] = aws.ToInt32(v)
	}

	if v := apiObject.Ipv4Prefixes; v != nil {
		var ipv4Prefixes []string

		for _, v := range v {
			ipv4Prefixes = append(ipv4Prefixes, aws.ToString(v.Ipv4Prefix))
		}

		tfMap["ipv4_prefixes"] = ipv4Prefixes
	}

	if v := apiObject.Ipv6AddressCount; v != nil {
		tfMap["ipv6_address_count"] = aws.ToInt32(v)
	}

	if v := apiObject.Ipv6Addresses; len(v) > 0 {
		var ipv6Addresses []string

		for _, v := range v {
			ipv6Addresses = append(ipv6Addresses, aws.ToString(v.Ipv6Address))
		}

		tfMap["ipv6_addresses"] = ipv6Addresses
	}

	if v := apiObject.Ipv6PrefixCount; v != nil {
		tfMap["ipv6_prefix_count"] = aws.ToInt32(v)
	}

	if v := apiObject.Ipv6Prefixes; v != nil {
		var ipv6Prefixes []string

		for _, v := range v {
			ipv6Prefixes = append(ipv6Prefixes, aws.ToString(v.Ipv6Prefix))
		}

		tfMap["ipv6_prefixes"] = ipv6Prefixes
	}

	if v := apiObject.NetworkCardIndex; v != nil {
		tfMap["network_card_index"] = aws.ToInt32(v)
	}

	if v := apiObject.NetworkInterfaceId; v != nil {
		tfMap[names.AttrNetworkInterfaceID] = aws.ToString(v)
	}

	if v := apiObject.PrimaryIpv6; v != nil {
		tfMap["primary_ipv6"] = flex.BoolToStringValue(v)
	}

	if v := apiObject.PrivateIpAddress; v != nil {
		tfMap["private_ip_address"] = aws.ToString(v)
	}

	if v := apiObject.Groups; v != nil {
		tfMap[names.AttrSecurityGroups] = v
	}

	if v := apiObject.SubnetId; v != nil {
		tfMap[names.AttrSubnetID] = aws.ToString(v)
	}

	return tfMap
}
