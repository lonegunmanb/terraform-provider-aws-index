package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandModifyVPNTunnelOptionsSpecification(d *schema.ResourceData, prefix string) *awstypes.ModifyVpnTunnelOptionsSpecification {
	apiObject := &awstypes.ModifyVpnTunnelOptionsSpecification{}
	hasChange := false

	if key := prefix + "dpd_timeout_action"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.DPDTimeoutAction = aws.String(v.(string))
		} else {
			apiObject.DPDTimeoutAction = aws.String(defaultVPNTunnelOptionsDPDTimeoutAction)
		}

		hasChange = true
	}

	if key := prefix + "dpd_timeout_seconds"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.DPDTimeoutSeconds = aws.Int32(int32(v.(int)))
		} else {
			apiObject.DPDTimeoutSeconds = aws.Int32(int32(defaultVPNTunnelOptionsDPDTimeoutSeconds))
		}

		hasChange = true
	}

	if key := prefix + "enable_tunnel_lifecycle_control"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.EnableTunnelLifecycleControl = aws.Bool(v.(bool))
		} else {
			apiObject.EnableTunnelLifecycleControl = aws.Bool(defaultVPNTunnelOptionsEnableTunnelLifecycleControl)
		}

		hasChange = true
	}

	if key := prefix + "ike_versions"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.IKEVersions = append(apiObject.IKEVersions, awstypes.IKEVersionsRequestListValue{Value: aws.String(v.(string))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsIKEVersions {
				apiObject.IKEVersions = append(apiObject.IKEVersions, awstypes.IKEVersionsRequestListValue{Value: aws.String(v)})
			}
		}

		hasChange = true
	}

	if key := prefix + "log_options"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			apiObject.LogOptions = expandVPNTunnelLogOptionsSpecification(v.([]any)[0].(map[string]any))
		}

		hasChange = true
	}

	if key := prefix + "phase1_dh_group_numbers"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase1DHGroupNumbers = append(apiObject.Phase1DHGroupNumbers, awstypes.Phase1DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v.(int)))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase1DHGroupNumbers {
				apiObject.Phase1DHGroupNumbers = append(apiObject.Phase1DHGroupNumbers, awstypes.Phase1DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v))})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase1_encryption_algorithms"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase1EncryptionAlgorithms = append(apiObject.Phase1EncryptionAlgorithms, awstypes.Phase1EncryptionAlgorithmsRequestListValue{Value: aws.String(v.(string))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase1EncryptionAlgorithms {
				apiObject.Phase1EncryptionAlgorithms = append(apiObject.Phase1EncryptionAlgorithms, awstypes.Phase1EncryptionAlgorithmsRequestListValue{Value: aws.String(v)})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase1_integrity_algorithms"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase1IntegrityAlgorithms = append(apiObject.Phase1IntegrityAlgorithms, awstypes.Phase1IntegrityAlgorithmsRequestListValue{Value: aws.String(v.(string))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase1IntegrityAlgorithms {
				apiObject.Phase1IntegrityAlgorithms = append(apiObject.Phase1IntegrityAlgorithms, awstypes.Phase1IntegrityAlgorithmsRequestListValue{Value: aws.String(v)})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase1_lifetime_seconds"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.Phase1LifetimeSeconds = aws.Int32(int32(v.(int)))
		} else {
			apiObject.Phase1LifetimeSeconds = aws.Int32(int32(defaultVPNTunnelOptionsPhase1LifetimeSeconds))
		}

		hasChange = true
	}

	if key := prefix + "phase2_dh_group_numbers"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase2DHGroupNumbers = append(apiObject.Phase2DHGroupNumbers, awstypes.Phase2DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v.(int)))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase2DHGroupNumbers {
				apiObject.Phase2DHGroupNumbers = append(apiObject.Phase2DHGroupNumbers, awstypes.Phase2DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v))})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase2_encryption_algorithms"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase2EncryptionAlgorithms = append(apiObject.Phase2EncryptionAlgorithms, awstypes.Phase2EncryptionAlgorithmsRequestListValue{Value: aws.String(v.(string))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase2EncryptionAlgorithms {
				apiObject.Phase2EncryptionAlgorithms = append(apiObject.Phase2EncryptionAlgorithms, awstypes.Phase2EncryptionAlgorithmsRequestListValue{Value: aws.String(v)})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase2_integrity_algorithms"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok && v.(*schema.Set).Len() > 0 {
			for _, v := range d.Get(key).(*schema.Set).List() {
				apiObject.Phase2IntegrityAlgorithms = append(apiObject.Phase2IntegrityAlgorithms, awstypes.Phase2IntegrityAlgorithmsRequestListValue{Value: aws.String(v.(string))})
			}
		} else {
			for _, v := range defaultVPNTunnelOptionsPhase2IntegrityAlgorithms {
				apiObject.Phase2IntegrityAlgorithms = append(apiObject.Phase2IntegrityAlgorithms, awstypes.Phase2IntegrityAlgorithmsRequestListValue{Value: aws.String(v)})
			}
		}

		hasChange = true
	}

	if key := prefix + "phase2_lifetime_seconds"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.Phase2LifetimeSeconds = aws.Int32(int32(v.(int)))
		} else {
			apiObject.Phase2LifetimeSeconds = aws.Int32(int32(defaultVPNTunnelOptionsPhase2LifetimeSeconds))
		}

		hasChange = true
	}

	if key := prefix + "preshared_key"; d.HasChange(key) {
		apiObject.PreSharedKey = aws.String(d.Get(key).(string))

		hasChange = true
	}

	if key := prefix + "rekey_fuzz_percentage"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.RekeyFuzzPercentage = aws.Int32(int32(v.(int)))
		} else {
			apiObject.RekeyFuzzPercentage = aws.Int32(int32(defaultVPNTunnelOptionsRekeyFuzzPercentage))
		}

		hasChange = true
	}

	if key := prefix + "rekey_margin_time_seconds"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.RekeyMarginTimeSeconds = aws.Int32(int32(v.(int)))
		} else {
			apiObject.RekeyMarginTimeSeconds = aws.Int32(int32(defaultVPNTunnelOptionsRekeyMarginTimeSeconds))
		}

		hasChange = true
	}

	if key := prefix + "replay_window_size"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.ReplayWindowSize = aws.Int32(int32(v.(int)))
		} else {
			apiObject.ReplayWindowSize = aws.Int32(int32(defaultVPNTunnelOptionsReplayWindowSize))
		}

		hasChange = true
	}

	if key := prefix + "startup_action"; d.HasChange(key) {
		if v, ok := d.GetOk(key); ok {
			apiObject.StartupAction = aws.String(v.(string))
		} else {
			apiObject.StartupAction = aws.String(defaultVPNTunnelOptionsStartupAction)
		}

		hasChange = true
	}

	if !hasChange {
		return nil
	}

	return apiObject
}
