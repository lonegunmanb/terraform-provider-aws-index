package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIPAMPoolCIDRAllocationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	allocationID, poolID, err := ipamPoolCIDRAllocationParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	allocation, err := findIPAMPoolAllocationByTwoPartKey(ctx, conn, allocationID, poolID)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] IPAM Pool CIDR Allocation (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IPAM Pool CIDR Allocation (%s): %s", d.Id(), err)
	}

	cidr := aws.ToString(allocation.Cidr)
	d.Set("cidr", cidr)
	d.Set(names.AttrDescription, allocation.Description)
	d.Set("ipam_pool_allocation_id", allocation.IpamPoolAllocationId)
	d.Set("ipam_pool_id", poolID)
	d.Set("netmask_length", nil)
	if parts := strings.Split(cidr, "/"); len(parts) == 2 {
		if v, err := strconv.Atoi(parts[1]); err == nil {
			d.Set("netmask_length", v)
		} else {
			log.Printf("[WARN] Unable to parse CIDR (%s) netmask length: %s", cidr, err)
		}
	} else {
		log.Printf("[WARN] Invalid CIDR block format: %s", cidr)
	}

	d.Set(names.AttrResourceID, allocation.ResourceId)
	d.Set(names.AttrResourceOwner, allocation.ResourceOwner)
	d.Set(names.AttrResourceType, allocation.ResourceType)

	return diags
}
