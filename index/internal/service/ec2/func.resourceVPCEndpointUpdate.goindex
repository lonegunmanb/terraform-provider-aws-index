package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPCEndpointUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	if d.HasChange("auto_accept") && d.Get("auto_accept").(bool) && strings.EqualFold(d.Get(names.AttrState).(string), vpcEndpointStatePendingAcceptance) {
		if err := vpcEndpointAccept(ctx, conn, d.Id(), d.Get(names.AttrServiceName).(string), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if d.HasChanges("dns_options", names.AttrIPAddressType, names.AttrPolicy, "private_dns_enabled", names.AttrSecurityGroupIDs, "route_table_ids", "subnet_configuration", names.AttrSubnetIDs) {
		input := &ec2.ModifyVpcEndpointInput{
			VpcEndpointId: aws.String(d.Id()),
		}

		if d.HasChange("dns_options") {
			if v, ok := d.GetOk("dns_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				tfMap := v.([]any)[0].(map[string]any)
				// PrivateDnsOnlyForInboundResolverEndpoint is only supported for services
				// that support both gateway and interface endpoints, i.e. S3.
				if isAmazonS3VPCEndpoint(d.Get(names.AttrServiceName).(string)) {
					input.DnsOptions = expandDNSOptionsSpecificationWithPrivateDNSOnly(tfMap)
				} else {
					input.DnsOptions = expandDNSOptionsSpecification(tfMap)
				}
			}
		}

		if d.HasChange(names.AttrIPAddressType) {
			input.IpAddressType = awstypes.IpAddressType(d.Get(names.AttrIPAddressType).(string))
		}

		privateDNSEnabled := d.Get("private_dns_enabled").(bool)
		if d.HasChange("private_dns_enabled") {
			input.PrivateDnsEnabled = aws.Bool(privateDNSEnabled)

			// when private_dns_enabled is set to true, always set dns_options
			if privateDNSEnabled {
				if v, ok := d.GetOk("dns_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
					tfMap := v.([]any)[0].(map[string]any)
					// PrivateDnsOnlyForInboundResolverEndpoint is only supported for services
					// that support both gateway and interface endpoints, i.e. S3.
					if isAmazonS3VPCEndpoint(d.Get(names.AttrServiceName).(string)) {
						input.DnsOptions = expandDNSOptionsSpecificationWithPrivateDNSOnly(tfMap)
					} else {
						input.DnsOptions = expandDNSOptionsSpecification(tfMap)
					}
				}
			}
		}

		input.AddRouteTableIds, input.RemoveRouteTableIds = flattenAddAndRemoveStringValueLists(d, "route_table_ids")
		input.AddSecurityGroupIds, input.RemoveSecurityGroupIds = flattenAddAndRemoveStringValueLists(d, names.AttrSecurityGroupIDs)
		input.AddSubnetIds, input.RemoveSubnetIds = flattenAddAndRemoveStringValueLists(d, names.AttrSubnetIDs)

		if d.HasChange(names.AttrPolicy) {
			o, n := d.GetChange(names.AttrPolicy)

			if equivalent, err := awspolicy.PoliciesAreEquivalent(o.(string), n.(string)); err != nil || !equivalent {
				policy, err := structure.NormalizeJsonString(d.Get(names.AttrPolicy))

				if err != nil {
					return sdkdiag.AppendFromErr(diags, err)
				}

				if policy == "" {
					input.ResetPolicy = aws.Bool(true)
				} else {
					input.PolicyDocument = aws.String(policy)
				}
			}
		}

		if d.HasChange("subnet_configuration") {
			if v, ok := d.GetOk("subnet_configuration"); ok && v.(*schema.Set).Len() > 0 {
				input.SubnetConfigurations = expandSubnetConfigurations(v.(*schema.Set).List())
			}
		}

		_, err := conn.ModifyVpcEndpoint(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EC2 VPC Endpoint (%s): %s", d.Id(), err)
		}

		if _, err := waitVPCEndpointAvailable(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 VPC Endpoint (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceVPCEndpointRead(ctx, d, meta)...)
}
