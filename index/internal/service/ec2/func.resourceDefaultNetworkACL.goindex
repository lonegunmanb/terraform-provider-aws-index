package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDefaultNetworkACL() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceDefaultNetworkACLCreate,
		ReadWithoutTimeout:   resourceNetworkACLRead,
		UpdateWithoutTimeout: resourceDefaultNetworkACLUpdate,
		DeleteWithoutTimeout: schema.NoopContext,

		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
				d.Set("default_network_acl_id", d.Id())

				return []*schema.ResourceData{d}, nil
			},
		},

		// Keep in sync with aws_network_acl's schema with the following changes:
		//    - egress and ingress are not Computed and don't have "Attributes as Blocks" processing mode set
		//    - subnet_ids is not Computed
		// and additions:
		//   - default_network_acl_id Required/ForceNew
		SchemaFunc: func() map[string]*schema.Schema {
			networkACLRuleSetNestedBlock := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeSet,
					Optional: true,
					Elem:     networkACLRuleNestedBlock(),
					Set:      networkACLRuleHash,
				}
			}

			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"default_network_acl_id": {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
				},
				// We want explicit management of Rules here, so we do not allow them to be
				// computed. Instead, an empty config will enforce just that; removal of the
				// rules
				"egress":  networkACLRuleSetNestedBlock(),
				"ingress": networkACLRuleSetNestedBlock(),
				names.AttrOwnerID: {
					Type:     schema.TypeString,
					Computed: true,
				},
				// We want explicit management of Subnets here, so we do not allow them to be
				// computed. Instead, an empty config will enforce just that; removal of the
				// any Subnets that have been assigned to the Default Network ACL. Because we
				// can't actually remove them, this will be a continual plan until the
				// Subnets are themselves destroyed or reassigned to a different Network
				// ACL
				names.AttrSubnetIDs: {
					Type:     schema.TypeSet,
					Optional: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				names.AttrVPCID: {
					Type:     schema.TypeString,
					Computed: true,
				},
			}
		},
	}
}
