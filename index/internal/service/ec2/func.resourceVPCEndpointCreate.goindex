package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPCEndpointCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)
	partition := meta.(*conns.AWSClient).Partition(ctx)

	serviceName := d.Get(names.AttrServiceName).(string)
	input := &ec2.CreateVpcEndpointInput{
		ClientToken:       aws.String(id.UniqueId()),
		PrivateDnsEnabled: aws.Bool(d.Get("private_dns_enabled").(bool)),
		TagSpecifications: getTagSpecificationsIn(ctx, awstypes.ResourceTypeVpcEndpoint),
		VpcEndpointType:   awstypes.VpcEndpointType(d.Get("vpc_endpoint_type").(string)),
		VpcId:             aws.String(d.Get(names.AttrVPCID).(string)),
	}

	if v, ok := d.GetOk("dns_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		// PrivateDnsOnlyForInboundResolverEndpoint is only supported for services
		// that support both gateway and interface endpoints, i.e. S3.
		if isAmazonS3VPCEndpoint(serviceName) {
			input.DnsOptions = expandDNSOptionsSpecificationWithPrivateDNSOnly(v.([]any)[0].(map[string]any))
		} else {
			input.DnsOptions = expandDNSOptionsSpecification(v.([]any)[0].(map[string]any))
		}
	}

	if v, ok := d.GetOk(names.AttrIPAddressType); ok {
		input.IpAddressType = awstypes.IpAddressType(v.(string))
	}

	if v, ok := d.GetOk(names.AttrPolicy); ok {
		policy, err := structure.NormalizeJsonString(v)

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input.PolicyDocument = aws.String(policy)
	}

	if v, ok := d.GetOk("resource_configuration_arn"); ok {
		input.ResourceConfigurationArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("route_table_ids"); ok && v.(*schema.Set).Len() > 0 {
		input.RouteTableIds = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk(names.AttrSecurityGroupIDs); ok && v.(*schema.Set).Len() > 0 {
		input.SecurityGroupIds = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk(names.AttrServiceName); ok {
		input.ServiceName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("service_network_arn"); ok {
		input.ServiceNetworkArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("subnet_configuration"); ok && v.(*schema.Set).Len() > 0 {
		input.SubnetConfigurations = expandSubnetConfigurations(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk(names.AttrSubnetIDs); ok && v.(*schema.Set).Len() > 0 {
		input.SubnetIds = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("service_region"); ok {
		input.ServiceRegion = aws.String(v.(string))
	}

	output, err := conn.CreateVpcEndpoint(ctx, input)

	// Some partitions (e.g. ISO) may not support tag-on-create.
	if input.TagSpecifications != nil && errs.IsUnsupportedOperationInPartitionError(partition, err) {
		input.TagSpecifications = nil
		output, err = conn.CreateVpcEndpoint(ctx, input)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 VPC Endpoint (%s): %s", serviceName, err)
	}

	vpce := output.VpcEndpoint
	d.SetId(aws.ToString(vpce.VpcEndpointId))

	if d.Get("auto_accept").(bool) && strings.EqualFold(string(vpce.State), vpcEndpointStatePendingAcceptance) {
		if err := vpcEndpointAccept(ctx, conn, d.Id(), aws.ToString(vpce.ServiceName), d.Timeout(schema.TimeoutCreate)); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if _, err := waitVPCEndpointAvailable(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EC2 VPC Endpoint (%s) create: %s", serviceName, err)
	}

	// For partitions not supporting tag-on-create, attempt tag after create.
	if tags := getTagsIn(ctx); input.TagSpecifications == nil && len(tags) > 0 {
		err := createTags(ctx, conn, d.Id(), tags)

		// If default tags only, continue. Otherwise, error.
		if v, ok := d.GetOk(names.AttrTags); (!ok || len(v.(map[string]any)) == 0) && errs.IsUnsupportedOperationInPartitionError(partition, err) {
			return append(diags, resourceVPCEndpointRead(ctx, d, meta)...)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting EC2 VPC Endpoint (%s) tags: %s", serviceName, err)
		}
	}

	return append(diags, resourceVPCEndpointRead(ctx, d, meta)...)
}
