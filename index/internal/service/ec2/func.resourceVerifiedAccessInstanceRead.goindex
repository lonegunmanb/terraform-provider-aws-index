package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVerifiedAccessInstanceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	output, err := findVerifiedAccessInstanceByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EC2 Verified Access Instance (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Verified Access Instance (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrCreationTime, output.CreationTime)
	if output.CidrEndpointsCustomSubDomain != nil {
		d.Set("cidr_endpoints_custom_subdomain", output.CidrEndpointsCustomSubDomain.SubDomain)
		d.Set("name_servers", output.CidrEndpointsCustomSubDomain.Nameservers)
	}
	d.Set(names.AttrDescription, output.Description)
	d.Set("fips_enabled", output.FipsEnabled)
	d.Set(names.AttrLastUpdatedTime, output.LastUpdatedTime)
	if v := output.VerifiedAccessTrustProviders; v != nil {
		if err := d.Set("verified_access_trust_providers", flattenVerifiedAccessTrustProviders(v)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting verified_access_trust_providers: %s", err)
		}
	} else {
		d.Set("verified_access_trust_providers", nil)
	}

	setTagsOut(ctx, output.Tags)

	return diags
}
