package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenIPAMPool(ctx context.Context, p awstypes.IpamPool, ignoreTagsConfig *tftags.IgnoreConfig) map[string]any {
	pool := make(map[string]any)

	pool["address_family"] = p.AddressFamily
	pool["allocation_default_netmask_length"] = aws.ToInt32(p.AllocationDefaultNetmaskLength)
	pool["allocation_max_netmask_length"] = aws.ToInt32(p.AllocationMaxNetmaskLength)
	pool["allocation_min_netmask_length"] = aws.ToInt32(p.AllocationMinNetmaskLength)
	pool["allocation_resource_tags"] = keyValueTags(ctx, tagsFromIPAMAllocationTags(p.AllocationResourceTags)).Map()
	pool[names.AttrARN] = aws.ToString(p.IpamPoolArn)
	pool["auto_import"] = aws.ToBool(p.AutoImport)
	pool["aws_service"] = p.AwsService
	pool[names.AttrDescription] = aws.ToString(p.Description)
	pool[names.AttrID] = aws.ToString(p.IpamPoolId)
	pool["ipam_scope_id"] = strings.Split(aws.ToString(p.IpamScopeArn), "/")[1]
	pool["ipam_scope_type"] = p.IpamScopeType
	pool["locale"] = aws.ToString(p.Locale)
	pool["pool_depth"] = aws.ToInt32(p.PoolDepth)
	pool["publicly_advertisable"] = aws.ToBool(p.PubliclyAdvertisable)
	pool["source_ipam_pool_id"] = aws.ToString(p.SourceIpamPoolId)
	pool[names.AttrState] = p.State
	if v := p.Tags; v != nil {
		pool[names.AttrTags] = keyValueTags(ctx, v).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map()
	}

	return pool
}
