package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"errors"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFleetUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := ec2.ModifyFleetInput{
			FleetId: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("context"); ok {
			input.Context = aws.String(v.(string))
		}

		// This argument is only valid for fleet_type of `maintain`, but was defaulted in the schema above, hence the extra check.
		if v, ok := d.GetOk("excess_capacity_termination_policy"); ok && v != "" && awstypes.FleetType(d.Get(names.AttrType).(string)) == awstypes.FleetTypeMaintain {
			input.ExcessCapacityTerminationPolicy = awstypes.FleetExcessCapacityTerminationPolicy(v.(string))
		}

		input.LaunchTemplateConfigs = expandFleetLaunchTemplateConfigRequests(d.Get("launch_template_config").([]any))

		// InvalidTargetCapacitySpecification: Currently we only support total target capacity modification.
		// TargetCapacitySpecification: expandEc2TargetCapacitySpecificationRequest(d.Get("target_capacity_specification").([]interface{})),
		input.TargetCapacitySpecification = &awstypes.TargetCapacitySpecificationRequest{
			TotalTargetCapacity: aws.Int32(int32(d.Get("target_capacity_specification.0.total_target_capacity").(int))),
		}

		_, err := conn.ModifyFleet(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying EC2 Fleet (%s): %s", d.Id(), err)
		}

		if err := waitFleet(ctx, conn, d.Id(), enum.Slice(awstypes.FleetStateCodeModifying), enum.Slice(awstypes.FleetStateCodeActive), d.Timeout(schema.TimeoutUpdate), 0); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 Fleet (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceFleetRead(ctx, d, meta)...)
}
