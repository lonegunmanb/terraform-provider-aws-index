package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTransitGatewayMulticastDomainDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	groups, err := findTransitGatewayMulticastGroups(ctx, conn, &ec2.SearchTransitGatewayMulticastGroupsInput{
		TransitGatewayMulticastDomainId: aws.String(d.Id()),
	})

	if tfresource.NotFound(err) {
		err = nil
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "listing EC2 Transit Gateway Multicast Groups (%s): %s", d.Id(), err)
	}

	for _, v := range groups {
		if aws.ToBool(v.GroupMember) {
			err := deregisterTransitGatewayMulticastGroupMember(ctx, conn, d.Id(), aws.ToString(v.GroupIpAddress), aws.ToString(v.NetworkInterfaceId))

			if err != nil {
				diags = sdkdiag.AppendFromErr(diags, err)
			}
		} else if aws.ToBool(v.GroupSource) {
			err := deregisterTransitGatewayMulticastGroupSource(ctx, conn, d.Id(), aws.ToString(v.GroupIpAddress), aws.ToString(v.NetworkInterfaceId))

			if err != nil {
				diags = sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	if diags.HasError() {
		return diags
	}

	associations, err := findTransitGatewayMulticastDomainAssociations(ctx, conn, &ec2.GetTransitGatewayMulticastDomainAssociationsInput{
		TransitGatewayMulticastDomainId: aws.String(d.Id()),
	})

	if tfresource.NotFound(err) {
		err = nil
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "listing EC2 Transit Gateway Multicast Domain Associations (%s): %s", d.Id(), err)
	}

	for _, v := range associations {
		err := disassociateTransitGatewayMulticastDomain(ctx, conn, d.Id(), aws.ToString(v.TransitGatewayAttachmentId), aws.ToString(v.Subnet.SubnetId), d.Timeout(schema.TimeoutDelete))

		if err != nil {
			diags = sdkdiag.AppendFromErr(diags, err)
		}
	}

	if diags.HasError() {
		return diags
	}

	log.Printf("[DEBUG] Deleting EC2 Transit Gateway Multicast Domain: %s", d.Id())
	input := ec2.DeleteTransitGatewayMulticastDomainInput{
		TransitGatewayMulticastDomainId: aws.String(d.Id()),
	}
	_, err = conn.DeleteTransitGatewayMulticastDomain(ctx, &input)

	if tfawserr.ErrCodeEquals(err, errCodeInvalidTransitGatewayMulticastDomainIdNotFound) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting EC2 Transit Gateway Multicast Domain (%s): %s", d.Id(), err)
	}

	if _, err := waitTransitGatewayMulticastDomainDeleted(ctx, conn, d.Id(), d.Timeout(schema.TimeoutDelete)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EC2 Transit Gateway Multicast Domain (%s) delete: %s", d.Id(), err)
	}

	return diags
}
