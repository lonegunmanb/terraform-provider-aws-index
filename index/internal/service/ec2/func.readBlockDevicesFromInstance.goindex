package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"crypto/sha1"
	"encoding/hex"
	"errors"
	"fmt"
	"log"
	"maps"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/backoff"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func readBlockDevicesFromInstance(ctx context.Context, d *schema.ResourceData, meta any, instance *awstypes.Instance, ds bool) (map[string]any, error) {
	blockDevices := make(map[string]any)
	blockDevices["ebs"] = make([]map[string]any, 0)
	blockDevices["root"] = nil
	// Ephemeral devices don't show up in BlockDeviceMappings or DescribeVolumes so we can't actually set them

	instanceBlockDevices := make(map[string]awstypes.InstanceBlockDeviceMapping)
	for _, bd := range instance.BlockDeviceMappings {
		if bd.Ebs != nil {
			instanceBlockDevices[aws.ToString(bd.Ebs.VolumeId)] = bd
		}
	}

	if len(instanceBlockDevices) == 0 {
		return nil, nil
	}

	volIDs := make([]string, 0, len(instanceBlockDevices))
	for volID := range instanceBlockDevices {
		volIDs = append(volIDs, volID)
	}

	// Need to call DescribeVolumes to get volume_size and volume_type for each
	// EBS block device
	conn := meta.(*conns.AWSClient).EC2Client(ctx)
	input := ec2.DescribeVolumesInput{
		VolumeIds: volIDs,
	}
	volResp, err := conn.DescribeVolumes(ctx, &input)
	if err != nil {
		return nil, err
	}

	defaultTagsConfig := meta.(*conns.AWSClient).DefaultTagsConfig(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	for _, vol := range volResp.Volumes {
		instanceBd := instanceBlockDevices[aws.ToString(vol.VolumeId)]
		bd := make(map[string]any)

		bd["volume_id"] = aws.ToString(vol.VolumeId)

		if instanceBd.Ebs != nil && instanceBd.Ebs.DeleteOnTermination != nil {
			bd[names.AttrDeleteOnTermination] = aws.ToBool(instanceBd.Ebs.DeleteOnTermination)
		}
		if vol.Size != nil {
			bd[names.AttrVolumeSize] = aws.ToInt32(vol.Size)
		}
		if vol.VolumeType != "" {
			bd[names.AttrVolumeType] = vol.VolumeType
		}
		if vol.Iops != nil {
			bd[names.AttrIOPS] = aws.ToInt32(vol.Iops)
		}
		if vol.Encrypted != nil {
			bd[names.AttrEncrypted] = aws.ToBool(vol.Encrypted)
		}
		if vol.KmsKeyId != nil {
			bd[names.AttrKMSKeyID] = aws.ToString(vol.KmsKeyId)
		}
		if vol.Throughput != nil {
			bd[names.AttrThroughput] = aws.ToInt32(vol.Throughput)
		}
		if instanceBd.DeviceName != nil {
			bd[names.AttrDeviceName] = aws.ToString(instanceBd.DeviceName)
		}
		if v, ok := d.GetOk("volume_tags"); (!ok || v == nil || len(v.(map[string]any)) == 0) && ds {
			bd[names.AttrTags] = keyValueTags(ctx, vol.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map()
		}

		if v, ok := d.GetOk("volume_tags"); (!ok || v == nil || len(v.(map[string]any)) == 0) && !ds {
			tags := keyValueTags(ctx, vol.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig)

			// default setup, in case we don't find config for the block device (don't resolve duplicates)
			bd[names.AttrTags] = tags.Map()
			bd[names.AttrTagsAll] = tags.Map()

			if v, ok := d.GetOk("ebs_block_device"); ok && v.(*schema.Set).Len() > 0 {
				ebdList := v.(*schema.Set).List()
				for _, ebd := range ebdList {
					ebd, ok := ebd.(map[string]any)
					if !ok {
						continue
					}

					if ebd[names.AttrDeviceName] == aws.ToString(instanceBd.DeviceName) {
						bd[names.AttrTags] = tags.ResolveDuplicates(ctx, defaultTagsConfig, ignoreTagsConfig, d, fmt.Sprintf("ebs_block_device[%s].tags", aws.ToString(instanceBd.DeviceName)), func(attr string, val cty.Value) bool {
							return val.GetAttr(names.AttrDeviceName).AsString() == attr
						}).Map()
						break
					}
				}
			}

			if v, ok := d.GetOk("root_block_device"); ok && len(v.([]any)) > 0 && blockDeviceIsRoot(instanceBd, instance) {
				bd[names.AttrTags] = tags.ResolveDuplicates(ctx, defaultTagsConfig, ignoreTagsConfig, d, "root_block_device[0].tags", nil).Map()
			}
		}

		if blockDeviceIsRoot(instanceBd, instance) {
			blockDevices["root"] = bd
		} else {
			if vol.SnapshotId != nil {
				bd[names.AttrSnapshotID] = aws.ToString(vol.SnapshotId)
			}

			blockDevices["ebs"] = append(blockDevices["ebs"].([]map[string]any), bd)
		}
	}
	// If we determine the root device is the only block device mapping
	// in the instance (including ephemerals) after returning from this function,
	// we'll need to set the ebs_block_device as a clone of the root device
	// with the snapshot_id populated; thus, we store the ID for safe-keeping
	if blockDevices["root"] != nil && len(blockDevices["ebs"].([]map[string]any)) == 0 {
		blockDevices[names.AttrSnapshotID] = volResp.Volumes[0].SnapshotId
	}

	return blockDevices, nil
}
