package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func networkACLRuleHash(v any) int {
	var buf bytes.Buffer

	tfMap := v.(map[string]any)
	fmt.Fprintf(&buf, "%d-", tfMap["from_port"].(int))
	fmt.Fprintf(&buf, "%d-", tfMap["to_port"].(int))
	fmt.Fprintf(&buf, "%d-", tfMap["rule_no"].(int))
	fmt.Fprintf(&buf, "%s-", strings.ToLower(tfMap[names.AttrAction].(string)))

	// The AWS network ACL API only speaks protocol numbers, and that's
	// all we store. Never hash a protocol name.
	protocolNumber, _ := networkACLProtocolNumber(tfMap[names.AttrProtocol].(string))
	fmt.Fprintf(&buf, "%d-", protocolNumber)

	if v, ok := tfMap[names.AttrCIDRBlock]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}
	if v, ok := tfMap["ipv6_cidr_block"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}
	if v, ok := tfMap["icmp_type"]; ok {
		fmt.Fprintf(&buf, "%d-", v.(int))
	}
	if v, ok := tfMap["icmp_code"]; ok {
		fmt.Fprintf(&buf, "%d-", v.(int))
	}

	return create.StringHashcode(buf.String())
}
