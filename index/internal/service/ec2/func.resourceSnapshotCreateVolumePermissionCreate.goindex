package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSnapshotCreateVolumePermissionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	snapshotID := d.Get(names.AttrSnapshotID).(string)
	accountID := d.Get(names.AttrAccountID).(string)
	id := ebsSnapshotCreateVolumePermissionCreateResourceID(snapshotID, accountID)
	input := ec2.ModifySnapshotAttributeInput{
		Attribute: awstypes.SnapshotAttributeNameCreateVolumePermission,
		CreateVolumePermission: &awstypes.CreateVolumePermissionModifications{
			Add: []awstypes.CreateVolumePermission{
				{UserId: aws.String(accountID)},
			},
		},
		SnapshotId: aws.String(snapshotID),
	}

	_, err := conn.ModifySnapshotAttribute(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EBS Snapshot CreateVolumePermission (%s): %s", id, err)
	}

	d.SetId(id)

	_, err = tfresource.RetryWhenNotFound(ctx, d.Timeout(schema.TimeoutCreate), func() (any, error) {
		return findCreateSnapshotCreateVolumePermissionByTwoPartKey(ctx, conn, snapshotID, accountID)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EBS Snapshot CreateVolumePermission create (%s): %s", d.Id(), err)
	}

	return diags
}
