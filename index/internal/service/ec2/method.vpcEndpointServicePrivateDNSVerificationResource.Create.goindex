package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *vpcEndpointServicePrivateDNSVerificationResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data vpcEndpointServicePrivateDNSVerificationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().EC2Client(ctx)

	input := &ec2.StartVpcEndpointServicePrivateDnsVerificationInput{
		ServiceId: fwflex.StringFromFramework(ctx, data.ServiceID),
	}

	_, err := conn.StartVpcEndpointServicePrivateDnsVerification(ctx, input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("starting VPC Endpoint Service Private DNS Verification (%s)", data.ServiceID.ValueString()), err.Error())

		return
	}

	if data.WaitForVerification.ValueBool() {
		if _, err := waitVPCEndpointServicePrivateDNSNameVerified(ctx, conn, data.ServiceID.ValueString(), r.CreateTimeout(ctx, data.Timeouts)); err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for VPC Endpoint Service Private DNS Verification (%s)", data.ServiceID.ValueString()), err.Error())

			return
		}
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
