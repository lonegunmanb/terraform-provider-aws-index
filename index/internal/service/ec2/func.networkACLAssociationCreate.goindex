package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func networkACLAssociationCreate(ctx context.Context, conn *ec2.Client, naclID, subnetID string) (string, error) {
	association, err := findNetworkACLAssociationBySubnetID(ctx, conn, subnetID)

	if err != nil {
		return "", fmt.Errorf("reading EC2 Network ACL Association for EC2 Subnet (%s): %w", subnetID, err)
	}

	input := &ec2.ReplaceNetworkAclAssociationInput{
		AssociationId: association.NetworkAclAssociationId,
		NetworkAclId:  aws.String(naclID),
	}

	log.Printf("[DEBUG] Creating EC2 Network ACL Association: %#v", input)
	outputRaw, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, ec2PropagationTimeout, func() (any, error) {
		return conn.ReplaceNetworkAclAssociation(ctx, input)
	}, errCodeInvalidAssociationIDNotFound)

	if err != nil {
		return "", fmt.Errorf("creating EC2 Network ACL (%s) Association: %w", naclID, err)
	}

	return aws.ToString(outputRaw.(*ec2.ReplaceNetworkAclAssociationOutput).NewAssociationId), nil
}
