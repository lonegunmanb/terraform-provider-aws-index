package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newEBSFastSnapshotRestoreResource,
			TypeName: "aws_ebs_fast_snapshot_restore",
			Name:     "EBS Fast Snapshot Restore",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newCapacityBlockReservationResource,
			TypeName: "aws_ec2_capacity_block_reservation",
			Name:     "Capacity Block Reservation",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDefaultCreditSpecificationResource,
			TypeName: "aws_ec2_default_credit_specification",
			Name:     "Default Credit Specification",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newInstanceConnectEndpointResource,
			TypeName: "aws_ec2_instance_connect_endpoint",
			Name:     "Instance Connect Endpoint",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newInstanceMetadataDefaultsResource,
			TypeName: "aws_ec2_instance_metadata_defaults",
			Name:     "Instance Metadata Defaults",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTransitGatewayDefaultRouteTableAssociationResource,
			TypeName: "aws_ec2_transit_gateway_default_route_table_association",
			Name:     "Transit Gateway Default Route Table Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTransitGatewayDefaultRouteTablePropagationResource,
			TypeName: "aws_ec2_transit_gateway_default_route_table_propagation",
			Name:     "Transit Gateway Default Route Table Propagation",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newEIPDomainNameResource,
			TypeName: "aws_eip_domain_name",
			Name:     "EIP Domain Name",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newNATGatewayEIPAssociationResource,
			TypeName: "aws_nat_gateway_eip_association",
			Name:     "VPC NAT Gateway EIP Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newNetworkInterfacePermissionResource,
			TypeName: "aws_network_interface_permission",
			Name:     "Network Interface Permission",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCBlockPublicAccessExclusionResource,
			TypeName: "aws_vpc_block_public_access_exclusion",
			Name:     "VPC Block Public Access Exclusion",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCBlockPublicAccessOptionsResource,
			TypeName: "aws_vpc_block_public_access_options",
			Name:     "VPC Block Public Access Options",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCEndpointPrivateDNSResource,
			TypeName: "aws_vpc_endpoint_private_dns",
			Name:     "VPC Endpoint Private DNS",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCEndpointServicePrivateDNSVerificationResource,
			TypeName: "aws_vpc_endpoint_service_private_dns_verification",
			Name:     "VPC Endpoint Service Private DNS Verification",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCRouteServerResource,
			TypeName: "aws_vpc_route_server",
			Name:     "VPC Route Server",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: "route_server_id",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCRouteServerEndpointResource,
			TypeName: "aws_vpc_route_server_endpoint",
			Name:     "VPC Route Server Endpoint",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: "route_server_endpoint_id",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCRouteServerPeerResource,
			TypeName: "aws_vpc_route_server_peer",
			Name:     "VPC Route Server Peer",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: "route_server_peer_id",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCRouteServerPropagationResource,
			TypeName: "aws_vpc_route_server_propagation",
			Name:     "VPC Route Server Propagation",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newVPCRouteServerVPCAssociationResource,
			TypeName: "aws_vpc_route_server_vpc_association",
			Name:     "VPC Route Server VPC Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSecurityGroupEgressRuleResource,
			TypeName: "aws_vpc_security_group_egress_rule",
			Name:     "Security Group Egress Rule",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSecurityGroupIngressRuleResource,
			TypeName: "aws_vpc_security_group_ingress_rule",
			Name:     "Security Group Ingress Rule",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newSecurityGroupVPCAssociationResource,
			TypeName: "aws_vpc_security_group_vpc_association",
			Name:     "Security Group VPC Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute(names.AttrVPCID, true),
				inttypes.StringIdentityAttribute("security_group_id", true),
			}),
			Import: inttypes.FrameworkImport{
				WrappedImport: true,
				ImportID:      securityGroupVPCAssociationImportID{},
			},
		},
	}
}
