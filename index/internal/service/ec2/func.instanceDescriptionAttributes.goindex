package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func instanceDescriptionAttributes(ctx context.Context, d *schema.ResourceData, meta any, instance *awstypes.Instance) error {
	d.SetId(aws.ToString(instance.InstanceId))
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	instanceType := string(instance.InstanceType)
	instanceTypeInfo, err := findInstanceTypeByName(ctx, conn, instanceType)

	if err != nil {
		return fmt.Errorf("reading EC2 Instance Type (%s): %w", instanceType, err)
	}

	// Set the easy attributes
	d.Set("instance_state", instance.State.Name)
	d.Set(names.AttrAvailabilityZone, instance.Placement.AvailabilityZone)
	d.Set("placement_group", instance.Placement.GroupName)
	d.Set("placement_partition_number", instance.Placement.PartitionNumber)
	d.Set("tenancy", instance.Placement.Tenancy)
	d.Set("host_id", instance.Placement.HostId)
	d.Set("host_resource_group_arn", instance.Placement.HostResourceGroupArn)

	d.Set("ami", instance.ImageId)
	d.Set(names.AttrInstanceType, instanceType)
	d.Set("key_name", instance.KeyName)
	d.Set("launch_time", instance.LaunchTime.Format(time.RFC3339))
	d.Set("outpost_arn", instance.OutpostArn)
	d.Set("private_dns", instance.PrivateDnsName)
	d.Set("private_ip", instance.PrivateIpAddress)
	d.Set("public_dns", instance.PublicDnsName)
	d.Set("public_ip", instance.PublicIpAddress)

	if instance.IamInstanceProfile != nil && instance.IamInstanceProfile.Arn != nil {
		name, err := instanceProfileARNToName(aws.ToString(instance.IamInstanceProfile.Arn))

		if err != nil {
			return fmt.Errorf("setting iam_instance_profile: %w", err)
		}

		d.Set("iam_instance_profile", name)
	} else {
		d.Set("iam_instance_profile", nil)
	}

	// iterate through network interfaces, and set subnet, network_interface, public_addr
	if len(instance.NetworkInterfaces) > 0 {
		for _, ni := range instance.NetworkInterfaces {
			if aws.ToInt32(ni.Attachment.DeviceIndex) == 0 {
				d.Set(names.AttrSubnetID, ni.SubnetId)
				d.Set(names.AttrNetworkInterfaceID, ni.NetworkInterfaceId)
				d.Set("associate_public_ip_address", ni.Association != nil)

				secondaryIPs := make([]string, 0, len(ni.PrivateIpAddresses))
				for _, ip := range ni.PrivateIpAddresses {
					if !aws.ToBool(ip.Primary) {
						secondaryIPs = append(secondaryIPs, aws.ToString(ip.PrivateIpAddress))
					}
				}
				if err := d.Set("secondary_private_ips", secondaryIPs); err != nil {
					return fmt.Errorf("setting secondary_private_ips: %w", err)
				}

				ipV6Addresses := make([]string, 0, len(ni.Ipv6Addresses))
				for _, ip := range ni.Ipv6Addresses {
					ipV6Addresses = append(ipV6Addresses, aws.ToString(ip.Ipv6Address))
				}
				if err := d.Set("ipv6_addresses", ipV6Addresses); err != nil {
					return fmt.Errorf("setting ipv6_addresses: %w", err)
				}
			}
		}
	} else {
		d.Set(names.AttrSubnetID, instance.SubnetId)
		d.Set(names.AttrNetworkInterfaceID, "")
	}

	d.Set("ebs_optimized", instance.EbsOptimized)
	if aws.ToString(instance.SubnetId) != "" {
		d.Set("source_dest_check", instance.SourceDestCheck)
	}

	if instance.Monitoring != nil {
		monitoringState := string(instance.Monitoring.State)
		d.Set("monitoring", monitoringState == names.AttrEnabled || monitoringState == "pending")
	}

	setTagsOut(ctx, instance.Tags)

	// Security Groups
	if err := readSecurityGroups(ctx, d, instance, conn); err != nil {
		return fmt.Errorf("reading EC2 Instance (%s): %w", aws.ToString(instance.InstanceId), err)
	}

	// Block devices
	if err := readBlockDevices(ctx, d, meta, instance, true); err != nil {
		return fmt.Errorf("reading EC2 Instance (%s): %w", aws.ToString(instance.InstanceId), err)
	}
	if _, ok := d.GetOk("ephemeral_block_device"); !ok {
		d.Set("ephemeral_block_device", []any{})
	}

	// Lookup and Set Instance Attributes
	{
		input := ec2.DescribeInstanceAttributeInput{
			Attribute:  awstypes.InstanceAttributeNameDisableApiStop,
			InstanceId: aws.String(d.Id()),
		}
		attr, err := conn.DescribeInstanceAttribute(ctx, &input)
		if err != nil {
			return fmt.Errorf("getting attribute (%s): %w", awstypes.InstanceAttributeNameDisableApiStop, err)
		}
		d.Set("disable_api_stop", attr.DisableApiStop.Value)
	}
	{
		input := ec2.DescribeInstanceAttributeInput{
			Attribute:  awstypes.InstanceAttributeNameDisableApiTermination,
			InstanceId: aws.String(d.Id()),
		}
		attr, err := conn.DescribeInstanceAttribute(ctx, &input)
		if err != nil {
			return fmt.Errorf("getting attribute (%s): %w", awstypes.InstanceAttributeNameDisableApiTermination, err)
		}
		d.Set("disable_api_termination", attr.DisableApiTermination.Value)
	}
	{
		input := ec2.DescribeInstanceAttributeInput{
			Attribute:  awstypes.InstanceAttributeNameUserData,
			InstanceId: aws.String(d.Id()),
		}
		attr, err := conn.DescribeInstanceAttribute(ctx, &input)
		if err != nil {
			return fmt.Errorf("getting attribute (%s): %w", awstypes.InstanceAttributeNameUserData, err)
		}
		if attr != nil && attr.UserData != nil && attr.UserData.Value != nil {
			d.Set("user_data", userDataHashSum(aws.ToString(attr.UserData.Value)))
			if d.Get("get_user_data").(bool) {
				d.Set("user_data_base64", attr.UserData.Value)
			}
		}
	}

	// AWS Standard will return InstanceCreditSpecification.NotSupported errors for EC2 Instance IDs outside T2 and T3 instance types
	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/8055
	if aws.ToBool(instanceTypeInfo.BurstablePerformanceSupported) {
		instanceCreditSpecification, err := findInstanceCreditSpecificationByID(ctx, conn, d.Id())

		// Ignore UnsupportedOperation errors for AWS China and GovCloud (US).
		// Reference: https://github.com/hashicorp/terraform-provider-aws/pull/4362.
		if tfawserr.ErrCodeEquals(err, errCodeUnsupportedOperation) {
			err = nil
		}

		if err != nil {
			return fmt.Errorf("reading EC2 Instance (%s) credit specification: %w", d.Id(), err)
		}

		if instanceCreditSpecification != nil {
			if err := d.Set("credit_specification", []any{flattenInstanceCreditSpecification(instanceCreditSpecification)}); err != nil {
				return fmt.Errorf("setting credit_specification: %w", err)
			}
		} else {
			d.Set("credit_specification", nil)
		}
	} else {
		d.Set("credit_specification", nil)
	}

	if err := d.Set("enclave_options", flattenEnclaveOptions(instance.EnclaveOptions)); err != nil {
		return fmt.Errorf("setting enclave_options: %w", err)
	}

	if instance.MaintenanceOptions != nil {
		if err := d.Set("maintenance_options", []any{flattenInstanceMaintenanceOptions(instance.MaintenanceOptions)}); err != nil {
			return fmt.Errorf("setting maintenance_options: %w", err)
		}
	} else {
		d.Set("maintenance_options", nil)
	}

	if err := d.Set("metadata_options", flattenInstanceMetadataOptions(instance.MetadataOptions)); err != nil {
		return fmt.Errorf("setting metadata_options: %w", err)
	}

	if instance.PrivateDnsNameOptions != nil {
		if err := d.Set("private_dns_name_options", []any{flattenPrivateDNSNameOptionsResponse(instance.PrivateDnsNameOptions)}); err != nil {
			return fmt.Errorf("setting private_dns_name_options: %w", err)
		}
	} else {
		d.Set("private_dns_name_options", nil)
	}

	return nil
}
