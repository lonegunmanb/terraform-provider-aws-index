package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceNetworkInsightsAnalysis() *schema.Resource {
	return &schema.Resource{
		ReadWithoutTimeout: dataSourceNetworkInsightsAnalysisRead,

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"alternate_path_hints": {
					Type:     schema.TypeList,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"component_arn": {
								Type:     schema.TypeString,
								Computed: true,
							},
							"component_id": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"explanations":   networkInsightsAnalysisExplanationsSchema(),
				names.AttrFilter: customFiltersSchema(),
				"filter_in_arns": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"forward_path_components": networkInsightsAnalysisPathComponentsSchema(),
				"network_insights_analysis_id": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				"network_insights_path_id": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"path_found": {
					Type:     schema.TypeBool,
					Computed: true,
				},
				"return_path_components": networkInsightsAnalysisPathComponentsSchema(),
				"start_date": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrStatus: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrStatusMessage: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrTags: tftags.TagsSchemaComputed(),
				"warning_message": {
					Type:     schema.TypeString,
					Computed: true,
				},
			}
		},
	}
}
