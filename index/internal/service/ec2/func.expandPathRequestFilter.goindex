package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPathRequestFilter(tfMap map[string]any) *awstypes.PathRequestFilter {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.PathRequestFilter{}

	if v, ok := tfMap["destination_address"].(string); ok && v != "" {
		apiObject.DestinationAddress = aws.String(v)
	}
	if v, ok := tfMap["destination_port_range"].([]any); ok && len(v) > 0 {
		apiObject.DestinationPortRange = expandRequestFilterPortRange(v[0].(map[string]any))
	}
	if v, ok := tfMap["source_address"].(string); ok && v != "" {
		apiObject.SourceAddress = aws.String(v)
	}
	if v, ok := tfMap["source_port_range"].([]any); ok && len(v) > 0 {
		apiObject.SourcePortRange = expandRequestFilterPortRange(v[0].(map[string]any))
	}

	return apiObject
}
