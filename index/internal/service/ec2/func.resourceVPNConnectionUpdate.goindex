package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPNConnectionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	if d.HasChanges("customer_gateway_id", names.AttrTransitGatewayID, "vpn_gateway_id") {
		input := ec2.ModifyVpnConnectionInput{
			VpnConnectionId: aws.String(d.Id()),
		}

		if d.HasChange("customer_gateway_id") {
			input.CustomerGatewayId = aws.String(d.Get("customer_gateway_id").(string))
		}

		if hasChange, v := d.HasChange(names.AttrTransitGatewayID), d.Get(names.AttrTransitGatewayID).(string); hasChange && v != "" {
			input.TransitGatewayId = aws.String(v)
		}

		if hasChange, v := d.HasChange("vpn_gateway_id"), d.Get("vpn_gateway_id").(string); hasChange && v != "" {
			input.VpnGatewayId = aws.String(v)
		}

		_, err := conn.ModifyVpnConnection(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying EC2 VPN Connection (%s): %s", d.Id(), err)
		}

		if _, err := waitVPNConnectionUpdated(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 VPN Connection (%s) update: %s", d.Id(), err)
		}
	}

	if d.HasChanges("local_ipv4_network_cidr", "local_ipv6_network_cidr", "remote_ipv4_network_cidr", "remote_ipv6_network_cidr") {
		input := ec2.ModifyVpnConnectionOptionsInput{
			VpnConnectionId: aws.String(d.Id()),
		}

		if d.HasChange("local_ipv4_network_cidr") {
			input.LocalIpv4NetworkCidr = aws.String(d.Get("local_ipv4_network_cidr").(string))
		}

		if d.HasChange("local_ipv6_network_cidr") {
			input.LocalIpv6NetworkCidr = aws.String(d.Get("local_ipv6_network_cidr").(string))
		}

		if d.HasChange("remote_ipv4_network_cidr") {
			input.RemoteIpv4NetworkCidr = aws.String(d.Get("remote_ipv4_network_cidr").(string))
		}

		if d.HasChange("remote_ipv6_network_cidr") {
			input.RemoteIpv6NetworkCidr = aws.String(d.Get("remote_ipv6_network_cidr").(string))
		}

		_, err := conn.ModifyVpnConnectionOptions(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying EC2 VPN Connection (%s) connection options: %s", d.Id(), err)
		}

		if _, err := waitVPNConnectionUpdated(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 VPN Connection (%s) connection options update: %s", d.Id(), err)
		}
	}

	for i, prefix := range []string{"tunnel1_", "tunnel2_"} {
		if options, address, pskStorageChanged := expandModifyVPNTunnelOptionsSpecification(d, prefix), d.Get(prefix+names.AttrAddress).(string), d.HasChange("preshared_key_storage"); (options != nil || pskStorageChanged) && address != "" {
			input := ec2.ModifyVpnTunnelOptionsInput{
				VpnConnectionId:           aws.String(d.Id()),
				VpnTunnelOutsideIpAddress: aws.String(address),
			}

			if pskStorageChanged {
				input.PreSharedKeyStorage = aws.String(d.Get("preshared_key_storage").(string))
			}

			if options != nil {
				input.TunnelOptions = options
			} else {
				input.TunnelOptions = &awstypes.ModifyVpnTunnelOptionsSpecification{}
			}

			_, err := conn.ModifyVpnTunnelOptions(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "modifying EC2 VPN Connection (%s) tunnel (%d) options: %s", d.Id(), i+1, err)
			}

			if _, err := waitVPNConnectionUpdated(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for EC2 VPN Connection (%s) tunnel (%d) options update: %s", d.Id(), i+1, err)
			}
		}
	}

	return append(diags, resourceVPNConnectionRead(ctx, d, meta)...)
}
