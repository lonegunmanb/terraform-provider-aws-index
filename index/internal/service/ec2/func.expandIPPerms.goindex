package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIPPerms(group *awstypes.SecurityGroup, configured []any) ([]awstypes.IpPermission, error) {
	perms := make([]awstypes.IpPermission, len(configured))
	for i, mRaw := range configured {
		var perm awstypes.IpPermission
		m := mRaw.(map[string]any)

		perm.IpProtocol = aws.String(protocolForValue(m[names.AttrProtocol].(string)))

		if protocol, fromPort, toPort := aws.ToString(perm.IpProtocol), m["from_port"].(int), m["to_port"].(int); protocol != "-1" {
			perm.FromPort = aws.Int32(int32(fromPort))
			perm.ToPort = aws.Int32(int32(toPort))
		} else if fromPort != 0 || toPort != 0 {
			// When protocol is "-1", AWS won't store any ports for the
			// rule, but also won't error if the user specifies ports other
			// than '0'. Force the user to make a deliberate '0' port
			// choice when specifying a "-1" protocol, and tell them about
			// AWS's behavior in the error message.
			return nil, fmt.Errorf(
				"from_port (%d) and to_port (%d) must both be 0 to use the 'ALL' \"-1\" protocol!",
				fromPort, toPort)
		}

		var groups []string
		if raw, ok := m[names.AttrSecurityGroups]; ok {
			list := raw.(*schema.Set).List()
			for _, v := range list {
				groups = append(groups, v.(string))
			}
		}
		if v, ok := m["self"]; ok && v.(bool) {
			groups = append(groups, aws.ToString(group.GroupId))
		}

		if len(groups) > 0 {
			perm.UserIdGroupPairs = make([]awstypes.UserIdGroupPair, len(groups))
			for i, id := range groups {
				ownerId := ""
				if items := strings.Split(id, "/"); len(items) > 1 {
					ownerId, id = items[0], items[1]
				}

				perm.UserIdGroupPairs[i] = awstypes.UserIdGroupPair{
					GroupId: aws.String(id),
				}

				if ownerId != "" {
					perm.UserIdGroupPairs[i].UserId = aws.String(ownerId)
				}
			}
		}

		if raw, ok := m["cidr_blocks"]; ok {
			list := raw.([]any)
			for _, v := range list {
				perm.IpRanges = append(perm.IpRanges, awstypes.IpRange{CidrIp: aws.String(v.(string))})
			}
		}
		if raw, ok := m["ipv6_cidr_blocks"]; ok {
			list := raw.([]any)
			for _, v := range list {
				perm.Ipv6Ranges = append(perm.Ipv6Ranges, awstypes.Ipv6Range{CidrIpv6: aws.String(v.(string))})
			}
		}

		if raw, ok := m["prefix_list_ids"]; ok {
			list := raw.([]any)
			for _, v := range list {
				perm.PrefixListIds = append(perm.PrefixListIds, awstypes.PrefixListId{PrefixListId: aws.String(v.(string))})
			}
		}

		if raw, ok := m[names.AttrDescription]; ok {
			description := raw.(string)
			if description != "" {
				for i := range perm.IpRanges {
					perm.IpRanges[i].Description = aws.String(description)
				}
				for i := range perm.Ipv6Ranges {
					perm.Ipv6Ranges[i].Description = aws.String(description)
				}
				for i := range perm.PrefixListIds {
					perm.PrefixListIds[i].Description = aws.String(description)
				}
				for i := range perm.UserIdGroupPairs {
					perm.UserIdGroupPairs[i].Description = aws.String(description)
				}
			}
		}

		perms[i] = perm
	}

	return perms, nil
}
