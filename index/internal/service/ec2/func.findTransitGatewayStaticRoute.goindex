package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"iter"
	"slices"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findTransitGatewayStaticRoute(ctx context.Context, conn *ec2.Client, transitGatewayRouteTableID, destination string) (*awstypes.TransitGatewayRoute, error) {
	input := ec2.SearchTransitGatewayRoutesInput{
		Filters: newAttributeFilterList(map[string]string{
			names.AttrType:             string(awstypes.TransitGatewayRouteTypeStatic),
			"route-search.exact-match": destination,
		}),
		TransitGatewayRouteTableId: aws.String(transitGatewayRouteTableID),
	}

	output, err := findTransitGatewayRoutes(ctx, conn, &input)

	if err != nil {
		return nil, err
	}

	for _, route := range output {
		if v := aws.ToString(route.DestinationCidrBlock); types.CIDRBlocksEqual(v, destination) {
			if state := route.State; state == awstypes.TransitGatewayRouteStateDeleted {
				return nil, &retry.NotFoundError{
					Message:     string(state),
					LastRequest: &input,
				}
			}

			route.DestinationCidrBlock = aws.String(types.CanonicalCIDRBlock(v))

			return &route, nil
		}
	}

	return nil, &retry.NotFoundError{}
}
