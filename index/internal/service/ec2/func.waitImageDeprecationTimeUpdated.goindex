package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitImageDeprecationTimeUpdated(ctx context.Context, conn *ec2.Client, imageID, expectedValue string) error {
	expected, err := time.Parse(time.RFC3339, expectedValue)
	if err != nil {
		return err
	}
	expected = expected.Round(time.Minute)

	return tfresource.WaitUntil(ctx, imageDeprecationPropagationTimeout, func() (bool, error) {
		output, err := findImageByID(ctx, conn, imageID)

		if tfresource.NotFound(err) {
			return false, nil
		}

		if err != nil {
			return false, err
		}

		if output.DeprecationTime == nil {
			return false, nil
		}

		dt, err := time.Parse(time.RFC3339, *output.DeprecationTime)
		if err != nil {
			return false, err
		}
		dt = dt.Round(time.Minute)

		return expected.Equal(dt), nil
	},
		tfresource.WaitOpts{
			Delay:      amiRetryDelay,
			MinTimeout: amiRetryMinTimeout,
		},
	)
}
