package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	multierror "github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNetworkInterfaceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	outputRaw, err := tfresource.RetryWhenNewResourceNotFound(ctx, ec2PropagationTimeout, func() (any, error) {
		return findNetworkInterfaceByID(ctx, conn, d.Id())
	}, d.IsNewResource())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EC2 Network Interface (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 Network Interface (%s): %s", d.Id(), err)
	}

	eni := outputRaw.(*types.NetworkInterface)

	ownerID := aws.ToString(eni.OwnerId)
	arn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "ec2",
		Region:    meta.(*conns.AWSClient).Region(ctx),
		AccountID: ownerID,
		Resource:  "network-interface/" + d.Id(),
	}.String()
	d.Set(names.AttrARN, arn)
	if eni.Attachment != nil {
		if err := d.Set("attachment", []any{flattenNetworkInterfaceAttachment(eni.Attachment)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting attachment: %s", err)
		}
	} else {
		d.Set("attachment", nil)
	}
	d.Set(names.AttrDescription, eni.Description)
	d.Set("interface_type", eni.InterfaceType)
	if err := d.Set("ipv4_prefixes", flattenIPv4PrefixSpecifications(eni.Ipv4Prefixes)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ipv4_prefixes: %s", err)
	}
	d.Set("ipv4_prefix_count", len(eni.Ipv4Prefixes))
	d.Set("ipv6_address_count", len(eni.Ipv6Addresses))
	if len(eni.Ipv6Addresses) > 0 {
		if err := d.Set("enable_primary_ipv6", eni.Ipv6Addresses[0].IsPrimaryIpv6); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting enable_primary_ipv6: %s", err)
		}
	}
	if err := d.Set("ipv6_address_list", flattenNetworkInterfaceIPv6Addresses(eni.Ipv6Addresses)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ipv6 address list: %s", err)
	}
	if err := d.Set("ipv6_addresses", flattenNetworkInterfaceIPv6Addresses(eni.Ipv6Addresses)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ipv6_addresses: %s", err)
	}
	if err := d.Set("ipv6_prefixes", flattenIPv6PrefixSpecifications(eni.Ipv6Prefixes)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ipv6_prefixes: %s", err)
	}
	d.Set("ipv6_prefix_count", len(eni.Ipv6Prefixes))
	d.Set("mac_address", eni.MacAddress)
	d.Set("outpost_arn", eni.OutpostArn)
	d.Set(names.AttrOwnerID, ownerID)
	d.Set("private_dns_name", eni.PrivateDnsName)
	d.Set("private_ip", eni.PrivateIpAddress)
	if err := d.Set("private_ips", flattenNetworkInterfacePrivateIPAddresses(eni.PrivateIpAddresses)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting private_ips: %s", err)
	}
	d.Set("private_ips_count", len(eni.PrivateIpAddresses)-1)
	if err := d.Set("private_ip_list", flattenNetworkInterfacePrivateIPAddresses(eni.PrivateIpAddresses)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting private_ip_list: %s", err)
	}
	if err := d.Set(names.AttrSecurityGroups, flattenGroupIdentifiers(eni.Groups)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting security_groups: %s", err)
	}
	d.Set("source_dest_check", eni.SourceDestCheck)
	d.Set(names.AttrSubnetID, eni.SubnetId)

	setTagsOut(ctx, eni.TagSet)

	return diags
}
