package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *ebsFastSnapshotRestoreResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data ebsFastSnapshotRestoreResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().EC2Client(ctx)

	availabilityZone := data.AvailabilityZone.ValueString()
	snapshotID := data.SnapshotID.ValueString()
	input := ec2.EnableFastSnapshotRestoresInput{
		AvailabilityZones: []string{availabilityZone},
		SourceSnapshotIds: []string{snapshotID},
	}

	output, err := conn.EnableFastSnapshotRestores(ctx, &input)

	if err == nil && output != nil {
		err = enableFastSnapshotRestoreItemsError(output.Unsuccessful)
	}

	if err != nil {
		response.Diagnostics.AddError("creating EC2 EBS Fast Snapshot Restore", err.Error())

		return
	}

	// Set values for unknowns.
	id, err := data.setID()
	if err != nil {
		response.Diagnostics.AddError("creating EC2 EBS Fast Snapshot Restore", err.Error())
		return
	}
	data.ID = types.StringValue(id)

	v, err := waitFastSnapshotRestoreCreated(ctx, conn, availabilityZone, snapshotID, r.CreateTimeout(ctx, data.Timeouts))

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("waiting for EC2 EBS Fast Snapshot Restore (%s) create", data.ID.ValueString()), err.Error())

		return
	}

	data.State = fwflex.StringValueToFramework(ctx, v.State)

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
