package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFleetDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	log.Printf("[DEBUG] Deleting EC2 Fleet: %s", d.Id())
	input := ec2.DeleteFleetsInput{
		FleetIds:           []string{d.Id()},
		TerminateInstances: aws.Bool(d.Get("terminate_instances").(bool)),
	}
	output, err := conn.DeleteFleets(ctx, &input)

	if err == nil && output != nil {
		err = deleteFleetsError(output.UnsuccessfulFleetDeletions)
	}

	if tfawserr.ErrCodeEquals(err, errCodeInvalidFleetIdNotFound) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting EC2 Fleet (%s): %s", d.Id(), err)
	}

	// Limiting waiter to non-instant fleet types.
	// `instant` fleet state is eventually consistent and can take 48 hours to update.
	if d.Get(names.AttrType) != "instant" {
		delay := 0 * time.Second
		pendingStates := enum.Slice(awstypes.FleetStateCodeActive)
		targetStates := enum.Slice(awstypes.FleetStateCodeDeleted)
		if d.Get("terminate_instances").(bool) {
			pendingStates = append(pendingStates, string(awstypes.FleetStateCodeDeletedTerminatingInstances))
			delay = 5 * time.Minute
		} else {
			targetStates = append(targetStates, string(awstypes.FleetStateCodeDeletedRunning))
		}

		if err := waitFleet(ctx, conn, d.Id(), pendingStates, targetStates, d.Timeout(schema.TimeoutDelete), delay); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EC2 Fleet (%s) delete: %s", d.Id(), err)
		}
	}

	return diags
}
