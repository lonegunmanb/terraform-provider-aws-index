package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDefaultVPCDHCPOptionsCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	input := &ec2.DescribeDhcpOptionsInput{}

	input.Filters = append(input.Filters,
		newFilter(names.AttrKey, []string{"domain-name"}),
		newFilter(names.AttrValue, []string{meta.(*conns.AWSClient).EC2RegionalPrivateDNSSuffix(ctx)}),
		newFilter(names.AttrKey, []string{"domain-name-servers"}),
		newFilter(names.AttrValue, []string{"AmazonProvidedDNS"}),
	)

	if v, ok := d.GetOk(names.AttrOwnerID); ok {
		input.Filters = append(input.Filters, newAttributeFilterList(map[string]string{
			"owner-id": v.(string),
		})...)
	}

	dhcpOptions, err := findDHCPOptions(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 Default DHCP Options Set: %s", err)
	}

	d.SetId(aws.ToString(dhcpOptions.DhcpOptionsId))

	return append(diags, resourceVPCDHCPOptionsUpdate(ctx, d, meta)...)
}
