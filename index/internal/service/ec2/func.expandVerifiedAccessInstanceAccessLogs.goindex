package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVerifiedAccessInstanceAccessLogs(accessLogs []any) *types.VerifiedAccessLogOptions {
	if len(accessLogs) == 0 || accessLogs[0] == nil {
		return nil
	}

	tfMap, ok := accessLogs[0].(map[string]any)
	if !ok {
		return nil
	}

	result := &types.VerifiedAccessLogOptions{}

	if v, ok := tfMap[names.AttrCloudWatchLogs].([]any); ok && len(v) > 0 {
		result.CloudWatchLogs = expandVerifiedAccessLogCloudWatchLogs(v)
	}

	if v, ok := tfMap["include_trust_context"].(bool); ok {
		result.IncludeTrustContext = aws.Bool(v)
	}

	if v, ok := tfMap["kinesis_data_firehose"].([]any); ok && len(v) > 0 {
		result.KinesisDataFirehose = expandVerifiedAccessLogKinesisDataFirehose(v)
	}

	if v, ok := tfMap["log_version"].(string); ok && v != "" {
		result.LogVersion = aws.String(v)
	}

	if v, ok := tfMap["s3"].([]any); ok && len(v) > 0 {
		result.S3 = expandVerifiedAccessLogS3(v)
	}

	return result
}
