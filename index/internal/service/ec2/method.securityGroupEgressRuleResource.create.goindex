package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
)
func (r *securityGroupEgressRuleResource) create(ctx context.Context, data *securityGroupRuleResourceModel) (string, error) {
	conn := r.Meta().EC2Client(ctx)

	input := &ec2.AuthorizeSecurityGroupEgressInput{
		GroupId:           fwflex.StringFromFramework(ctx, data.SecurityGroupID),
		IpPermissions:     []awstypes.IpPermission{data.expandIPPermission(ctx)},
		TagSpecifications: getTagSpecificationsIn(ctx, awstypes.ResourceTypeSecurityGroupRule),
	}

	output, err := conn.AuthorizeSecurityGroupEgress(ctx, input)

	if err != nil {
		return "", err
	}

	return aws.ToString(output.SecurityGroupRules[0].SecurityGroupRuleId), nil
}
