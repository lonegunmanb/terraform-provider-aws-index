package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func modifyVPCEndpointExclusive(ctx context.Context, conn *ec2.Client, input *ec2.ModifyVpcEndpointInput) error {
	// See https://github.com/hashicorp/terraform-provider-aws/issues/3382.
	// Prevent concurrent requests and delay between requests.
	vpceID := aws.ToString(input.VpcEndpointId)
	mk := "vpc_endpoint_" + vpceID
	conns.GlobalMutexKV.Lock(mk)
	defer conns.GlobalMutexKV.Unlock(mk)

	stateConf := &retry.StateChangeConf{
		Delay:   1 * time.Minute,
		Timeout: 3 * time.Minute,
		Target:  []string{strconv.FormatBool(true)},
		Refresh: func(ctx context.Context) (any, string, error) {
			output, err := conn.ModifyVpcEndpoint(ctx, input)

			if err != nil {
				return nil, "", err
			}

			return output, flex.BoolToStringValue(output.Return), err
		},
	}
	_, err := stateConf.WaitForStateContext(ctx)

	return err
}
