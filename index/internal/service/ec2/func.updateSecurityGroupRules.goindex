package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateSecurityGroupRules(ctx context.Context, conn *ec2.Client, d *schema.ResourceData, ruleType string, group *awstypes.SecurityGroup) error {
	if !d.HasChange(ruleType) {
		return nil
	}

	o, n := d.GetChange(ruleType)
	if o == nil {
		o = new(schema.Set)
	}
	if n == nil {
		n = new(schema.Set)
	}

	os := securityGroupExpandRules(o.(*schema.Set))
	ns := securityGroupExpandRules(n.(*schema.Set))

	del, err := expandIPPerms(group, securityGroupCollapseRules(ruleType, os.Difference(ns).List()))

	if err != nil {
		return fmt.Errorf("updating rules: %w", err)
	}

	add, err := expandIPPerms(group, securityGroupCollapseRules(ruleType, ns.Difference(os).List()))

	if err != nil {
		return fmt.Errorf("updating rules: %w", err)
	}

	// TODO: We need to handle partial state better in the in-between
	// in this update.

	// TODO: It'd be nicer to authorize before removing, but then we have
	// to deal with complicated unrolling to get individual CIDR blocks
	// to avoid authorizing already authorized sources. Removing before
	// adding is easier here, and Terraform should be fast enough to
	// not have service issues.

	if len(del) > 0 {
		if ruleType == "egress" {
			input := &ec2.RevokeSecurityGroupEgressInput{
				GroupId:       group.GroupId,
				IpPermissions: del,
			}

			_, err = conn.RevokeSecurityGroupEgress(ctx, input)
		} else {
			input := &ec2.RevokeSecurityGroupIngressInput{
				GroupId:       group.GroupId,
				IpPermissions: del,
			}

			_, err = conn.RevokeSecurityGroupIngress(ctx, input)
		}

		if err != nil {
			return fmt.Errorf("revoking Security Group (%s) rules: %w", ruleType, err)
		}
	}

	if len(add) > 0 {
		if ruleType == "egress" {
			input := &ec2.AuthorizeSecurityGroupEgressInput{
				GroupId:       group.GroupId,
				IpPermissions: add,
			}

			_, err = conn.AuthorizeSecurityGroupEgress(ctx, input)
		} else {
			input := &ec2.AuthorizeSecurityGroupIngressInput{
				GroupId:       group.GroupId,
				IpPermissions: add,
			}

			_, err = conn.AuthorizeSecurityGroupIngress(ctx, input)
		}

		if err != nil {
			return fmt.Errorf("authorizing Security Group (%s) rules: %w", ruleType, err)
		}
	}

	return nil
}
