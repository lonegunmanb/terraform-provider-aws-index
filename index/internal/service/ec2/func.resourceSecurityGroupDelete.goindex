package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecurityGroupDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, d.Id())
	ctx = tflog.SetField(ctx, names.AttrVPCID, d.Get(names.AttrVPCID))

	if err := deleteLingeringENIs(ctx, conn, "group-id", d.Id(), d.Timeout(schema.TimeoutDelete)); err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting ENIs using Security Group (%s): %s", d.Id(), err)
	}

	// conditionally revoke rules first before attempting to delete the group
	if v := d.Get("revoke_rules_on_delete").(bool); v {
		err := forceRevokeSecurityGroupRules(ctx, conn, d.Id(), false)

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	firstShortRetry := 1 * time.Minute
	remainingRetry := d.Timeout(schema.TimeoutDelete) - firstShortRetry
	if d.Timeout(schema.TimeoutDelete) < 1*time.Minute {
		remainingRetry = 30 * time.Second
	}

	tflog.Info(ctx, "Deleting EC2 Security Group")

	_, err := tfresource.RetryWhenAWSErrCodeEquals(
		ctx,
		firstShortRetry, // short initial attempt followed by full length attempt
		func(ctx context.Context) (any, error) {
			return conn.DeleteSecurityGroup(ctx, &ec2.DeleteSecurityGroupInput{
				GroupId: aws.String(d.Id()),
			})
		},
		errCodeDependencyViolation, errCodeInvalidGroupInUse,
	)

	if tfawserr.ErrCodeEquals(err, errCodeDependencyViolation) || tfawserr.ErrCodeEquals(err, errCodeInvalidGroupInUse) {
		if v := d.Get("revoke_rules_on_delete").(bool); v {
			err := forceRevokeSecurityGroupRules(ctx, conn, d.Id(), true)

			if err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}

		_, err = tfresource.RetryWhenAWSErrCodeEquals(
			ctx,
			remainingRetry,
			func(ctx context.Context) (any, error) {
				return conn.DeleteSecurityGroup(ctx, &ec2.DeleteSecurityGroupInput{
					GroupId: aws.String(d.Id()),
				})
			},
			errCodeDependencyViolation, errCodeInvalidGroupInUse,
		)
	}

	if tfawserr.ErrCodeEquals(err, errCodeInvalidGroupNotFound) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting Security Group (%s): %s", d.Id(), err)
	}

	_, err = tfresource.RetryUntilNotFound(ctx, ec2PropagationTimeout, func(ctx context.Context) (any, error) {
		return findSecurityGroupByID(ctx, conn, d.Id())
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Security Group (%s) delete: %s", d.Id(), err)
	}

	return diags
}
