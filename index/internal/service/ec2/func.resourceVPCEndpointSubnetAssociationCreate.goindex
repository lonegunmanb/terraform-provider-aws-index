package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVPCEndpointSubnetAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	vpceID, subnetID := d.Get(names.AttrVPCEndpointID).(string), d.Get(names.AttrSubnetID).(string)
	// Human friendly ID for error messages since d.Id() is non-descriptive.
	id := fmt.Sprintf("%s/%s", vpceID, subnetID)

	input := ec2.ModifyVpcEndpointInput{
		AddSubnetIds:  []string{subnetID},
		VpcEndpointId: aws.String(vpceID),
	}
	if err := modifyVPCEndpointExclusive(ctx, conn, &input); err != nil {
		return sdkdiag.AppendErrorf(diags, "creating VPC Endpoint Subnet Association (%s): %s", id, err)
	}

	d.SetId(vpcEndpointSubnetAssociationCreateID(vpceID, subnetID))

	if _, err := waitVPCEndpointAvailable(ctx, conn, vpceID, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for VPC Endpoint (%s) to become available: %s", vpceID, err)
	}

	return append(diags, resourceVPCEndpointSubnetAssociationRead(ctx, d, meta)...)
}
