package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRouteTableHash(v any) int {
	var buf bytes.Buffer
	m, castOk := v.(map[string]any)
	if !castOk {
		return 0
	}

	if v, ok := m["ipv6_cidr_block"]; ok {
		fmt.Fprintf(&buf, "%s-", itypes.CanonicalCIDRBlock(v.(string)))
	}

	if v, ok := m[names.AttrCIDRBlock]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["destination_prefix_list_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["gateway_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["carrier_gateway_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["core_network_arn"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["egress_only_gateway_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	natGatewaySet := false
	if v, ok := m["nat_gateway_id"]; ok {
		natGatewaySet = v.(string) != ""
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m[names.AttrTransitGatewayID]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["local_gateway_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m[names.AttrVPCEndpointID]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m["vpc_peering_connection_id"]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	if v, ok := m[names.AttrNetworkInterfaceID]; ok && !natGatewaySet {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}

	return create.StringHashcode(buf.String())
}
