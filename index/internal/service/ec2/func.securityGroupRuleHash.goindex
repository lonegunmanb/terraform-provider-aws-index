package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func securityGroupRuleHash(v any) int {
	var buf bytes.Buffer
	m := v.(map[string]any)
	fmt.Fprintf(&buf, "%d-", m["from_port"].(int))
	fmt.Fprintf(&buf, "%d-", m["to_port"].(int))
	p := protocolForValue(m[names.AttrProtocol].(string))
	fmt.Fprintf(&buf, "%s-", p)
	fmt.Fprintf(&buf, "%t-", m["self"].(bool))

	// We need to make sure to sort the strings below so that we always
	// generate the same hash code no matter what is in the set.
	if v, ok := m["cidr_blocks"]; ok {
		vs := v.([]any)
		s := make([]string, len(vs))
		for i, raw := range vs {
			s[i] = raw.(string)
		}
		slices.Sort(s)

		for _, v := range s {
			fmt.Fprintf(&buf, "%s-", v)
		}
	}
	if v, ok := m["ipv6_cidr_blocks"]; ok {
		vs := v.([]any)
		s := make([]string, len(vs))
		for i, raw := range vs {
			s[i] = raw.(string)
		}
		slices.Sort(s)

		for _, v := range s {
			fmt.Fprintf(&buf, "%s-", v)
		}
	}
	if v, ok := m["prefix_list_ids"]; ok {
		vs := v.([]any)
		s := make([]string, len(vs))
		for i, raw := range vs {
			s[i] = raw.(string)
		}
		slices.Sort(s)

		for _, v := range s {
			fmt.Fprintf(&buf, "%s-", v)
		}
	}
	if v, ok := m[names.AttrSecurityGroups]; ok {
		vs := v.(*schema.Set).List()
		s := make([]string, len(vs))
		for i, raw := range vs {
			s[i] = raw.(string)
		}
		slices.Sort(s)

		for _, v := range s {
			fmt.Fprintf(&buf, "%s-", v)
		}
	}
	if m[names.AttrDescription].(string) != "" {
		fmt.Fprintf(&buf, "%s-", m[names.AttrDescription].(string))
	}

	return create.StringHashcode(buf.String())
}
