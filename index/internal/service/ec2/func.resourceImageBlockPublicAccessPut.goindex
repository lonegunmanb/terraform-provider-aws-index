package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceImageBlockPublicAccessPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	state := d.Get(names.AttrState).(string)

	if slices.Contains(imageBlockPublicAccessEnabledState_Values(), state) {
		input := ec2.EnableImageBlockPublicAccessInput{
			ImageBlockPublicAccessState: types.ImageBlockPublicAccessEnabledState(state),
		}

		_, err := conn.EnableImageBlockPublicAccess(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "enabling EC2 Image Block Public Access: %s", err)
		}
	} else {
		input := ec2.DisableImageBlockPublicAccessInput{}

		_, err := conn.DisableImageBlockPublicAccess(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "disabling EC2 Image Block Public Access: %s", err)
		}
	}

	if d.IsNewResource() {
		d.SetId(meta.(*conns.AWSClient).AccountID(ctx))
	}

	if err := waitImageBlockPublicAccessState(ctx, conn, state, d.Timeout(schema.TimeoutUpdate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EC2 Image Block Public Access state (%s): %s", state, err)
	}

	return append(diags, resourceImageBlockPublicAccessRead(ctx, d, meta)...)
}
