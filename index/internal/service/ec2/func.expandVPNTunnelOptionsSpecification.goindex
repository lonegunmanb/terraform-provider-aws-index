package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVPNTunnelOptionsSpecification(d *schema.ResourceData, prefix string) awstypes.VpnTunnelOptionsSpecification {
	apiObject := awstypes.VpnTunnelOptionsSpecification{}

	if v, ok := d.GetOk(prefix + "dpd_timeout_action"); ok {
		apiObject.DPDTimeoutAction = aws.String(v.(string))
	}

	if v, ok := d.GetOk(prefix + "dpd_timeout_seconds"); ok {
		apiObject.DPDTimeoutSeconds = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "enable_tunnel_lifecycle_control"); ok {
		apiObject.EnableTunnelLifecycleControl = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk(prefix + "ike_versions"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.IKEVersions = append(apiObject.IKEVersions, awstypes.IKEVersionsRequestListValue{Value: aws.String(v.(string))})
		}
	}

	if v, ok := d.GetOk(prefix + "log_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		apiObject.LogOptions = expandVPNTunnelLogOptionsSpecification(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(prefix + "phase1_dh_group_numbers"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase1DHGroupNumbers = append(apiObject.Phase1DHGroupNumbers, awstypes.Phase1DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v.(int)))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase1_encryption_algorithms"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase1EncryptionAlgorithms = append(apiObject.Phase1EncryptionAlgorithms, awstypes.Phase1EncryptionAlgorithmsRequestListValue{Value: aws.String(v.(string))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase1_integrity_algorithms"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase1IntegrityAlgorithms = append(apiObject.Phase1IntegrityAlgorithms, awstypes.Phase1IntegrityAlgorithmsRequestListValue{Value: aws.String(v.(string))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase1_lifetime_seconds"); ok {
		apiObject.Phase1LifetimeSeconds = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "phase2_dh_group_numbers"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase2DHGroupNumbers = append(apiObject.Phase2DHGroupNumbers, awstypes.Phase2DHGroupNumbersRequestListValue{Value: aws.Int32(int32(v.(int)))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase2_encryption_algorithms"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase2EncryptionAlgorithms = append(apiObject.Phase2EncryptionAlgorithms, awstypes.Phase2EncryptionAlgorithmsRequestListValue{Value: aws.String(v.(string))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase2_integrity_algorithms"); ok {
		for _, v := range v.(*schema.Set).List() {
			apiObject.Phase2IntegrityAlgorithms = append(apiObject.Phase2IntegrityAlgorithms, awstypes.Phase2IntegrityAlgorithmsRequestListValue{Value: aws.String(v.(string))})
		}
	}

	if v, ok := d.GetOk(prefix + "phase2_lifetime_seconds"); ok {
		apiObject.Phase2LifetimeSeconds = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "preshared_key"); ok {
		apiObject.PreSharedKey = aws.String(v.(string))
	}

	if v, ok := d.GetOk(prefix + "rekey_fuzz_percentage"); ok {
		apiObject.RekeyFuzzPercentage = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "rekey_margin_time_seconds"); ok {
		apiObject.RekeyMarginTimeSeconds = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "replay_window_size"); ok {
		apiObject.ReplayWindowSize = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(prefix + "startup_action"); ok {
		apiObject.StartupAction = aws.String(v.(string))
	}

	if v, ok := d.GetOk(prefix + "inside_cidr"); ok {
		apiObject.TunnelInsideCidr = aws.String(v.(string))
	}

	if v, ok := d.GetOk(prefix + "inside_ipv6_cidr"); ok {
		apiObject.TunnelInsideIpv6Cidr = aws.String(v.(string))
	}

	return apiObject
}
