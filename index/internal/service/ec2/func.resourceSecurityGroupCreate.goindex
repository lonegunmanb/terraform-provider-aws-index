package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecurityGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	name := create.Name(d.Get(names.AttrName).(string), d.Get(names.AttrNamePrefix).(string))
	inputC := &ec2.CreateSecurityGroupInput{
		GroupName:         aws.String(name),
		TagSpecifications: getTagSpecificationsIn(ctx, awstypes.ResourceTypeSecurityGroup),
	}

	if v := d.Get(names.AttrDescription); v != nil {
		inputC.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrVPCID); ok {
		inputC.VpcId = aws.String(v.(string))
	}

	output, err := conn.CreateSecurityGroup(ctx, inputC)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Security Group (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.GroupId))

	// Wait for the security group to truly exist
	if _, err := waitSecurityGroupCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Security Group (%s) create: %s", d.Id(), err)
	}

	// AWS defaults all Security Groups to have an ALLOW ALL egress rule.
	// Here we revoke that rule, so users don't unknowingly have/use it.
	inputR := &ec2.RevokeSecurityGroupEgressInput{
		GroupId: aws.String(d.Id()),
		IpPermissions: []awstypes.IpPermission{
			{
				FromPort: aws.Int32(0),
				ToPort:   aws.Int32(0),
				IpRanges: []awstypes.IpRange{
					{
						CidrIp: aws.String("0.0.0.0/0"),
					},
				},
				IpProtocol: aws.String("-1"),
			},
		},
	}

	if _, err := conn.RevokeSecurityGroupEgress(ctx, inputR); err != nil {
		return sdkdiag.AppendErrorf(diags, "revoking default IPv4 egress rule for Security Group (%s): %s", d.Id(), err)
	}

	inputR = &ec2.RevokeSecurityGroupEgressInput{
		GroupId: aws.String(d.Id()),
		IpPermissions: []awstypes.IpPermission{
			{
				FromPort: aws.Int32(0),
				ToPort:   aws.Int32(0),
				Ipv6Ranges: []awstypes.Ipv6Range{
					{
						CidrIpv6: aws.String("::/0"),
					},
				},
				IpProtocol: aws.String("-1"),
			},
		},
	}

	if _, err := conn.RevokeSecurityGroupEgress(ctx, inputR); err != nil {
		// If we have a NotFound or InvalidParameterValue, then we are trying to remove the default IPv6 egress of a non-IPv6 enabled SG.
		if !tfawserr.ErrCodeEquals(err, errCodeInvalidPermissionNotFound) && !tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "remote-ipv6-range") {
			return sdkdiag.AppendErrorf(diags, "revoking default IPv6 egress rule for Security Group (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceSecurityGroupUpdate(ctx, d, meta)...)
}
