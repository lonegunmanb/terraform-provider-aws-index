package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"cmp"
	"context"
	"encoding/xml"
	"fmt"
	"log"
	"net"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVPNConnectionOptionsSpecification(d *schema.ResourceData) *awstypes.VpnConnectionOptionsSpecification {
	apiObject := &awstypes.VpnConnectionOptionsSpecification{}

	if v, ok := d.GetOk("enable_acceleration"); ok {
		apiObject.EnableAcceleration = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("outside_ip_address_type"); ok {
		apiObject.OutsideIpAddressType = aws.String(v.(string))
	}

	if v := d.Get("tunnel_inside_ip_version").(string); v == string(awstypes.TunnelInsideIpVersionIpv6) {
		if v, ok := d.GetOk("local_ipv6_network_cidr"); ok {
			apiObject.LocalIpv6NetworkCidr = aws.String(v.(string))
		}

		if v, ok := d.GetOk("remote_ipv6_network_cidr"); ok {
			apiObject.RemoteIpv6NetworkCidr = aws.String(v.(string))
		}

		apiObject.TunnelInsideIpVersion = awstypes.TunnelInsideIpVersion(v)
	} else {
		if v, ok := d.GetOk("local_ipv4_network_cidr"); ok {
			apiObject.LocalIpv4NetworkCidr = aws.String(v.(string))
		}

		if v, ok := d.GetOk("remote_ipv4_network_cidr"); ok {
			apiObject.RemoteIpv4NetworkCidr = aws.String(v.(string))
		}
	}

	if v, ok := d.GetOk("static_routes_only"); ok {
		apiObject.StaticRoutesOnly = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("transport_transit_gateway_attachment_id"); ok {
		apiObject.TransportTransitGatewayAttachmentId = aws.String(v.(string))
	}

	apiObject.TunnelOptions = []awstypes.VpnTunnelOptionsSpecification{
		expandVPNTunnelOptionsSpecification(d, "tunnel1_"),
		expandVPNTunnelOptionsSpecification(d, "tunnel2_"),
	}

	return apiObject
}
