package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTrafficMirrorFilterRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	input := &ec2.CreateTrafficMirrorFilterRuleInput{
		ClientToken:           aws.String(id.UniqueId()),
		DestinationCidrBlock:  aws.String(d.Get("destination_cidr_block").(string)),
		RuleAction:            awstypes.TrafficMirrorRuleAction(d.Get("rule_action").(string)),
		RuleNumber:            aws.Int32(int32(d.Get("rule_number").(int))),
		SourceCidrBlock:       aws.String(d.Get("source_cidr_block").(string)),
		TrafficDirection:      awstypes.TrafficDirection(d.Get("traffic_direction").(string)),
		TrafficMirrorFilterId: aws.String(d.Get("traffic_mirror_filter_id").(string)),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("destination_port_range"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DestinationPortRange = expandTrafficMirrorPortRangeRequest(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrProtocol); ok {
		input.Protocol = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("source_port_range"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.SourcePortRange = expandTrafficMirrorPortRangeRequest(v.([]any)[0].(map[string]any))
	}

	output, err := conn.CreateTrafficMirrorFilterRule(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 Traffic Mirror Filter Rule: %s", err)
	}

	d.SetId(aws.ToString(output.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId))

	return append(diags, resourceTrafficMirrorFilterRuleRead(ctx, d, meta)...)
}
