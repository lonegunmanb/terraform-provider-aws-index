package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVerifiedAccessInstanceLoggingConfigurationDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	vaiID := d.Id()

	// create structure for reset
	resetObject := &awstypes.VerifiedAccessLogOptions{
		CloudWatchLogs: &awstypes.VerifiedAccessLogCloudWatchLogsDestinationOptions{
			Enabled: aws.Bool(false),
		},
		KinesisDataFirehose: &awstypes.VerifiedAccessLogKinesisDataFirehoseDestinationOptions{
			Enabled: aws.Bool(false),
		},
		S3: &awstypes.VerifiedAccessLogS3DestinationOptions{
			Enabled: aws.Bool(false),
		},
		IncludeTrustContext: aws.Bool(false),
		// reset log_version because ocsf-0.1 is not compatible with enabling include_trust_context
		// without reset, if practitioners previously applied and destroyed with ocsf-0.1,
		// ocsf-0.1 will be the new "default" value, leading to errors with include_trust_context
		LogVersion: aws.String(defaultVerifiedAccessLogVersion),
	}

	uuid, err := uuid.GenerateUUID()
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "generating uuid for ClientToken for Verified Access Instance Logging Configuration %s): %s", vaiID, err)
	}

	log.Printf("[INFO] Deleting Verified Access Instance Logging Configuration: %s", vaiID)
	input := &ec2.ModifyVerifiedAccessInstanceLoggingConfigurationInput{
		AccessLogs:               resetObject,
		ClientToken:              aws.String(uuid), // can't use aws.String(id.UniqueId()), because it's not a valid uuid
		VerifiedAccessInstanceId: aws.String(vaiID),
	}

	_, err = conn.ModifyVerifiedAccessInstanceLoggingConfiguration(ctx, input)

	if tfawserr.ErrCodeEquals(err, errCodeInvalidVerifiedAccessInstanceIdNotFound) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting Verified Access Instance Logging Configuration (%s): %s", vaiID, err)
	}

	return diags
}
