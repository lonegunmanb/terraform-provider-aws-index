package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *securityGroupRuleDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data securityGroupRuleDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().EC2Client(ctx)
	ignoreTagsConfig := d.Meta().IgnoreTagsConfig(ctx)

	input := &ec2.DescribeSecurityGroupRulesInput{
		Filters: newCustomFilterListFramework(ctx, data.Filters),
	}

	if !data.SecurityGroupRuleID.IsNull() {
		input.SecurityGroupRuleIds = []string{fwflex.StringValueFromFramework(ctx, data.SecurityGroupRuleID)}
	}

	if len(input.Filters) == 0 {
		// Don't send an empty filters list; the EC2 API won't accept it.
		input.Filters = nil
	}

	output, err := findSecurityGroupRule(ctx, conn, input)

	if err != nil {
		response.Diagnostics.AddError("reading Security Group Rules", tfresource.SingularDataSourceFindError("Security Group Rule", err).Error())

		return
	}

	data.ID = fwflex.StringToFramework(ctx, output.SecurityGroupRuleId)
	data.ARN = d.securityGroupRuleARN(ctx, data.ID.ValueString())
	data.CIDRIPv4 = fwflex.StringToFramework(ctx, output.CidrIpv4)
	data.CIDRIPv6 = fwflex.StringToFramework(ctx, output.CidrIpv6)
	data.Description = fwflex.StringToFramework(ctx, output.Description)
	data.FromPort = fwflex.Int32ToFrameworkInt64(ctx, output.FromPort)
	data.IPProtocol = fwflex.StringToFramework(ctx, output.IpProtocol)
	data.IsEgress = fwflex.BoolToFramework(ctx, output.IsEgress)
	data.PrefixListID = fwflex.StringToFramework(ctx, output.PrefixListId)
	data.ReferencedSecurityGroupID = flattenReferencedSecurityGroup(ctx, output.ReferencedGroupInfo, d.Meta().AccountID(ctx))
	data.SecurityGroupID = fwflex.StringToFramework(ctx, output.GroupId)
	data.SecurityGroupRuleID = fwflex.StringToFramework(ctx, output.SecurityGroupRuleId)
	data.Tags = tftags.FlattenStringValueMap(ctx, keyValueTags(ctx, output.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map())
	data.ToPort = fwflex.Int32ToFrameworkInt64(ctx, output.ToPort)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
