package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAMICreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	name := d.Get(names.AttrName).(string)
	input := ec2.RegisterImageInput{
		Architecture:       awstypes.ArchitectureValues(d.Get("architecture").(string)),
		Description:        aws.String(d.Get(names.AttrDescription).(string)),
		EnaSupport:         aws.Bool(d.Get("ena_support").(bool)),
		ImageLocation:      aws.String(d.Get("image_location").(string)),
		Name:               aws.String(name),
		RootDeviceName:     aws.String(d.Get("root_device_name").(string)),
		SriovNetSupport:    aws.String(d.Get("sriov_net_support").(string)),
		VirtualizationType: aws.String(d.Get("virtualization_type").(string)),
	}

	if v := d.Get("boot_mode").(string); v != "" {
		input.BootMode = awstypes.BootModeValues(v)
	}

	if v := d.Get("imds_support").(string); v != "" {
		input.ImdsSupport = awstypes.ImdsSupportValues(v)
	}

	if kernelId := d.Get("kernel_id").(string); kernelId != "" {
		input.KernelId = aws.String(kernelId)
	}

	if ramdiskId := d.Get("ramdisk_id").(string); ramdiskId != "" {
		input.RamdiskId = aws.String(ramdiskId)
	}

	if v := d.Get("tpm_support").(string); v != "" {
		input.TpmSupport = awstypes.TpmSupportValues(v)
	}

	if v, ok := d.GetOk("ebs_block_device"); ok && v.(*schema.Set).Len() > 0 {
		for _, tfMapRaw := range v.(*schema.Set).List() {
			tfMap, ok := tfMapRaw.(map[string]any)

			if !ok {
				continue
			}

			var encrypted bool

			if v, ok := tfMap[names.AttrEncrypted].(bool); ok {
				encrypted = v
			}

			var snapshot string

			if v, ok := tfMap[names.AttrSnapshotID].(string); ok && v != "" {
				snapshot = v
			}

			if snapshot != "" && encrypted {
				return sdkdiag.AppendErrorf(diags, "can't set both 'snapshot_id' and 'encrypted'")
			}
		}

		input.BlockDeviceMappings = expandBlockDeviceMappingsForAMIEBSBlockDevice(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("ephemeral_block_device"); ok && v.(*schema.Set).Len() > 0 {
		input.BlockDeviceMappings = append(input.BlockDeviceMappings, expandBlockDeviceMappingsForAMIEphemeralBlockDevice(v.(*schema.Set).List())...)
	}

	if uefiData := d.Get("uefi_data").(string); uefiData != "" {
		input.UefiData = aws.String(uefiData)
	}

	output, err := conn.RegisterImage(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 AMI (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.ImageId))

	if err := createTags(ctx, conn, d.Id(), getTagsIn(ctx)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting EC2 AMI (%s) tags: %s", d.Id(), err)
	}

	if _, err := waitImageAvailable(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 AMI (%s): waiting for completion: %s", name, err)
	}

	if v, ok := d.GetOk("deprecation_time"); ok {
		if err := enableImageDeprecation(ctx, conn, d.Id(), v.(string)); err != nil {
			return sdkdiag.AppendErrorf(diags, "creating EC2 AMI (%s): %s", name, err)
		}
	}

	return append(diags, resourceAMIRead(ctx, d, meta)...)
}
