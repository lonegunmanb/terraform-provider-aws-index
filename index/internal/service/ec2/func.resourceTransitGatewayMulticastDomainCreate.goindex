package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTransitGatewayMulticastDomainCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	input := &ec2.CreateTransitGatewayMulticastDomainInput{
		Options: &awstypes.CreateTransitGatewayMulticastDomainRequestOptions{
			AutoAcceptSharedAssociations: awstypes.AutoAcceptSharedAssociationsValue(d.Get("auto_accept_shared_associations").(string)),
			Igmpv2Support:                awstypes.Igmpv2SupportValue(d.Get("igmpv2_support").(string)),
			StaticSourcesSupport:         awstypes.StaticSourcesSupportValue(d.Get("static_sources_support").(string)),
		},
		TagSpecifications: getTagSpecificationsIn(ctx, awstypes.ResourceTypeTransitGatewayMulticastDomain),
		TransitGatewayId:  aws.String(d.Get(names.AttrTransitGatewayID).(string)),
	}

	log.Printf("[DEBUG] Creating EC2 Transit Gateway Multicast Domain: %+v", input)
	output, err := conn.CreateTransitGatewayMulticastDomain(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EC2 Transit Gateway Multicast Domain: %s", err)
	}

	d.SetId(aws.ToString(output.TransitGatewayMulticastDomain.TransitGatewayMulticastDomainId))

	if _, err := waitTransitGatewayMulticastDomainCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EC2 Transit Gateway Multicast Domain (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceTransitGatewayMulticastDomainRead(ctx, d, meta)...)
}
