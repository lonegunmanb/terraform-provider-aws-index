package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepRouteServerAssociations(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.EC2Client(ctx)
	var input ec2.DescribeRouteServersInput
	var sweepResources []sweep.Sweepable

	pages := ec2.NewDescribeRouteServersPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.RouteServers {
			routeServerID := aws.ToString(v.RouteServerId)

			if state := v.State; state == awstypes.RouteServerStateDeleted {
				log.Printf("[INFO] Skipping VPC Route Server %s: State=%s", routeServerID, state)
				continue
			}

			input := ec2.GetRouteServerAssociationsInput{
				RouteServerId: aws.String(routeServerID),
			}
			output, err := conn.GetRouteServerAssociations(ctx, &input)

			if tfawserr.ErrCodeEquals(err, errCodeInvalidRouteServerIdNotAssociated) {
				continue
			}

			if err != nil {
				return nil, err
			}

			for _, v := range output.RouteServerAssociations {
				sweepResources = append(sweepResources, framework.NewSweepResource(newVPCRouteServerVPCAssociationResource, client,
					framework.NewAttribute("route_server_id", routeServerID),
					framework.NewAttribute(names.AttrVPCID, aws.ToString(v.VpcId))))
			}
		}
	}

	return sweepResources, nil
}
