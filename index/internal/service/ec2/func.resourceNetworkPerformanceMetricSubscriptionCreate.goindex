package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNetworkPerformanceMetricSubscriptionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	source := d.Get(names.AttrSource).(string)
	destination := d.Get(names.AttrDestination).(string)
	metric := d.Get("metric").(string)
	statistic := d.Get("statistic").(string)
	id := networkPerformanceMetricSubscriptionCreateResourceID(source, destination, metric, statistic)
	input := &ec2.EnableAwsNetworkPerformanceMetricSubscriptionInput{
		Destination: aws.String(destination),
		Metric:      awstypes.MetricType(metric),
		Source:      aws.String(source),
		Statistic:   awstypes.StatisticType(statistic),
	}

	_, err := conn.EnableAwsNetworkPerformanceMetricSubscription(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "enabling EC2 AWS Network Performance Metric Subscription (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceNetworkPerformanceMetricSubscriptionRead(ctx, d, meta)...)
}
