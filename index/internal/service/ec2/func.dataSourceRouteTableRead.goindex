package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"context"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceRouteTableRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.EC2Client(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	req := &ec2.DescribeRouteTablesInput{}
	vpcId, vpcIdOk := d.GetOk(names.AttrVPCID)
	subnetId, subnetIdOk := d.GetOk(names.AttrSubnetID)
	gatewayId, gatewayIdOk := d.GetOk("gateway_id")
	rtbId, rtbOk := d.GetOk("route_table_id")
	tags, tagsOk := d.GetOk(names.AttrTags)
	filter, filterOk := d.GetOk(names.AttrFilter)

	if !rtbOk && !vpcIdOk && !subnetIdOk && !gatewayIdOk && !filterOk && !tagsOk {
		return sdkdiag.AppendErrorf(diags, "one of route_table_id, vpc_id, subnet_id, gateway_id, filters, or tags must be assigned")
	}
	req.Filters = newAttributeFilterList(
		map[string]string{
			"route-table-id":         rtbId.(string),
			"vpc-id":                 vpcId.(string),
			"association.subnet-id":  subnetId.(string),
			"association.gateway-id": gatewayId.(string),
		},
	)
	req.Filters = append(req.Filters, newTagFilterList(
		svcTags(tftags.New(ctx, tags.(map[string]any))),
	)...)
	req.Filters = append(req.Filters, newCustomFilterList(
		filter.(*schema.Set),
	)...)

	resp, err := conn.DescribeRouteTables(ctx, req)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPC Route Table: %s", err)
	}
	if resp == nil || len(resp.RouteTables) == 0 {
		return sdkdiag.AppendErrorf(diags, "query returned no results. Please change your search criteria and try again")
	}
	if len(resp.RouteTables) > 1 {
		return sdkdiag.AppendErrorf(diags, "multiple Route Tables matched; use additional constraints to reduce matches to a single Route Table")
	}

	rt := resp.RouteTables[0]

	d.SetId(aws.ToString(rt.RouteTableId))

	ownerID := aws.ToString(rt.OwnerId)
	d.Set(names.AttrARN, routeTableARN(ctx, c, ownerID, d.Id()))
	d.Set(names.AttrOwnerID, ownerID)

	d.Set("route_table_id", rt.RouteTableId)
	d.Set(names.AttrVPCID, rt.VpcId)

	//Ignore the AmazonFSx service tag in addition to standard ignores
	if err := d.Set(names.AttrTags, keyValueTags(ctx, rt.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Ignore(tftags.New(ctx, []string{"AmazonFSx"})).Map()); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
	}

	if err := d.Set("routes", dataSourceRoutesRead(ctx, conn, rt.Routes)); err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPC Route Table: %s", err)
	}

	if err := d.Set("associations", dataSourceAssociationsRead(rt.Associations)); err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EC2 VPC Route Table: %s", err)
	}

	return diags
}
