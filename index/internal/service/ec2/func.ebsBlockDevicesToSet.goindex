package github.com/hashicorp/terraform-provider-aws/internal/service/ec2
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ebsBlockDevicesToSet(bdm []awstypes.BlockDeviceMapping, rootDevName *string) *schema.Set {
	set := &schema.Set{F: hashEBSBlockDevice}

	for _, val := range bdm {
		if val.Ebs != nil {
			m := make(map[string]any)

			ebs := val.Ebs

			if val.DeviceName != nil {
				if aws.ToString(rootDevName) == aws.ToString(val.DeviceName) {
					continue
				}

				m[names.AttrDeviceName] = aws.ToString(val.DeviceName)
			}

			if ebs.DeleteOnTermination != nil {
				m[names.AttrDeleteOnTermination] = aws.ToBool(ebs.DeleteOnTermination)
			}

			if ebs.SnapshotId != nil {
				m[names.AttrSnapshotID] = aws.ToString(ebs.SnapshotId)
			}

			if ebs.Encrypted != nil {
				m[names.AttrEncrypted] = aws.ToBool(ebs.Encrypted)
			}

			if ebs.KmsKeyId != nil {
				m[names.AttrKMSKeyID] = aws.ToString(ebs.KmsKeyId)
			}

			if ebs.VolumeSize != nil {
				m[names.AttrVolumeSize] = aws.ToInt32(ebs.VolumeSize)
			}

			if ebs.VolumeType != "" {
				m[names.AttrVolumeType] = ebs.VolumeType
			}

			if ebs.Iops != nil {
				m[names.AttrIOPS] = aws.ToInt32(ebs.Iops)
			}

			if ebs.Throughput != nil {
				m[names.AttrThroughput] = aws.ToInt32(ebs.Throughput)
			}

			set.Add(m)
		}
	}

	return set
}
