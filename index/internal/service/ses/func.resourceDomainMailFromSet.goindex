package github.com/hashicorp/terraform-provider-aws/internal/service/ses
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ses"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ses/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainMailFromSet(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESClient(ctx)

	domainName := d.Get(names.AttrDomain).(string)
	input := &ses.SetIdentityMailFromDomainInput{
		BehaviorOnMXFailure: awstypes.BehaviorOnMXFailure(d.Get("behavior_on_mx_failure").(string)),
		Identity:            aws.String(domainName),
		MailFromDomain:      aws.String(d.Get("mail_from_domain").(string)),
	}

	_, err := conn.SetIdentityMailFromDomain(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "setting SES MAIL FROM Domain (%s): %s", domainName, err)
	}

	if d.IsNewResource() {
		d.SetId(domainName)
	}

	return append(diags, resourceDomainMailFromRead(ctx, d, meta)...)
}
