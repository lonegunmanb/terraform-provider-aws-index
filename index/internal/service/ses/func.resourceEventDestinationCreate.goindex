package github.com/hashicorp/terraform-provider-aws/internal/service/ses
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ses"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ses/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEventDestinationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESClient(ctx)

	eventDestinationName := d.Get(names.AttrName).(string)
	input := &ses.CreateConfigurationSetEventDestinationInput{
		ConfigurationSetName: aws.String(d.Get("configuration_set_name").(string)),
		EventDestination: &awstypes.EventDestination{
			Enabled:            d.Get(names.AttrEnabled).(bool),
			MatchingEventTypes: flex.ExpandStringyValueSet[awstypes.EventType](d.Get("matching_types").(*schema.Set)),
			Name:               aws.String(eventDestinationName),
		},
	}

	if v, ok := d.GetOk("cloudwatch_destination"); ok && v.(*schema.Set).Len() > 0 {
		input.EventDestination.CloudWatchDestination = &awstypes.CloudWatchDestination{
			DimensionConfigurations: expandCloudWatchDimensionConfigurations(v.(*schema.Set).List()),
		}
	}

	if v, ok := d.GetOk("kinesis_destination"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)
		input.EventDestination.KinesisFirehoseDestination = &awstypes.KinesisFirehoseDestination{
			DeliveryStreamARN: aws.String(tfMap[names.AttrStreamARN].(string)),
			IAMRoleARN:        aws.String(tfMap[names.AttrRoleARN].(string)),
		}
	}

	if v, ok := d.GetOk("sns_destination"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)
		input.EventDestination.SNSDestination = &awstypes.SNSDestination{
			TopicARN: aws.String(tfMap[names.AttrTopicARN].(string)),
		}
	}

	_, err := conn.CreateConfigurationSetEventDestination(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SES Configuration Set Event Destination (%s): %s", eventDestinationName, err)
	}

	d.SetId(eventDestinationName)

	return append(diags, resourceEventDestinationRead(ctx, d, meta)...)
}
