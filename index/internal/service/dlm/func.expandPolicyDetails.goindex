package github.com/hashicorp/terraform-provider-aws/internal/service/dlm
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dlm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPolicyDetails(tfList []any, defaultPolicyValue string) *awstypes.PolicyDetails {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap := tfList[0].(map[string]any)
	policyType := awstypes.PolicyTypeValues(tfMap["policy_type"].(string))
	apiObject := &awstypes.PolicyDetails{
		PolicyType: policyType,
	}

	if defaultPolicyValue != "" {
		if v, ok := tfMap["copy_tags"].(bool); ok {
			apiObject.CopyTags = aws.Bool(v)
		}
		if v, ok := tfMap["create_interval"].(int); ok {
			apiObject.CreateInterval = aws.Int32(int32(v))
		}
		if v, ok := tfMap["exclusions"].([]any); ok && len(v) > 0 {
			apiObject.Exclusions = expandExclusions(v)
		}
		if v, ok := tfMap["extend_deletion"].(bool); ok {
			apiObject.ExtendDeletion = aws.Bool(v)
		}
		if v, ok := tfMap[names.AttrResourceType].(string); ok {
			apiObject.ResourceType = awstypes.ResourceTypeValues(v)
		}
		if v, ok := tfMap["retain_interval"].(int); ok {
			apiObject.RetainInterval = aws.Int32(int32(v))
		}
	}

	if v, ok := tfMap[names.AttrAction].([]any); ok && len(v) > 0 {
		apiObject.Actions = expandActions(v)
	}
	if v, ok := tfMap["event_source"].([]any); ok && len(v) > 0 {
		apiObject.EventSource = expandEventSource(v)
	}
	if v, ok := tfMap[names.AttrParameters].([]any); ok && len(v) > 0 {
		apiObject.Parameters = expandParameters(v, policyType)
	}
	if v, ok := tfMap["policy_language"].(string); ok {
		apiObject.PolicyLanguage = awstypes.PolicyLanguageValues(v)
	}
	if v, ok := tfMap["resource_types"].([]any); ok && len(v) > 0 {
		apiObject.ResourceTypes = flex.ExpandStringyValueList[awstypes.ResourceTypeValues](v)
	}
	if v, ok := tfMap["resource_locations"].([]any); ok && len(v) > 0 {
		apiObject.ResourceLocations = flex.ExpandStringyValueList[awstypes.ResourceLocationValues](v)
	}
	if v, ok := tfMap[names.AttrSchedule].([]any); ok && len(v) > 0 {
		apiObject.Schedules = expandSchedules(v)
	}
	if v, ok := tfMap["target_tags"].(map[string]any); ok && len(v) > 0 {
		apiObject.TargetTags = expandTags(v)
	}

	return apiObject
}
