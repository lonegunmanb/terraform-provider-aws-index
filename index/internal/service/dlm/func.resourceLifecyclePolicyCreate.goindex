package github.com/hashicorp/terraform-provider-aws/internal/service/dlm
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dlm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLifecyclePolicyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	const createRetryTimeout = 2 * time.Minute
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DLMClient(ctx)

	input := dlm.CreateLifecyclePolicyInput{
		Description:      aws.String(d.Get(names.AttrDescription).(string)),
		ExecutionRoleArn: aws.String(d.Get(names.AttrExecutionRoleARN).(string)),
		PolicyDetails:    expandPolicyDetails(d.Get("policy_details").([]any)),
		State:            awstypes.SettablePolicyStateValues(d.Get(names.AttrState).(string)),
		Tags:             getTagsIn(ctx),
	}

	out, err := tfresource.RetryWhenIsA[*awstypes.InvalidRequestException](ctx, createRetryTimeout, func() (any, error) {
		return conn.CreateLifecyclePolicy(ctx, &input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating DLM Lifecycle Policy: %s", err)
	}

	d.SetId(aws.ToString(out.(*dlm.CreateLifecyclePolicyOutput).PolicyId))

	return append(diags, resourceLifecyclePolicyRead(ctx, d, meta)...)
}
