package github.com/hashicorp/terraform-provider-aws/internal/service/dlm
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dlm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenCreateRule(apiObject *awstypes.CreateRule) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := make(map[string]any)
	if apiObject.CronExpression != nil {
		tfMap["cron_expression"] = aws.ToString(apiObject.CronExpression)
	}
	if apiObject.Interval != nil {
		tfMap[names.AttrInterval] = aws.ToInt32(apiObject.Interval)
	}
	tfMap["interval_unit"] = apiObject.IntervalUnit
	tfMap[names.AttrLocation] = apiObject.Location
	if apiObject.Scripts != nil {
		tfMap["scripts"] = flattenScripts(apiObject.Scripts)
	}
	tfMap["times"] = apiObject.Times

	return []any{tfMap}
}
