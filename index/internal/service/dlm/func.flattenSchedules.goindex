package github.com/hashicorp/terraform-provider-aws/internal/service/dlm
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dlm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenSchedules(apiObjects []awstypes.Schedule) []any {
	tfList := make([]any, len(apiObjects))

	for i, apiObject := range apiObjects {
		tfMap := make(map[string]any)
		tfMap["archive_rule"] = flattenArchiveRule(apiObject.ArchiveRule)
		tfMap["copy_tags"] = aws.ToBool(apiObject.CopyTags)
		tfMap["create_rule"] = flattenCreateRule(apiObject.CreateRule)
		tfMap["cross_region_copy_rule"] = flattenCrossRegionCopyRules(apiObject.CrossRegionCopyRules)
		if apiObject.DeprecateRule != nil {
			tfMap["deprecate_rule"] = flattenDeprecateRule(apiObject.DeprecateRule)
		}
		if apiObject.FastRestoreRule != nil {
			tfMap["fast_restore_rule"] = flattenFastRestoreRule(apiObject.FastRestoreRule)
		}
		tfMap[names.AttrName] = aws.ToString(apiObject.Name)
		tfMap["retain_rule"] = flattenRetainRule(apiObject.RetainRule)
		if apiObject.ShareRules != nil {
			tfMap["share_rule"] = flattenShareRule(apiObject.ShareRules)
		}
		tfMap["tags_to_add"] = flattenTags(apiObject.TagsToAdd)
		tfMap["variable_tags"] = flattenTags(apiObject.VariableTags)

		tfList[i] = tfMap
	}

	return tfList
}
