package github.com/hashicorp/terraform-provider-aws/internal/service/dlm
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dlm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSchedules(tfList []any) []awstypes.Schedule {
	apiObjects := make([]awstypes.Schedule, len(tfList))

	for i, tfMapRaw := range tfList {
		apiObject := awstypes.Schedule{}
		tfMap := tfMapRaw.(map[string]any)

		if v, ok := tfMap["archive_rule"].([]any); ok && len(v) > 0 {
			apiObject.ArchiveRule = expandArchiveRule(v)
		}
		if v, ok := tfMap["copy_tags"]; ok {
			apiObject.CopyTags = aws.Bool(v.(bool))
		}
		if v, ok := tfMap["create_rule"]; ok {
			apiObject.CreateRule = expandCreateRule(v.([]any))
		}
		if v, ok := tfMap["cross_region_copy_rule"].(*schema.Set); ok && v.Len() > 0 {
			apiObject.CrossRegionCopyRules = expandCrossRegionCopyRules(v.List())
		}
		if v, ok := tfMap["deprecate_rule"]; ok {
			apiObject.DeprecateRule = expandDeprecateRule(v.([]any))
		}
		if v, ok := tfMap["fast_restore_rule"]; ok {
			apiObject.FastRestoreRule = expandFastRestoreRule(v.([]any))
		}
		if v, ok := tfMap[names.AttrName]; ok {
			apiObject.Name = aws.String(v.(string))
		}
		if v, ok := tfMap["retain_rule"]; ok {
			apiObject.RetainRule = expandRetainRule(v.([]any))
		}
		if v, ok := tfMap["share_rule"]; ok {
			apiObject.ShareRules = expandShareRule(v.([]any))
		}
		if v, ok := tfMap["tags_to_add"]; ok {
			apiObject.TagsToAdd = expandTags(v.(map[string]any))
		}
		if v, ok := tfMap["variable_tags"]; ok {
			apiObject.VariableTags = expandTags(v.(map[string]any))
		}

		apiObjects[i] = apiObject
	}

	return apiObjects
}
