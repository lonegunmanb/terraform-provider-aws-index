package github.com/hashicorp/terraform-provider-aws/internal/service/mediaconvert
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mediaconvert"
	"github.com/aws/aws-sdk-go-v2/service/mediaconvert/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceQueueCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).MediaConvertClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &mediaconvert.CreateQueueInput{
		Name:        aws.String(name),
		PricingPlan: types.PricingPlan(d.Get("pricing_plan").(string)),
		Status:      types.QueueStatus(d.Get(names.AttrStatus).(string)),
		Tags:        getTagsIn(ctx),
	}

	if v, ok := d.GetOk("concurrent_jobs"); ok {
		input.ConcurrentJobs = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.Get("reservation_plan_settings").([]any); ok && len(v) > 0 && v[0] != nil {
		input.ReservationPlanSettings = expandReservationPlanSettings(v[0].(map[string]any))
	}

	output, err := conn.CreateQueue(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Media Convert Queue (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Queue.Name))

	return append(diags, resourceQueueRead(ctx, d, meta)...)
}
