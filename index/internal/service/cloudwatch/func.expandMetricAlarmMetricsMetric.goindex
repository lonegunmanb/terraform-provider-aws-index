package github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch
import (
	"context"
	"errors"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/smerr"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandMetricAlarmMetricsMetric(tfMap map[string]any) *types.MetricStat {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.MetricStat{
		Metric: &types.Metric{
			MetricName: aws.String(tfMap[names.AttrMetricName].(string)),
		},
		Stat: aws.String(tfMap["stat"].(string)),
	}

	if v, ok := tfMap["dimensions"].(map[string]any); ok && len(v) > 0 {
		apiObject.Metric.Dimensions = expandMetricAlarmDimensions(v)
	}

	if v, ok := tfMap[names.AttrNamespace]; ok && v.(string) != "" {
		apiObject.Metric.Namespace = aws.String(v.(string))
	}

	if v, ok := tfMap["period"]; ok {
		apiObject.Period = aws.Int32(int32(v.(int)))
	}

	if v, ok := tfMap[names.AttrUnit]; ok && v.(string) != "" {
		apiObject.Unit = types.StandardUnit(v.(string))
	}

	return apiObject
}
