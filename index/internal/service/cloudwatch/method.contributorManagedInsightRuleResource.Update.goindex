package github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch
import (
	"context"
	"errors"
	"fmt"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/smerr"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *contributorManagedInsightRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var old, new contributorManagedInsightRuleResourceModel

	smerr.EnrichAppend(ctx, &resp.Diagnostics, req.State.Get(ctx, &old))
	if resp.Diagnostics.HasError() {
		return
	}

	smerr.EnrichAppend(ctx, &resp.Diagnostics, req.Plan.Get(ctx, &new))
	if resp.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().CloudWatchClient(ctx)

	if !new.State.IsNull() && !old.State.Equal(new.State) {
		if new.State.ValueEnum() == stateValueEnabled || new.State.IsNull() {
			input := cloudwatch.PutManagedInsightRulesInput{
				ManagedRules: []awstypes.ManagedRule{
					{
						ResourceARN:  new.ResourceArn.ValueStringPointer(),
						TemplateName: new.TemplateName.ValueStringPointer(),
					},
				},
			}
			_, err := conn.PutManagedInsightRules(ctx, &input)
			if err != nil {
				smerr.AddError(ctx, &resp.Diagnostics, err, smerr.ID, new.ResourceArn.String())
			}
		} else if new.State.ValueEnum() == stateValueDisabled {
			rule, err := findContributorManagedInsightRuleDescriptionByTemplateName(ctx, conn, new.ResourceArn.ValueString(), new.TemplateName.ValueString())
			if err != nil {
				smerr.AddError(ctx, &resp.Diagnostics, err, smerr.ID, new.ResourceArn.String())
			}
			input := cloudwatch.DisableInsightRulesInput{
				RuleNames: []string{aws.ToString(rule.RuleState.RuleName)},
			}
			_, err = conn.DisableInsightRules(ctx, &input)
			if err != nil {
				smerr.AddError(ctx, &resp.Diagnostics, err, smerr.ID, new.ResourceArn.String())
			}
		}
	}

	new.RuleName = old.RuleName

	smerr.EnrichAppend(ctx, &resp.Diagnostics, resp.State.Set(ctx, &new))
}
