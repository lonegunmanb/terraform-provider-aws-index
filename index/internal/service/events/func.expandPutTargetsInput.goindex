package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPutTargetsInput(ctx context.Context, d *schema.ResourceData) *eventbridge.PutTargetsInput {
	target := types.Target{
		Arn: aws.String(d.Get(names.AttrARN).(string)),
		Id:  aws.String(d.Get("target_id").(string)),
	}

	if v, ok := d.GetOk("input"); ok {
		target.Input = aws.String(v.(string))
	}

	if v, ok := d.GetOk("input_path"); ok {
		target.InputPath = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrRoleARN); ok {
		target.RoleArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("run_command_targets"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.RunCommandParameters = expandTargetRunParameters(v.([]any))
	}

	if v, ok := d.GetOk("ecs_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.EcsParameters = expandTargetECSParameters(ctx, v.([]any))
	}

	if v, ok := d.GetOk("redshift_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.RedshiftDataParameters = expandTargetRedshiftParameters(v.([]any))
	}

	if v, ok := d.GetOk("http_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.HttpParameters = expandTargetHTTPParameters(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("batch_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.BatchParameters = expandTargetBatchParameters(v.([]any))
	}

	if v, ok := d.GetOk("kinesis_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.KinesisParameters = expandTargetKinesisParameters(v.([]any))
	}

	if v, ok := d.GetOk("sqs_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.SqsParameters = expandTargetSQSParameters(v.([]any))
	}

	if v, ok := d.GetOk("sagemaker_pipeline_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.SageMakerPipelineParameters = expandTargetSageMakerPipelineParameters(v.([]any))
	}

	if v, ok := d.GetOk("input_transformer"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.InputTransformer = expandTransformerParameters(v.([]any))
	}

	if v, ok := d.GetOk("retry_policy"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.RetryPolicy = expandRetryPolicyParameters(v.([]any))
	}

	if v, ok := d.GetOk("dead_letter_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.DeadLetterConfig = expandDeadLetterParametersConfig(v.([]any))
	}

	if v, ok := d.GetOk("appsync_target"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		target.AppSyncParameters = expandAppSyncParameters(v.([]any))
	}

	input := &eventbridge.PutTargetsInput{
		Rule:    aws.String(d.Get(names.AttrRule).(string)),
		Targets: []types.Target{target},
	}

	if v, ok := d.GetOk("event_bus_name"); ok {
		input.EventBusName = aws.String(v.(string))
	}

	return input
}
