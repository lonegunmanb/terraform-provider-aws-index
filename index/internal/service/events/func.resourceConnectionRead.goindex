package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConnectionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EventsClient(ctx)

	output, err := findConnectionByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EventBridge Connection (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EventBridge Connection (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, output.ConnectionArn)
	if output.AuthParameters != nil {
		if err := d.Set("auth_parameters", flattenConnectionAuthParameters(output.AuthParameters, d)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting auth_parameters error: %s", err)
		}
	}
	d.Set("authorization_type", output.AuthorizationType)
	d.Set(names.AttrDescription, output.Description)
	if output.InvocationConnectivityParameters != nil {
		if err := d.Set("invocation_connectivity_parameters", []any{flattenDescribeConnectionConnectivityParameters(output.InvocationConnectivityParameters)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting invocation_connectivity_parameters: %s", err)
		}
	} else {
		d.Set("invocation_connectivity_parameters", nil)
	}
	d.Set("kms_key_identifier", output.KmsKeyIdentifier)
	d.Set(names.AttrName, output.Name)
	d.Set("secret_arn", output.SecretArn)

	return diags
}
