package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/action"
	"github.com/hashicorp/terraform-plugin-framework/action/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (a *putEventsAction) Invoke(ctx context.Context, req action.InvokeRequest, resp *action.InvokeResponse) {
	var model putEventsActionModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &model)...)
	if resp.Diagnostics.HasError() {
		return
	}

	conn := a.Meta().EventsClient(ctx)

	tflog.Info(ctx, "Putting events", map[string]any{
		"entry_count": len(model.Entry.Elements()),
	})

	resp.SendProgress(action.InvokeProgressEvent{
		Message: "Putting events to EventBridge...",
	})

	var input eventbridge.PutEventsInput
	resp.Diagnostics.Append(fwflex.Expand(ctx, model, &input)...)
	if resp.Diagnostics.HasError() {
		return
	}

	output, err := conn.PutEvents(ctx, &input)
	if err != nil {
		resp.Diagnostics.AddError(
			"Putting Events",
			"Could not put events: "+err.Error(),
		)
		return
	}

	if output.FailedEntryCount > 0 {
		resp.Diagnostics.AddError(
			"Putting Events",
			strconv.Itoa(int(output.FailedEntryCount))+" entries failed to be processed",
		)
		return
	}

	resp.SendProgress(action.InvokeProgressEvent{
		Message: "Events put successfully",
	})

	tflog.Info(ctx, "Put events completed", map[string]any{
		"successful_entries": len(output.Entries),
	})
}
