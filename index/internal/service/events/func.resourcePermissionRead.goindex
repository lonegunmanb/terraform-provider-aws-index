package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePermissionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EventsClient(ctx)

	eventBusName, statementID, err := permissionParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	policyStatement, err := tfresource.RetryWhenNotFound(ctx, propagationTimeout, func(ctx context.Context) (*permissionPolicyStatement, error) {
		return findPermissionByTwoPartKey(ctx, conn, eventBusName, statementID)
	})

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EventBridge Permission (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EventBridge Permission (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrAction, policyStatement.Action)
	if err := d.Set(names.AttrCondition, flattenPermissionPolicyStatementCondition(policyStatement.Condition)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting condition: %s", err)
	}
	d.Set("event_bus_name", eventBusName)
	switch principal := policyStatement.Principal.(type) {
	case string:
		d.Set(names.AttrPrincipal, principal)
	case map[string]any:
		if v, ok := principal["AWS"].(string); ok {
			if arn.IsARN(v) {
				principalARN, err := arn.Parse(v)
				if err != nil {
					return sdkdiag.AppendFromErr(diags, err)
				}

				d.Set(names.AttrPrincipal, principalARN.AccountID)
			} else {
				d.Set(names.AttrPrincipal, v)
			}
		}
	}
	d.Set("statement_id", policyStatement.Sid)

	return diags
}
