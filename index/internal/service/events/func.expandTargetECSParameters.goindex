package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTargetECSParameters(ctx context.Context, tfList []any) *types.EcsParameters {
	ecsParameters := &types.EcsParameters{}
	for _, c := range tfList {
		tfMap := c.(map[string]any)
		tags := tftags.New(ctx, tfMap[names.AttrTags].(map[string]any))

		if v, ok := tfMap[names.AttrCapacityProviderStrategy].(*schema.Set); ok && v.Len() > 0 {
			ecsParameters.CapacityProviderStrategy = expandTargetCapacityProviderStrategy(v.List())
		}

		if v, ok := tfMap["group"].(string); ok && v != "" {
			ecsParameters.Group = aws.String(v)
		}

		if v, ok := tfMap["launch_type"].(string); ok && v != "" {
			ecsParameters.LaunchType = types.LaunchType(v)
		}

		if v, ok := tfMap[names.AttrNetworkConfiguration]; ok {
			ecsParameters.NetworkConfiguration = expandTargetECSParametersNetworkConfiguration(v.([]any))
		}

		if v, ok := tfMap["platform_version"].(string); ok && v != "" {
			ecsParameters.PlatformVersion = aws.String(v)
		}

		if v, ok := tfMap["placement_constraint"].(*schema.Set); ok && v.Len() > 0 {
			ecsParameters.PlacementConstraints = expandTargetPlacementConstraints(v.List())
		}

		if v, ok := tfMap["ordered_placement_strategy"]; ok {
			ecsParameters.PlacementStrategy = expandTargetPlacementStrategies(v.([]any))
		}

		if v, ok := tfMap[names.AttrPropagateTags].(string); ok && v != "" {
			ecsParameters.PropagateTags = types.PropagateTags(v)
		}

		if len(tags) > 0 {
			ecsParameters.Tags = svcTags(tags.IgnoreAWS())
		}

		ecsParameters.EnableExecuteCommand = tfMap["enable_execute_command"].(bool)
		ecsParameters.EnableECSManagedTags = tfMap["enable_ecs_managed_tags"].(bool)
		ecsParameters.TaskCount = aws.Int32(int32(tfMap["task_count"].(int)))
		ecsParameters.TaskDefinitionArn = aws.String(tfMap["task_definition_arn"].(string))
	}

	return ecsParameters
}
