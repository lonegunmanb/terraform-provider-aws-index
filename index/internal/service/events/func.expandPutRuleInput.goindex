package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPutRuleInput(d *schema.ResourceData, name string) *eventbridge.PutRuleInput {
	apiObject := &eventbridge.PutRuleInput{
		Name: aws.String(name),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		apiObject.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("event_bus_name"); ok {
		apiObject.EventBusName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("event_pattern"); ok {
		json, _ := ruleEventPatternJSONDecoder(v.(string))
		apiObject.EventPattern = aws.String(json)
	}

	if v, ok := d.GetOk(names.AttrRoleARN); ok {
		apiObject.RoleArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrScheduleExpression); ok {
		apiObject.ScheduleExpression = aws.String(v.(string))
	}

	rawConfig := d.GetRawConfig()
	rawState := rawConfig.GetAttr(names.AttrState)
	if rawState.IsKnown() && !rawState.IsNull() {
		apiObject.State = types.RuleState(rawState.AsString())
	} else {
		rawIsEnabled := rawConfig.GetAttr("is_enabled")
		if rawIsEnabled.IsKnown() && !rawIsEnabled.IsNull() {
			if rawIsEnabled.True() {
				apiObject.State = types.RuleStateEnabled
			} else {
				apiObject.State = types.RuleStateDisabled
			}
		}
	}

	return apiObject
}
