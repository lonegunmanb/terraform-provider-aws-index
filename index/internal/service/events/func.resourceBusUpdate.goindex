package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBusUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EventsClient(ctx)

	if d.HasChanges("dead_letter_config", names.AttrDescription, "kms_key_identifier") {
		input := &eventbridge.UpdateEventBusInput{
			Name: aws.String(d.Get(names.AttrName).(string)),
		}

		if v, ok := d.GetOk("dead_letter_config"); ok && len(v.([]any)) > 0 {
			input.DeadLetterConfig = expandDeadLetterConfig(v.([]any)[0].(map[string]any))
		}

		// To unset the description, the only way is to explicitly set it to the empty string
		if v, ok := d.GetOk(names.AttrDescription); ok {
			input.Description = aws.String(v.(string))
		} else {
			input.Description = aws.String("")
		}

		if v, ok := d.GetOk("kms_key_identifier"); ok {
			input.KmsKeyIdentifier = aws.String(v.(string))
		}

		_, err := conn.UpdateEventBus(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EventBridge Event Bus (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceBusRead(ctx, d, meta)...)
}
