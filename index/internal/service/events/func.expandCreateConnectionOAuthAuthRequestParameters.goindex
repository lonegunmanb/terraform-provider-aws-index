package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCreateConnectionOAuthAuthRequestParameters(tfList []any) *types.CreateConnectionOAuthRequestParameters {
	if len(tfList) == 0 {
		return nil
	}

	apiObject := &types.CreateConnectionOAuthRequestParameters{}
	for _, item := range tfList {
		if item == nil {
			continue
		}

		tfMap := item.(map[string]any)
		if v, ok := tfMap["authorization_endpoint"].(string); ok && v != "" {
			apiObject.AuthorizationEndpoint = aws.String(v)
		}
		if v, ok := tfMap["http_method"].(string); ok && v != "" {
			apiObject.HttpMethod = types.ConnectionOAuthHttpMethod(v)
		}
		if v, ok := tfMap["oauth_http_parameters"].([]any); ok && len(v) > 0 {
			apiObject.OAuthHttpParameters = expandConnectionHTTPParameters(v)
		}
		if v, ok := tfMap["client_parameters"].([]any); ok && len(v) > 0 {
			apiObject.ClientParameters = expandCreateConnectionOAuthClientRequestParameters(v)
		}
	}

	return apiObject
}
