package github.com/hashicorp/terraform-provider-aws/internal/service/events
import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTargetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EventsClient(ctx)

	eventBusName := d.Get("event_bus_name").(string)
	target, err := findTargetByThreePartKey(ctx, conn, eventBusName, d.Get(names.AttrRule).(string), d.Get("target_id").(string))

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EventBridge Target (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EventBridge Target (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, target.Arn)
	d.Set("event_bus_name", eventBusName)
	d.Set(names.AttrForceDestroy, d.Get(names.AttrForceDestroy).(bool))
	d.Set("input", target.Input)
	d.Set("input_path", target.InputPath)
	d.Set(names.AttrRoleARN, target.RoleArn)
	d.Set("target_id", target.Id)

	if target.RunCommandParameters != nil {
		if err := d.Set("run_command_targets", flattenTargetRunParameters(target.RunCommandParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting run_command_targets: %s", err)
		}
	}

	if target.HttpParameters != nil {
		if err := d.Set("http_target", []any{flattenTargetHTTPParameters(target.HttpParameters)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting http_target: %s", err)
		}
	} else {
		d.Set("http_target", nil)
	}

	if target.RedshiftDataParameters != nil {
		if err := d.Set("redshift_target", flattenTargetRedshiftParameters(target.RedshiftDataParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting redshift_target: %s", err)
		}
	}

	if target.EcsParameters != nil {
		if err := d.Set("ecs_target", flattenTargetECSParameters(ctx, target.EcsParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting ecs_target: %s", err)
		}
	}

	if target.BatchParameters != nil {
		if err := d.Set("batch_target", flattenTargetBatchParameters(target.BatchParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting batch_target: %s", err)
		}
	}

	if target.KinesisParameters != nil {
		if err := d.Set("kinesis_target", flattenTargetKinesisParameters(target.KinesisParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting kinesis_target: %s", err)
		}
	}

	if target.SageMakerPipelineParameters != nil {
		if err := d.Set("sagemaker_pipeline_target", flattenTargetSageMakerPipelineParameters(target.SageMakerPipelineParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting sagemaker_pipeline_parameters: %s", err)
		}
	}

	if target.SqsParameters != nil {
		if err := d.Set("sqs_target", flattenTargetSQSParameters(target.SqsParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting sqs_target: %s", err)
		}
	}

	if target.InputTransformer != nil {
		if err := d.Set("input_transformer", flattenInputTransformer(target.InputTransformer)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting input_transformer: %s", err)
		}
	}

	if target.RetryPolicy != nil {
		if err := d.Set("retry_policy", flattenTargetRetryPolicy(target.RetryPolicy)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting retry_policy: %s", err)
		}
	}

	if target.DeadLetterConfig != nil {
		if err := d.Set("dead_letter_config", flattenTargetDeadLetterConfig(target.DeadLetterConfig)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting dead_letter_config: %s", err)
		}
	}

	if target.AppSyncParameters != nil {
		if err := d.Set("appsync_target", flattenAppSyncParameters(target.AppSyncParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting appsync_target: %s", err)
		}
	}

	return diags
}
