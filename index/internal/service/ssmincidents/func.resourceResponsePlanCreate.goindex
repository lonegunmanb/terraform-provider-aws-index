package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResponsePlanCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	client := meta.(*conns.AWSClient).SSMIncidentsClient(ctx)

	input := &ssmincidents.CreateResponsePlanInput{
		Actions:          expandAction(d.Get(names.AttrAction).([]any)),
		ChatChannel:      expandChatChannel(d.Get("chat_channel").(*schema.Set)),
		DisplayName:      aws.String(d.Get(names.AttrDisplayName).(string)),
		Engagements:      flex.ExpandStringValueSet(d.Get("engagements").(*schema.Set)),
		IncidentTemplate: expandIncidentTemplate(d.Get("incident_template").([]any)),
		Integrations:     expandIntegration(d.Get("integration").([]any)),
		Name:             aws.String(d.Get(names.AttrName).(string)),
		Tags:             getTagsIn(ctx),
	}

	output, err := client.CreateResponsePlan(ctx, input)

	if err != nil {
		return create.AppendDiagError(diags, names.SSMIncidents, create.ErrActionCreating, ResNameResponsePlan, d.Get(names.AttrName).(string), err)
	}

	if output == nil {
		return create.AppendDiagError(diags, names.SSMIncidents, create.ErrActionCreating, ResNameResponsePlan, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(output.Arn))

	return append(diags, resourceResponsePlanRead(ctx, d, meta)...)
}
