package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIncidentTemplate(config []any) *types.IncidentTemplate {
	// we require exactly one item so we grab first in list
	templateConfig := config[0].(map[string]any)

	template := &types.IncidentTemplate{}

	if v, ok := templateConfig["title"].(string); ok && v != "" {
		template.Title = aws.String(v)
	}

	if v, ok := templateConfig["impact"].(int); ok && v != 0 {
		template.Impact = aws.Int32(int32(v))
	}

	// dedupe string can be updated to have no value (denoted as "")
	if v, ok := templateConfig["dedupe_string"].(string); ok {
		template.DedupeString = aws.String(v)
	}

	if v, ok := templateConfig["incident_tags"].(map[string]any); ok && len(v) > 0 {
		template.IncidentTags = flex.ExpandStringValueMap(v)
	}

	// summary can be updated to have no value (denoted as "")
	if v, ok := templateConfig["summary"].(string); ok {
		template.Summary = aws.String(v)
	}

	if v, ok := templateConfig["notification_target"].(*schema.Set); ok && v.Len() > 0 {
		template.NotificationTargets = expandNotificationTargets(v.List())
	}

	return template
}
