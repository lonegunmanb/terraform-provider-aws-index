package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmincidents/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUpdateReplicationSetInput(d *schema.ResourceData) (*ssmincidents.UpdateReplicationSetInput, error) {
	input := ssmincidents.UpdateReplicationSetInput{
		Arn: aws.String(d.Id()),
	}

	config := d.GetRawConfig()
	var o, n any
	if v := config.GetAttr("regions"); v.IsKnown() && !v.IsNull() && v.LengthInt() > 0 {
		o, n = d.GetChange("regions")
	} else if v := config.GetAttr(names.AttrRegion); v.IsKnown() && !v.IsNull() && v.LengthInt() > 0 {
		o, n = d.GetChange(names.AttrRegion)
	}
	oldRegions, newRegions := regionListToKMSKeyMap(o.(*schema.Set).List()), regionListToKMSKeyMap(n.(*schema.Set).List())

	for k, oldCMK := range oldRegions {
		if newCMK, ok := newRegions[k]; !ok {
			input.Actions = append(input.Actions, &awstypes.UpdateReplicationSetActionMemberDeleteRegionAction{
				Value: awstypes.DeleteRegionAction{
					RegionName: aws.String(k),
				},
			})
		} else if oldCMK != newCMK {
			return nil, fmt.Errorf("SSMIncidents Replication Set does not support updating encryption on a Region. To do this, remove the Region, and then re-create it with the new key")
		}
	}

	for region, newCMK := range newRegions {
		if _, ok := oldRegions[region]; !ok {
			action := &awstypes.UpdateReplicationSetActionMemberAddRegionAction{
				Value: awstypes.AddRegionAction{
					RegionName: aws.String(region),
				},
			}
			if newCMK != "DefaultKey" {
				action.Value.SseKmsKeyId = aws.String(newCMK)
			}

			input.Actions = append(input.Actions, action)
		}
	}

	return &input, nil
}
