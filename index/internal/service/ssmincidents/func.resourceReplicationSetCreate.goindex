package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmincidents/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReplicationSetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMIncidentsClient(ctx)

	input := ssmincidents.CreateReplicationSetInput{
		Tags: getTagsIn(ctx),
	}

	if v, ok := d.GetOk("regions"); ok && v.(*schema.Set).Len() > 0 {
		input.Regions = expandRegionMapInputValues(v.(*schema.Set).List())
	} else if v, ok := d.GetOk(names.AttrRegion); ok && v.(*schema.Set).Len() > 0 {
		input.Regions = expandRegionMapInputValues(v.(*schema.Set).List())
	}

	output, err := conn.CreateReplicationSet(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SSMIncidents Replication Set: %s", err)
	}

	d.SetId(aws.ToString(output.Arn))

	if _, err := waitReplicationSetCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for SSMIncidents Replication Set (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceReplicationSetRead(ctx, d, meta)...)
}
