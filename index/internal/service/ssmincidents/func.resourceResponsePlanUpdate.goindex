package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResponsePlanUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	client := meta.(*conns.AWSClient).SSMIncidentsClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &ssmincidents.UpdateResponsePlanInput{
			Arn: aws.String(d.Id()),
		}

		if d.HasChanges(names.AttrAction) {
			input.Actions = expandAction(d.Get(names.AttrAction).([]any))
		}

		if d.HasChanges("chat_channel") {
			input.ChatChannel = expandChatChannel(d.Get("chat_channel").(*schema.Set))
		}

		if d.HasChanges(names.AttrDisplayName) {
			input.DisplayName = aws.String(d.Get(names.AttrDisplayName).(string))
		}

		if d.HasChanges("engagements") {
			input.Engagements = flex.ExpandStringValueSet(d.Get("engagements").(*schema.Set))
		}

		if d.HasChanges("incident_template") {
			incidentTemplate := d.Get("incident_template")
			template := expandIncidentTemplate(incidentTemplate.([]any))
			updateResponsePlanInputWithIncidentTemplate(input, template)
		}

		if d.HasChanges("integration") {
			input.Integrations = expandIntegration(d.Get("integration").([]any))
		}

		_, err := client.UpdateResponsePlan(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SSMIncidents, create.ErrActionUpdating, ResNameResponsePlan, d.Id(), err)
		}
	}

	return append(diags, resourceResponsePlanRead(ctx, d, meta)...)
}
