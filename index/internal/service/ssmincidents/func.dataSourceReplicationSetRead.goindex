package github.com/hashicorp/terraform-provider-aws/internal/service/ssmincidents
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceReplicationSetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMIncidentsClient(ctx)

	var input ssmincidents.ListReplicationSetsInput
	arn, err := findReplicationSetARN(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSMIncidents Replication Set: %s", err)
	}

	d.SetId(aws.ToString(arn))

	replicationSet, err := findReplicationSetByID(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSMIncidents Replication Set (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, replicationSet.Arn)
	d.Set("created_by", replicationSet.CreatedBy)
	d.Set("deletion_protected", replicationSet.DeletionProtected)
	d.Set("last_modified_by", replicationSet.LastModifiedBy)
	if err := d.Set(names.AttrRegion, flattenRegionInfos(replicationSet.RegionMap)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting region: %s", err)
	}
	if err := d.Set("regions", flattenRegionInfos(replicationSet.RegionMap)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting regions: %s", err)
	}
	d.Set(names.AttrStatus, replicationSet.Status)

	return diags
}
