package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalytics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalytics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalytics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KinesisAnalyticsClient(ctx)

	application, err := findApplicationDetailByName(ctx, conn, d.Get(names.AttrName).(string))

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Kinesis Analytics Application (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Kinesis Analytics Application (%s): %s", d.Id(), err)
	}

	arn := aws.ToString(application.ApplicationARN)
	d.Set(names.AttrARN, arn)
	if err := d.Set("cloudwatch_logging_options", flattenCloudWatchLoggingOptionDescriptions(application.CloudWatchLoggingOptionDescriptions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting cloudwatch_logging_options: %s", err)
	}
	d.Set("code", application.ApplicationCode)
	d.Set("create_timestamp", aws.ToTime(application.CreateTimestamp).Format(time.RFC3339))
	d.Set(names.AttrDescription, application.ApplicationDescription)
	if err := d.Set("inputs", flattenInputDescriptions(application.InputDescriptions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting inputs: %s", err)
	}
	d.Set("last_update_timestamp", aws.ToTime(application.LastUpdateTimestamp).Format(time.RFC3339))
	d.Set(names.AttrName, application.ApplicationName)
	if err := d.Set("outputs", flattenOutputDescriptions(application.OutputDescriptions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting outputs: %s", err)
	}
	if err := d.Set("reference_data_sources", flattenReferenceDataSourceDescriptions(application.ReferenceDataSourceDescriptions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting reference_data_sources: %s", err)
	}
	d.Set(names.AttrStatus, application.ApplicationStatus)
	d.Set(names.AttrVersion, application.ApplicationVersionId)

	return diags
}
