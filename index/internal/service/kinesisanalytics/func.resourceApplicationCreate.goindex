package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalytics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalytics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalytics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KinesisAnalyticsClient(ctx)

	applicationName := d.Get(names.AttrName).(string)
	input := &kinesisanalytics.CreateApplicationInput{
		ApplicationCode:          aws.String(d.Get("code").(string)),
		ApplicationDescription:   aws.String(d.Get(names.AttrDescription).(string)),
		ApplicationName:          aws.String(applicationName),
		CloudWatchLoggingOptions: expandCloudWatchLoggingOptions(d.Get("cloudwatch_logging_options").([]any)),
		Inputs:                   expandInputs(d.Get("inputs").([]any)),
		Outputs:                  expandOutputs(d.Get("outputs").(*schema.Set).List()),
		Tags:                     getTagsIn(ctx),
	}

	outputRaw, err := waitIAMPropagation(ctx, func() (any, error) {
		return conn.CreateApplication(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Kinesis Analytics Application (%s): %s", applicationName, err)
	}

	applicationSummary := outputRaw.(*kinesisanalytics.CreateApplicationOutput).ApplicationSummary

	d.SetId(aws.ToString(applicationSummary.ApplicationARN))

	if v := d.Get("reference_data_sources").([]any); len(v) > 0 && v[0] != nil {
		// Add new reference data source.
		input := &kinesisanalytics.AddApplicationReferenceDataSourceInput{
			ApplicationName:             aws.String(applicationName),
			CurrentApplicationVersionId: aws.Int64(1), // Newly created application version.
			ReferenceDataSource:         expandReferenceDataSource(v),
		}

		_, err := waitIAMPropagation(ctx, func() (any, error) {
			return conn.AddApplicationReferenceDataSource(ctx, input)
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "adding Kinesis Analytics Application (%s) reference data source: %+v", d.Id(), err)
		}
	}

	if _, ok := d.GetOk("start_application"); ok {
		if v, ok := d.GetOk("inputs"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			var inputStartingPosition string

			if v, ok := tfMap["starting_position_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
				tfMap := v[0].(map[string]any)

				if v, ok := tfMap["starting_position"].(string); ok && v != "" {
					inputStartingPosition = v
				}
			}

			application, err := findApplicationDetailByName(ctx, conn, applicationName)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "reading Kinesis Analytics Application (%s): %s", d.Id(), err)
			}

			if err := startApplication(ctx, conn, application, inputStartingPosition); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	return append(diags, resourceApplicationRead(ctx, d, meta)...)
}
