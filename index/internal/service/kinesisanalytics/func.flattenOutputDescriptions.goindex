package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalytics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalytics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalytics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenOutputDescriptions(outputDescriptions []awstypes.OutputDescription) []any {
	if len(outputDescriptions) == 0 {
		return []any{}
	}

	vOutputs := []any{}

	for _, outputDescription := range outputDescriptions {
		mOutput := map[string]any{
			names.AttrID:   aws.ToString(outputDescription.OutputId),
			names.AttrName: aws.ToString(outputDescription.Name),
		}

		if destinationSchema := outputDescription.DestinationSchema; destinationSchema != nil {
			mDestinationSchema := map[string]any{
				"record_format_type": string(destinationSchema.RecordFormatType),
			}

			mOutput[names.AttrSchema] = []any{mDestinationSchema}
		}

		if kinesisFirehoseOutputDescription := outputDescription.KinesisFirehoseOutputDescription; kinesisFirehoseOutputDescription != nil {
			mKinesisFirehoseOutput := map[string]any{
				names.AttrResourceARN: aws.ToString(kinesisFirehoseOutputDescription.ResourceARN),
				names.AttrRoleARN:     aws.ToString(kinesisFirehoseOutputDescription.RoleARN),
			}

			mOutput["kinesis_firehose"] = []any{mKinesisFirehoseOutput}
		}

		if kinesisStreamsOutputDescription := outputDescription.KinesisStreamsOutputDescription; kinesisStreamsOutputDescription != nil {
			mKinesisStreamsOutput := map[string]any{
				names.AttrResourceARN: aws.ToString(kinesisStreamsOutputDescription.ResourceARN),
				names.AttrRoleARN:     aws.ToString(kinesisStreamsOutputDescription.RoleARN),
			}

			mOutput["kinesis_stream"] = []any{mKinesisStreamsOutput}
		}

		if lambdaOutputDescription := outputDescription.LambdaOutputDescription; lambdaOutputDescription != nil {
			mLambdaOutput := map[string]any{
				names.AttrResourceARN: aws.ToString(lambdaOutputDescription.ResourceARN),
				names.AttrRoleARN:     aws.ToString(lambdaOutputDescription.RoleARN),
			}

			mOutput["lambda"] = []any{mLambdaOutput}
		}

		vOutputs = append(vOutputs, mOutput)
	}

	return vOutputs
}
