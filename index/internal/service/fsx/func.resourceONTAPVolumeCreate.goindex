package github.com/hashicorp/terraform-provider-aws/internal/service/fsx
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fsx"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fsx/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceONTAPVolumeCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FSxClient(ctx)

	ontapConfig := &awstypes.CreateOntapVolumeConfiguration{
		StorageVirtualMachineId: aws.String(d.Get("storage_virtual_machine_id").(string)),
	}

	if v, ok := d.GetOk("aggregate_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		ontapConfig.AggregateConfiguration = expandAggregateConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("copy_tags_to_backups"); ok {
		ontapConfig.CopyTagsToBackups = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("junction_path"); ok {
		ontapConfig.JunctionPath = aws.String(v.(string))
	}

	if v, ok := d.GetOk("ontap_volume_type"); ok {
		ontapConfig.OntapVolumeType = awstypes.InputOntapVolumeType(v.(string))
	}

	if v, ok := d.GetOk("security_style"); ok {
		ontapConfig.SecurityStyle = awstypes.SecurityStyle(v.(string))
	}

	if v, null, _ := nullable.Int(d.Get("size_in_bytes").(string)).ValueInt64(); !null && v > 0 {
		ontapConfig.SizeInBytes = aws.Int64(v)
	}

	if v, ok := d.GetOk("size_in_megabytes"); ok {
		ontapConfig.SizeInMegabytes = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("snaplock_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		ontapConfig.SnaplockConfiguration = expandCreateSnaplockConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("snapshot_policy"); ok {
		ontapConfig.SnapshotPolicy = aws.String(v.(string))
	}

	if v, ok := d.GetOkExists("storage_efficiency_enabled"); ok {
		ontapConfig.StorageEfficiencyEnabled = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("tiering_policy"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		ontapConfig.TieringPolicy = expandTieringPolicy(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("volume_style"); ok {
		ontapConfig.VolumeStyle = awstypes.VolumeStyle(v.(string))
	}

	name := d.Get(names.AttrName).(string)
	input := &fsx.CreateVolumeInput{
		Name:               aws.String(name),
		OntapConfiguration: ontapConfig,
		Tags:               getTagsIn(ctx),
		VolumeType:         awstypes.VolumeType(d.Get(names.AttrVolumeType).(string)),
	}

	output, err := conn.CreateVolume(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating FSx for NetApp ONTAP Volume (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Volume.VolumeId))

	if _, err := waitVolumeCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for FSx for NetApp ONTAP Volume (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceONTAPVolumeRead(ctx, d, meta)...)
}
