package github.com/hashicorp/terraform-provider-aws/internal/service/fsx
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fsx"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fsx/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceOpenZFSVolumeCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FSxClient(ctx)

	openzfsConfig := &awstypes.CreateOpenZFSVolumeConfiguration{
		ParentVolumeId: aws.String(d.Get("parent_volume_id").(string)),
	}

	if v, ok := d.GetOk("copy_tags_to_snapshots"); ok {
		openzfsConfig.CopyTagsToSnapshots = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("data_compression_type"); ok {
		openzfsConfig.DataCompressionType = awstypes.OpenZFSDataCompressionType(v.(string))
	}

	if v, ok := d.GetOk("nfs_exports"); ok {
		openzfsConfig.NfsExports = expandOpenZFSNfsExports(v.([]any))
	}

	if v, ok := d.GetOk("origin_snapshot"); ok {
		openzfsConfig.OriginSnapshot = expandCreateOpenZFSOriginSnapshotConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("read_only"); ok {
		openzfsConfig.ReadOnly = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("record_size_kib"); ok {
		openzfsConfig.RecordSizeKiB = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("storage_capacity_quota_gib"); ok {
		openzfsConfig.StorageCapacityQuotaGiB = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("storage_capacity_reservation_gib"); ok {
		openzfsConfig.StorageCapacityReservationGiB = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("user_and_group_quotas"); ok {
		openzfsConfig.UserAndGroupQuotas = expandOpenZFSUserOrGroupQuotas(v.(*schema.Set).List())
	}

	name := d.Get(names.AttrName).(string)
	input := &fsx.CreateVolumeInput{
		ClientRequestToken:   aws.String(id.UniqueId()),
		Name:                 aws.String(name),
		OpenZFSConfiguration: openzfsConfig,
		Tags:                 getTagsIn(ctx),
		VolumeType:           awstypes.VolumeType(d.Get(names.AttrVolumeType).(string)),
	}

	output, err := conn.CreateVolume(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating FSx for OpenZFS Volume (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Volume.VolumeId))

	if _, err := waitVolumeCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for FSx for OpenZFS Volume (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceOpenZFSVolumeRead(ctx, d, meta)...)
}
