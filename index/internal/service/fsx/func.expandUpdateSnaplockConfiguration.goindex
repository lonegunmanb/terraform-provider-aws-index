package github.com/hashicorp/terraform-provider-aws/internal/service/fsx
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fsx"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fsx/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUpdateSnaplockConfiguration(tfMap map[string]any) *awstypes.UpdateSnaplockConfiguration {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.UpdateSnaplockConfiguration{}

	if v, ok := tfMap["audit_log_volume"].(bool); ok && v {
		apiObject.AuditLogVolume = aws.Bool(v)
	}

	if v, ok := tfMap["autocommit_period"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.AutocommitPeriod = expandAutocommitPeriod(v[0].(map[string]any))
	}

	if v, ok := tfMap["privileged_delete"].(string); ok && v != "" {
		apiObject.PrivilegedDelete = awstypes.PrivilegedDelete(v)
	}

	if v, ok := tfMap[names.AttrRetentionPeriod].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.RetentionPeriod = expandSnaplockRetentionPeriod(v[0].(map[string]any))
	}

	if v, ok := tfMap["volume_append_mode_enabled"].(bool); ok && v {
		apiObject.VolumeAppendModeEnabled = aws.Bool(v)
	}

	return apiObject
}
