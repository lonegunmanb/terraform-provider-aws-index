package github.com/hashicorp/terraform-provider-aws/internal/service/amp
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/amp"
	"github.com/aws/aws-sdk-go-v2/service/amp/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleGroupNamespaceCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AMPClient(ctx)

	name := d.Get(names.AttrName).(string)
	workspaceID := d.Get("workspace_id").(string)
	input := amp.CreateRuleGroupsNamespaceInput{
		Data:        []byte(d.Get("data").(string)),
		Name:        aws.String(name),
		Tags:        getTagsIn(ctx),
		WorkspaceId: aws.String(workspaceID),
	}

	output, err := conn.CreateRuleGroupsNamespace(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Prometheus Rule Group Namespace (%s) for Workspace (%s): %s", name, workspaceID, err)
	}

	d.SetId(aws.ToString(output.Arn))

	if _, err := waitRuleGroupNamespaceCreated(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Prometheus Rule Group Namespace (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceRuleGroupNamespaceRead(ctx, d, meta)...)
}
