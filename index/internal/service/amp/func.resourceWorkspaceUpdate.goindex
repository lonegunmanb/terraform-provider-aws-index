package github.com/hashicorp/terraform-provider-aws/internal/service/amp
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/amp"
	"github.com/aws/aws-sdk-go-v2/service/amp/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWorkspaceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AMPClient(ctx)

	if d.HasChange(names.AttrAlias) {
		input := amp.UpdateWorkspaceAliasInput{
			Alias:       aws.String(d.Get(names.AttrAlias).(string)),
			WorkspaceId: aws.String(d.Id()),
		}

		_, err := conn.UpdateWorkspaceAlias(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Prometheus Workspace alias (%s): %s", d.Id(), err)
		}

		if _, err := waitWorkspaceUpdated(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Prometheus Workspace (%s) update: %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrLoggingConfiguration) {
		if v, ok := d.GetOk(names.AttrLoggingConfiguration); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if o, _ := d.GetChange(names.AttrLoggingConfiguration); o == nil || len(o.([]any)) == 0 || o.([]any)[0] == nil {
				input := amp.CreateLoggingConfigurationInput{
					LogGroupArn: aws.String(tfMap["log_group_arn"].(string)),
					WorkspaceId: aws.String(d.Id()),
				}

				if _, err := conn.CreateLoggingConfiguration(ctx, &input); err != nil {
					return sdkdiag.AppendErrorf(diags, "creating Prometheus Workspace (%s) logging configuration: %s", d.Id(), err)
				}

				if _, err := waitLoggingConfigurationCreated(ctx, conn, d.Id()); err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for Prometheus Workspace (%s) logging configuration create: %s", d.Id(), err)
				}
			} else {
				input := amp.UpdateLoggingConfigurationInput{
					LogGroupArn: aws.String(tfMap["log_group_arn"].(string)),
					WorkspaceId: aws.String(d.Id()),
				}

				if _, err := conn.UpdateLoggingConfiguration(ctx, &input); err != nil {
					return sdkdiag.AppendErrorf(diags, "updating Prometheus Workspace (%s) logging configuration: %s", d.Id(), err)
				}

				if _, err := waitLoggingConfigurationUpdated(ctx, conn, d.Id()); err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for Prometheus Workspace (%s) logging configuration update: %s", d.Id(), err)
				}
			}
		} else {
			input := amp.DeleteLoggingConfigurationInput{
				WorkspaceId: aws.String(d.Id()),
			}

			_, err := conn.DeleteLoggingConfiguration(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deleting Prometheus Workspace (%s) logging configuration: %s", d.Id(), err)
			}

			if _, err := waitLoggingConfigurationDeleted(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for Prometheus Workspace (%s) logging configuration delete: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceWorkspaceRead(ctx, d, meta)...)
}
