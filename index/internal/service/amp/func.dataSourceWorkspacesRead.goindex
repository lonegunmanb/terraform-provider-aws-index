package github.com/hashicorp/terraform-provider-aws/internal/service/amp
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/amp"
	"github.com/aws/aws-sdk-go-v2/service/amp/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceWorkspacesRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics { // nosemgrep:ci.caps0-in-func-name
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AMPClient(ctx)

	alias_prefix := d.Get("alias_prefix").(string)
	workspaces, err := findWorkspaces(ctx, conn, alias_prefix)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Prometheus Workspaces: %s", err)
	}

	var arns, aliases, workspaceIDs []string
	for _, w := range workspaces {
		arns = append(arns, aws.ToString(w.Arn))
		aliases = append(aliases, aws.ToString(w.Alias))
		workspaceIDs = append(workspaceIDs, aws.ToString(w.WorkspaceId))
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))
	d.Set("aliases", aliases)
	d.Set(names.AttrARNs, arns)
	d.Set("workspace_ids", workspaceIDs)

	return diags
}
