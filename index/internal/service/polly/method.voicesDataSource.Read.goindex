package github.com/hashicorp/terraform-provider-aws/internal/service/polly
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/polly"
	awstypes "github.com/aws/aws-sdk-go-v2/service/polly/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *voicesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	conn := d.Meta().PollyClient(ctx)

	var data voicesDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	data.ID = types.StringValue(d.Meta().AccountID(ctx))

	input := &polly.DescribeVoicesInput{}
	resp.Diagnostics.Append(flex.Expand(ctx, data, input)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No paginator helper so pagination must be done manually
	out := &polly.DescribeVoicesOutput{}
	for {
		page, err := conn.DescribeVoices(ctx, input)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.Polly, create.ErrActionReading, DSNameVoices, data.ID.String(), err),
				err.Error(),
			)
			return
		}

		if page == nil {
			break
		}

		if len(page.Voices) > 0 {
			out.Voices = append(out.Voices, page.Voices...)
		}

		input.NextToken = page.NextToken
		if page.NextToken == nil {
			break
		}
	}

	resp.Diagnostics.Append(flex.Flatten(ctx, out, &data)...)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
