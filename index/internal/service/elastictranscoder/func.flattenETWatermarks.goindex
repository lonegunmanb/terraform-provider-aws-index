package github.com/hashicorp/terraform-provider-aws/internal/service/elastictranscoder
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elastictranscoder/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenETWatermarks(watermarks []awstypes.PresetWatermark) []map[string]any {
	var watermarkSet []map[string]any

	for _, w := range watermarks {
		watermark := map[string]any{
			"horizontal_align":  aws.ToString(w.HorizontalAlign),
			"horizontal_offset": aws.ToString(w.HorizontalOffset),
			names.AttrID:        aws.ToString(w.Id),
			"max_height":        aws.ToString(w.MaxHeight),
			"max_width":         aws.ToString(w.MaxWidth),
			"opacity":           aws.ToString(w.Opacity),
			"sizing_policy":     aws.ToString(w.SizingPolicy),
			names.AttrTarget:    aws.ToString(w.Target),
			"vertical_align":    aws.ToString(w.VerticalAlign),
			"vertical_offset":   aws.ToString(w.VerticalOffset),
		}

		watermarkSet = append(watermarkSet, watermark)
	}

	return watermarkSet
}
