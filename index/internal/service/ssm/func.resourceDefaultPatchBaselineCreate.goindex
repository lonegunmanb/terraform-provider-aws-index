package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceDefaultPatchBaselineCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	baselineID := d.Get("baseline_id").(string)
	patchBaseline, err := findPatchBaselineByID(ctx, conn, baselineID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Patch Baseline (%s): %s", baselineID, err)
	}

	if pbOS, cOS := patchBaseline.OperatingSystem, awstypes.OperatingSystem(d.Get("operating_system").(string)); pbOS != cOS {
		return sdkdiag.AppendErrorf(diags, "Patch Baseline Operating System (%s) does not match %s", pbOS, cOS)
	}

	input := &ssm.RegisterDefaultPatchBaselineInput{
		BaselineId: aws.String(baselineID),
	}

	_, err = conn.RegisterDefaultPatchBaseline(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "registering SSM Default Patch Baseline (%s): %s", baselineID, err)
	}

	d.SetId(string(patchBaseline.OperatingSystem))

	return append(diags, resourceDefaultPatchBaselineRead(ctx, d, meta)...)
}
