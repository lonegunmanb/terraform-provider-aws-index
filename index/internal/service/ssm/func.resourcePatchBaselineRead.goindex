package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"encoding/json"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePatchBaselineRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	output, err := findPatchBaselineByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Patch Baseline (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Patch Baseline (%s): %s", d.Id(), err)
	}

	jsonDoc, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	jsonString := string(tfjson.RemoveEmptyFields(jsonDoc))

	if err := d.Set("approval_rule", flattenPatchRuleGroup(output.ApprovalRules)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting approval_rule: %s", err)
	}
	d.Set("approved_patches", output.ApprovedPatches)
	d.Set("approved_patches_compliance_level", output.ApprovedPatchesComplianceLevel)
	d.Set("approved_patches_enable_non_security", output.ApprovedPatchesEnableNonSecurity)
	arn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Region:    meta.(*conns.AWSClient).Region(ctx),
		Service:   "ssm",
		AccountID: meta.(*conns.AWSClient).AccountID(ctx),
		Resource:  "patchbaseline/" + strings.TrimPrefix(d.Id(), "/"),
	}.String()
	d.Set(names.AttrARN, arn)
	d.Set("available_security_updates_compliance_status", output.AvailableSecurityUpdatesComplianceStatus)
	d.Set(names.AttrDescription, output.Description)
	if err := d.Set("global_filter", flattenPatchFilterGroup(output.GlobalFilters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting global_filter: %s", err)
	}
	d.Set(names.AttrJSON, jsonString)
	d.Set(names.AttrName, output.Name)
	d.Set("operating_system", output.OperatingSystem)
	d.Set("rejected_patches", output.RejectedPatches)
	d.Set("rejected_patches_action", output.RejectedPatchesAction)
	if err := d.Set(names.AttrSource, flattenPatchSource(output.Sources)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting source: %s", err)
	}

	return diags
}
