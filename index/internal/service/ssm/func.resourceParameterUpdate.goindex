package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceParameterUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	if d.HasChangesExcept("overwrite", names.AttrTags, names.AttrTagsAll) {
		typ := awstypes.ParameterType(d.Get(names.AttrType).(string))
		value := d.Get(names.AttrValue).(string)
		if v, ok := d.Get("insecure_value").(string); ok && v != "" {
			value = v
		}

		if d.HasChanges("value_wo_version") {
			valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
			diags = append(diags, di...)
			if diags.HasError() {
				return diags
			}

			if valueWO != "" {
				value = valueWO
			}
		}

		input := &ssm.PutParameterInput{
			AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
			Name:           aws.String(d.Id()),
			Overwrite:      aws.Bool(shouldUpdateParameter(d)),
			Tier:           awstypes.ParameterTier(d.Get("tier").(string)),
			Type:           typ,
			Value:          aws.String(value),
		}

		if d.HasChange("data_type") {
			input.DataType = aws.String(d.Get("data_type").(string))
		}

		if d.HasChange(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange(names.AttrKeyID) && typ == awstypes.ParameterTypeSecureString {
			input.KeyId = aws.String(d.Get(names.AttrKeyID).(string))
		}

		// Retrieve the value set in the config directly to counteract the DiffSuppressFunc above.
		if v := d.GetRawConfig().GetAttr("tier"); v.IsKnown() && !v.IsNull() {
			input.Tier = awstypes.ParameterTier(v.AsString())
		}

		_, err := conn.PutParameter(ctx, input)

		if tfawserr.ErrMessageContains(err, errCodeValidationException, "Tier is not supported") {
			log.Printf("[WARN] Creating SSM Parameter (%s): tier %q not supported, using default", d.Id(), d.Get("tier").(string))
			input.Tier = ""
			_, err = conn.PutParameter(ctx, input)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SSM Parameter (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceParameterRead(ctx, d, meta)...)
}
