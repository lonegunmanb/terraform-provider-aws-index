package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTaskInvocationParameters(tfList []any) *awstypes.MaintenanceWindowTaskInvocationParameters {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	apiObject := &awstypes.MaintenanceWindowTaskInvocationParameters{}

	for _, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)
		if v, ok := tfMap["automation_parameters"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			apiObject.Automation = expandTaskInvocationAutomationParameters(v.([]any))
		}
		if v, ok := tfMap["lambda_parameters"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			apiObject.Lambda = expandTaskInvocationLambdaParameters(v.([]any))
		}
		if v, ok := tfMap["run_command_parameters"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			apiObject.RunCommand = expandTaskInvocationRunCommandParameters(v.([]any))
		}
		if v, ok := tfMap["step_functions_parameters"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			apiObject.StepFunctions = expandTaskInvocationStepFunctionsParameters(v.([]any))
		}
	}

	return apiObject
}
