package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourcePatchGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	baselineID := d.Get("baseline_id").(string)
	patchGroup := d.Get("patch_group").(string)
	id, err := flex.FlattenResourceId([]string{patchGroup, baselineID}, patchGroupResourceIDPartCount, false)
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	input := &ssm.RegisterPatchBaselineForPatchGroupInput{
		BaselineId: aws.String(baselineID),
		PatchGroup: aws.String(patchGroup),
	}

	if _, err := conn.RegisterPatchBaselineForPatchGroup(ctx, input); err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SSM Patch Group (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourcePatchGroupRead(ctx, d, meta)...)
}
