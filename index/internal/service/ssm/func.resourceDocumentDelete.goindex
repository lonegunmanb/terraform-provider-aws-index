package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDocumentDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	if v, ok := d.GetOk(names.AttrPermissions); ok && len(v.(map[string]any)) > 0 {
		tfMap := flex.ExpandStringValueMap(v.(map[string]any))

		if v, ok := tfMap["account_ids"]; ok && v != "" {
			for chunk := range slices.Chunk(strings.Split(v, ","), documentPermissionsBatchLimit) {
				input := &ssm.ModifyDocumentPermissionInput{
					AccountIdsToRemove: chunk,
					Name:               aws.String(d.Id()),
					PermissionType:     awstypes.DocumentPermissionTypeShare,
				}

				_, err := conn.ModifyDocumentPermission(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "modifying SSM Document (%s) permissions: %s", d.Id(), err)
				}
			}
		}
	}

	log.Printf("[INFO] Deleting SSM Document: %s", d.Id())
	_, err := conn.DeleteDocument(ctx, &ssm.DeleteDocumentInput{
		Name: aws.String(d.Get(names.AttrName).(string)),
	})

	if errs.IsAErrorMessageContains[*awstypes.InvalidDocument](err, "does not exist") {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting SSM Document (%s): %s", d.Id(), err)
	}

	if _, err := waitDocumentDeleted(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for SSM Document (%s) delete: %s", d.Id(), err)
	}

	return diags
}
