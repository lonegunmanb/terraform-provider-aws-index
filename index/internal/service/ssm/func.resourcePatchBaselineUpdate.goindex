package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"encoding/json"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePatchBaselineUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &ssm.UpdatePatchBaselineInput{
			BaselineId: aws.String(d.Id()),
		}

		if d.HasChange("approval_rule") {
			input.ApprovalRules = expandPatchRuleGroup(d)
		}

		if d.HasChange("approved_patches") {
			input.ApprovedPatches = flex.ExpandStringValueSet(d.Get("approved_patches").(*schema.Set))
		}

		if d.HasChange("approved_patches_compliance_level") {
			input.ApprovedPatchesComplianceLevel = awstypes.PatchComplianceLevel(d.Get("approved_patches_compliance_level").(string))
		}

		if d.HasChange("approved_patches_enable_non_security") {
			input.ApprovedPatchesEnableNonSecurity = aws.Bool(d.Get("approved_patches_enable_non_security").(bool))
		}

		if d.HasChange(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange("global_filter") {
			input.GlobalFilters = expandPatchFilterGroup(d)
		}

		if d.HasChange(names.AttrName) {
			input.Name = aws.String(d.Get(names.AttrName).(string))
		}

		if d.HasChange("rejected_patches") {
			input.RejectedPatches = flex.ExpandStringValueSet(d.Get("rejected_patches").(*schema.Set))
		}

		if d.HasChange("rejected_patches_action") {
			input.RejectedPatchesAction = awstypes.PatchAction(d.Get("rejected_patches_action").(string))
		}

		if d.HasChange(names.AttrSource) {
			input.Sources = expandPatchSource(d)
		}

		_, err := conn.UpdatePatchBaseline(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SSM Patch Baseline (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourcePatchBaselineRead(ctx, d, meta)...)
}
