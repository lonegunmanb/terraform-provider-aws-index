package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceParameterRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	const (
		// Maximum amount of time to wait for asynchronous validation on SSM Parameter creation.
		timeout = 2 * time.Minute
	)
	outputRaw, err := tfresource.RetryWhen(ctx, timeout,
		func() (any, error) {
			return findParameterByName(ctx, conn, d.Id(), true)
		},
		func(err error) (bool, error) {
			if d.IsNewResource() && tfresource.NotFound(err) && d.Get("data_type").(string) == "aws:ec2:image" {
				return true, err
			}

			return false, err
		},
	)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Parameter %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Parameter (%s): %s", d.Id(), err)
	}

	param := outputRaw.(*awstypes.Parameter)
	d.Set(names.AttrARN, param.ARN)
	d.Set(names.AttrName, param.Name)
	d.Set(names.AttrType, param.Type)
	d.Set(names.AttrVersion, param.Version)

	hasWriteOnly := d.Get("has_value_wo").(bool)
	rawConfig := d.GetRawConfig()
	if !rawConfig.IsNull() {
		valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
		diags = append(diags, di...)
		if diags.HasError() {
			return diags
		}

		if valueWO != "" {
			hasWriteOnly = true
		} else {
			hasWriteOnly = false
			d.Set("has_value_wo", nil)
		}
	}

	if _, ok := d.GetOk("insecure_value"); ok && param.Type != awstypes.ParameterTypeSecureString {
		d.Set("insecure_value", param.Value)
	} else {
		d.Set(names.AttrValue, param.Value)
	}

	if hasWriteOnly {
		d.Set("has_value_wo", true)
		d.Set(names.AttrValue, nil)
	}

	if param.Type == awstypes.ParameterTypeSecureString && d.Get("insecure_value").(string) != "" {
		return sdkdiag.AppendErrorf(diags, "invalid configuration, cannot set type = %s and insecure_value", param.Type)
	}

	detail, err := findParameterMetadataByName(ctx, conn, d.Get(names.AttrName).(string))

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Parameter %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Parameter metadata (%s): %s", d.Id(), err)
	}

	d.Set("allowed_pattern", detail.AllowedPattern)
	d.Set("data_type", detail.DataType)
	d.Set(names.AttrDescription, detail.Description)
	d.Set(names.AttrKeyID, detail.KeyId)
	d.Set("tier", detail.Tier)

	return diags
}
