package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepDefaultPatchBaselines(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.SSMClient(ctx)
	sweepResources := make([]sweep.Sweepable, 0)

	paginator := patchBaselinesPaginator(conn, ownerIsSelfFilter())
	for paginator.HasMorePages() {
		page, err := paginator.NextPage(ctx)

		if awsv2.SkipSweepError(err) {
			log.Printf("[WARN] Skipping SSM Default Patch Baseline sweep for %s: %s", region, err)
			return nil
		}

		if err != nil {
			return fmt.Errorf("error listing SSM Default Patch Baselines (%s): %w", region, err)
		}

		for _, identity := range tfslices.Filter(page.BaselineIdentities, func(v awstypes.PatchBaselineIdentity) bool {
			return v.DefaultBaseline
		}) {
			baselineID := aws.ToString(identity.BaselineId)
			pb, err := findPatchBaselineByID(ctx, conn, baselineID)

			if err != nil {
				continue
			}
			sweepResources = append(sweepResources, defaultPatchBaselineSweeper{
				conn: conn,
				os:   pb.OperatingSystem,
			})
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping SSM Default Patch Baselines (%s): %w", region, err)
	}

	return nil
}
