package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func defaultPatchBaselineRestoreOSDefault(ctx context.Context, conn *ssm.Client, os awstypes.OperatingSystem) diag.Diagnostics {
	var diags diag.Diagnostics

	baselineID, err := findDefaultDefaultPatchBaselineIDByOperatingSystem(ctx, conn, os)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AWS-owned SSM Default Patch Baseline for operating system (%s): %s", os, err)
	}

	input := &ssm.RegisterDefaultPatchBaselineInput{
		BaselineId: baselineID,
	}

	_, err = conn.RegisterDefaultPatchBaseline(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "restoring SSM Default Patch Baseline for operating system (%s) to (%s): %s", os, aws.ToString(baselineID), err)
	}

	return diags
}
