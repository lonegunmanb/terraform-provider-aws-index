package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"encoding/json"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePatchBaselineCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &ssm.CreatePatchBaselineInput{
		ApprovedPatchesComplianceLevel: awstypes.PatchComplianceLevel(d.Get("approved_patches_compliance_level").(string)),
		Name:                           aws.String(name),
		OperatingSystem:                awstypes.OperatingSystem(d.Get("operating_system").(string)),
		Tags:                           getTagsIn(ctx),
	}

	if _, ok := d.GetOk("approval_rule"); ok {
		input.ApprovalRules = expandPatchRuleGroup(d)
	}

	if v, ok := d.GetOk("approved_patches"); ok && v.(*schema.Set).Len() > 0 {
		input.ApprovedPatches = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("approved_patches_enable_non_security"); ok {
		input.ApprovedPatchesEnableNonSecurity = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if _, ok := d.GetOk("global_filter"); ok {
		input.GlobalFilters = expandPatchFilterGroup(d)
	}

	if v, ok := d.GetOk("rejected_patches"); ok && v.(*schema.Set).Len() > 0 {
		input.RejectedPatches = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("rejected_patches_action"); ok {
		input.RejectedPatchesAction = awstypes.PatchAction(v.(string))
	}

	if _, ok := d.GetOk(names.AttrSource); ok {
		input.Sources = expandPatchSource(d)
	}

	output, err := conn.CreatePatchBaseline(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SSM Patch Baseline (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.BaselineId))

	return append(diags, resourcePatchBaselineRead(ctx, d, meta)...)
}
