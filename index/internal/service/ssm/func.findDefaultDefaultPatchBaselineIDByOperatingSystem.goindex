package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func findDefaultDefaultPatchBaselineIDByOperatingSystem(ctx context.Context, conn *ssm.Client, os awstypes.OperatingSystem) (*string, error) {
	paginator := patchBaselinesPaginator(conn,
		operatingSystemFilter(os),
		ownerIsAWSFilter(),
	)
	re := regexache.MustCompile(`^AWS-[0-9A-Za-z]+PatchBaseline$`)
	var baselineIdentityIDs []string

	for paginator.HasMorePages() {
		page, err := paginator.NextPage(ctx)

		if err != nil {
			return nil, fmt.Errorf("reading SSM Patch Baselines: %s", err)
		}

		for _, v := range page.BaselineIdentities {
			if id := aws.ToString(v.BaselineName); re.MatchString(id) {
				baselineIdentityIDs = append(baselineIdentityIDs, aws.ToString(v.BaselineId))
			}
		}
	}

	return tfresource.AssertSingleValueResult(baselineIdentityIDs)
}
