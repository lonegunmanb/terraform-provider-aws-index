package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDocumentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	doc, err := findDocumentByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Document %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Document (%s): %s", d.Id(), err)
	}

	documentType, name := doc.DocumentType, aws.ToString(doc.Name)
	d.Set(names.AttrARN, documentARN(ctx, meta.(*conns.AWSClient), documentType, name))
	d.Set(names.AttrCreatedDate, aws.ToTime(doc.CreatedDate).Format(time.RFC3339))
	d.Set("default_version", doc.DefaultVersion)
	d.Set(names.AttrDescription, doc.Description)
	d.Set("document_format", doc.DocumentFormat)
	d.Set("document_type", documentType)
	d.Set("document_version", doc.DocumentVersion)
	d.Set("hash", doc.Hash)
	d.Set("hash_type", doc.HashType)
	d.Set("latest_version", doc.LatestVersion)
	d.Set(names.AttrName, name)
	d.Set(names.AttrOwner, doc.Owner)
	if err := d.Set(names.AttrParameter, flattenDocumentParameters(doc.Parameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting parameter: %s", err)
	}
	d.Set("platform_types", doc.PlatformTypes)
	d.Set("schema_version", doc.SchemaVersion)
	d.Set(names.AttrStatus, doc.Status)
	d.Set("target_type", doc.TargetType)
	d.Set("version_name", doc.VersionName)

	{
		input := &ssm.GetDocumentInput{
			DocumentFormat:  awstypes.DocumentFormat(d.Get("document_format").(string)),
			DocumentVersion: aws.String("$LATEST"),
			Name:            aws.String(d.Id()),
		}

		output, err := conn.GetDocument(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading SSM Document (%s) content: %s", d.Id(), err)
		}

		d.Set(names.AttrContent, output.Content)
	}

	{
		input := &ssm.DescribeDocumentPermissionInput{
			Name:           aws.String(d.Id()),
			PermissionType: awstypes.DocumentPermissionTypeShare,
		}

		output, err := conn.DescribeDocumentPermission(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading SSM Document (%s) permissions: %s", d.Id(), err)
		}

		if accountsIDs := output.AccountIds; len(accountsIDs) > 0 {
			d.Set(names.AttrPermissions, map[string]any{
				"account_ids":  strings.Join(accountsIDs, ","),
				names.AttrType: awstypes.DocumentPermissionTypeShare,
			})
		} else {
			d.Set(names.AttrPermissions, nil)
		}
	}

	setTagsOut(ctx, doc.Tags)

	return diags
}
