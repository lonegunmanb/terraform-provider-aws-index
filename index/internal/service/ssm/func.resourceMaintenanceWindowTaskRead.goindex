package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMaintenanceWindowTaskRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	output, err := findMaintenanceWindowTaskByTwoPartKey(ctx, conn, d.Get("window_id").(string), d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Maintenance Window Task %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Maintenance Window Task (%s): %s", d.Id(), err)
	}

	windowTaskID := aws.ToString(output.WindowTaskId)
	arn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "ssm",
		Region:    meta.(*conns.AWSClient).Region(ctx),
		AccountID: meta.(*conns.AWSClient).AccountID(ctx),
		Resource:  "windowtask/" + windowTaskID,
	}.String()
	d.Set(names.AttrARN, arn)
	d.Set("cutoff_behavior", output.CutoffBehavior)
	d.Set(names.AttrDescription, output.Description)
	d.Set("max_concurrency", output.MaxConcurrency)
	d.Set("max_errors", output.MaxErrors)
	d.Set(names.AttrName, output.Name)
	d.Set(names.AttrPriority, output.Priority)
	d.Set(names.AttrServiceRoleARN, output.ServiceRoleArn)
	if err := d.Set("targets", flattenTargets(output.Targets)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting targets: %s", err)
	}
	d.Set("task_arn", output.TaskArn)
	if output.TaskInvocationParameters != nil {
		if err := d.Set("task_invocation_parameters", flattenTaskInvocationParameters(output.TaskInvocationParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting task_invocation_parameters: %s", err)
		}
	}
	d.Set("task_type", output.TaskType)
	d.Set("window_id", output.WindowId)
	d.Set("window_task_id", windowTaskID)

	return diags
}
