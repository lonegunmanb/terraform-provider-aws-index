package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceParameterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	name := d.Get(names.AttrName).(string)
	typ := awstypes.ParameterType(d.Get(names.AttrType).(string))
	value := d.Get(names.AttrValue).(string)
	if v, ok := d.Get("insecure_value").(string); ok && v != "" {
		value = v
	}

	valueWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("value_wo"))
	diags = append(diags, di...)
	if diags.HasError() {
		return diags
	}

	if valueWO != "" {
		value = valueWO
	}

	input := &ssm.PutParameterInput{
		AllowedPattern: aws.String(d.Get("allowed_pattern").(string)),
		Name:           aws.String(name),
		Overwrite:      aws.Bool(shouldUpdateParameter(d)),
		Type:           typ,
		Value:          aws.String(value),
	}

	if v, ok := d.GetOk("data_type"); ok {
		input.DataType = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrKeyID); ok && typ == awstypes.ParameterTypeSecureString {
		input.KeyId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("tier"); ok {
		input.Tier = awstypes.ParameterTier(v.(string))
	}

	// AWS SSM Service only supports PutParameter requests with Tags
	// if Overwrite is not provided or is false; in this resource's case,
	// the Overwrite value is always set in the paramInput so we check for the value
	tags := getTagsIn(ctx)
	if !aws.ToBool(input.Overwrite) {
		input.Tags = tags
	}

	_, err := conn.PutParameter(ctx, input)

	if tfawserr.ErrMessageContains(err, errCodeValidationException, "Tier is not supported") {
		log.Printf("[WARN] Creating SSM Parameter (%s): tier %q not supported, using default", name, d.Get("tier").(string))
		input.Tier = ""
		_, err = conn.PutParameter(ctx, input)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SSM Parameter (%s): %s", name, err)
	}

	// Since the AWS SSM Service does not support PutParameter requests with
	// Tags and Overwrite set to true, we make an additional API call
	// to Update the resource's tags if necessary
	if len(tags) > 0 && input.Tags == nil {
		if err := createTags(ctx, conn, name, string(awstypes.ResourceTypeForTaggingParameter), tags); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting SSM Parameter (%s) tags: %s", name, err)
		}
	}

	d.SetId(name)

	return append(diags, resourceParameterRead(ctx, d, meta)...)
}
