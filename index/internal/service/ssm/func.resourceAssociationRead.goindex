package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAssociationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	association, err := findAssociationByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SSM Association %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Association (%s): %s", d.Id(), err)
	}

	d.Set("apply_only_at_cron_interval", association.ApplyOnlyAtCronInterval)
	arn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "ssm",
		Region:    meta.(*conns.AWSClient).Region(ctx),
		AccountID: meta.(*conns.AWSClient).AccountID(ctx),
		Resource:  "association/" + aws.ToString(association.AssociationId),
	}.String()
	d.Set(names.AttrARN, arn)
	d.Set(names.AttrAssociationID, association.AssociationId)
	d.Set("association_name", association.AssociationName)
	d.Set("automation_target_parameter_name", association.AutomationTargetParameterName)
	d.Set("compliance_severity", association.ComplianceSeverity)
	d.Set("document_version", association.DocumentVersion)
	d.Set("max_concurrency", association.MaxConcurrency)
	d.Set("max_errors", association.MaxErrors)
	d.Set(names.AttrName, association.Name)
	if err := d.Set("output_location", flattenAssociationOutputLocation(association.OutputLocation)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting output_location: %s", err)
	}
	if err := d.Set(names.AttrParameters, flattenParameters(association.Parameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting parameters: %s", err)
	}
	d.Set(names.AttrScheduleExpression, association.ScheduleExpression)
	d.Set("sync_compliance", association.SyncCompliance)
	if err := d.Set("targets", flattenTargets(association.Targets)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting targets: %s", err)
	}

	return diags
}
