package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataDocumentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &ssm.GetDocumentInput{
		DocumentFormat: awstypes.DocumentFormat(d.Get("document_format").(string)),
		Name:           aws.String(name),
	}

	if v, ok := d.GetOk("document_version"); ok {
		input.DocumentVersion = aws.String(v.(string))
	}

	output, err := conn.GetDocument(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SSM Document (%s) content: %s", name, err)
	}

	documentType, name := output.DocumentType, aws.ToString(output.Name)
	d.SetId(name)
	if !strings.HasPrefix(name, "AWS-") {
		d.Set(names.AttrARN, documentARN(ctx, meta.(*conns.AWSClient), documentType, name))
	} else {
		d.Set(names.AttrARN, name)
	}
	d.Set(names.AttrContent, output.Content)
	d.Set("document_format", output.DocumentFormat)
	d.Set("document_type", documentType)
	d.Set("document_version", output.DocumentVersion)
	d.Set(names.AttrName, name)

	return diags
}
