package github.com/hashicorp/terraform-provider-aws/internal/service/ssm
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMaintenanceWindowUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		// Replace must be set otherwise its not possible to remove optional attributes, e.g.
		// ValidationException: 1 validation error detected: Value '' at 'startDate' failed to satisfy constraint: Member must have length greater than or equal to 1
		input := &ssm.UpdateMaintenanceWindowInput{
			AllowUnassociatedTargets: aws.Bool(d.Get("allow_unassociated_targets").(bool)),
			Cutoff:                   aws.Int32(int32(d.Get("cutoff").(int))),
			Duration:                 aws.Int32(int32(d.Get(names.AttrDuration).(int))),
			Enabled:                  aws.Bool(d.Get(names.AttrEnabled).(bool)),
			Name:                     aws.String(d.Get(names.AttrName).(string)),
			Replace:                  aws.Bool(true),
			Schedule:                 aws.String(d.Get(names.AttrSchedule).(string)),
			WindowId:                 aws.String(d.Id()),
		}

		if v, ok := d.GetOk(names.AttrDescription); ok {
			input.Description = aws.String(v.(string))
		}

		if v, ok := d.GetOk("end_date"); ok {
			input.EndDate = aws.String(v.(string))
		}

		if v, ok := d.GetOk("schedule_offset"); ok {
			input.ScheduleOffset = aws.Int32(int32(v.(int)))
		}

		if v, ok := d.GetOk("schedule_timezone"); ok {
			input.ScheduleTimezone = aws.String(v.(string))
		}

		if v, ok := d.GetOk("start_date"); ok {
			input.StartDate = aws.String(v.(string))
		}

		_, err := conn.UpdateMaintenanceWindow(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SSM Maintenance Window (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceMaintenanceWindowRead(ctx, d, meta)...)
}
