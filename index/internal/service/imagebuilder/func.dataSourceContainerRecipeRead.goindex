package github.com/hashicorp/terraform-provider-aws/internal/service/imagebuilder
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceContainerRecipeRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ImageBuilderClient(ctx)

	arn := d.Get(names.AttrARN).(string)
	containerRecipe, err := findContainerRecipeByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Image Builder Container Recipe (%s): %s", arn, err)
	}

	arn = aws.ToString(containerRecipe.Arn)
	d.SetId(arn)
	d.Set(names.AttrARN, arn)
	if err := d.Set("component", flattenComponentConfigurations(containerRecipe.Components)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting component: %s", err)
	}
	d.Set("container_type", containerRecipe.ContainerType)
	d.Set("date_created", containerRecipe.DateCreated)
	d.Set(names.AttrDescription, containerRecipe.Description)
	d.Set("dockerfile_template_data", containerRecipe.DockerfileTemplateData)
	d.Set(names.AttrEncrypted, containerRecipe.Encrypted)
	if containerRecipe.InstanceConfiguration != nil {
		if err := d.Set("instance_configuration", []any{flattenInstanceConfiguration(containerRecipe.InstanceConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting instance_configuration: %s", err)
		}
	} else {
		d.Set("instance_configuration", nil)
	}
	d.Set(names.AttrKMSKeyID, containerRecipe.KmsKeyId)
	d.Set(names.AttrName, containerRecipe.Name)
	d.Set(names.AttrOwner, containerRecipe.Owner)
	d.Set("parent_image", containerRecipe.ParentImage)
	d.Set("platform", containerRecipe.Platform)
	if err := d.Set("target_repository", []any{flattenTargetContainerRepository(containerRecipe.TargetRepository)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting target_repository: %s", err)
	}
	d.Set(names.AttrVersion, containerRecipe.Version)
	d.Set("working_directory", containerRecipe.WorkingDirectory)

	setTagsOut(ctx, containerRecipe.Tags)

	return diags
}
