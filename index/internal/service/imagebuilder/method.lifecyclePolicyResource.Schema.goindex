package github.com/hashicorp/terraform-provider-aws/internal/service/imagebuilder
import (
	"context"
	"fmt"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/imagebuilder"
	awstypes "github.com/aws/aws-sdk-go-v2/service/imagebuilder/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *lifecyclePolicyResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	lifecyclePolicyStatusType := fwtypes.StringEnumType[awstypes.LifecyclePolicyStatus]()

	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrDescription: schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 1024),
				},
			},
			"execution_role": schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Required:   true,
			},
			names.AttrID: framework.IDAttribute(),
			names.AttrName: schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexache.MustCompile(`^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$`), ""),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			names.AttrResourceType: schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.LifecyclePolicyResourceType](),
				Required:   true,
			},
			names.AttrStatus: schema.StringAttribute{
				CustomType: lifecyclePolicyStatusType,
				Optional:   true,
				Computed:   true,
				Default:    lifecyclePolicyStatusType.AttributeDefault(awstypes.LifecyclePolicyStatusEnabled),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			"policy_detail": schema.SetNestedBlock{
				CustomType: fwtypes.NewSetNestedObjectTypeOf[lifecyclePolicyDetailModel](ctx),
				Validators: []validator.Set{
					setvalidator.IsRequired(),
					setvalidator.SizeBetween(1, 3),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						names.AttrAction: schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailActionModel](ctx),
							Validators: []validator.List{
								listvalidator.IsRequired(),
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrType: schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.LifecyclePolicyDetailActionType](),
										Required:   true,
									},
								},
								Blocks: map[string]schema.Block{
									"include_resources": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailActionIncludeResourcesModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"amis": schema.BoolAttribute{
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.UseStateForUnknown(),
													},
												},
												"containers": schema.BoolAttribute{
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.UseStateForUnknown(),
													},
												},
												"snapshots": schema.BoolAttribute{
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.UseStateForUnknown(),
													},
												},
											},
										},
									},
								},
							},
						},
						"exclusion_rules": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailExclusionRulesModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"tag_map": schema.MapAttribute{
										CustomType:  fwtypes.MapOfStringType,
										Optional:    true,
										ElementType: types.StringType,
									},
								},
								Blocks: map[string]schema.Block{
									"amis": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailExclusionRulesAMIsModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"is_public": schema.BoolAttribute{
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.UseStateForUnknown(),
													},
												},
												"regions": schema.ListAttribute{
													CustomType:  fwtypes.ListOfStringType,
													ElementType: types.StringType,
													Optional:    true,
												},
												"shared_accounts": schema.ListAttribute{
													CustomType:  fwtypes.ListOfStringType,
													ElementType: types.StringType,
													Optional:    true,
												},
												"tag_map": schema.MapAttribute{
													CustomType:  fwtypes.MapOfStringType,
													Optional:    true,
													ElementType: types.StringType,
												},
											},
											Blocks: map[string]schema.Block{
												"last_launched": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailExclusionRulesAmisLastLaunchedModel](ctx),
													Validators: []validator.List{
														listvalidator.SizeAtMost(1),
													},
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															names.AttrUnit: schema.StringAttribute{
																CustomType: fwtypes.StringEnumType[awstypes.LifecyclePolicyTimeUnit](),
																Required:   true,
															},
															names.AttrValue: schema.Int64Attribute{
																Required: true,
																Validators: []validator.Int64{
																	int64validator.Between(1, 365),
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						names.AttrFilter: schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyDetailFilterModel](ctx),
							Validators: []validator.List{
								listvalidator.IsRequired(),
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"retain_at_least": schema.Int64Attribute{
										Optional: true,
										Validators: []validator.Int64{
											int64validator.Between(1, 10),
										},
									},
									names.AttrType: schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.LifecyclePolicyDetailFilterType](),
										Required:   true,
									},
									names.AttrUnit: schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.LifecyclePolicyTimeUnit](),
										Optional:   true,
									},
									names.AttrValue: schema.Int64Attribute{
										Required: true,
										Validators: []validator.Int64{
											int64validator.Between(1, 1000),
										},
									},
								},
							},
						},
					},
				},
			},
			"resource_selection": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[lifecyclePolicyResourceSelectionModel](ctx),
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"tag_map": schema.MapAttribute{
							CustomType:  fwtypes.MapOfStringType,
							Optional:    true,
							ElementType: types.StringType,
						},
					},
					Blocks: map[string]schema.Block{
						"recipe": schema.SetNestedBlock{
							CustomType: fwtypes.NewSetNestedObjectTypeOf[lifecyclePolicyResourceSelectionRecipeModel](ctx),
							Validators: []validator.Set{
								setvalidator.SizeAtMost(50),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrName: schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexache.MustCompile(`^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$`), ""),
										},
									},
									"semantic_version": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.RegexMatches(regexache.MustCompile(`^[0-9]+\.[0-9]+\.[0-9]+$`), ""),
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
