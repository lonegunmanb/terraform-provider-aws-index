package github.com/hashicorp/terraform-provider-aws/internal/service/imagebuilder
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceInfrastructureConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ImageBuilderClient(ctx)

	arn := d.Get(names.AttrARN).(string)
	infrastructureConfiguration, err := findInfrastructureConfigurationByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Image Builder Infrastructure Configuration (%s): %s", arn, err)
	}

	d.SetId(aws.ToString(infrastructureConfiguration.Arn))
	d.Set(names.AttrARN, infrastructureConfiguration.Arn)
	d.Set("date_created", infrastructureConfiguration.DateCreated)
	d.Set("date_updated", infrastructureConfiguration.DateUpdated)
	d.Set(names.AttrDescription, infrastructureConfiguration.Description)
	if infrastructureConfiguration.InstanceMetadataOptions != nil {
		if err := d.Set("instance_metadata_options", []any{flattenInstanceMetadataOptions(infrastructureConfiguration.InstanceMetadataOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting instance_metadata_options: %s", err)
		}
	} else {
		d.Set("instance_metadata_options", nil)
	}
	d.Set("instance_profile_name", infrastructureConfiguration.InstanceProfileName)
	d.Set("instance_types", infrastructureConfiguration.InstanceTypes)
	d.Set("key_pair", infrastructureConfiguration.KeyPair)
	if infrastructureConfiguration.Logging != nil {
		if err := d.Set("logging", []any{flattenLogging(infrastructureConfiguration.Logging)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting logging: %s", err)
		}
	} else {
		d.Set("logging", nil)
	}
	d.Set(names.AttrName, infrastructureConfiguration.Name)
	if infrastructureConfiguration.Placement != nil {
		if err := d.Set("placement", []any{flattenPlacement(infrastructureConfiguration.Placement)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting placement: %s", err)
		}
	} else {
		d.Set("placement", nil)
	}
	d.Set(names.AttrResourceTags, keyValueTags(ctx, infrastructureConfiguration.ResourceTags).Map())
	d.Set(names.AttrSecurityGroupIDs, infrastructureConfiguration.SecurityGroupIds)
	d.Set(names.AttrSNSTopicARN, infrastructureConfiguration.SnsTopicArn)
	d.Set(names.AttrSubnetID, infrastructureConfiguration.SubnetId)
	d.Set("terminate_instance_on_failure", infrastructureConfiguration.TerminateInstanceOnFailure)

	setTagsOut(ctx, infrastructureConfiguration.Tags)

	return diags
}
