package github.com/hashicorp/terraform-provider-aws/internal/service/imagebuilder
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDistributionConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ImageBuilderClient(ctx)

	arn := d.Get(names.AttrARN).(string)
	distributionConfiguration, err := findDistributionConfigurationByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Image Builder Distribution Configuration (%s): %s", arn, err)
	}

	arn = aws.ToString(distributionConfiguration.Arn)
	d.SetId(arn)
	d.Set(names.AttrARN, arn)
	d.Set("date_created", distributionConfiguration.DateCreated)
	d.Set("date_updated", distributionConfiguration.DateUpdated)
	d.Set(names.AttrDescription, distributionConfiguration.Description)
	if err := d.Set("distribution", flattenDistributions(distributionConfiguration.Distributions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting distribution: %s", err)
	}
	d.Set(names.AttrName, distributionConfiguration.Name)

	setTagsOut(ctx, distributionConfiguration.Tags)

	return diags
}
