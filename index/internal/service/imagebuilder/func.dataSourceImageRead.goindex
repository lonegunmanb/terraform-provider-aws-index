package github.com/hashicorp/terraform-provider-aws/internal/service/imagebuilder
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceImageRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ImageBuilderClient(ctx)

	arn := d.Get(names.AttrARN).(string)
	image, err := findImageByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Image Builder Image (%s): %s", arn, err)
	}

	d.SetId(aws.ToString(image.Arn))
	// To prevent Terraform errors, only reset arn if not configured.
	// The configured ARN may contain x.x.x wildcards while the API returns
	// the full build version #.#.#/# suffix.
	if _, ok := d.GetOk(names.AttrARN); !ok {
		d.Set(names.AttrARN, image.Arn)
	}
	d.Set("build_version_arn", image.Arn)
	if image.ContainerRecipe != nil {
		d.Set("container_recipe_arn", image.ContainerRecipe.Arn)
	}
	d.Set("date_created", image.DateCreated)
	if image.DistributionConfiguration != nil {
		d.Set("distribution_configuration_arn", image.DistributionConfiguration.Arn)
	}
	d.Set("enhanced_image_metadata_enabled", image.EnhancedImageMetadataEnabled)
	if image.ImageRecipe != nil {
		d.Set("image_recipe_arn", image.ImageRecipe.Arn)
	}
	if image.ImageScanningConfiguration != nil {
		if err := d.Set("image_scanning_configuration", []any{flattenImageScanningConfiguration(image.ImageScanningConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting image_scanning_configuration: %s", err)
		}
	} else {
		d.Set("image_scanning_configuration", nil)
	}
	if image.ImageTestsConfiguration != nil {
		if err := d.Set("image_tests_configuration", []any{flattenImageTestsConfiguration(image.ImageTestsConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting image_tests_configuration: %s", err)
		}
	} else {
		d.Set("image_tests_configuration", nil)
	}
	if image.InfrastructureConfiguration != nil {
		d.Set("infrastructure_configuration_arn", image.InfrastructureConfiguration.Arn)
	}
	d.Set(names.AttrName, image.Name)
	d.Set("platform", image.Platform)
	d.Set("os_version", image.OsVersion)
	if image.OutputResources != nil {
		if err := d.Set("output_resources", []any{flattenOutputResources(image.OutputResources)}); err != nil { // nosemgrep:ci.data-source-with-resource-read
			return sdkdiag.AppendErrorf(diags, "setting output_resources: %s", err)
		}
	} else {
		d.Set("output_resources", nil)
	}
	d.Set(names.AttrVersion, image.Version)

	setTagsOut(ctx, image.Tags)

	return diags
}
