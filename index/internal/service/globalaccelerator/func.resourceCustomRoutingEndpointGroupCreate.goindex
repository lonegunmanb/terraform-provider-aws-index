package github.com/hashicorp/terraform-provider-aws/internal/service/globalaccelerator
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	awstypes "github.com/aws/aws-sdk-go-v2/service/globalaccelerator/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCustomRoutingEndpointGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlobalAcceleratorClient(ctx)

	input := &globalaccelerator.CreateCustomRoutingEndpointGroupInput{
		DestinationConfigurations: expandCustomRoutingDestinationConfigurations(d.Get("destination_configuration").(*schema.Set).List()),
		EndpointGroupRegion:       aws.String(meta.(*conns.AWSClient).Region(ctx)),
		IdempotencyToken:          aws.String(id.UniqueId()),
		ListenerArn:               aws.String(d.Get("listener_arn").(string)),
	}

	if v, ok := d.GetOk("endpoint_group_region"); ok {
		input.EndpointGroupRegion = aws.String(v.(string))
	}

	output, err := conn.CreateCustomRoutingEndpointGroup(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Global Accelerator Custom Routing Endpoint Group: %s", err)
	}

	d.SetId(aws.ToString(output.EndpointGroup.EndpointGroupArn))

	acceleratorARN, err := listenerOrEndpointGroupARNToAcceleratorARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if _, err := waitCustomRoutingAcceleratorDeployed(ctx, conn, acceleratorARN, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Global Accelerator Custom Routing Accelerator (%s) deploy: %s", acceleratorARN, err)
	}

	if v, ok := d.GetOk("endpoint_configuration"); ok {
		input := &globalaccelerator.AddCustomRoutingEndpointsInput{
			EndpointConfigurations: expandCustomRoutingEndpointConfigurations(v.(*schema.Set).List()),
			EndpointGroupArn:       aws.String(d.Id()),
		}

		_, err := conn.AddCustomRoutingEndpoints(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "adding Global Accelerator Custom Routing Endpoint Group (%s) endpoints: %s", d.Id(), err)
		}

		if _, err := waitCustomRoutingAcceleratorDeployed(ctx, conn, acceleratorARN, d.Timeout(schema.TimeoutCreate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Global Accelerator Custom Routing Accelerator (%s) deploy: %s", acceleratorARN, err)
		}
	}

	return append(diags, resourceCustomRoutingEndpointGroupRead(ctx, d, meta)...)
}
