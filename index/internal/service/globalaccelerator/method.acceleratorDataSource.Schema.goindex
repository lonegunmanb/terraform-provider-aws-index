package github.com/hashicorp/terraform-provider-aws/internal/service/globalaccelerator
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	awstypes "github.com/aws/aws-sdk-go-v2/service/globalaccelerator/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *acceleratorDataSource) Schema(ctx context.Context, request datasource.SchemaRequest, response *datasource.SchemaResponse) {
	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Optional:   true,
				Computed:   true,
			},
			names.AttrAttributes: schema.ListAttribute{
				CustomType: fwtypes.NewListNestedObjectTypeOf[acceleratorAttributesModel](ctx),
				Computed:   true,
				ElementType: types.ObjectType{
					AttrTypes: fwtypes.AttributeTypesMust[acceleratorAttributesModel](ctx),
				},
			},
			names.AttrDNSName: schema.StringAttribute{
				Computed: true,
			},
			"dual_stack_dns_name": schema.StringAttribute{
				Computed: true,
			},
			names.AttrEnabled: schema.BoolAttribute{
				Computed: true,
			},
			names.AttrHostedZoneID: schema.StringAttribute{
				Computed: true,
			},
			names.AttrID: schema.StringAttribute{
				Computed: true,
			},
			names.AttrIPAddressType: schema.StringAttribute{
				Computed: true,
			},
			"ip_sets": schema.ListAttribute{
				CustomType: fwtypes.NewListNestedObjectTypeOf[ipSetModel](ctx),
				Computed:   true,
				ElementType: types.ObjectType{
					AttrTypes: fwtypes.AttributeTypesMust[ipSetModel](ctx),
				},
			},
			names.AttrName: schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			names.AttrTags: tftags.TagsAttributeComputedOnly(),
		},
	}
}
