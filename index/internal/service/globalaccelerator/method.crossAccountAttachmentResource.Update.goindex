package github.com/hashicorp/terraform-provider-aws/internal/service/globalaccelerator
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	awstypes "github.com/aws/aws-sdk-go-v2/service/globalaccelerator/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *crossAccountAttachmentResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new crossAccountAttachmentResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().GlobalAcceleratorClient(ctx)

	if !new.Name.Equal(old.Name) ||
		!new.Principals.Equal(old.Principals) ||
		!new.Resources.Equal(old.Resources) {
		input := &globalaccelerator.UpdateCrossAccountAttachmentInput{
			AttachmentArn: fwflex.StringFromFramework(ctx, new.ID),
		}

		if !new.Name.Equal(old.Name) {
			input.Name = fwflex.StringFromFramework(ctx, new.Name)
		}

		if !new.Principals.Equal(old.Principals) {
			oldPrincipals, newPrincipals := fwflex.ExpandFrameworkStringValueSet(ctx, old.Principals), fwflex.ExpandFrameworkStringValueSet(ctx, new.Principals)
			input.AddPrincipals, input.RemovePrincipals = newPrincipals.Difference(oldPrincipals), oldPrincipals.Difference(newPrincipals)
		}

		if !new.Resources.Equal(old.Resources) {
			oldResources, diags := old.Resources.ToSlice(ctx)
			response.Diagnostics.Append(diags...)
			if response.Diagnostics.HasError() {
				return
			}

			newResources, diags := new.Resources.ToSlice(ctx)
			response.Diagnostics.Append(diags...)
			if response.Diagnostics.HasError() {
				return
			}

			add, remove, _ := flex.DiffSlices(oldResources, newResources, func(v1, v2 *resourceModel) bool {
				return v1.Cidr.Equal(v2.Cidr) && v1.EndpointID.Equal(v2.EndpointID) && v1.Region.Equal(v2.Region)
			})

			input.AddResources = tfslices.ApplyToAll(add, func(v *resourceModel) awstypes.Resource {
				return awstypes.Resource{
					Cidr:       fwflex.StringFromFramework(ctx, v.Cidr),
					EndpointId: fwflex.StringFromFramework(ctx, v.EndpointID),
					Region:     fwflex.StringFromFramework(ctx, v.Region),
				}
			})
			input.RemoveResources = tfslices.ApplyToAll(remove, func(v *resourceModel) awstypes.Resource {
				return awstypes.Resource{
					Cidr:       fwflex.StringFromFramework(ctx, v.Cidr),
					EndpointId: fwflex.StringFromFramework(ctx, v.EndpointID),
					Region:     fwflex.StringFromFramework(ctx, v.Region),
				}
			})
		}

		output, err := conn.UpdateCrossAccountAttachment(ctx, input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Global Accelerator Cross-account Attachment (%s)", new.ID.ValueString()), err.Error())

			return
		}

		new.LastModifiedTime = fwflex.TimeToFramework(ctx, output.CrossAccountAttachment.LastModifiedTime)
	} else {
		new.LastModifiedTime = old.LastModifiedTime
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
