package github.com/hashicorp/terraform-provider-aws/internal/service/globalaccelerator
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	awstypes "github.com/aws/aws-sdk-go-v2/service/globalaccelerator/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEndpointGroupUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlobalAcceleratorClient(ctx)

	input := &globalaccelerator.UpdateEndpointGroupInput{
		EndpointGroupArn: aws.String(d.Id()),
	}

	if v, ok := d.GetOk("endpoint_configuration"); ok && v.(*schema.Set).Len() > 0 {
		input.EndpointConfigurations = expandEndpointConfigurations(v.(*schema.Set).List())
	} else {
		input.EndpointConfigurations = []awstypes.EndpointConfiguration{}
	}

	if v, ok := d.GetOk("health_check_interval_seconds"); ok {
		input.HealthCheckIntervalSeconds = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("health_check_path"); ok {
		input.HealthCheckPath = aws.String(v.(string))
	}

	if v, ok := d.GetOk("health_check_port"); ok {
		input.HealthCheckPort = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("health_check_protocol"); ok {
		input.HealthCheckProtocol = awstypes.HealthCheckProtocol(v.(string))
	}

	if v, ok := d.GetOk("port_override"); ok && v.(*schema.Set).Len() > 0 {
		input.PortOverrides = expandPortOverrides(v.(*schema.Set).List())
	} else {
		input.PortOverrides = []awstypes.PortOverride{}
	}

	if v, ok := d.GetOk("threshold_count"); ok {
		input.ThresholdCount = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.Get("traffic_dial_percentage").(float64); ok {
		input.TrafficDialPercentage = aws.Float32(float32(v))
	}

	_, err := conn.UpdateEndpointGroup(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Global Accelerator Endpoint Group (%s): %s", d.Id(), err)
	}

	acceleratorARN, err := listenerOrEndpointGroupARNToAcceleratorARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if _, err := waitAcceleratorDeployed(ctx, conn, acceleratorARN, d.Timeout(schema.TimeoutUpdate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Global Accelerator Accelerator (%s) deploy: %s", acceleratorARN, err)
	}

	return append(diags, resourceEndpointGroupRead(ctx, d, meta)...)
}
