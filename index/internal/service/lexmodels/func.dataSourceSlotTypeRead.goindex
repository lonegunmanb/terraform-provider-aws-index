package github.com/hashicorp/terraform-provider-aws/internal/service/lexmodels
import (
	"context"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSlotTypeRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LexModelsClient(ctx)

	name := d.Get(names.AttrName).(string)
	version := d.Get(names.AttrVersion).(string)
	output, err := findSlotTypeVersionByName(ctx, conn, name, version)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Lex Slot Type (%s/%s): %s", name, version, err)
	}

	d.SetId(name)
	d.Set("checksum", output.Checksum)
	d.Set(names.AttrCreatedDate, output.CreatedDate.Format(time.RFC3339))
	d.Set(names.AttrDescription, output.Description)
	d.Set("enumeration_value", flattenEnumerationValues(output.EnumerationValues))
	d.Set(names.AttrLastUpdatedDate, output.LastUpdatedDate.Format(time.RFC3339))
	d.Set(names.AttrName, output.Name)
	d.Set("value_selection_strategy", output.ValueSelectionStrategy)
	d.Set(names.AttrVersion, output.Version)

	return diags
}
