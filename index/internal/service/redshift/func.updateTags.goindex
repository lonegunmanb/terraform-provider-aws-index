package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *redshift.Client, identifier string, oldTagsMap, newTagsMap any, optFns ...func(*redshift.Options)) error {
	oldTags := tftags.New(ctx, oldTagsMap)
	newTags := tftags.New(ctx, newTagsMap)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.Redshift)
	if len(removedTags) > 0 {
		input := redshift.DeleteTagsInput{
			ResourceName: aws.String(identifier),
			TagKeys:      removedTags.Keys(),
		}

		_, err := conn.DeleteTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.Redshift)
	if len(updatedTags) > 0 {
		input := redshift.CreateTagsInput{
			ResourceName: aws.String(identifier),
			Tags:         svcTags(updatedTags),
		}

		_, err := conn.CreateTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	return nil
}
