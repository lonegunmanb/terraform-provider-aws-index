package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"errors"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findDataShareConsumerAssociationByID(ctx context.Context, conn *redshift.Client, id string) (*awstypes.DataShare, error) {
	parts, err := intflex.ExpandResourceId(id, dataShareConsumerAssociationIDPartCount, true)
	if err != nil {
		return nil, err
	}
	dataShareARN := parts[0]
	associateEntireAccount := parts[1]
	consumerARN := parts[2]
	consumerRegion := parts[3]

	in := &redshift.DescribeDataSharesInput{
		DataShareArn: aws.String(dataShareARN),
	}

	out, err := conn.DescribeDataShares(ctx, in)
	if errs.IsAErrorMessageContains[*awstypes.InvalidDataShareFault](err, "because the ARN doesn't exist.") ||
		errs.IsAErrorMessageContains[*awstypes.InvalidDataShareFault](err, "either doesn't exist or isn't associated with this data consumer") {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: in,
		}
	}

	if err != nil {
		return nil, err
	}

	if out == nil || len(out.DataShares) == 0 {
		return nil, tfresource.NewEmptyResultError(in)
	}
	if len(out.DataShares) != 1 {
		return nil, tfresource.NewTooManyResultsError(len(out.DataShares), in)
	}

	share := out.DataShares[0]

	// The data share should include an association in an "ACTIVE" status where
	// one of the following is true:
	// - `associate_entire_account` is `true` and `ConsumerIdentifier` matches the
	//   account number of the data share ARN.
	// - `consumer_arn` is set and `ConsumerIdentifier` matches its value.
	// - `consumer_region` is set and `ConsumerRegion` matches its value.
	for _, assoc := range share.DataShareAssociations {
		if assoc.Status == awstypes.DataShareStatusActive {
			if associateEntireAccount == "true" && accountIDFromARN(dataShareARN) == aws.ToString(assoc.ConsumerIdentifier) ||
				consumerARN != "" && consumerARN == aws.ToString(assoc.ConsumerIdentifier) ||
				consumerRegion != "" && consumerRegion == aws.ToString(assoc.ConsumerRegion) {
				return &share, nil
			}
		}
	}

	return nil, &retry.NotFoundError{
		LastError:   err,
		LastRequest: in,
	}
}
