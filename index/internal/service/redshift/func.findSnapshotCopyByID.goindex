package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findSnapshotCopyByID(ctx context.Context, conn *redshift.Client, id string) (*awstypes.ClusterSnapshotCopyStatus, error) {
	in := &redshift.DescribeClustersInput{
		ClusterIdentifier: aws.String(id),
	}

	out, err := conn.DescribeClusters(ctx, in)
	if err != nil {
		if errs.IsA[*awstypes.ClusterNotFoundFault](err) {
			return nil, &retry.NotFoundError{
				LastError:   err,
				LastRequest: in,
			}
		}

		return nil, err
	}

	if out == nil {
		return nil, tfresource.NewEmptyResultError(in)
	}
	// API should return a ClusterNotFound fault in this case, but check length for
	// extra safety
	if len(out.Clusters) == 0 {
		return nil, &retry.NotFoundError{
			LastError:   errors.New("not found"),
			LastRequest: in,
		}
	}
	if out.Clusters[0].ClusterSnapshotCopyStatus == nil {
		return nil, &retry.NotFoundError{
			LastError:   errors.New("snapshot copy not enabled"),
			LastRequest: in,
		}
	}

	return out.Clusters[0].ClusterSnapshotCopyStatus, nil
}
