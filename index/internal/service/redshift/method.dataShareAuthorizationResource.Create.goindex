package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *dataShareAuthorizationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	conn := r.Meta().RedshiftClient(ctx)

	var plan dataShareAuthorizationResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	dataShareARN := plan.DataShareARN.ValueString()
	consumerIdentifier := plan.ConsumerIdentifier.ValueString()
	parts := []string{
		dataShareARN,
		consumerIdentifier,
	}

	id, err := intflex.FlattenResourceId(parts, dataShareAuthorizationIDPartCount, false)
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Redshift, create.ErrActionFlatteningResourceId, ResNameDataShareAuthorization, dataShareARN, err),
			err.Error(),
		)
		return
	}
	plan.ID = types.StringValue(id)

	in := &redshift.AuthorizeDataShareInput{
		DataShareArn:       aws.String(dataShareARN),
		ConsumerIdentifier: aws.String(consumerIdentifier),
	}

	if !plan.AllowWrites.IsNull() {
		in.AllowWrites = plan.AllowWrites.ValueBoolPointer()
	}

	out, err := conn.AuthorizeDataShare(ctx, in)
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Redshift, create.ErrActionCreating, ResNameDataShareAuthorization, id, err),
			err.Error(),
		)
		return
	}
	if out == nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Redshift, create.ErrActionCreating, ResNameDataShareAuthorization, id, nil),
			errors.New("empty output").Error(),
		)
		return
	}

	plan.ManagedBy = flex.StringToFramework(ctx, out.ManagedBy)
	plan.ProducerARN = flex.StringToFrameworkARN(ctx, out.ProducerArn)

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}
