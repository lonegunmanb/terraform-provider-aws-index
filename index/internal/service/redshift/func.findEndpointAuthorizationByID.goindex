package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func findEndpointAuthorizationByID(ctx context.Context, conn *redshift.Client, id string) (*awstypes.EndpointAuthorization, error) {
	account, clusterId, err := DecodeEndpointAuthorizationID(id)
	if err != nil {
		return nil, err
	}

	input := &redshift.DescribeEndpointAuthorizationInput{
		Account:           aws.String(account),
		ClusterIdentifier: aws.String(clusterId),
	}

	output, err := conn.DescribeEndpointAuthorization(ctx, input)

	if errs.IsA[*awstypes.EndpointAuthorizationNotFoundFault](err) || errs.IsA[*awstypes.ClusterNotFoundFault](err) {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: input,
		}
	}

	if err != nil {
		return nil, err
	}

	if output == nil || len(output.EndpointAuthorizationList) == 0 {
		return nil, tfresource.NewEmptyResultError(input)
	}

	if count := len(output.EndpointAuthorizationList); count > 1 {
		return nil, tfresource.NewTooManyResultsError(count, input)
	}

	return tfresource.AssertSingleValueResult(output.EndpointAuthorizationList)
}
