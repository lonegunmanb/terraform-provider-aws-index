package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandScheduledActionType(tfMap map[string]any) *awstypes.ScheduledActionType {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.ScheduledActionType{}

	if v, ok := tfMap["pause_cluster"].([]any); ok && len(v) > 0 {
		apiObject.PauseCluster = expandPauseClusterMessage(v[0].(map[string]any))
	}

	if v, ok := tfMap["resize_cluster"].([]any); ok && len(v) > 0 {
		apiObject.ResizeCluster = expandResizeClusterMessage(v[0].(map[string]any))
	}

	if v, ok := tfMap["resume_cluster"].([]any); ok && len(v) > 0 {
		apiObject.ResumeCluster = expandResumeClusterMessage(v[0].(map[string]any))
	}

	return apiObject
}
