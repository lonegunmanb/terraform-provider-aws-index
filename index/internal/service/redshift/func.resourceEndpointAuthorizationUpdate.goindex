package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEndpointAuthorizationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RedshiftClient(ctx)

	if d.HasChanges("vpc_ids") {
		account, clusterId, err := DecodeEndpointAuthorizationID(d.Id())
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Redshift Endpoint Authorization (%s): %s", d.Id(), err)
		}

		o, n := d.GetChange("vpc_ids")
		ns := n.(*schema.Set)
		os := o.(*schema.Set)
		added := ns.Difference(os)
		removed := os.Difference(ns)

		if added.Len() > 0 {
			_, err := conn.AuthorizeEndpointAccess(ctx, &redshift.AuthorizeEndpointAccessInput{
				Account:           aws.String(account),
				ClusterIdentifier: aws.String(clusterId),
				VpcIds:            flex.ExpandStringValueSet(added),
			})

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Redshift Endpoint Authorization (%s): authorizing VPCs: %s", d.Id(), err)
			}
		}

		if removed.Len() > 0 {
			_, err := conn.RevokeEndpointAccess(ctx, &redshift.RevokeEndpointAccessInput{
				Account:           aws.String(account),
				ClusterIdentifier: aws.String(clusterId),
				VpcIds:            flex.ExpandStringValueSet(removed),
			})

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Redshift Endpoint Authorization (%s): revoking VPCs: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceEndpointAuthorizationRead(ctx, d, meta)...)
}
