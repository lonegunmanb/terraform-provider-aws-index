package github.com/hashicorp/terraform-provider-aws/internal/service/redshift
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUsageLimitCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RedshiftClient(ctx)

	clusterId := d.Get(names.AttrClusterIdentifier).(string)
	input := redshift.CreateUsageLimitInput{
		Amount:            aws.Int64(int64(d.Get("amount").(int))),
		ClusterIdentifier: aws.String(clusterId),
		FeatureType:       awstypes.UsageLimitFeatureType(d.Get("feature_type").(string)),
		LimitType:         awstypes.UsageLimitLimitType(d.Get("limit_type").(string)),
		Tags:              getTagsIn(ctx),
	}

	if v, ok := d.GetOk("breach_action"); ok {
		input.BreachAction = awstypes.UsageLimitBreachAction(v.(string))
	}

	if v, ok := d.GetOk("period"); ok {
		input.Period = awstypes.UsageLimitPeriod(v.(string))
	}

	out, err := conn.CreateUsageLimit(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Redshift Usage Limit (%s): %s", clusterId, err)
	}

	d.SetId(aws.ToString(out.UsageLimitId))

	return append(diags, resourceUsageLimitRead(ctx, d, meta)...)
}
