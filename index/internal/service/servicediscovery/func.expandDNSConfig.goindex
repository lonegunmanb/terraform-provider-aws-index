package github.com/hashicorp/terraform-provider-aws/internal/service/servicediscovery
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicediscovery/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDNSConfig(tfMap map[string]any) *awstypes.DnsConfig {
	if len(tfMap) == 0 {
		return nil
	}

	apiObject := &awstypes.DnsConfig{}

	if v, ok := tfMap["dns_records"].([]any); ok && len(v) > 0 {
		apiObject.DnsRecords = expandDNSRecords(v)
	}

	if v, ok := tfMap["namespace_id"].(string); ok && v != "" {
		apiObject.NamespaceId = aws.String(v)
	}

	if v, ok := tfMap["routing_policy"].(string); ok && v != "" {
		apiObject.RoutingPolicy = awstypes.RoutingPolicy(v)
	}

	return apiObject
}
