package github.com/hashicorp/terraform-provider-aws/internal/service/servicediscovery
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicediscovery/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceServiceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ServiceDiscoveryClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &servicediscovery.UpdateServiceInput{
			Id: aws.String(d.Id()),
			Service: &awstypes.ServiceChange{
				Description: aws.String(d.Get(names.AttrDescription).(string)),
			},
		}

		if v, ok := d.GetOk("dns_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.Service.DnsConfig = expandDNSConfigChange(v.([]any)[0].(map[string]any))
		}

		if v, ok := d.GetOk("health_check_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.Service.HealthCheckConfig = expandHealthCheckConfig(v.([]any)[0].(map[string]any))
		}

		output, err := conn.UpdateService(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Service Discovery Service (%s): %s", d.Id(), err)
		}

		if output != nil && output.OperationId != nil {
			if _, err := waitOperationSucceeded(ctx, conn, aws.ToString(output.OperationId)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for Service Discovery Service (%s) update: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceServiceRead(ctx, d, meta)...)
}
