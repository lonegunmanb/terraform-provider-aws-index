package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccessLogSubscriptionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	input := vpclattice.CreateAccessLogSubscriptionInput{
		ClientToken:        aws.String(sdkid.UniqueId()),
		DestinationArn:     aws.String(d.Get(names.AttrDestinationARN).(string)),
		ResourceIdentifier: aws.String(d.Get("resource_identifier").(string)),
		Tags:               getTagsIn(ctx),
	}

	if v, ok := d.GetOk("service_network_log_type"); ok {
		input.ServiceNetworkLogType = awstypes.ServiceNetworkLogType(v.(string))
	}

	output, err := conn.CreateAccessLogSubscription(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating VPCLattice Access Log Subscription: %s", err)
	}

	d.SetId(aws.ToString(output.Id))

	return append(diags, resourceAccessLogSubscriptionRead(ctx, d, meta)...)
}
