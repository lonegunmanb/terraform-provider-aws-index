package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceListenerRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	serviceID, listenerID, ruleID, err := listenerRuleParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := vpclattice.UpdateRuleInput{
			ListenerIdentifier: aws.String(listenerID),
			RuleIdentifier:     aws.String(ruleID),
			ServiceIdentifier:  aws.String(serviceID),
		}

		if d.HasChange(names.AttrAction) {
			if v, ok := d.GetOk(names.AttrAction); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.Action = expandRuleAction(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChange("match") {
			if v, ok := d.GetOk("match"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.Match = expandRuleMatch(v.([]any)[0].(map[string]any))
			}
		}
		_, err := conn.UpdateRule(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating VPCLattice Listener Rule (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceListenerRuleRead(ctx, d, meta)...)
}
