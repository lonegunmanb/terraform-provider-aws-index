package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceListenerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	serviceID, listenerID := d.Get("service_identifier").(string), d.Get("listener_identifier").(string)

	output, err := findListenerByTwoPartKey(ctx, conn, serviceID, listenerID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading VPCLattice Listener (%s): %s", listenerCreateResourceID(serviceID, listenerID), err)
	}

	d.SetId(aws.ToString(output.Id))
	d.Set(names.AttrARN, output.Arn)
	d.Set(names.AttrCreatedAt, aws.ToTime(output.CreatedAt).String())
	if err := d.Set(names.AttrDefaultAction, flattenListenerRuleActions(output.DefaultAction)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting default_action: %s", err)
	}
	d.Set("last_updated_at", aws.ToTime(output.LastUpdatedAt).String())
	d.Set("listener_id", output.Id)
	d.Set(names.AttrName, output.Name)
	d.Set(names.AttrPort, output.Port)
	d.Set(names.AttrProtocol, output.Protocol)
	d.Set("service_arn", output.ServiceArn)
	d.Set("service_id", output.ServiceId)

	return diags
}
