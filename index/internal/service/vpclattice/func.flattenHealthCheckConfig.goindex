package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenHealthCheckConfig(apiObject *types.HealthCheckConfig) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		names.AttrProtocol: apiObject.Protocol,
		"protocol_version": apiObject.ProtocolVersion,
	}

	if v := apiObject.Enabled; v != nil {
		tfMap[names.AttrEnabled] = aws.ToBool(v)
	}

	if v := apiObject.HealthCheckIntervalSeconds; v != nil {
		tfMap["health_check_interval_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.HealthCheckTimeoutSeconds; v != nil {
		tfMap["health_check_timeout_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.HealthyThresholdCount; v != nil {
		tfMap["healthy_threshold_count"] = aws.ToInt32(v)
	}

	if v := apiObject.Matcher; v != nil {
		tfMap["matcher"] = []any{flattenMatcherMemberHTTPCode(v.(*types.MatcherMemberHttpCode))}
	}

	if v := apiObject.Path; v != nil {
		tfMap[names.AttrPath] = aws.ToString(v)
	}

	if v := apiObject.Port; v != nil {
		tfMap[names.AttrPort] = aws.ToInt32(v)
	}

	if v := apiObject.UnhealthyThresholdCount; v != nil {
		tfMap["unhealthy_threshold_count"] = aws.ToInt32(v)
	}

	return tfMap
}
