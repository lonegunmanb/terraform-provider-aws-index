package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceListenerCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := vpclattice.CreateListenerInput{
		ClientToken:   aws.String(sdkid.UniqueId()),
		Name:          aws.String(name),
		DefaultAction: expandDefaultAction(d.Get(names.AttrDefaultAction).([]any)),
		Protocol:      types.ListenerProtocol(d.Get(names.AttrProtocol).(string)),
		Tags:          getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrPort); ok && v != nil {
		input.Port = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("service_identifier"); ok {
		input.ServiceIdentifier = aws.String(v.(string))
	}

	if v, ok := d.GetOk("service_arn"); ok {
		input.ServiceIdentifier = aws.String(v.(string))
	}

	output, err := conn.CreateListener(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating VPCLattice Listener (%s): %s", name, err)
	}

	d.SetId(listenerCreateResourceID(aws.ToString(output.ServiceId), aws.ToString(output.Id)))

	return append(diags, resourceListenerRead(ctx, d, meta)...)
}
