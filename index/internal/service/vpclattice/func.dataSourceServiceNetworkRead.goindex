package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceServiceNetworkRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	serviceNetworkID := d.Get("service_network_identifier").(string)
	output, err := findServiceNetworkByID(ctx, conn, serviceNetworkID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading VPCLattice Service Network (%s): %s", serviceNetworkID, err)
	}

	d.SetId(aws.ToString(output.Id))
	serviceNetworkARN := aws.ToString(output.Arn)
	d.Set(names.AttrARN, serviceNetworkARN)
	d.Set("auth_type", output.AuthType)
	d.Set(names.AttrCreatedAt, aws.ToTime(output.CreatedAt).String())
	d.Set("last_updated_at", aws.ToTime(output.LastUpdatedAt).String())
	d.Set(names.AttrName, output.Name)
	d.Set("number_of_associated_services", output.NumberOfAssociatedServices)
	d.Set("number_of_associated_vpcs", output.NumberOfAssociatedVPCs)
	d.Set("service_network_identifier", output.Id)

	return crossAccountSetTags(ctx, conn, diags, serviceNetworkARN, meta.(*conns.AWSClient).AccountID(ctx), "Service Network")
}
