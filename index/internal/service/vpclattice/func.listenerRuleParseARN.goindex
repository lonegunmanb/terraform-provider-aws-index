package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func listenerRuleParseARN(arnS string) (serviceID string, listenerID string, ruleID string, err error) {
	a, err := arn.Parse(arnS)
	if err != nil {
		return
	}

	resource := a.Resource
	var ok bool

	resource, ok = strings.CutPrefix(resource, "service/")
	if !ok {
		err = errors.New("foo")
		return
	}

	serviceID, resource, ok = strings.Cut(resource, "/listener/")
	if !ok {
		err = errors.New("foo")
		return
	}

	listenerID, ruleID, ok = strings.Cut(resource, "/rule/")
	if !ok {
		err = errors.New("foo")
		return
	}
	return
}
