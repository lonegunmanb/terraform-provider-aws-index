package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTargetGroupConfig(tfMap map[string]any) *types.TargetGroupConfig {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.TargetGroupConfig{}

	if v, ok := tfMap[names.AttrHealthCheck].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.HealthCheck = expandHealthCheckConfig(v[0].(map[string]any))
	}

	if v, ok := tfMap[names.AttrIPAddressType].(string); ok && v != "" {
		apiObject.IpAddressType = types.IpAddressType(v)
	}

	if v, ok := tfMap["lambda_event_structure_version"].(string); ok && v != "" {
		apiObject.LambdaEventStructureVersion = types.LambdaEventStructureVersion(v)
	}

	if v, ok := tfMap[names.AttrPort].(int); ok && v != 0 {
		apiObject.Port = aws.Int32(int32(v))
	}

	if v, ok := tfMap[names.AttrProtocol].(string); ok && v != "" {
		apiObject.Protocol = types.TargetGroupProtocol(v)
	}

	if v, ok := tfMap["protocol_version"].(string); ok && v != "" {
		apiObject.ProtocolVersion = types.TargetGroupProtocolVersion(v)
	}

	if v, ok := tfMap["vpc_identifier"].(string); ok && v != "" {
		apiObject.VpcIdentifier = aws.String(v)
	}

	return apiObject
}
