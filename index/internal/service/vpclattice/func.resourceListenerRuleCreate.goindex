package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceListenerRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := vpclattice.CreateRuleInput{
		Action:             expandRuleActions(d.Get(names.AttrAction).([]any)),
		ClientToken:        aws.String(sdkid.UniqueId()),
		ListenerIdentifier: aws.String(d.Get("listener_identifier").(string)),
		Match:              expandRuleMatches(d.Get("match").([]any)),
		Name:               aws.String(name),
		Priority:           aws.Int32(int32(d.Get(names.AttrPriority).(int))),
		ServiceIdentifier:  aws.String(d.Get("service_identifier").(string)),
		Tags:               getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrPriority); ok {
		input.Priority = aws.Int32(int32(v.(int)))
	}

	output, err := conn.CreateRule(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating VPCLattice Listener Rule (%s): %s", name, err)
	}

	serviceID, listenerID, ruleID, err := listenerRuleParseARN(aws.ToString(output.Arn))
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating VPCLattice Listener Rule (%s): %s", name, err)
	}

	d.SetId(listenerRuleCreateResourceID(serviceID, listenerID, ruleID))

	return append(diags, resourceListenerRuleRead(ctx, d, meta)...)
}
