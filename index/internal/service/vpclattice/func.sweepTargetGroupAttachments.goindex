package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepTargetGroupAttachments(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.VPCLatticeClient(ctx)
	var sweepResources []sweep.Sweepable

	var input vpclattice.ListTargetGroupsInput
	pages := vpclattice.NewListTargetGroupsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, targetGroup := range page.Items {
			input := vpclattice.ListTargetsInput{
				TargetGroupIdentifier: targetGroup.Id,
			}
			pages := vpclattice.NewListTargetsPaginator(conn, &input)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)
				if err != nil {
					return nil, err
				}

				for _, target := range page.Items {
					r := resourceTargetGroupAttachment()
					d := r.Data(nil)

					d.SetId(targetGroupAttachmentCreateResourceID(aws.ToString(targetGroup.Id), aws.ToString(target.Id), aws.ToInt32(target.Port)))
					d.Set("target_group_identifier", targetGroup.Id)
					d.Set(names.AttrTarget, []any{flattenTargetSummary(&target)})

					sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
				}
			}
		}
	}

	return sweepResources, nil
}
