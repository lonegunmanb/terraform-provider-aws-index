package github.com/hashicorp/terraform-provider-aws/internal/service/vpclattice
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTargetGroupAttachmentDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).VPCLatticeClient(ctx)

	log.Printf("[INFO] Deleting VPC Lattice Target Group Attachment: %s", d.Id())
	targetGroupID := d.Get("target_group_identifier").(string)
	target := expandTarget(d.Get(names.AttrTarget).([]any)[0].(map[string]any))
	targetID := aws.ToString(target.Id)
	targetPort := aws.ToInt32(target.Port)
	input := vpclattice.DeregisterTargetsInput{
		TargetGroupIdentifier: aws.String(targetGroupID),
		Targets: []types.Target{{
			Id: aws.String(targetID),
		}},
	}
	if targetPort > 0 {
		input.Targets[0].Port = aws.Int32(targetPort)
	}
	_, err := conn.DeregisterTargets(ctx, &input)

	if errs.IsA[*types.ResourceNotFoundException](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting VPC Lattice Target Group Attachment (%s): %s", d.Id(), err)
	}

	if _, err := waitTargetGroupAttachmentDeleted(ctx, conn, targetGroupID, targetID, targetPort, d.Timeout(schema.TimeoutDelete)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for VPC Lattice Target Group Attachment (%s) delete: %s", d.Id(), err)
	}

	return diags
}
