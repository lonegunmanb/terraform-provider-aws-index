package github.com/hashicorp/terraform-provider-aws/internal/service/mediastore
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mediastore"
	awstypes "github.com/aws/aws-sdk-go-v2/service/mediastore/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceContainerCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).MediaStoreClient(ctx)

	input := &mediastore.CreateContainerInput{
		ContainerName: aws.String(d.Get(names.AttrName).(string)),
		Tags:          getTagsIn(ctx),
	}

	resp, err := conn.CreateContainer(ctx, input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating MediaStore Container: %s", err)
	}

	d.SetId(aws.ToString(resp.Container.Name))

	_, err = waitContainerActive(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating MediaStore Container (%s): waiting for completion: %s", d.Id(), err)
	}

	return append(diags, resourceContainerRead(ctx, d, meta)...)
}
