package github.com/hashicorp/terraform-provider-aws/internal/service/bedrockagent
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	awstypes "github.com/aws/aws-sdk-go-v2/service/bedrockagent/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func prepareSupervisorToReleaseCollaborator(ctx context.Context, conn *bedrockagent.Client, id string, timeout time.Duration) diag.Diagnostics {
	_, prepareErr := prepareAgent(ctx, conn, id, timeout)

	var diags diag.Diagnostics

	// This occurs when the last Collaborator from a SUPERVISOR Agent has been removed
	if errs.IsAErrorMessageContains[*awstypes.ValidationException](prepareErr, "The AgentCollaboration attribute is set to SUPERVISOR but no agent collaborators are added.") {
		getAgentInput := bedrockagent.GetAgentInput{
			AgentId: aws.String(id),
		}

		getAgentOutput, err := conn.GetAgent(ctx, &getAgentInput)
		if err != nil {
			diags.AddError("failed to read agent", err.Error())
			return diags
		}

		var state agentResourceModel
		diags.Append(fwflex.Flatten(ctx, getAgentOutput.Agent, &state)...)
		if diags.HasError() {
			return diags
		}

		var updateInput bedrockagent.UpdateAgentInput
		diags.Append(flexExpandForUpdate(ctx, state, &updateInput)...)
		if diags.HasError() {
			return diags
		}

		// Set Collaboration to DISABLED so the agent can be prepared
		updateInput.AgentCollaboration = awstypes.AgentCollaborationDisabled

		_, err = updateAgentWithRetry(ctx, conn, updateInput, timeout)

		if err != nil {
			diags.AddError("failed to update agent", err.Error())
			return diags
		}

		_, err = waitAgentUpdated(ctx, conn, id, timeout)

		if err != nil {
			diags.AddError("failed to wait for agent update", err.Error())
			return diags
		}

		// Preparing the agent releases the reference to the collaborators alias
		_, err = prepareAgent(ctx, conn, id, timeout)

		if err != nil {
			diags.AddError("failed to prepare agent", err.Error())
			return diags
		}

		// Set Collaboration back to SUPERVISOR
		updateInput.AgentCollaboration = awstypes.AgentCollaborationSupervisor
		_, err = updateAgentWithRetry(ctx, conn, updateInput, timeout)
		if err != nil {
			diags.AddError("failed to update agent", err.Error())
			return diags
		}

		_, err = waitAgentUpdated(ctx, conn, id, timeout)
		if err != nil {
			diags.AddError("failed to wait for agent update", err.Error())
			return diags
		}
	} else {
		if prepareErr != nil {
			diags.AddError("failed to prepare agent", prepareErr.Error())
		}
	}
	return diags
}
