package github.com/hashicorp/terraform-provider-aws/internal/service/bedrockagent
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	awstypes "github.com/aws/aws-sdk-go-v2/service/bedrockagent/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *agentResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new agentResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	conn := r.Meta().BedrockAgentClient(ctx)

	if !new.AgentCollaboration.Equal(old.AgentCollaboration) ||
		!new.AgentName.Equal(old.AgentName) ||
		!new.AgentResourceRoleARN.Equal(old.AgentResourceRoleARN) ||
		!new.CustomerEncryptionKeyARN.Equal(old.CustomerEncryptionKeyARN) ||
		!new.Description.Equal(old.Description) ||
		!new.Instruction.Equal(old.Instruction) ||
		!new.IdleSessionTTLInSeconds.Equal(old.IdleSessionTTLInSeconds) ||
		!new.FoundationModel.Equal(old.FoundationModel) ||
		!new.GuardrailConfiguration.Equal(old.GuardrailConfiguration) ||
		!new.MemoryConfiguration.Equal(old.MemoryConfiguration) ||
		!new.PromptOverrideConfiguration.Equal(old.PromptOverrideConfiguration) {
		var input bedrockagent.UpdateAgentInput
		response.Diagnostics.Append(flexExpandForUpdate(ctx, new, &input)...)
		if response.Diagnostics.HasError() {
			return
		}

		if !new.CustomerEncryptionKeyARN.Equal(old.CustomerEncryptionKeyARN) {
			input.CustomerEncryptionKeyArn = fwflex.StringFromFramework(ctx, new.CustomerEncryptionKeyARN)
		}

		if !new.GuardrailConfiguration.Equal(old.GuardrailConfiguration) && !new.GuardrailConfiguration.IsNull() {
			guardrailConfiguration := &awstypes.GuardrailConfiguration{}
			response.Diagnostics.Append(fwflex.Expand(ctx, new.GuardrailConfiguration, guardrailConfiguration)...)
			if response.Diagnostics.HasError() {
				return
			}

			input.GuardrailConfiguration = guardrailConfiguration
		}

		if !new.MemoryConfiguration.Equal(old.MemoryConfiguration) {
			memoryConfiguration := &awstypes.MemoryConfiguration{}
			response.Diagnostics.Append(fwflex.Expand(ctx, new.MemoryConfiguration, memoryConfiguration)...)
			if response.Diagnostics.HasError() {
				return
			}

			if len(memoryConfiguration.EnabledMemoryTypes) > 0 {
				input.MemoryConfiguration = memoryConfiguration
			}
		}

		if !new.PromptOverrideConfiguration.IsNull() {
			promptOverrideConfiguration := &awstypes.PromptOverrideConfiguration{}
			response.Diagnostics.Append(fwflex.Expand(ctx, new.PromptOverrideConfiguration, promptOverrideConfiguration)...)
			if response.Diagnostics.HasError() {
				return
			}

			if len(promptOverrideConfiguration.PromptConfigurations) > 0 {
				input.PromptOverrideConfiguration = promptOverrideConfiguration
			}
		}

		timeout := r.UpdateTimeout(ctx, new.Timeouts)
		_, err := updateAgentWithRetry(ctx, conn, input, timeout)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Bedrock Agent (%s)", new.ID.ValueString()), err.Error())
			return
		}

		agent, err := waitAgentUpdated(ctx, conn, new.ID.ValueString(), timeout)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for Bedrock Agent (%s) update", new.ID.ValueString()), err.Error())
			return
		}

		if new.PrepareAgent.ValueBool() {
			agent, err = prepareAgent(ctx, conn, new.ID.ValueString(), timeout)

			if err != nil {
				response.Diagnostics.AddError("updating Agent", err.Error())
				return
			}
		}

		removeDefaultPrompts(agent)

		// Set values for unknowns.
		response.Diagnostics.Append(fwflex.Flatten(ctx, agent, &new)...)
		if response.Diagnostics.HasError() {
			return
		}
	} else {
		new.AgentVersion = old.AgentVersion
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
