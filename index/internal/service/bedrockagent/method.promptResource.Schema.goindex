package github.com/hashicorp/terraform-provider-aws/internal/service/bedrockagent
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagent/document"
	awstypes "github.com/aws/aws-sdk-go-v2/service/bedrockagent/types"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfsmithy "github.com/hashicorp/terraform-provider-aws/internal/smithy"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *promptResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrCreatedAt: schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"customer_encryption_key_arn": schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Optional:   true,
			},
			"default_variant": schema.StringAttribute{
				Optional: true,
			},
			names.AttrDescription: schema.StringAttribute{
				Optional: true,
			},
			names.AttrID: framework.IDAttribute(),
			names.AttrName: schema.StringAttribute{
				Required: true,
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
			"updated_at": schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
			names.AttrVersion: schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{
			"variant": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[promptVariantModel](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"additional_model_request_fields": schema.StringAttribute{
							CustomType: jsontypes.NormalizedType{},
							Optional:   true,
						},
						"model_id": schema.StringAttribute{
							Optional: true,
						},
						names.AttrName: schema.StringAttribute{
							Required: true,
						},
						"template_type": schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.PromptTemplateType](),
							Required:   true,
						},
					},
					Blocks: map[string]schema.Block{
						"gen_ai_resource": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[promptGenAiResourceModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
								listvalidator.ExactlyOneOf(
									path.MatchRelative().AtParent().AtName("gen_ai_resource"),
									path.MatchRelative().AtParent().AtName("model_id"),
								),
							},
							NestedObject: schema.NestedBlockObject{
								Blocks: map[string]schema.Block{
									"agent": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[promptAgentResourceModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
											listvalidator.ExactlyOneOf(
												path.MatchRelative().AtParent().AtName("agent"),
											),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"agent_identifier": schema.StringAttribute{
													CustomType: fwtypes.ARNType,
													Required:   true,
												},
											},
										},
									},
								},
							},
						},
						"inference_configuration": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[promptInferenceConfigurationModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Blocks: map[string]schema.Block{
									"text": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[promptModelInferenceConfigurationModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
											listvalidator.ExactlyOneOf(
												path.MatchRelative().AtParent().AtName("text"),
											),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"max_tokens": schema.Int32Attribute{
													Optional: true,
												},
												"stop_sequences": schema.ListAttribute{
													CustomType:  fwtypes.ListOfStringType,
													ElementType: types.StringType,
													Optional:    true,
												},
												"temperature": schema.Float32Attribute{
													Optional: true,
												},
												"top_p": schema.Float32Attribute{
													Optional: true,
												},
											},
										},
									},
								},
							},
						},
						"metadata": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[promptMetadataEntryModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeBetween(0, 50),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrKey: schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 128),
										},
									},
									names.AttrValue: schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(0, 1024),
										},
									},
								},
							},
						},
						"template_configuration": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[promptTemplateConfigurationModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Blocks: map[string]schema.Block{
									"chat": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[chatPromptTemplateConfigurationModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
											listvalidator.ExactlyOneOf(
												path.MatchRelative().AtParent().AtName("chat"),
												path.MatchRelative().AtParent().AtName("text"),
											),
										},
										NestedObject: schema.NestedBlockObject{
											Blocks: map[string]schema.Block{
												"input_variable": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[promptInputVariableModel](ctx),
													Validators: []validator.List{
														listvalidator.SizeBetween(0, 20),
													},
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															names.AttrName: schema.StringAttribute{
																Required: true,
															},
														},
													},
												},
												names.AttrMessage: schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[messageModel](ctx),
													Validators: []validator.List{
														listvalidator.IsRequired(),
														listvalidator.SizeAtLeast(1),
													},
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															names.AttrRole: schema.StringAttribute{
																CustomType: fwtypes.StringEnumType[awstypes.ConversationRole](),
																Required:   true,
															},
														},
														Blocks: map[string]schema.Block{
															names.AttrContent: schema.ListNestedBlock{
																CustomType: fwtypes.NewListNestedObjectTypeOf[contentBlockModel](ctx),
																Validators: []validator.List{
																	listvalidator.SizeAtMost(1),
																},
																NestedObject: schema.NestedBlockObject{
																	Attributes: map[string]schema.Attribute{
																		"text": schema.StringAttribute{
																			Optional: true,
																		},
																	},
																	Blocks: map[string]schema.Block{
																		"cache_point": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[cachePointBlockModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																				listvalidator.ExactlyOneOf(
																					path.MatchRelative().AtParent().AtName("cache_point"),
																					path.MatchRelative().AtParent().AtName("text"),
																				),
																			},
																			NestedObject: schema.NestedBlockObject{
																				Attributes: map[string]schema.Attribute{
																					names.AttrType: schema.StringAttribute{
																						CustomType: fwtypes.StringEnumType[awstypes.CachePointType](),
																						Required:   true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												"system": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[systemContentBlockModel](ctx),
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															"text": schema.StringAttribute{
																Optional: true,
															},
														},
														Blocks: map[string]schema.Block{
															"cache_point": schema.ListNestedBlock{
																CustomType: fwtypes.NewListNestedObjectTypeOf[cachePointBlockModel](ctx),
																Validators: []validator.List{
																	listvalidator.ExactlyOneOf(
																		path.MatchRelative().AtParent().AtName("cache_point"),
																		path.MatchRelative().AtParent().AtName("text"),
																	),
																	listvalidator.SizeAtMost(1),
																},
																NestedObject: schema.NestedBlockObject{
																	Attributes: map[string]schema.Attribute{
																		names.AttrType: schema.StringAttribute{
																			CustomType: fwtypes.StringEnumType[awstypes.CachePointType](),
																			Required:   true,
																		},
																	},
																},
															},
														},
													},
												},
												"tool_configuration": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[toolConfigurationModel](ctx),
													Validators: []validator.List{
														listvalidator.SizeAtMost(1),
													},
													NestedObject: schema.NestedBlockObject{
														Blocks: map[string]schema.Block{
															"tool": schema.ListNestedBlock{
																CustomType: fwtypes.NewListNestedObjectTypeOf[toolModel](ctx),
																NestedObject: schema.NestedBlockObject{
																	Blocks: map[string]schema.Block{
																		"cache_point": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[cachePointBlockModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																				listvalidator.ExactlyOneOf(
																					path.MatchRelative().AtParent().AtName("cache_point"),
																					path.MatchRelative().AtParent().AtName("tool_spec"),
																				),
																			},
																			NestedObject: schema.NestedBlockObject{
																				Attributes: map[string]schema.Attribute{
																					names.AttrType: schema.StringAttribute{
																						CustomType: fwtypes.StringEnumType[awstypes.CachePointType](),
																						Required:   true,
																					},
																				},
																			},
																		},
																		"tool_spec": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[toolSpecificationModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																			},
																			NestedObject: schema.NestedBlockObject{
																				Attributes: map[string]schema.Attribute{
																					names.AttrDescription: schema.StringAttribute{
																						Optional: true,
																					},
																					names.AttrName: schema.StringAttribute{
																						Required: true,
																					},
																				},
																				Blocks: map[string]schema.Block{
																					"input_schema": schema.ListNestedBlock{
																						CustomType: fwtypes.NewListNestedObjectTypeOf[toolInputSchemaModel](ctx),
																						Validators: []validator.List{
																							listvalidator.SizeAtMost(1),
																						},
																						NestedObject: schema.NestedBlockObject{
																							Attributes: map[string]schema.Attribute{
																								names.AttrJSON: schema.StringAttribute{
																									CustomType: jsontypes.NormalizedType{},
																									Optional:   true,
																									Validators: []validator.String{
																										stringvalidator.ExactlyOneOf(
																											path.MatchRelative().AtParent().AtName(names.AttrJSON),
																										),
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															"tool_choice": schema.ListNestedBlock{
																CustomType: fwtypes.NewListNestedObjectTypeOf[toolChoiceModel](ctx),
																Validators: []validator.List{
																	listvalidator.SizeAtMost(1),
																},
																NestedObject: schema.NestedBlockObject{
																	Blocks: map[string]schema.Block{
																		"any": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[anyToolChoiceModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																				listvalidator.ExactlyOneOf(
																					path.MatchRelative().AtParent().AtName("any"),
																					path.MatchRelative().AtParent().AtName("auto"),
																					path.MatchRelative().AtParent().AtName("tool"),
																				),
																			},
																		},
																		"auto": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[autoToolChoiceModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																			},
																		},
																		"tool": schema.ListNestedBlock{
																			CustomType: fwtypes.NewListNestedObjectTypeOf[specificToolChoiceModel](ctx),
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(1),
																			},
																			NestedObject: schema.NestedBlockObject{
																				Attributes: map[string]schema.Attribute{
																					names.AttrName: schema.StringAttribute{
																						Required: true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"text": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[textPromptTemplateConfigurationModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"text": schema.StringAttribute{
													Required: true,
												},
											},
											Blocks: map[string]schema.Block{
												"cache_point": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[cachePointModel](ctx),
													Validators: []validator.List{
														listvalidator.SizeAtMost(1),
													},
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															names.AttrType: schema.StringAttribute{
																CustomType: fwtypes.StringEnumType[awstypes.CachePointType](),
																Required:   true,
															},
														},
													},
												},
												"input_variable": schema.ListNestedBlock{
													CustomType: fwtypes.NewListNestedObjectTypeOf[promptInputVariableModel](ctx),
													NestedObject: schema.NestedBlockObject{
														Attributes: map[string]schema.Attribute{
															names.AttrName: schema.StringAttribute{
																Required: true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
