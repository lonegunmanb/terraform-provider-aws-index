package github.com/hashicorp/terraform-provider-aws/internal/service/ivs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ivs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ivs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandThumbnailConfiguration(vSettings []any) *awstypes.ThumbnailConfiguration {
	if len(vSettings) == 0 || vSettings[0] == nil {
		return nil
	}
	a := &awstypes.ThumbnailConfiguration{}
	tfMap := vSettings[0].(map[string]any)

	if v, ok := tfMap["recording_mode"].(string); ok && v != "" {
		a.RecordingMode = awstypes.RecordingMode(v)
	}

	if v, ok := tfMap["target_interval_seconds"].(int); ok {
		a.TargetIntervalSeconds = aws.Int64(int64(v))
	}

	return a
}
