package github.com/hashicorp/terraform-provider-aws/internal/service/ivs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ivs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ivs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceChannelUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).IVSClient(ctx)

	update := false

	arn := d.Id()
	in := &ivs.UpdateChannelInput{
		Arn: aws.String(arn),
	}

	if d.HasChanges("authorized") {
		in.Authorized = d.Get("authorized").(bool)
		update = true
	}

	if d.HasChanges("latency_mode") {
		in.LatencyMode = awstypes.ChannelLatencyMode(d.Get("latency_mode").(string))
		update = true
	}

	if d.HasChanges(names.AttrName) {
		in.Name = aws.String(d.Get(names.AttrName).(string))
		update = true
	}

	if d.HasChanges("recording_configuration_arn") {
		in.RecordingConfigurationArn = aws.String(d.Get("recording_configuration_arn").(string))
		update = true
	}

	if d.HasChanges(names.AttrType) {
		in.Type = awstypes.ChannelType(d.Get(names.AttrType).(string))
		update = true
	}

	if !update {
		return diags
	}

	log.Printf("[DEBUG] Updating IVS Channel (%s): %#v", d.Id(), in)

	out, err := conn.UpdateChannel(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.IVS, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
	}

	if _, err := waitChannelUpdated(ctx, conn, *out.Channel.Arn, d.Timeout(schema.TimeoutUpdate), in); err != nil {
		return create.AppendDiagError(diags, names.IVS, create.ErrActionWaitingForUpdate, ResNameChannel, d.Id(), err)
	}

	return append(diags, resourceChannelRead(ctx, d, meta)...)
}
