package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalyticsv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandStartApplicationInput(d *schema.ResourceData) *kinesisanalyticsv2.StartApplicationInput {
	apiObject := &kinesisanalyticsv2.StartApplicationInput{
		ApplicationName:  aws.String(d.Get(names.AttrName).(string)),
		RunConfiguration: &awstypes.RunConfiguration{},
	}

	if v, ok := d.GetOk("application_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)

		if v, ok := tfMap["sql_application_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)

			if v, ok := tfMap["input"].([]any); ok && len(v) > 0 && v[0] != nil {
				tfMap := v[0].(map[string]any)

				if v, ok := tfMap["input_starting_position_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
					tfMap := v[0].(map[string]any)

					if v, ok := tfMap["input_starting_position"].(string); ok && v != "" {
						apiObject.RunConfiguration.SqlRunConfigurations = []awstypes.SqlRunConfiguration{{
							InputStartingPositionConfiguration: &awstypes.InputStartingPositionConfiguration{
								InputStartingPosition: awstypes.InputStartingPosition(v),
							},
						}}
					}
				}
			}
		}

		if v, ok := tfMap["run_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)

			if v, ok := tfMap["application_restore_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
				tfMap := v[0].(map[string]any)

				apiObject.RunConfiguration.ApplicationRestoreConfiguration = &awstypes.ApplicationRestoreConfiguration{}

				if v, ok := tfMap["application_restore_type"].(string); ok && v != "" {
					apiObject.RunConfiguration.ApplicationRestoreConfiguration.ApplicationRestoreType = awstypes.ApplicationRestoreType(v)
				}

				if v, ok := tfMap["snapshot_name"].(string); ok && v != "" {
					apiObject.RunConfiguration.ApplicationRestoreConfiguration.SnapshotName = aws.String(v)
				}
			}

			if v, ok := tfMap["flink_run_configuration"].([]any); ok && len(v) > 0 && v[0] != nil {
				tfMap := v[0].(map[string]any)

				if v, ok := tfMap["allow_non_restored_state"].(bool); ok {
					apiObject.RunConfiguration.FlinkRunConfiguration = &awstypes.FlinkRunConfiguration{
						AllowNonRestoredState: aws.Bool(v),
					}
				}
			}
		}
	}

	return apiObject
}
