package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalyticsv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplication() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceApplicationCreate,
		ReadWithoutTimeout:   resourceApplicationRead,
		UpdateWithoutTimeout: resourceApplicationUpdate,
		DeleteWithoutTimeout: resourceApplicationDelete,

		CustomizeDiff: customdiff.Sequence(
			customdiff.ForceNewIfChange("application_configuration.0.sql_application_configuration.0.input", func(_ context.Context, old, new, meta any) bool {
				// An existing input configuration cannot be deleted.
				return len(old.([]any)) == 1 && len(new.([]any)) == 0
			}),
		),

		Importer: &schema.ResourceImporter{
			StateContext: resourceApplicationImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(10 * time.Minute),
		},

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"application_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"application_code_configuration": {
								Type:     schema.TypeList,
								Required: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"code_content": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"s3_content_location": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"bucket_arn": {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
																"file_key": {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: validation.StringLenBetween(1, 1024),
																},
																"object_version": {
																	Type:     schema.TypeString,
																	Optional: true,
																},
															},
														},
														ConflictsWith: []string{"application_configuration.0.application_code_configuration.0.code_content.0.text_content"},
													},
													"text_content": {
														Type:          schema.TypeString,
														Optional:      true,
														ValidateFunc:  validation.StringLenBetween(0, 102400),
														ConflictsWith: []string{"application_configuration.0.application_code_configuration.0.code_content.0.s3_content_location"},
													},
												},
											},
										},
										"code_content_type": {
											Type:             schema.TypeString,
											Required:         true,
											ValidateDiagFunc: enum.Validate[awstypes.CodeContentType](),
										},
									},
								},
							},
							"application_snapshot_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								Computed: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"snapshots_enabled": {
											Type:     schema.TypeBool,
											Required: true,
										},
									},
								},
								ConflictsWith: []string{"application_configuration.0.sql_application_configuration"},
							},
							"environment_properties": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"property_group": {
											Type:     schema.TypeSet,
											Required: true,
											MaxItems: 50,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"property_group_id": {
														Type:     schema.TypeString,
														Required: true,
														ValidateFunc: validation.All(
															validation.StringLenBetween(1, 50),
															validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z_.-]+$`), "must only include alphanumeric, underscore, period, or hyphen characters"),
														),
													},
													"property_map": {
														Type:     schema.TypeMap,
														Required: true,
														Elem:     &schema.Schema{Type: schema.TypeString},
													},
												},
											},
										},
									},
								},
								ConflictsWith: []string{"application_configuration.0.sql_application_configuration"},
							},
							"flink_application_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								Computed: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"checkpoint_configuration": {
											Type:     schema.TypeList,
											Optional: true,
											Computed: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"checkpointing_enabled": {
														Type:     schema.TypeBool,
														Optional: true,
														Computed: true,
													},
													"checkpoint_interval": {
														Type:         schema.TypeInt,
														Optional:     true,
														Computed:     true,
														ValidateFunc: validation.IntAtLeast(1),
													},
													"configuration_type": {
														Type:             schema.TypeString,
														Required:         true,
														ValidateDiagFunc: enum.Validate[awstypes.ConfigurationType](),
													},
													"min_pause_between_checkpoints": {
														Type:         schema.TypeInt,
														Optional:     true,
														Computed:     true,
														ValidateFunc: validation.IntAtLeast(0),
													},
												},
											},
										},
										"monitoring_configuration": {
											Type:     schema.TypeList,
											Optional: true,
											Computed: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"configuration_type": {
														Type:             schema.TypeString,
														Required:         true,
														ValidateDiagFunc: enum.Validate[awstypes.ConfigurationType](),
													},
													"log_level": {
														Type:             schema.TypeString,
														Optional:         true,
														Computed:         true,
														ValidateDiagFunc: enum.Validate[awstypes.LogLevel](),
													},
													"metrics_level": {
														Type:             schema.TypeString,
														Optional:         true,
														Computed:         true,
														ValidateDiagFunc: enum.Validate[awstypes.MetricsLevel](),
													},
												},
											},
										},
										"parallelism_configuration": {
											Type:     schema.TypeList,
											Optional: true,
											Computed: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"auto_scaling_enabled": {
														Type:     schema.TypeBool,
														Optional: true,
														Computed: true,
													},
													"configuration_type": {
														Type:             schema.TypeString,
														Required:         true,
														ValidateDiagFunc: enum.Validate[awstypes.ConfigurationType](),
													},
													"parallelism": {
														Type:         schema.TypeInt,
														Optional:     true,
														Computed:     true,
														ValidateFunc: validation.IntAtLeast(1),
													},
													"parallelism_per_kpu": {
														Type:         schema.TypeInt,
														Optional:     true,
														Computed:     true,
														ValidateFunc: validation.IntAtLeast(1),
													},
												},
											},
										},
									},
								},
								ConflictsWith: []string{"application_configuration.0.sql_application_configuration"},
							},
							"run_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								Computed: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"application_restore_configuration": {
											Type:     schema.TypeList,
											Optional: true,
											Computed: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"application_restore_type": {
														Type:             schema.TypeString,
														Optional:         true,
														Computed:         true,
														ValidateDiagFunc: enum.Validate[awstypes.ApplicationRestoreType](),
													},
													"snapshot_name": {
														Type:     schema.TypeString,
														Optional: true,
													},
												},
											},
										},
										"flink_run_configuration": {
											Type:     schema.TypeList,
											Optional: true,
											Computed: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"allow_non_restored_state": {
														Type:     schema.TypeBool,
														Optional: true,
														Computed: true,
													},
												},
											},
										},
									},
								},
								ConflictsWith: []string{"application_configuration.0.sql_application_configuration"},
							},
							"sql_application_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"input": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"in_app_stream_names": {
														Type:     schema.TypeList,
														Computed: true,
														Elem:     &schema.Schema{Type: schema.TypeString},
													},
													"input_id": {
														Type:     schema.TypeString,
														Computed: true,
													},
													"input_parallelism": {
														Type:     schema.TypeList,
														Optional: true,
														Computed: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"count": {
																	Type:         schema.TypeInt,
																	Optional:     true,
																	Computed:     true,
																	ValidateFunc: validation.IntBetween(1, 64),
																},
															},
														},
													},
													"input_processing_configuration": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"input_lambda_processor": {
																	Type:     schema.TypeList,
																	Required: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			names.AttrResourceARN: {
																				Type:         schema.TypeString,
																				Required:     true,
																				ValidateFunc: verify.ValidARN,
																			},
																		},
																	},
																},
															},
														},
													},
													"input_schema": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"record_column": {
																	Type:     schema.TypeList,
																	Required: true,
																	MaxItems: 1000,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"mapping": {
																				Type:     schema.TypeString,
																				Optional: true,
																			},
																			names.AttrName: {
																				Type:         schema.TypeString,
																				Required:     true,
																				ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[^-\s<>&]+$`), "must not include hyphen, whitespace, angle bracket, or ampersand characters"),
																			},
																			"sql_type": {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																		},
																	},
																},
																"record_encoding": {
																	Type:     schema.TypeString,
																	Optional: true,
																},
																"record_format": {
																	Type:     schema.TypeList,
																	Required: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"mapping_parameters": {
																				Type:     schema.TypeList,
																				Required: true,
																				MaxItems: 1,
																				Elem: &schema.Resource{
																					Schema: map[string]*schema.Schema{
																						"csv_mapping_parameters": {
																							Type:     schema.TypeList,
																							Optional: true,
																							MaxItems: 1,
																							Elem: &schema.Resource{
																								Schema: map[string]*schema.Schema{
																									"record_column_delimiter": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																									"record_row_delimiter": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																								},
																							},
																							ExactlyOneOf: []string{
																								"application_configuration.0.sql_application_configuration.0.input.0.input_schema.0.record_format.0.mapping_parameters.0.csv_mapping_parameters",
																								"application_configuration.0.sql_application_configuration.0.input.0.input_schema.0.record_format.0.mapping_parameters.0.json_mapping_parameters",
																							},
																						},
																						"json_mapping_parameters": {
																							Type:     schema.TypeList,
																							Optional: true,
																							MaxItems: 1,
																							Elem: &schema.Resource{
																								Schema: map[string]*schema.Schema{
																									"record_row_path": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																								},
																							},
																							ExactlyOneOf: []string{
																								"application_configuration.0.sql_application_configuration.0.input.0.input_schema.0.record_format.0.mapping_parameters.0.csv_mapping_parameters",
																								"application_configuration.0.sql_application_configuration.0.input.0.input_schema.0.record_format.0.mapping_parameters.0.json_mapping_parameters",
																							},
																						},
																					},
																				},
																			},
																			"record_format_type": {
																				Type:             schema.TypeString,
																				Required:         true,
																				ValidateDiagFunc: enum.Validate[awstypes.RecordFormatType](),
																			},
																		},
																	},
																},
															},
														},
													},
													"input_starting_position_configuration": {
														Type:     schema.TypeList,
														Optional: true,
														Computed: true,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"input_starting_position": {
																	Type:             schema.TypeString,
																	Optional:         true,
																	Computed:         true,
																	ValidateDiagFunc: enum.Validate[awstypes.InputStartingPosition](),
																},
															},
														},
													},
													"kinesis_firehose_input": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																names.AttrResourceARN: {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
															},
														},
														ExactlyOneOf: []string{
															"application_configuration.0.sql_application_configuration.0.input.0.kinesis_streams_input",
															"application_configuration.0.sql_application_configuration.0.input.0.kinesis_firehose_input",
														},
													},
													"kinesis_streams_input": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																names.AttrResourceARN: {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
															},
														},
														ExactlyOneOf: []string{
															"application_configuration.0.sql_application_configuration.0.input.0.kinesis_streams_input",
															"application_configuration.0.sql_application_configuration.0.input.0.kinesis_firehose_input",
														},
													},
													names.AttrNamePrefix: {
														Type:     schema.TypeString,
														Required: true,
														ValidateFunc: validation.All(
															validation.StringLenBetween(1, 32),
															validation.StringMatch(regexache.MustCompile(`^[^-\s<>&]+$`), "must not include hyphen, whitespace, angle bracket, or ampersand characters"),
														),
													},
												},
											},
										},
										"output": {
											Type:     schema.TypeSet,
											Optional: true,
											MaxItems: 3,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"destination_schema": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"record_format_type": {
																	Type:             schema.TypeString,
																	Required:         true,
																	ValidateDiagFunc: enum.Validate[awstypes.RecordFormatType](),
																},
															},
														},
													},
													"kinesis_firehose_output": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																names.AttrResourceARN: {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
															},
														},
													},
													"kinesis_streams_output": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																names.AttrResourceARN: {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
															},
														},
													},
													"lambda_output": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																names.AttrResourceARN: {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
															},
														},
													},
													names.AttrName: {
														Type:     schema.TypeString,
														Required: true,
														ValidateFunc: validation.All(
															validation.StringLenBetween(1, 32),
															validation.StringMatch(regexache.MustCompile(`^[^-\s<>&]+$`), "must not include hyphen, whitespace, angle bracket, or ampersand characters"),
														),
													},
													"output_id": {
														Type:     schema.TypeString,
														Computed: true,
													},
												},
											},
										},
										"reference_data_source": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"reference_id": {
														Type:     schema.TypeString,
														Computed: true,
													},
													"reference_schema": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"record_column": {
																	Type:     schema.TypeList,
																	Required: true,
																	MaxItems: 1000,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"mapping": {
																				Type:     schema.TypeString,
																				Optional: true,
																			},
																			names.AttrName: {
																				Type:         schema.TypeString,
																				Required:     true,
																				ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[^-\s<>&]+$`), "must not include hyphen, whitespace, angle bracket, or ampersand characters"),
																			},
																			"sql_type": {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																		},
																	},
																},
																"record_encoding": {
																	Type:     schema.TypeString,
																	Optional: true,
																},
																"record_format": {
																	Type:     schema.TypeList,
																	Required: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"mapping_parameters": {
																				Type:     schema.TypeList,
																				Required: true,
																				MaxItems: 1,
																				Elem: &schema.Resource{
																					Schema: map[string]*schema.Schema{
																						"csv_mapping_parameters": {
																							Type:     schema.TypeList,
																							Optional: true,
																							MaxItems: 1,
																							Elem: &schema.Resource{
																								Schema: map[string]*schema.Schema{
																									"record_column_delimiter": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																									"record_row_delimiter": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																								},
																							},
																							ExactlyOneOf: []string{
																								"application_configuration.0.sql_application_configuration.0.reference_data_source.0.reference_schema.0.record_format.0.mapping_parameters.0.csv_mapping_parameters",
																								"application_configuration.0.sql_application_configuration.0.reference_data_source.0.reference_schema.0.record_format.0.mapping_parameters.0.json_mapping_parameters",
																							},
																						},
																						"json_mapping_parameters": {
																							Type:     schema.TypeList,
																							Optional: true,
																							MaxItems: 1,
																							Elem: &schema.Resource{
																								Schema: map[string]*schema.Schema{
																									"record_row_path": {
																										Type:     schema.TypeString,
																										Required: true,
																									},
																								},
																							},
																							ExactlyOneOf: []string{
																								"application_configuration.0.sql_application_configuration.0.reference_data_source.0.reference_schema.0.record_format.0.mapping_parameters.0.csv_mapping_parameters",
																								"application_configuration.0.sql_application_configuration.0.reference_data_source.0.reference_schema.0.record_format.0.mapping_parameters.0.json_mapping_parameters",
																							},
																						},
																					},
																				},
																			},
																			"record_format_type": {
																				Type:             schema.TypeString,
																				Required:         true,
																				ValidateDiagFunc: enum.Validate[awstypes.RecordFormatType](),
																			},
																		},
																	},
																},
															},
														},
													},
													"s3_reference_data_source": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"bucket_arn": {
																	Type:         schema.TypeString,
																	Required:     true,
																	ValidateFunc: verify.ValidARN,
																},
																"file_key": {
																	Type:     schema.TypeString,
																	Required: true,
																},
															},
														},
													},
													names.AttrTableName: {
														Type:         schema.TypeString,
														Required:     true,
														ValidateFunc: validation.StringLenBetween(1, 32),
													},
												},
											},
										},
									},
								},
								ConflictsWith: []string{
									"application_configuration.0.application_snapshot_configuration",
									"application_configuration.0.environment_properties",
									"application_configuration.0.flink_application_configuration",
									"application_configuration.0.run_configuration",
									"application_configuration.0.vpc_configuration",
								},
							},
							names.AttrVPCConfiguration: {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrSecurityGroupIDs: {
											Type:     schema.TypeSet,
											Required: true,
											MinItems: 1,
											MaxItems: 5,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrSubnetIDs: {
											Type:     schema.TypeSet,
											Required: true,
											MinItems: 1,
											MaxItems: 16,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										"vpc_configuration_id": {
											Type:     schema.TypeString,
											Computed: true,
										},
										names.AttrVPCID: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
								ConflictsWith: []string{"application_configuration.0.sql_application_configuration"},
							},
						},
					},
				},
				"application_mode": {
					Type:             schema.TypeString,
					Optional:         true,
					Computed:         true,
					ForceNew:         true,
					ValidateDiagFunc: enum.Validate[awstypes.ApplicationMode](),
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"cloudwatch_logging_options": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"cloudwatch_logging_option_id": {
								Type:     schema.TypeString,
								Computed: true,
							},
							"log_stream_arn": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"create_timestamp": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrDescription: {
					Type:         schema.TypeString,
					Optional:     true,
					ForceNew:     true,
					ValidateFunc: validation.StringLenBetween(0, 1024),
				},
				"force_stop": {
					Type:     schema.TypeBool,
					Optional: true,
				},
				"last_update_timestamp": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
					ValidateFunc: validation.All(
						validation.StringLenBetween(1, 128),
						validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z_.-]+$`), "must only include alphanumeric, underscore, period, or hyphen characters"),
					),
				},
				"runtime_environment": {
					Type:             schema.TypeString,
					Required:         true,
					ValidateDiagFunc: enum.Validate[awstypes.RuntimeEnvironment](),
				},
				"service_execution_role": {
					Type:         schema.TypeString,
					Required:     true,
					ValidateFunc: verify.ValidARN,
				},
				"start_application": {
					Type:     schema.TypeBool,
					Optional: true,
				},
				names.AttrStatus: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"version_id": {
					Type:     schema.TypeInt,
					Computed: true,
				},
			}
		},
	}
}
