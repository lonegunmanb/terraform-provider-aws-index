package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalyticsv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func stopApplication(ctx context.Context, conn *kinesisanalyticsv2.Client, input *kinesisanalyticsv2.StopApplicationInput, timeout time.Duration) error {
	applicationName := aws.ToString(input.ApplicationName)

	application, err := findApplicationDetailByName(ctx, conn, applicationName)

	if err != nil {
		return fmt.Errorf("reading Kinesis Analytics v2 Application (%s): %w", applicationName, err)
	}

	applicationARN := aws.ToString(application.ApplicationARN)

	if actual, expected := application.ApplicationStatus, awstypes.ApplicationStatusRunning; actual != expected {
		log.Printf("[DEBUG] Kinesis Analytics v2 Application (%s) has status %s. An application can only be stopped if it's in the %s state", applicationARN, actual, expected)
		return nil
	}

	output, err := conn.StopApplication(ctx, input)

	if err != nil {
		return fmt.Errorf("stopping Kinesis Analytics v2 Application (%s):  %w", applicationARN, err)
	}

	if operationID := aws.ToString(output.OperationId); operationID != "" {
		if _, err := waitApplicationOperationSucceeded(ctx, conn, applicationName, operationID, timeout); err != nil {
			return fmt.Errorf("waiting for Kinesis Analytics v2 Application (%s) operation (%s) success: %w", applicationName, operationID, err)
		}
	}

	if _, err := waitApplicationStopped(ctx, conn, applicationName, timeout); err != nil {
		return fmt.Errorf("waiting for Kinesis Analytics v2 Application (%s) stop: %w", applicationARN, err)
	}

	return nil
}
