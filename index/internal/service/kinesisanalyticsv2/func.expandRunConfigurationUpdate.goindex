package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisanalyticsv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRunConfigurationUpdate(vRunConfigurationUpdate []any) *awstypes.RunConfigurationUpdate {
	if len(vRunConfigurationUpdate) == 0 || vRunConfigurationUpdate[0] == nil {
		return nil
	}

	runConfigurationUpdate := &awstypes.RunConfigurationUpdate{}

	mRunConfiguration := vRunConfigurationUpdate[0].(map[string]any)

	if vApplicationRestoreConfiguration, ok := mRunConfiguration["application_restore_configuration"].([]any); ok && len(vApplicationRestoreConfiguration) > 0 && vApplicationRestoreConfiguration[0] != nil {
		applicationRestoreConfiguration := &awstypes.ApplicationRestoreConfiguration{}

		mApplicationRestoreConfiguration := vApplicationRestoreConfiguration[0].(map[string]any)

		if vApplicationRestoreType, ok := mApplicationRestoreConfiguration["application_restore_type"].(string); ok && vApplicationRestoreType != "" {
			applicationRestoreConfiguration.ApplicationRestoreType = awstypes.ApplicationRestoreType(vApplicationRestoreType)
		}

		if vSnapshotName, ok := mApplicationRestoreConfiguration["snapshot_name"].(string); ok && vSnapshotName != "" {
			applicationRestoreConfiguration.SnapshotName = aws.String(vSnapshotName)
		}

		runConfigurationUpdate.ApplicationRestoreConfiguration = applicationRestoreConfiguration
	}

	if vFlinkRunConfiguration, ok := mRunConfiguration["flink_run_configuration"].([]any); ok && len(vFlinkRunConfiguration) > 0 && vFlinkRunConfiguration[0] != nil {
		flinkRunConfiguration := &awstypes.FlinkRunConfiguration{}

		mFlinkRunConfiguration := vFlinkRunConfiguration[0].(map[string]any)

		if vAllowNonRestoredState, ok := mFlinkRunConfiguration["allow_non_restored_state"].(bool); ok {
			flinkRunConfiguration.AllowNonRestoredState = aws.Bool(vAllowNonRestoredState)
		}

		runConfigurationUpdate.FlinkRunConfiguration = flinkRunConfiguration
	}

	return runConfigurationUpdate
}
