package github.com/hashicorp/terraform-provider-aws/internal/service/transcribe
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/transcribe"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVocabularyFilterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TranscribeClient(ctx)

	in := &transcribe.CreateVocabularyFilterInput{
		VocabularyFilterName: aws.String(d.Get("vocabulary_filter_name").(string)),
		LanguageCode:         types.LanguageCode(d.Get(names.AttrLanguageCode).(string)),
		Tags:                 getTagsIn(ctx),
	}

	if v, ok := d.GetOk("vocabulary_filter_file_uri"); ok {
		in.VocabularyFilterFileUri = aws.String(v.(string))
	}

	if v, ok := d.GetOk("words"); ok {
		in.Words = flex.ExpandStringValueList(v.([]any))
	}

	out, err := conn.CreateVocabularyFilter(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.Transcribe, create.ErrActionCreating, ResNameVocabularyFilter, d.Get("vocabulary_filter_name").(string), err)
	}

	if out == nil {
		return create.AppendDiagError(diags, names.Transcribe, create.ErrActionCreating, ResNameVocabularyFilter, d.Get("vocabulary_filter_name").(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(out.VocabularyFilterName))

	return append(diags, resourceVocabularyFilterRead(ctx, d, meta)...)
}
