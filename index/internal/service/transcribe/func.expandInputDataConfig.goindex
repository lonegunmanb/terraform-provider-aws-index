package github.com/hashicorp/terraform-provider-aws/internal/service/transcribe
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/transcribe"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandInputDataConfig(tfList []any) *types.InputDataConfig {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	s := &types.InputDataConfig{}

	i := tfList[0].(map[string]any)

	if val, ok := i["data_access_role_arn"]; ok {
		s.DataAccessRoleArn = aws.String(val.(string))
	}

	if val, ok := i["s3_uri"]; ok {
		s.S3Uri = aws.String(val.(string))
	}

	if val, ok := i["tuning_data_s3_uri"]; ok && val != "" {
		s.TuningDataS3Uri = aws.String(val.(string))
	}

	return s
}
