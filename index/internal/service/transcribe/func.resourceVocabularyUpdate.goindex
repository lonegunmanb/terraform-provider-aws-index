package github.com/hashicorp/terraform-provider-aws/internal/service/transcribe
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/transcribe"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVocabularyUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TranscribeClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		in := &transcribe.UpdateVocabularyInput{
			VocabularyName: aws.String(d.Id()),
			LanguageCode:   types.LanguageCode(d.Get(names.AttrLanguageCode).(string)),
		}

		if d.HasChanges("vocabulary_file_uri", "phrases") {
			if d.Get("vocabulary_file_uri").(string) != "" {
				in.VocabularyFileUri = aws.String(d.Get("vocabulary_file_uri").(string))
			} else {
				in.Phrases = expandPhrases(d.Get("phrases").([]any))
			}
		}

		log.Printf("[DEBUG] Updating Transcribe Vocabulary (%s): %#v", d.Id(), in)
		_, err := conn.UpdateVocabulary(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.Transcribe, create.ErrActionUpdating, ResNameVocabulary, d.Id(), err)
		}

		if _, err := waitVocabularyUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return create.AppendDiagError(diags, names.Transcribe, create.ErrActionWaitingForUpdate, ResNameVocabulary, d.Id(), err)
		}
	}

	return append(diags, resourceVocabularyRead(ctx, d, meta)...)
}
