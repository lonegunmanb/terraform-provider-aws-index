package github.com/hashicorp/terraform-provider-aws/internal/service/transcribe
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/transcribe"
	"github.com/aws/aws-sdk-go-v2/service/transcribe/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMedicalVocabularyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TranscribeClient(ctx)

	vocabularyName := d.Get("vocabulary_name").(string)
	in := &transcribe.CreateMedicalVocabularyInput{
		VocabularyName:    aws.String(vocabularyName),
		VocabularyFileUri: aws.String(d.Get("vocabulary_file_uri").(string)),
		LanguageCode:      types.LanguageCode(d.Get(names.AttrLanguageCode).(string)),
		Tags:              getTagsIn(ctx),
	}

	out, err := conn.CreateMedicalVocabulary(ctx, in)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Amazon Transcribe MedicalVocabulary (%s): %s", d.Get("vocabulary_name").(string), err)
	}

	if out == nil {
		return sdkdiag.AppendErrorf(diags, "creating Amazon Transcribe MedicalVocabulary (%s): empty output", d.Get(names.AttrName).(string))
	}

	d.SetId(aws.ToString(out.VocabularyName))

	if _, err := waitMedicalVocabularyCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Amazon Transcribe MedicalVocabulary (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceMedicalVocabularyRead(ctx, d, meta)...)
}
