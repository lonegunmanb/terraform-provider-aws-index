package github.com/hashicorp/terraform-provider-aws/internal/service/eks
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceNodeGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).EKSClient(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	clusterName := d.Get(names.AttrClusterName).(string)
	nodeGroupName := d.Get("node_group_name").(string)
	id := NodeGroupCreateResourceID(clusterName, nodeGroupName)
	nodeGroup, err := findNodegroupByTwoPartKey(ctx, conn, clusterName, nodeGroupName)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EKS Node Group (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("ami_type", nodeGroup.AmiType)
	d.Set(names.AttrARN, nodeGroup.NodegroupArn)
	d.Set("capacity_type", nodeGroup.CapacityType)
	d.Set(names.AttrClusterName, nodeGroup.ClusterName)
	d.Set("disk_size", nodeGroup.DiskSize)
	d.Set("instance_types", nodeGroup.InstanceTypes)
	d.Set("labels", nodeGroup.Labels)
	if err := d.Set(names.AttrLaunchTemplate, flattenLaunchTemplateSpecification(nodeGroup.LaunchTemplate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting launch_template: %s", err)
	}
	d.Set("node_group_name", nodeGroup.NodegroupName)
	d.Set("node_role_arn", nodeGroup.NodeRole)
	d.Set("release_version", nodeGroup.ReleaseVersion)
	if err := d.Set("remote_access", flattenRemoteAccessConfig(nodeGroup.RemoteAccess)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting remote_access: %s", err)
	}
	if err := d.Set(names.AttrResources, flattenNodegroupResources(nodeGroup.Resources)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting resources: %s", err)
	}
	if nodeGroup.ScalingConfig != nil {
		if err := d.Set("scaling_config", []any{flattenNodegroupScalingConfig(nodeGroup.ScalingConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting scaling_config: %s", err)
		}
	} else {
		d.Set("scaling_config", nil)
	}
	d.Set(names.AttrStatus, nodeGroup.Status)
	d.Set(names.AttrSubnetIDs, nodeGroup.Subnets)
	if err := d.Set("taints", flattenTaints(nodeGroup.Taints)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting taints: %s", err)
	}
	d.Set(names.AttrVersion, nodeGroup.Version)

	if err := d.Set(names.AttrTags, KeyValueTags(ctx, nodeGroup.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map()); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
	}

	return diags
}
