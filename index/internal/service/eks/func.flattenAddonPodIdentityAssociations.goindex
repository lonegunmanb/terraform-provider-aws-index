package github.com/hashicorp/terraform-provider-aws/internal/service/eks
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eks"
	"github.com/aws/aws-sdk-go-v2/service/eks/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenAddonPodIdentityAssociations(ctx context.Context, associations []string, clusterName string, meta any) ([]any, error) {
	if len(associations) == 0 {
		return nil, nil
	}

	conn := meta.(*conns.AWSClient).EKSClient(ctx)
	var results []any

	for _, associationArn := range associations {
		// CreateAddon returns the associationARN. The associationId is extracted from the end of the ARN,
		// which is used in the DescribePodIdentityAssociation call to get the RoleARN and ServiceAccount
		//
		// Ex. "arn:aws:eks:<region>:<account-id>:podidentityassociation/<cluster-name>/a-1v95i5dqqiylbo3ud"
		parts := strings.Split(associationArn, "/")
		if len(parts) != 3 {
			return nil, fmt.Errorf(`unable to extract association ID from ARN "%s"`, associationArn)
		}

		associationId := parts[2]
		pia, err := findPodIdentityAssociationByTwoPartKey(ctx, conn, associationId, clusterName)
		if err != nil {
			return nil, err
		}

		tfMap := map[string]any{
			names.AttrRoleARN: pia.RoleArn,
			"service_account": pia.ServiceAccount,
		}

		results = append(results, tfMap)
	}

	return results, nil
}
