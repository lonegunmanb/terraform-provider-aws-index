package github.com/hashicorp/terraform-provider-aws/internal/service/eks
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eks"
	"github.com/aws/aws-sdk-go-v2/service/eks/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccessEntryUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EKSClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		clusterName, principalARN, err := accessEntryParseResourceID(d.Id())
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &eks.UpdateAccessEntryInput{
			ClusterName:  aws.String(clusterName),
			PrincipalArn: aws.String(principalARN),
		}

		input.KubernetesGroups = flex.ExpandStringValueSet(d.Get("kubernetes_groups").(*schema.Set))
		input.Username = aws.String(d.Get(names.AttrUserName).(string))

		_, err = conn.UpdateAccessEntry(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EKS Access Entry (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceAccessEntryRead(ctx, d, meta)...)
}
