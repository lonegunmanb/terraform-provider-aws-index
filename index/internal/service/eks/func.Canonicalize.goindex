package github.com/hashicorp/terraform-provider-aws/internal/service/eks
import (
	"fmt"
	"strings"

	awsarn "github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
)
func Canonicalize(arn string) (string, error) {
	parsed, err := awsarn.Parse(arn)
	if err != nil {
		return "", fmt.Errorf("arn %q is invalid: %w", arn, err)
	}

	if err := checkPartition(parsed.Partition); err != nil {
		return "", fmt.Errorf("arn %q does not have a recognized partition", arn)
	}

	parts := strings.Split(parsed.Resource, "/")
	resource := parts[0]

	switch parsed.Service {
	case "sts":
		switch resource {
		case "federated-user":
			return arn, nil
		case "assumed-role":
			if len(parts) < 3 {
				return "", fmt.Errorf("assumed-role arn %q does not have a role", arn)
			}
			// IAM ARNs can contain paths, part[0] is resource, parts[len(parts)] is the SessionName.
			role := strings.Join(parts[1:len(parts)-1], "/")
			return awsarn.ARN{
				Partition: parsed.Partition,
				Service:   "iam",
				AccountID: parsed.AccountID,
				Resource:  "role/" + role,
			}.String(), nil
		default:
			return "", fmt.Errorf("unrecognized resource %q for service sts", parsed.Resource)
		}
	case "iam":
		switch resource {
		case "role", "user", "root":
			return arn, nil
		default:
			return "", fmt.Errorf("unrecognized resource %q for service iam", parsed.Resource)
		}
	}

	return "", fmt.Errorf("service %q in arn %q is not a valid service for identities", parsed.Service, arn)
}
