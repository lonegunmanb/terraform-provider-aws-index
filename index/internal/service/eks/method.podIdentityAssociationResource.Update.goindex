package github.com/hashicorp/terraform-provider-aws/internal/service/eks
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/eks"
	awstypes "github.com/aws/aws-sdk-go-v2/service/eks/types"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *podIdentityAssociationResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new podIdentityAssociationResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().EKSClient(ctx)

	if !new.DisableSessionTags.Equal(old.DisableSessionTags) ||
		!new.RoleARN.Equal(old.RoleARN) ||
		!new.TargetRoleARN.Equal(old.TargetRoleARN) {
		var input eks.UpdatePodIdentityAssociationInput
		response.Diagnostics.Append(fwflex.Expand(ctx, new, &input)...)
		if response.Diagnostics.HasError() {
			return
		}

		// Set values for unknowns.
		input.ClientRequestToken = aws.String(sdkid.UniqueId())

		outputRaw, err := tfresource.RetryWhenIsAErrorMessageContains[*awstypes.InvalidParameterException](ctx, propagationTimeout, func() (any, error) {
			return conn.UpdatePodIdentityAssociation(ctx, &input)
		}, "Role provided in the request does not exist")

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating EKS Pod Identity Association (%s)", new.ID.ValueString()), err.Error())

			return
		}

		// Set values for unknowns.
		association := outputRaw.(*eks.UpdatePodIdentityAssociationOutput).Association
		new.ExternalID = fwflex.StringToFramework(ctx, association.ExternalId)
	} else {
		new.ExternalID = old.ExternalID
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
