package github.com/hashicorp/terraform-provider-aws/internal/service/dataexchange
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dataexchange"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dataexchange/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDataSetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DataExchangeClient(ctx)

	input := &dataexchange.CreateDataSetInput{
		Name:        aws.String(d.Get(names.AttrName).(string)),
		AssetType:   awstypes.AssetType(d.Get("asset_type").(string)),
		Description: aws.String(d.Get(names.AttrDescription).(string)),
		Tags:        getTagsIn(ctx),
	}

	out, err := conn.CreateDataSet(ctx, input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating DataExchange DataSet: %s", err)
	}

	d.SetId(aws.ToString(out.Id))

	return append(diags, resourceDataSetRead(ctx, d, meta)...)
}
