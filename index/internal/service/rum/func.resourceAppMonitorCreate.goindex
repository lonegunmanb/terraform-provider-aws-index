package github.com/hashicorp/terraform-provider-aws/internal/service/rum
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rum"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rum/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAppMonitorCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RUMClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &rum.CreateAppMonitorInput{
		Name:         aws.String(name),
		CwLogEnabled: aws.Bool(d.Get("cw_log_enabled").(bool)),
		Tags:         getTagsIn(ctx),
	}

	if v, ok := d.GetOk("app_monitor_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.AppMonitorConfiguration = expandAppMonitorConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("custom_events"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.CustomEvents = expandCustomEvents(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrDomain); ok {
		input.Domain = aws.String(v.(string))
	}

	if v, ok := d.GetOk("domain_list"); ok && len(v.([]any)) > 0 {
		input.DomainList = flex.ExpandStringValueList(v.([]any))
	}

	_, err := conn.CreateAppMonitor(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating CloudWatch RUM App Monitor (%s): %s", name, err)
	}

	d.SetId(name)

	return append(diags, resourceAppMonitorRead(ctx, d, meta)...)
}
