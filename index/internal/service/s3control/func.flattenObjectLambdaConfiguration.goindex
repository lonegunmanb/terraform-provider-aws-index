package github.com/hashicorp/terraform-provider-aws/internal/service/s3control
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/aws/aws-sdk-go-v2/service/s3control/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenObjectLambdaConfiguration(apiObject *types.ObjectLambdaConfiguration) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"cloud_watch_metrics_enabled": apiObject.CloudWatchMetricsEnabled,
	}

	if v := apiObject.AllowedFeatures; v != nil {
		tfMap["allowed_features"] = v
	}

	if v := apiObject.SupportingAccessPoint; v != nil {
		tfMap["supporting_access_point"] = aws.ToString(v)
	}

	if v := apiObject.TransformationConfigurations; v != nil {
		tfMap["transformation_configuration"] = flattenObjectLambdaTransformationConfigurations(v)
	}

	return tfMap
}
