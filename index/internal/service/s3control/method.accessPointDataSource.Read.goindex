package github.com/hashicorp/terraform-provider-aws/internal/service/s3control
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *accessPointDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data accessPointDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().S3ControlClient(ctx)

	name := fwflex.StringValueFromFramework(ctx, data.Name)
	accountID := fwflex.StringValueFromFramework(ctx, data.AccountID)
	if accountID == "" {
		accountID = d.Meta().AccountID(ctx)
	}
	output, err := findAccessPointByTwoPartKey(ctx, conn, accountID, name)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading S3 Access Point (%s)", name), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, output, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	data.AccountID = fwflex.StringValueToFramework(ctx, accountID)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
