package github.com/hashicorp/terraform-provider-aws/internal/service/s3control
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceAccessPoint,
			TypeName: "aws_s3_access_point",
			Name:     "Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceAccountPublicAccessBlock,
			TypeName: "aws_s3_account_public_access_block",
			Name:     "Account Public Access Block",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalSingletonIdentity(),
			Import: inttypes.Import{
				WrappedImport: true,
			},
		},
		{
			Factory:  resourceAccessPointPolicy,
			TypeName: "aws_s3control_access_point_policy",
			Name:     "Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucket,
			TypeName: "aws_s3control_bucket",
			Name:     "Bucket",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketLifecycleConfiguration,
			TypeName: "aws_s3control_bucket_lifecycle_configuration",
			Name:     "Bucket Lifecycle Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPolicy,
			TypeName: "aws_s3control_bucket_policy",
			Name:     "Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceMultiRegionAccessPoint,
			TypeName: "aws_s3control_multi_region_access_point",
			Name:     "Multi-Region Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceMultiRegionAccessPointPolicy,
			TypeName: "aws_s3control_multi_region_access_point_policy",
			Name:     "Multi-Region Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObjectLambdaAccessPoint,
			TypeName: "aws_s3control_object_lambda_access_point",
			Name:     "Object Lambda Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObjectLambdaAccessPointPolicy,
			TypeName: "aws_s3control_object_lambda_access_point_policy",
			Name:     "Object Lambda Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceStorageLensConfiguration,
			TypeName: "aws_s3control_storage_lens_configuration",
			Name:     "Storage Lens Configuration",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
