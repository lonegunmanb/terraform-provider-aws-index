package github.com/hashicorp/terraform-provider-aws/internal/service/s3control
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/aws/aws-sdk-go-v2/service/s3control/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findAccessPointPolicyAndStatusByTwoPartKey(ctx context.Context, conn *s3control.Client, accountID, name string) (string, *types.PolicyStatus, error) {
	inputGAPP := s3control.GetAccessPointPolicyInput{
		AccountId: aws.String(accountID),
		Name:      aws.String(name),
	}
	outputGAPP, err := conn.GetAccessPointPolicy(ctx, &inputGAPP)

	if tfawserr.ErrCodeEquals(err, errCodeNoSuchAccessPoint, errCodeNoSuchAccessPointPolicy) {
		return "", nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: inputGAPP,
		}
	}

	if err != nil {
		return "", nil, err
	}

	if outputGAPP == nil {
		return "", nil, tfresource.NewEmptyResultError(inputGAPP)
	}

	policy := aws.ToString(outputGAPP.Policy)

	if policy == "" {
		return "", nil, tfresource.NewEmptyResultError(inputGAPP)
	}

	inputGAPPS := s3control.GetAccessPointPolicyStatusInput{
		AccountId: aws.String(accountID),
		Name:      aws.String(name),
	}
	outputGAPPS, err := conn.GetAccessPointPolicyStatus(ctx, &inputGAPPS)

	if tfawserr.ErrCodeEquals(err, errCodeNoSuchAccessPoint, errCodeNoSuchAccessPointPolicy) {
		return "", nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: inputGAPPS,
		}
	}

	// directory buckets do not support status checks
	// these buckets can never be public so setting to false
	if tfawserr.ErrCodeEquals(err, errCodeMethodNotAllowed, errCodeUnknownError) {
		return policy, &types.PolicyStatus{IsPublic: false}, nil
	}

	if err != nil {
		return "", nil, err
	}

	if outputGAPPS == nil || outputGAPPS.PolicyStatus == nil {
		return "", nil, tfresource.NewEmptyResultError(inputGAPPS)
	}

	return policy, outputGAPPS.PolicyStatus, nil
}
