package github.com/hashicorp/terraform-provider-aws/internal/service/s3control
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/aws/aws-sdk-go-v2/service/s3control/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLifecycleRule(ctx context.Context, tfMap map[string]any) *types.LifecycleRule {
	if len(tfMap) == 0 {
		return nil
	}

	apiObject := &types.LifecycleRule{}

	if v, ok := tfMap["abort_incomplete_multipart_upload"].([]any); ok && len(v) > 0 {
		apiObject.AbortIncompleteMultipartUpload = expandAbortIncompleteMultipartUpload(v)
	}

	if v, ok := tfMap["expiration"].([]any); ok && len(v) > 0 {
		apiObject.Expiration = expandLifecycleExpiration(v)
	}

	if v, ok := tfMap[names.AttrFilter].([]any); ok && len(v) > 0 {
		apiObject.Filter = expandLifecycleRuleFilter(ctx, v)
	}

	if v, ok := tfMap[names.AttrID].(string); ok && v != "" {
		apiObject.ID = aws.String(v)
	}

	if v, ok := tfMap[names.AttrStatus].(string); ok && v != "" {
		apiObject.Status = types.ExpirationStatus(v)
	}

	// Terraform Plugin SDK sometimes sends map with only empty configuration blocks:
	//   map[abort_incomplete_multipart_upload:[] expiration:[] filter:[] id: status:]
	// This is to prevent this error: InvalidParameter: 1 validation error(s) found.
	//  - missing required field, PutBucketLifecycleConfigurationInput.LifecycleConfiguration.Rules[0].Status.
	if apiObject.ID == nil && apiObject.Status == "" {
		return nil
	}

	return apiObject
}
