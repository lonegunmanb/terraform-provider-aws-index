package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPredictiveScalingConfiguration(tfList []any) *awstypes.PredictiveScalingConfiguration {
	if len(tfList) < 1 {
		return nil
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.PredictiveScalingConfiguration{
		MaxCapacityBreachBehavior: awstypes.PredictiveScalingMaxCapacityBreachBehavior(tfMap["max_capacity_breach_behavior"].(string)),
		MetricSpecifications:      expandPredictiveScalingMetricSpecifications(tfMap["metric_specification"].([]any)),
		Mode:                      awstypes.PredictiveScalingMode(tfMap[names.AttrMode].(string)),
	}
	if v, null, _ := nullable.Int(tfMap["max_capacity_buffer"].(string)).ValueInt32(); !null {
		apiObject.MaxCapacityBuffer = aws.Int32(v)
	}
	if v, null, _ := nullable.Int(tfMap["scheduling_buffer_time"].(string)).ValueInt32(); !null {
		apiObject.SchedulingBufferTime = aws.Int32(v)
	}

	return apiObject
}
