package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	elasticloadbalancingv2types "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func launchTemplateCustomDiff(baseAttribute, subAttribute string) schema.CustomizeDiffFunc {
	return func(_ context.Context, diff *schema.ResourceDiff, _ any) error {
		if diff.HasChange(subAttribute) {
			n := diff.Get(baseAttribute)
			ba, ok := n.([]any)
			if !ok {
				return nil
			}

			if baseAttribute == names.AttrLaunchTemplate {
				launchTemplate := ba[0].(map[string]any)
				launchTemplate[names.AttrID] = launchTemplateIDUnknown

				if err := diff.SetNew(baseAttribute, ba); err != nil {
					return err
				}
			}

			if baseAttribute == "mixed_instances_policy" && !strings.Contains(subAttribute, "override") {
				launchTemplate := ba[0].(map[string]any)[names.AttrLaunchTemplate].([]any)[0].(map[string]any)["launch_template_specification"].([]any)[0]
				launchTemplateSpecification := launchTemplate.(map[string]any)
				launchTemplateSpecification["launch_template_id"] = launchTemplateIDUnknown

				if err := diff.SetNew(baseAttribute, ba); err != nil {
					return err
				}
			}

			if baseAttribute == "mixed_instances_policy" && strings.Contains(subAttribute, "override") {
				launchTemplate := ba[0].(map[string]any)[names.AttrLaunchTemplate].([]any)[0].(map[string]any)["override"].([]any)

				for i := range launchTemplate {
					key := fmt.Sprintf("mixed_instances_policy.0.launch_template.0.override.%d.launch_template_specification.0.launch_template_name", i)

					if diff.HasChange(key) {
						launchTemplateSpecification := launchTemplate[i].(map[string]any)["launch_template_specification"].([]any)[0].(map[string]any)
						launchTemplateSpecification["launch_template_id"] = launchTemplateIDUnknown
					}
				}

				if err := diff.SetNew(baseAttribute, ba); err != nil {
					return err
				}
			}
		}

		return nil
	}
}
