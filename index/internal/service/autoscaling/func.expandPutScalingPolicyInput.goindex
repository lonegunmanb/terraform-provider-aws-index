package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPutScalingPolicyInput(d *schema.ResourceData) (*autoscaling.PutScalingPolicyInput, error) {
	input := &autoscaling.PutScalingPolicyInput{
		AutoScalingGroupName: aws.String(d.Get("autoscaling_group_name").(string)),
		Enabled:              aws.Bool(d.Get(names.AttrEnabled).(bool)),
		PolicyName:           aws.String(d.Get(names.AttrName).(string)),
	}

	// get policy_type first as parameter support depends on policy type
	policyType := policyType(d.Get("policy_type").(string))
	input.PolicyType = aws.String(string(policyType))

	// This parameter is supported if the policy type is SimpleScaling or StepScaling.
	if v, ok := d.GetOk("adjustment_type"); ok && (policyType == policyTypeSimpleScaling || policyType == policyTypeStepScaling) {
		input.AdjustmentType = aws.String(v.(string))
	}

	// This parameter is supported if the policy type is SimpleScaling.
	if v, ok := d.GetOkExists("cooldown"); ok {
		// 0 is allowed as placeholder even if policyType is not supported
		input.Cooldown = aws.Int32(int32(v.(int)))
		if v.(int) != 0 && policyType != policyTypeSimpleScaling {
			return input, fmt.Errorf("cooldown is only supported for policy type SimpleScaling")
		}
	}

	// This parameter is supported if the policy type is StepScaling or TargetTrackingScaling.
	if v, ok := d.GetOkExists("estimated_instance_warmup"); ok {
		// 0 is NOT allowed as placeholder if policyType is not supported
		if policyType == policyTypeStepScaling || policyType == policyTypeTargetTrackingScaling {
			input.EstimatedInstanceWarmup = aws.Int32(int32(v.(int)))
		}
		if v.(int) != 0 && policyType != policyTypeStepScaling && policyType != policyTypeTargetTrackingScaling {
			return input, fmt.Errorf("estimated_instance_warmup is only supported for policy type StepScaling and TargetTrackingScaling")
		}
	}

	// This parameter is supported if the policy type is StepScaling.
	if v, ok := d.GetOk("metric_aggregation_type"); ok && policyType == policyTypeStepScaling {
		input.MetricAggregationType = aws.String(v.(string))
	}

	// MinAdjustmentMagnitude is supported if the policy type is SimpleScaling or StepScaling.
	if v, ok := d.GetOkExists("min_adjustment_magnitude"); ok && v.(int) != 0 && (policyType == policyTypeSimpleScaling || policyType == policyTypeStepScaling) {
		input.MinAdjustmentMagnitude = aws.Int32(int32(v.(int)))
	}

	if v := d.Get("predictive_scaling_configuration").([]any); len(v) > 0 {
		input.PredictiveScalingConfiguration = expandPredictiveScalingConfiguration(v)
	}

	// This parameter is required if the policy type is SimpleScaling and not supported otherwise.
	//if policy_type=="SimpleScaling" then scaling_adjustment is required and 0 is allowed
	if v, ok := d.GetOkExists("scaling_adjustment"); ok {
		// 0 is NOT allowed as placeholder if policyType is not supported
		if policyType == policyTypeSimpleScaling {
			input.ScalingAdjustment = aws.Int32(int32(v.(int)))
		}
		if v.(int) != 0 && policyType != policyTypeSimpleScaling {
			return input, fmt.Errorf("scaling_adjustment is only supported for policy type SimpleScaling")
		}
	} else if !ok && policyType == policyTypeSimpleScaling {
		return input, fmt.Errorf("scaling_adjustment is required for policy type SimpleScaling")
	}

	// This parameter is required if the policy type is StepScaling and not supported otherwise.
	if v, ok := d.GetOk("step_adjustment"); ok && v.(*schema.Set).Len() > 0 {
		steps := expandStepAdjustments(v.(*schema.Set).List())
		if len(steps) != 0 && policyType != policyTypeStepScaling {
			return input, fmt.Errorf("step_adjustment is only supported for policy type StepScaling")
		}

		input.StepAdjustments = expandStepAdjustments(v.(*schema.Set).List())
	} else if !ok && policyType == policyTypeStepScaling {
		return input, fmt.Errorf("step_adjustment is required for policy type StepScaling")
	}

	// This parameter is required if the policy type is TargetTrackingScaling and not supported otherwise.
	if v, ok := d.GetOk("target_tracking_configuration"); ok {
		input.TargetTrackingConfiguration = expandTargetTrackingConfiguration(v.([]any))
		if policyType != policyTypeTargetTrackingScaling {
			return input, fmt.Errorf("target_tracking_configuration is only supported for policy type TargetTrackingScaling")
		}
	} else if !ok && policyType == policyTypeTargetTrackingScaling {
		return input, fmt.Errorf("target_tracking_configuration is required for policy type TargetTrackingScaling")
	}

	return input, nil
}
