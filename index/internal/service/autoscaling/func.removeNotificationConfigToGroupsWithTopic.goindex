package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func removeNotificationConfigToGroupsWithTopic(ctx context.Context, conn *autoscaling.Client, groups []*string, topic string) error {
	for _, group := range groups {
		input := &autoscaling.DeleteNotificationConfigurationInput{
			AutoScalingGroupName: group,
			TopicARN:             aws.String(topic),
		}

		_, err := conn.DeleteNotificationConfiguration(ctx, input)

		if tfawserr.ErrMessageContains(err, errCodeValidationError, "doesn't exist") {
			continue
		}

		if err != nil {
			return err
		}
	}

	return nil
}
