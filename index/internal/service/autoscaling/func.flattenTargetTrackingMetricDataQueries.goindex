package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTargetTrackingMetricDataQueries(apiObjects []awstypes.TargetTrackingMetricDataQuery) []any {
	tfList := make([]any, len(apiObjects))

	for i := range tfList {
		tfMap := map[string]any{}
		apiObject := apiObjects[i]
		if v := apiObject.Expression; v != nil {
			tfMap[names.AttrExpression] = aws.ToString(v)
		}
		tfMap[names.AttrID] = aws.ToString(apiObject.Id)
		if v := apiObject.Label; v != nil {
			tfMap["label"] = aws.ToString(v)
		}
		if apiObject := apiObject.MetricStat; apiObject != nil {
			tfMapMetricStat := map[string]any{}
			if apiObject := apiObject.Metric; apiObject != nil {
				tfMapMetric := map[string]any{}
				if apiObjects := apiObject.Dimensions; apiObjects != nil {
					tfList := make([]any, len(apiObjects))
					for i := range tfList {
						tfMap := map[string]any{}
						apiObject := apiObject.Dimensions[i]
						tfMap[names.AttrName] = aws.ToString(apiObject.Name)
						tfMap[names.AttrValue] = aws.ToString(apiObject.Value)
						tfList[i] = tfMap
					}
					tfMapMetric["dimensions"] = tfList
				}
				tfMapMetric[names.AttrMetricName] = aws.ToString(apiObject.MetricName)
				tfMapMetric[names.AttrNamespace] = aws.ToString(apiObject.Namespace)
				tfMapMetricStat["metric"] = []map[string]any{tfMapMetric}
			}
			if v := apiObject.Period; v != nil {
				tfMapMetricStat["period"] = aws.ToInt32(v)
			}
			tfMapMetricStat["stat"] = aws.ToString(apiObject.Stat)
			if v := apiObject.Unit; v != nil {
				tfMapMetricStat[names.AttrUnit] = aws.ToString(v)
			}
			tfMap["metric_stat"] = []map[string]any{tfMapMetricStat}
		}
		if v := apiObject.ReturnData; v != nil {
			tfMap["return_data"] = aws.ToBool(v)
		}
		tfList[i] = tfMap
	}

	return tfList
}
