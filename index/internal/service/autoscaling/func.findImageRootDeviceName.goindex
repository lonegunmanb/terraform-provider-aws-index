package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findImageRootDeviceName(ctx context.Context, conn *ec2.Client, imageID string) (string, error) {
	image, err := tfec2.FindImageByID(ctx, conn, imageID)
	if err != nil {
		return "", err
	}

	// Instance store backed AMIs do not provide a root device name.
	if image.RootDeviceType == ec2awstypes.DeviceTypeInstanceStore {
		return "", nil
	}

	rootDeviceName := aws.ToString(image.RootDeviceName)

	// Some AMIs have a RootDeviceName like "/dev/sda1" that does not appear as a
	// DeviceName in the BlockDeviceMapping list (which will instead have
	// something like "/dev/sda")
	//
	// While this seems like it breaks an invariant of AMIs, it ends up working
	// on the AWS side, and AMIs like this are common enough that we need to
	// special case it so Terraform does the right thing.
	//
	// Our heuristic is: if the RootDeviceName does not appear in the
	// BlockDeviceMapping, assume that the DeviceName of the first
	// BlockDeviceMapping entry serves as the root device.
	rootDeviceInBlockDeviceMappings := false

	for _, v := range image.BlockDeviceMappings {
		if aws.ToString(v.DeviceName) == rootDeviceName {
			rootDeviceInBlockDeviceMappings = true
		}
	}

	if !rootDeviceInBlockDeviceMappings && len(image.BlockDeviceMappings) > 0 {
		rootDeviceName = aws.ToString(image.BlockDeviceMappings[0].DeviceName)
	}

	if rootDeviceName == "" {
		return "", &retry.NotFoundError{
			Message: fmt.Sprintf("finding root device name for EC2 AMI (%s)", imageID),
		}
	}

	return rootDeviceName, nil
}
