package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import (
	"context"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *autoscaling.Client, identifier, resourceType string, oldTagsSet, newTagsSet any, optFns ...func(*autoscaling.Options)) error {
	oldTags := keyValueTags(ctx, oldTagsSet, identifier, resourceType)
	newTags := keyValueTags(ctx, newTagsSet, identifier, resourceType)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.AutoScaling)
	if len(removedTags) > 0 {
		input := autoscaling.DeleteTagsInput{
			Tags: svcTags(removedTags),
		}

		_, err := conn.DeleteTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.AutoScaling)
	if len(updatedTags) > 0 {
		input := autoscaling.CreateOrUpdateTagsInput{
			Tags: svcTags(updatedTags),
		}

		_, err := conn.CreateOrUpdateTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	return nil
}
