package github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2awstypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBlockDeviceMappings(apiObjects []awstypes.BlockDeviceMapping, rootDeviceName string, configuredEBSBlockDevices map[string]map[string]any) ([]any, []any, []any) {
	if len(apiObjects) == 0 {
		return nil, nil, nil
	}

	var tfListEBSBlockDevice, tfListEphemeralBlockDevice, tfListRootBlockDevice []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		if v := apiObject.NoDevice; v != nil {
			if v, ok := configuredEBSBlockDevices[aws.ToString(apiObject.DeviceName)]; ok {
				tfMap[names.AttrDeleteOnTermination] = v[names.AttrDeleteOnTermination].(bool)
			} else {
				// Keep existing value in place to avoid spurious diff.
				tfMap[names.AttrDeleteOnTermination] = true
			}
		} else if v := apiObject.Ebs; v != nil {
			if v := v.DeleteOnTermination; v != nil {
				tfMap[names.AttrDeleteOnTermination] = aws.ToBool(v)
			}
		}

		if v := apiObject.Ebs; v != nil {
			if v := v.Encrypted; v != nil {
				tfMap[names.AttrEncrypted] = aws.ToBool(v)
			}

			if v := v.Iops; v != nil {
				tfMap[names.AttrIOPS] = aws.ToInt32(v)
			}

			if v := v.Throughput; v != nil {
				tfMap[names.AttrThroughput] = aws.ToInt32(v)
			}

			if v := v.VolumeSize; v != nil {
				tfMap[names.AttrVolumeSize] = aws.ToInt32(v)
			}

			if v := v.VolumeType; v != nil {
				tfMap[names.AttrVolumeType] = aws.ToString(v)
			}
		}

		if v := apiObject.DeviceName; aws.ToString(v) == rootDeviceName {
			tfListRootBlockDevice = append(tfListRootBlockDevice, tfMap)

			continue
		}

		if v := apiObject.DeviceName; v != nil {
			tfMap[names.AttrDeviceName] = aws.ToString(v)
		}

		if v := apiObject.VirtualName; v != nil {
			tfMap[names.AttrVirtualName] = aws.ToString(v)

			tfListEphemeralBlockDevice = append(tfListEphemeralBlockDevice, tfMap)

			continue
		}

		if v := apiObject.NoDevice; v != nil {
			tfMap["no_device"] = aws.ToBool(v)
		}

		if v := apiObject.Ebs; v != nil {
			if v := v.SnapshotId; v != nil {
				tfMap[names.AttrSnapshotID] = aws.ToString(v)
			}
		}

		tfListEBSBlockDevice = append(tfListEBSBlockDevice, tfMap)
	}

	return tfListEBSBlockDevice, tfListEphemeralBlockDevice, tfListRootBlockDevice
}
