package github.com/hashicorp/terraform-provider-aws/internal/service/fms
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePolicy() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourcePolicyCreate,
		ReadWithoutTimeout:   resourcePolicyRead,
		UpdateWithoutTimeout: resourcePolicyUpdate,
		DeleteWithoutTimeout: resourcePolicyDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		SchemaFunc: func() map[string]*schema.Schema {
			networkACLEntrySetNestedBlock := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrCIDRBlock: {
								Type:     schema.TypeString,
								Optional: true,
							},
							"egress": {
								Type:     schema.TypeBool,
								Required: true,
							},
							"icmp_type_code": {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"code": {
											Type:     schema.TypeInt,
											Optional: true,
										},
										names.AttrType: {
											Type:     schema.TypeInt,
											Optional: true,
										},
									},
								},
							},
							"ipv6_cidr_block": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"port_range": {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"from": {
											Type:     schema.TypeInt,
											Optional: true,
										},
										"to": {
											Type:     schema.TypeInt,
											Optional: true,
										},
									},
								},
							},
							names.AttrProtocol: {
								Type:     schema.TypeString,
								Required: true,
							},
							"rule_action": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[awstypes.NetworkAclRuleAction](),
							},
						},
					},
				}
			}

			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"delete_all_policy_resources": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"delete_unused_fm_managed_resources": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  false,
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Optional: true,
				},
				"exclude_resource_tags": {
					Type:     schema.TypeBool,
					Required: true,
				},
				"exclude_map": {
					Type:             schema.TypeList,
					MaxItems:         1,
					Optional:         true,
					DiffSuppressFunc: verify.SuppressMissingOptionalConfigurationBlock,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"account": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Schema{
									Type: schema.TypeString,
								},
							},
							"orgunit": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Schema{
									Type: schema.TypeString,
								},
							},
						},
					},
				},
				"include_map": {
					Type:             schema.TypeList,
					MaxItems:         1,
					Optional:         true,
					DiffSuppressFunc: verify.SuppressMissingOptionalConfigurationBlock,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"account": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Schema{
									Type: schema.TypeString,
								},
							},
							"orgunit": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Schema{
									Type: schema.TypeString,
								},
							},
						},
					},
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
				},
				"policy_update_token": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"remediation_enabled": {
					Type:     schema.TypeBool,
					Optional: true,
				},
				names.AttrResourceTags: tftags.TagsSchema(),
				names.AttrResourceType: {
					Type:          schema.TypeString,
					Optional:      true,
					Computed:      true,
					ValidateFunc:  validation.StringMatch(regexache.MustCompile(`^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$`), "must match a supported resource type, such as AWS::EC2::VPC, see also: https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_Policy.html"),
					ConflictsWith: []string{"resource_type_list"},
				},
				"resource_set_ids": {
					Type:     schema.TypeSet,
					Optional: true,
					Computed: true,
					Elem: &schema.Schema{
						Type: schema.TypeString,
					},
				},
				"resource_type_list": {
					Type:     schema.TypeSet,
					Optional: true,
					Computed: true,
					Elem: &schema.Schema{
						Type:         schema.TypeString,
						ValidateFunc: validation.StringMatch(regexache.MustCompile(`^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$`), "must match a supported resource type, such as AWS::EC2::VPC, see also: https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_Policy.html"),
					},
					ConflictsWith: []string{names.AttrResourceType},
				},
				"security_service_policy_data": {
					Type:     schema.TypeList,
					Required: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"managed_service_data": {
								Type:                  schema.TypeString,
								Optional:              true,
								ValidateFunc:          validation.StringIsJSON,
								DiffSuppressFunc:      suppressEquivalentManagedServiceDataJSON,
								DiffSuppressOnRefresh: true,
								StateFunc: func(v any) string {
									json, _ := structure.NormalizeJsonString(v)
									return json
								},
							},
							"policy_option": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"network_acl_common_policy": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"network_acl_entry_set": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"last_entry":  networkACLEntrySetNestedBlock(),
																"first_entry": networkACLEntrySetNestedBlock(),
																"force_remediate_for_first_entries": {
																	Type:     schema.TypeBool,
																	Required: true,
																},
																"force_remediate_for_last_entries": {
																	Type:     schema.TypeBool,
																	Required: true,
																},
															},
														},
													},
												},
											},
										},
										"network_firewall_policy": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"firewall_deployment_model": {
														Type:             schema.TypeString,
														Optional:         true,
														ValidateDiagFunc: enum.Validate[awstypes.FirewallDeploymentModel](),
													},
												},
											},
										},
										"third_party_firewall_policy": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"firewall_deployment_model": {
														Type:             schema.TypeString,
														Optional:         true,
														ValidateDiagFunc: enum.Validate[awstypes.FirewallDeploymentModel](),
													},
												},
											},
										},
									},
								},
							},
							names.AttrType: {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
			}
		},
	}
}
