package github.com/hashicorp/terraform-provider-aws/internal/service/fms
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fms/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func statusAssociateAdminAccount(ctx context.Context, conn *fms.Client, accountID string) retry.StateRefreshFunc {
	// This is all wrapped in a StateRefreshFunc since AssociateAdminAccount returns
	// success even though it failed if called too quickly after creating an Organization.
	return func() (any, string, error) {
		input := &fms.AssociateAdminAccountInput{
			AdminAccount: aws.String(accountID),
		}

		_, err := conn.AssociateAdminAccount(ctx, input)

		if err != nil {
			return nil, "", err
		}

		output, err := conn.GetAdminAccount(ctx, &fms.GetAdminAccountInput{})

		// FMS returns an AccessDeniedException if no account is associated,
		// but does not define this in its error codes.
		if tfawserr.ErrMessageContains(err, errCodeAccessDeniedException, "is not currently delegated by AWS FM") {
			return nil, "", nil
		}

		if errs.IsA[*awstypes.ResourceNotFoundException](err) {
			return nil, "", nil
		}

		if err != nil {
			return nil, "", err
		}

		if aws.ToString(output.AdminAccount) != accountID {
			return nil, "", nil
		}

		return output, string(output.RoleStatus), err
	}
}
