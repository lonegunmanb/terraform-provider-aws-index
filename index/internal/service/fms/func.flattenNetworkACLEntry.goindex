package github.com/hashicorp/terraform-provider-aws/internal/service/fms
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/fms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/fms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenNetworkACLEntry(apiObject awstypes.NetworkAclEntry) any {
	tfMap := map[string]any{}

	if v := apiObject.CidrBlock; v != nil {
		tfMap[names.AttrCIDRBlock] = aws.ToString(v)
	}

	if v := apiObject.Egress; v != nil {
		tfMap["egress"] = aws.ToBool(v)
	}

	if v := apiObject.IcmpTypeCode; v != nil {
		tfMap["icmp_type_code"] = []any{map[string]any{
			"code":         aws.ToInt32(v.Code),
			names.AttrType: aws.ToInt32(v.Type),
		}}
	}

	if v := apiObject.Ipv6CidrBlock; v != nil {
		tfMap["ipv6_cidr_block"] = v
	}

	if v := apiObject.PortRange; v != nil {
		tfMap["port_range"] = []any{map[string]any{
			"from": aws.ToInt32(v.From),
			"to":   aws.ToInt32(v.To),
		}}
	}

	if v := apiObject.Protocol; v != nil {
		tfMap[names.AttrProtocol] = aws.ToString(v)
	}

	tfMap["rule_action"] = apiObject.RuleAction

	return tfMap
}
