package github.com/hashicorp/terraform-provider-aws/internal/service/opensearchserverless
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearchserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfsmithy "github.com/hashicorp/terraform-provider-aws/internal/smithy"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSecurityPolicyRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OpenSearchServerlessClient(ctx)

	name := d.Get(names.AttrName).(string)
	securityPolicy, err := findSecurityPolicyByNameAndType(ctx, conn, name, d.Get(names.AttrType).(string))

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading OpenSearch Serverless Security Policy (%s): %s", name, err)
	}

	d.SetId(aws.ToString(securityPolicy.Name))
	d.Set(names.AttrCreatedDate, flex.Int64ToRFC3339StringValue(securityPolicy.CreatedDate))
	d.Set(names.AttrDescription, securityPolicy.Description)
	d.Set("last_modified_date", flex.Int64ToRFC3339StringValue(securityPolicy.LastModifiedDate))
	d.Set(names.AttrName, securityPolicy.Name)
	if securityPolicy.Policy != nil {
		v, err := tfsmithy.DocumentToJSONString(securityPolicy.Policy)

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		d.Set(names.AttrPolicy, v)
	} else {
		d.Set(names.AttrPolicy, nil)
	}
	d.Set("policy_version", securityPolicy.PolicyVersion)
	d.Set(names.AttrType, securityPolicy.Type)

	return diags
}
