package github.com/hashicorp/terraform-provider-aws/internal/service/opensearchserverless
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/opensearchserverless/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *collectionDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			"collection_endpoint": schema.StringAttribute{
				Description: "Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.",
				Computed:    true,
			},
			names.AttrCreatedDate: schema.StringAttribute{
				Description: "Date the Collection was created.",
				Computed:    true,
			},
			"dashboard_endpoint": schema.StringAttribute{
				Description: "Collection-specific endpoint used to access OpenSearch Dashboards.",
				Computed:    true,
			},
			names.AttrDescription: schema.StringAttribute{
				Description: "Description of the collection.",
				Computed:    true,
			},
			"failure_message": schema.StringAttribute{
				Description: "A failure reason associated with the collection.",
				Computed:    true,
			},
			"failure_code": schema.StringAttribute{
				Description: "A failure code associated with the collection.",
				Computed:    true,
			},
			names.AttrID: schema.StringAttribute{
				Description: "ID of the collection.",
				Optional:    true,
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.ConflictsWith(
						path.MatchRelative().AtParent().AtName(names.AttrName),
					),
					stringvalidator.ExactlyOneOf(
						path.MatchRelative().AtParent().AtName(names.AttrName),
					),
				},
			},
			names.AttrKMSKeyARN: schema.StringAttribute{
				Description: "The ARN of the Amazon Web Services KMS key used to encrypt the collection.",
				Computed:    true,
			},
			"last_modified_date": schema.StringAttribute{
				Description: "Date the Collection was last modified.",
				Computed:    true,
			},
			names.AttrName: schema.StringAttribute{
				Description: "Name of the collection.",
				Optional:    true,
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.ConflictsWith(
						path.MatchRelative().AtParent().AtName(names.AttrID),
					),
				},
			},
			"standby_replicas": schema.StringAttribute{
				Description: "Indicates whether standby replicas should be used for a collection.",
				Computed:    true,
			},
			names.AttrTags: tftags.TagsAttributeComputedOnly(),
			names.AttrType: schema.StringAttribute{
				Description: "Type of collection.",
				Computed:    true,
			},
		},
	}
}
