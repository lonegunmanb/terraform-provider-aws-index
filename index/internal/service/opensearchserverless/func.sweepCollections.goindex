package github.com/hashicorp/terraform-provider-aws/internal/service/opensearchserverless
import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	"github.com/aws/aws-sdk-go-v2/service/opensearchserverless/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepCollections(region string) error {
	ctx := sweep.Context(region)
	if region == endpoints.UsWest1RegionID || region == endpoints.UsGovEast1RegionID {
		log.Printf("[WARN] Skipping OpenSearch Serverless Collection sweep for region: %s", region)
		return nil
	}
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("error getting client: %w", err)
	}
	conn := client.OpenSearchServerlessClient(ctx)
	input := &opensearchserverless.ListCollectionsInput{}
	sweepResources := make([]sweep.Sweepable, 0)

	pages := opensearchserverless.NewListCollectionsPaginator(conn, input)

	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if awsv2.SkipSweepError(err) || skipSweepErr(err) {
			log.Printf("[WARN] Skipping OpenSearch Serverless Collections sweep for %s: %s", region, err)
			return nil
		}
		if err != nil {
			return fmt.Errorf("error retrieving OpenSearch Serverless Collections: %w", err)
		}

		for _, collection := range page.CollectionSummaries {
			id := aws.ToString(collection.Id)

			log.Printf("[INFO] Deleting OpenSearch Serverless Collection: %s", id)
			sweepResources = append(sweepResources, framework.NewSweepResource(newCollectionResource, client,
				framework.NewAttribute(names.AttrID, id),
			))
		}
	}

	if err := sweep.SweepOrchestrator(ctx, sweepResources); err != nil {
		return fmt.Errorf("error sweeping OpenSearch Serverless Collections for %s: %w", region, err)
	}

	return nil
}
