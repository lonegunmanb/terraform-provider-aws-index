package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepDelegatedAdministrators(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	if skip, err := sweepPreCheck(ctx, client); err != nil {
		return nil, err
	} else if skip {
		return nil, nil
	}

	conn := client.OrganizationsClient(ctx)

	r := resourceDelegatedAdministrator()
	var sweepResources []sweep.Sweepable

	input := organizations.ListDelegatedAdministratorsInput{}
	pages := organizations.NewListDelegatedAdministratorsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, delegatedAdministrator := range page.DelegatedAdministrators {
			delegatedServices, err := sweepListDelegatedServices(ctx, client, r, delegatedAdministrator.Id)
			if err != nil {
				return nil, err
			}

			sweepResources = append(sweepResources, delegatedServices...)
		}
	}

	return sweepResources, nil
}
