package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/account"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccountCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	name := d.Get(names.AttrName).(string)
	var status *awstypes.CreateAccountStatus

	if d.Get("create_govcloud").(bool) {
		input := &organizations.CreateGovCloudAccountInput{
			AccountName: aws.String(name),
			Email:       aws.String(d.Get(names.AttrEmail).(string)),
			Tags:        getTagsIn(ctx),
		}

		if v, ok := d.GetOk("iam_user_access_to_billing"); ok {
			input.IamUserAccessToBilling = awstypes.IAMUserAccessToBilling(v.(string))
		}

		if v, ok := d.GetOk("role_name"); ok {
			input.RoleName = aws.String(v.(string))
		}

		outputRaw, err := tfresource.RetryWhenIsA[any, *awstypes.FinalizingOrganizationException](ctx, organizationFinalizationTimeout,
			func(ctx context.Context) (any, error) {
				return conn.CreateGovCloudAccount(ctx, input)
			})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating AWS Organizations Account (%s) with GovCloud Account: %s", name, err)
		}

		status = outputRaw.(*organizations.CreateGovCloudAccountOutput).CreateAccountStatus
	} else {
		input := &organizations.CreateAccountInput{
			AccountName: aws.String(name),
			Email:       aws.String(d.Get(names.AttrEmail).(string)),
			Tags:        getTagsIn(ctx),
		}

		if v, ok := d.GetOk("iam_user_access_to_billing"); ok {
			input.IamUserAccessToBilling = awstypes.IAMUserAccessToBilling(v.(string))
		}

		if v, ok := d.GetOk("role_name"); ok {
			input.RoleName = aws.String(v.(string))
		}

		outputRaw, err := tfresource.RetryWhenIsA[any, *awstypes.FinalizingOrganizationException](ctx, organizationFinalizationTimeout,
			func(ctx context.Context) (any, error) {
				return conn.CreateAccount(ctx, input)
			})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating AWS Organizations Account (%s): %s", name, err)
		}

		status = outputRaw.(*organizations.CreateAccountOutput).CreateAccountStatus
	}

	output, err := waitAccountCreated(ctx, conn, aws.ToString(status.Id), d.Timeout(schema.TimeoutCreate))

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for AWS Organizations Account (%s) create: %s", d.Get(names.AttrName).(string), err)
	}

	d.SetId(aws.ToString(output.AccountId))
	d.Set("govcloud_id", output.GovCloudAccountId)

	if v, ok := d.GetOk("parent_id"); ok {
		oldParentAccountID, err := findParentAccountID(ctx, conn, d.Id())

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading AWS Organizations Account (%s) parent: %s", d.Id(), err)
		}

		if newParentAccountID, oldParentAccountID := v.(string), aws.ToString(oldParentAccountID); newParentAccountID != oldParentAccountID {
			input := &organizations.MoveAccountInput{
				AccountId:           aws.String(d.Id()),
				DestinationParentId: aws.String(newParentAccountID),
				SourceParentId:      aws.String(oldParentAccountID),
			}

			_, err := conn.MoveAccount(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "moving AWS Organizations Account (%s): %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceAccountRead(ctx, d, meta)...)
}
