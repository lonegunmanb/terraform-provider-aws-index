package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepPreCheck(ctx context.Context, client *conns.AWSClient) (bool, error) {
	conn := client.OrganizationsClient(ctx)

	orgInput := organizations.DescribeOrganizationInput{}
	orgOutput, err := conn.DescribeOrganization(ctx, &orgInput)
	if errs.IsA[*awstypes.AWSOrganizationsNotInUseException](err) {
		tflog.Info(ctx, "Skipping sweeper", map[string]any{
			"skip_reason": "Not part of an AWS Organization",
		})
		return true, nil
	}
	if aws.ToString(orgOutput.Organization.MasterAccountId) != client.AccountID(ctx) {
		tflog.Info(ctx, "Skipping sweeper", map[string]any{
			"skip_reason": "Not the management account of an AWS Organization",
		})
		return true, nil
	}
	return false, err
}
