package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceOrganizationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	org, err := findOrganization(ctx, conn)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Organizations Organization does not exist, removing from state: %s", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Organization (%s): %s", d.Id(), err)
	}

	accounts, err := findAccounts(ctx, conn, &organizations.ListAccountsInput{})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Organization (%s) accounts: %s", d.Id(), err)
	}

	managementAccountID := aws.ToString(org.MasterAccountId)
	var managementAccountName *string
	for _, v := range accounts {
		if aws.ToString(v.Id) == managementAccountID {
			managementAccountName = v.Name
		}
	}
	nonManagementAccounts := tfslices.Filter(accounts, func(v awstypes.Account) bool {
		return aws.ToString(v.Id) != managementAccountID
	})

	roots, err := findRoots(ctx, conn, &organizations.ListRootsInput{})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Organization (%s) roots: %s", d.Id(), err)
	}

	if err := d.Set("accounts", flattenAccounts(accounts)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting accounts: %s", err)
	}
	d.Set(names.AttrARN, org.Arn)
	d.Set("feature_set", org.FeatureSet)
	d.Set("master_account_arn", org.MasterAccountArn)
	d.Set("master_account_email", org.MasterAccountEmail)
	d.Set("master_account_id", org.MasterAccountId)
	d.Set("master_account_name", managementAccountName)
	if err := d.Set("non_master_accounts", flattenAccounts(nonManagementAccounts)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting non_master_accounts: %s", err)
	}
	if err := d.Set("roots", flattenRoots(roots)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting roots: %s", err)
	}

	var awsServiceAccessPrincipals []string

	// ConstraintViolationException: The request failed because the organization does not have all features enabled. Please enable all features in your organization and then retry.
	if org.FeatureSet == awstypes.OrganizationFeatureSetAll {
		awsServiceAccessPrincipals, err = findEnabledServicePrincipalNames(ctx, conn)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Organizations Organization (%s) service principals: %s", d.Id(), err)
		}
	}

	d.Set("aws_service_access_principals", awsServiceAccessPrincipals)

	var enabledPolicyTypes []awstypes.PolicyType

	for _, v := range roots[0].PolicyTypes {
		if v.Status == awstypes.PolicyTypeStatusEnabled {
			enabledPolicyTypes = append(enabledPolicyTypes, v.Type)
		}
	}

	d.Set("enabled_policy_types", enabledPolicyTypes)

	return diags
}
