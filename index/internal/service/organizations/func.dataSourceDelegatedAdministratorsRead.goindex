package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDelegatedAdministratorsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	input := &organizations.ListDelegatedAdministratorsInput{}

	if v, ok := d.GetOk("service_principal"); ok {
		input.ServicePrincipal = aws.String(v.(string))
	}

	output, err := findDelegatedAdministrators(ctx, conn, input, tfslices.PredicateTrue[*awstypes.DelegatedAdministrator]())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Delegated Administrators: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).AccountID(ctx))
	if err = d.Set("delegated_administrators", flattenDelegatedAdministrators(output)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting delegated_administrators: %s", err)
	}

	return nil
}
