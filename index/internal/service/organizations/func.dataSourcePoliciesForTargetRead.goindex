package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourcePoliciesForTargetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	targetID := d.Get("target_id").(string)
	filter := d.Get(names.AttrFilter).(string)
	input := &organizations.ListPoliciesForTargetInput{
		Filter:   awstypes.PolicyType(filter),
		TargetId: aws.String(targetID),
	}
	policies, err := findPoliciesForTarget(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Policies (%s) for target (%s): %s", filter, targetID, err)
	}

	d.SetId(targetID)
	d.Set(names.AttrIDs, tfslices.ApplyToAll(policies, func(v awstypes.PolicySummary) string {
		return aws.ToString(v.Id)
	}))

	return diags
}
