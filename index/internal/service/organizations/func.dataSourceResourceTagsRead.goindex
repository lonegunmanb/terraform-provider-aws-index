package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceResourceTagsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	resourceID := d.Get(names.AttrResourceID).(string)
	tags, err := findResourceTagsByID(ctx, conn, resourceID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Resource (%s) tags: %s", resourceID, err)
	}

	d.SetId(resourceID)

	if tags != nil {
		if err := d.Set(names.AttrTags, KeyValueTags(ctx, tags).Map()); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
		}
	} else {
		d.Set(names.AttrTags, nil)
	}

	return diags
}
