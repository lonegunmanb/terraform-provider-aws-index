package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func sweepAccounts(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.OrganizationsClient(ctx)

	var sweepResources []sweep.Sweepable

	orgInput := organizations.DescribeOrganizationInput{}
	orgOutput, err := conn.DescribeOrganization(ctx, &orgInput)
	if errs.IsA[*awstypes.AWSOrganizationsNotInUseException](err) {
		tflog.Info(ctx, "Skipping sweeper", map[string]any{
			"skip_reason": "Not part of an AWS Organization",
		})
		return nil, nil
	}

	r := resourceAccount()

	input := organizations.ListAccountsInput{}
	pages := organizations.NewListAccountsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, account := range page.Accounts {
			if aws.ToString(account.Id) == aws.ToString(orgOutput.Organization.MasterAccountId) {
				tflog.Info(ctx, "Skipping resource", map[string]any{
					"attr.id":     account.Id,
					"skip_reason": "Organization management account",
				})
				continue
			}

			if account.Status != awstypes.AccountStatusActive {
				tflog.Info(ctx, "Skipping resource", map[string]any{
					"attr.id":     account.Id,
					"skip_reason": fmt.Sprintf("Account status is %q", account.Status),
				})
				continue
			}

			// TODO: Figure out how to not do the retry

			d := r.Data(nil)
			d.SetId(aws.ToString(account.Id))
			d.Set("close_on_deletion", true)

			sweepResources = append(sweepResources, newAccountSweeper(r, d, client))
		}
	}

	return sweepResources, nil
}
