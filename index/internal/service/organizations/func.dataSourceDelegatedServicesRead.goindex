package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDelegatedServicesRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OrganizationsClient(ctx)

	accountID := d.Get(names.AttrAccountID).(string)
	output, err := findDelegatedServicesByAccountID(ctx, conn, accountID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Organizations Delegated Services (%s): %s", accountID, err)
	}

	d.SetId(meta.(*conns.AWSClient).AccountID(ctx))
	if err = d.Set("delegated_services", flattenDelegatedServices(output)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting delegated_services: %s", err)
	}

	return nil
}
