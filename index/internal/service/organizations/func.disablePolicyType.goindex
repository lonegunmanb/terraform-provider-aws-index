package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func disablePolicyType(ctx context.Context, conn *organizations.Client, policyType awstypes.PolicyType, rootID string) error {
	input := &organizations.DisablePolicyTypeInput{
		PolicyType: policyType,
		RootId:     aws.String(rootID),
	}

	_, err := conn.DisablePolicyType(ctx, input)

	if err != nil {
		return fmt.Errorf("disabling policy type (%s) in Organizations Organization root (%s): %w", policyType, rootID, err)
	}

	if _, err := waitDefaultRootPolicyTypeDisabled(ctx, conn, policyType); err != nil {
		return fmt.Errorf("waiting for Organizations Organization policy (%s) disable: %w", policyType, err)
	}

	return nil
}
