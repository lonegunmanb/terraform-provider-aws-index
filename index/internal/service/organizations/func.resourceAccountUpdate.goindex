package github.com/hashicorp/terraform-provider-aws/internal/service/organizations
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/account"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccountUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	connOrg := meta.(*conns.AWSClient).OrganizationsClient(ctx)
	connAcc := meta.(*conns.AWSClient).AccountClient(ctx)

	if d.HasChange(names.AttrName) {
		name := d.Get(names.AttrName).(string)
		input := account.PutAccountNameInput{
			AccountId:   aws.String(d.Id()),
			AccountName: aws.String(name),
		}
		_, err := connAcc.PutAccountName(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating AWS Account (%s) name: %s", d.Id(), err)
		}

		_, err = tfresource.RetryUntilEqual(ctx, d.Timeout(schema.TimeoutUpdate), name, func() (string, error) {
			output, err := findAccountByID(ctx, connOrg, d.Id())

			if err != nil {
				return "", err
			}

			return aws.ToString(output.Name), nil
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for AWS Account (%s) name update: %s", d.Id(), err)
		}
	}

	if d.HasChange("parent_id") {
		o, n := d.GetChange("parent_id")

		input := &organizations.MoveAccountInput{
			AccountId:           aws.String(d.Id()),
			SourceParentId:      aws.String(o.(string)),
			DestinationParentId: aws.String(n.(string)),
		}

		_, err := connOrg.MoveAccount(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "moving AWS Organizations Account (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceAccountRead(ctx, d, meta)...)
}
