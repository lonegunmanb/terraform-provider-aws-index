package github.com/hashicorp/terraform-provider-aws/internal/service/emrserverless
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EMRServerlessClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := emrserverless.CreateApplicationInput{
		ClientToken:  aws.String(id.UniqueId()),
		ReleaseLabel: aws.String(d.Get("release_label").(string)),
		Name:         aws.String(name),
		Tags:         getTagsIn(ctx),
		Type:         aws.String(d.Get(names.AttrType).(string)),
	}

	if v, ok := d.GetOk("architecture"); ok {
		input.Architecture = types.Architecture(v.(string))
	}

	if v, ok := d.GetOk("auto_start_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.AutoStartConfiguration = expandAutoStartConfig(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("auto_stop_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.AutoStopConfiguration = expandAutoStopConfig(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("image_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ImageConfiguration = expandImageConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("initial_capacity"); ok && v.(*schema.Set).Len() > 0 {
		input.InitialCapacity = expandInitialCapacity(v.(*schema.Set))
	}

	if v, ok := d.GetOk("interactive_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.InteractiveConfiguration = expandInteractiveConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("maximum_capacity"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.MaximumCapacity = expandMaximumCapacity(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("monitoring_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.MonitoringConfiguration = expandMonitoringConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrNetworkConfiguration); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.NetworkConfiguration = expandNetworkConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("runtime_configuration"); ok && len(v.([]any)) > 0 {
		input.RuntimeConfiguration = expandRuntimeConfiguration(v.([]any))
	}

	// Empty block (len(v.([]any)) > 0 but v.([]any)[0] == nil) is allowed to enable scheduler_configuration with default values
	if v, ok := d.GetOk("scheduler_configuration"); ok && len(v.([]any)) > 0 {
		input.SchedulerConfiguration = expandSchedulerConfiguration(v.([]any))
	}

	output, err := conn.CreateApplication(ctx, &input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EMR Serveless Application (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.ApplicationId))

	if _, err := waitApplicationCreated(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EMR Serveless Application (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceApplicationRead(ctx, d, meta)...)
}
