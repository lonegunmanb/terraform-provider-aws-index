package github.com/hashicorp/terraform-provider-aws/internal/service/emrserverless
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandInitialCapacity(tfMap *schema.Set) map[string]types.InitialCapacityConfig {
	if tfMap == nil {
		return nil
	}

	configs := make(map[string]types.InitialCapacityConfig)

	for _, tfMapRaw := range tfMap.List() {
		config, ok := tfMapRaw.(map[string]any)

		if !ok {
			continue
		}

		if v, ok := config["initial_capacity_type"].(string); ok && v != "" {
			if conf, ok := config["initial_capacity_config"].([]any); ok && len(conf) > 0 {
				configs[v] = expandInitialCapacityConfig(conf[0].(map[string]any))
			}
		}
	}

	return configs
}
