package github.com/hashicorp/terraform-provider-aws/internal/service/emrserverless
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EMRServerlessClient(ctx)

	application, err := findApplicationByID(ctx, conn, d.Id())

	if !d.IsNewResource() && retry.NotFound(err) {
		log.Printf("[WARN] EMR Serverless Application (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EMR Serverless Application (%s): %s", d.Id(), err)
	}

	d.Set("architecture", application.Architecture)
	d.Set(names.AttrARN, application.Arn)
	d.Set(names.AttrName, application.Name)
	d.Set("release_label", application.ReleaseLabel)
	d.Set(names.AttrType, strings.ToLower(aws.ToString(application.Type)))

	if err := d.Set("auto_start_configuration", []any{flattenAutoStartConfig(application.AutoStartConfiguration)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting auto_start_configuration: %s", err)
	}

	if err := d.Set("auto_stop_configuration", []any{flattenAutoStopConfig(application.AutoStopConfiguration)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting auto_stop_configuration: %s", err)
	}

	if err := d.Set("image_configuration", flattenImageConfiguration(application.ImageConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting image_configuration: %s", err)
	}

	if err := d.Set("initial_capacity", flattenInitialCapacity(application.InitialCapacity)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting initial_capacity: %s", err)
	}

	if err := d.Set("interactive_configuration", []any{flattenInteractiveConfiguration(application.InteractiveConfiguration)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting interactive_configuration: %s", err)
	}

	if err := d.Set("maximum_capacity", []any{flattenMaximumCapacity(application.MaximumCapacity)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting maximum_capacity: %s", err)
	}

	if err := d.Set(names.AttrNetworkConfiguration, []any{flattenNetworkConfiguration(application.NetworkConfiguration)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting network_configuration: %s", err)
	}

	setTagsOut(ctx, application.Tags)

	return diags
}
