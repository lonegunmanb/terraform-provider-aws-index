package github.com/hashicorp/terraform-provider-aws/internal/service/emrserverless
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitApplicationCreated(ctx context.Context, conn *emrserverless.Client, id string) (*types.Application, error) {
	const (
		timeout    = 75 * time.Minute
		minTimeout = 10 * time.Second
		delay      = 30 * time.Second
	)
	stateConf := &retry.StateChangeConf{
		Pending:    enum.Slice(types.ApplicationStateCreating),
		Target:     enum.Slice(types.ApplicationStateCreated),
		Refresh:    statusApplication(ctx, conn, id),
		Timeout:    timeout,
		MinTimeout: minTimeout,
		Delay:      delay,
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*types.Application); ok {
		if stateChangeReason := output.StateDetails; stateChangeReason != nil {
			tfresource.SetLastError(err, errors.New(aws.ToString(stateChangeReason)))
		}

		return output, err
	}

	return nil, err
}
