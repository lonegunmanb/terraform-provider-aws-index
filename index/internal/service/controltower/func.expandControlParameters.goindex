package github.com/hashicorp/terraform-provider-aws/internal/service/controltower
import (
	"context"
	"encoding/json"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/controltower"
	"github.com/aws/aws-sdk-go-v2/service/controltower/document"
	"github.com/aws/aws-sdk-go-v2/service/controltower/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandControlParameters(input []any) ([]types.EnabledControlParameter, error) {
	output := []types.EnabledControlParameter{}

	for _, v := range input {
		val := v.(map[string]any)
		e := types.EnabledControlParameter{
			Key: aws.String(val[names.AttrKey].(string)),
		}

		var out any
		err := json.Unmarshal([]byte(val[names.AttrValue].(string)), &out)
		if err != nil {
			return nil, err
		}

		e.Value = document.NewLazyDocument(out)
		output = append(output, e)
	}

	return output, nil
}
