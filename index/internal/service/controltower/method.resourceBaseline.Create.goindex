package github.com/hashicorp/terraform-provider-aws/internal/service/controltower
import (
	"context"
	"errors"
	"reflect"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/controltower"
	"github.com/aws/aws-sdk-go-v2/service/controltower/document"
	awstypes "github.com/aws/aws-sdk-go-v2/service/controltower/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *resourceBaseline) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	conn := r.Meta().ControlTowerClient(ctx)

	var plan resourceBaselineData
	response.Diagnostics.Append(request.Plan.Get(ctx, &plan)...)
	if response.Diagnostics.HasError() {
		return
	}

	in := controltower.EnableBaselineInput{}
	response.Diagnostics.Append(fwflex.Expand(ctx, plan, &in)...)
	if response.Diagnostics.HasError() {
		return
	}

	in.Tags = getTagsIn(ctx)

	out, err := conn.EnableBaseline(ctx, &in)
	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.ControlTower, create.ErrActionCreating, ResNameBaseline, plan.BaselineIdentifier.String(), err),
			err.Error(),
		)
		return
	}

	if out == nil || out.OperationIdentifier == nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.ControlTower, create.ErrActionCreating, ResNameBaseline, plan.BaselineIdentifier.String(), nil),
			errors.New("empty output").Error(),
		)
		return
	}

	plan.ARN = fwflex.StringToFramework(ctx, out.Arn)
	createTimeout := r.CreateTimeout(ctx, plan.Timeouts)
	_, err = waitBaselineReady(ctx, conn, plan.ARN.ValueString(), createTimeout)
	if err != nil {
		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(names.AttrARN), plan.ARN.ValueString())...)
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.ControlTower, create.ErrActionWaitingForCreation, ResNameBaseline, plan.BaselineIdentifier.String(), err),
			err.Error(),
		)
		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, out, &plan)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &plan)...)
}
