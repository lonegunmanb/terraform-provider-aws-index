package github.com/hashicorp/terraform-provider-aws/internal/service/drs
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/drs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/drs/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func replicationConfigurationTemplateHasChanges(_ context.Context, plan, state replicationConfigurationTemplateResourceModel) bool {
	return !plan.AssociateDefaultSecurityGroup.Equal(state.AssociateDefaultSecurityGroup) ||
		!plan.AutoReplicateNewDisks.Equal(state.AutoReplicateNewDisks) ||
		!plan.BandwidthThrottling.Equal(state.BandwidthThrottling) ||
		!plan.CreatePublicIP.Equal(state.CreatePublicIP) ||
		!plan.DataPlaneRouting.Equal(state.DataPlaneRouting) ||
		!plan.DefaultLargeStagingDiskType.Equal(state.DefaultLargeStagingDiskType) ||
		!plan.EBSEncryption.Equal(state.EBSEncryption) ||
		!plan.EBSEncryptionKeyARN.Equal(state.EBSEncryptionKeyARN) ||
		!plan.ID.Equal(state.ID) ||
		!plan.PitPolicy.Equal(state.PitPolicy) ||
		!plan.ReplicationServerInstanceType.Equal(state.ReplicationServerInstanceType) ||
		!plan.ReplicationServersSecurityGroupsIDs.Equal(state.ReplicationServersSecurityGroupsIDs) ||
		!plan.StagingAreaSubnetID.Equal(state.StagingAreaSubnetID) ||
		!plan.UseDedicatedReplicationServer.Equal(state.UseDedicatedReplicationServer)
}
