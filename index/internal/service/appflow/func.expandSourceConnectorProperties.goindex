package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSourceConnectorProperties(tfMap map[string]any) *types.SourceConnectorProperties {
	if tfMap == nil {
		return nil
	}

	a := &types.SourceConnectorProperties{}

	if v, ok := tfMap["amplitude"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Amplitude = expandAmplitudeSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["custom_connector"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.CustomConnector = expandCustomConnectorSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["datadog"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Datadog = expandDatadogSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["dynatrace"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Dynatrace = expandDynatraceSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["google_analytics"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.GoogleAnalytics = expandGoogleAnalyticsSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["infor_nexus"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.InforNexus = expandInforNexusSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["marketo"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Marketo = expandMarketoSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["s3"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.S3 = expandS3SourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["sapo_data"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.SAPOData = expandSAPODataSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["salesforce"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Salesforce = expandSalesforceSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["service_now"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.ServiceNow = expandServiceNowSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["singular"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Singular = expandSingularSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["slack"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Slack = expandSlackSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["trendmicro"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Trendmicro = expandTrendmicroSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["veeva"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Veeva = expandVeevaSourceProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["zendesk"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Zendesk = expandZendeskSourceProperties(v[0].(map[string]any))
	}

	return a
}
