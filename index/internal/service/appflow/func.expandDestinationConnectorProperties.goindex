package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDestinationConnectorProperties(tfMap map[string]any) *types.DestinationConnectorProperties {
	if tfMap == nil {
		return nil
	}

	a := &types.DestinationConnectorProperties{}

	if v, ok := tfMap["custom_connector"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.CustomConnector = expandCustomConnectorDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["customer_profiles"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.CustomerProfiles = expandCustomerProfilesDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["event_bridge"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.EventBridge = expandEventBridgeDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["honeycode"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Honeycode = expandHoneycodeDestinationProperties(v[0].(map[string]any))
	}

	// API reference does not list valid attributes for LookoutMetricsDestinationProperties
	// https://docs.aws.amazon.com/appflow/1.0/APIReference/API_LookoutMetricsDestinationProperties.html
	if v, ok := tfMap["lookout_metrics"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.LookoutMetrics = v[0].(*types.LookoutMetricsDestinationProperties)
	}

	if v, ok := tfMap["marketo"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Marketo = expandMarketoDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["redshift"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Redshift = expandRedshiftDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["s3"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.S3 = expandS3DestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["salesforce"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Salesforce = expandSalesforceDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["sapo_data"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.SAPOData = expandSAPODataDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["snowflake"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Snowflake = expandSnowflakeDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["upsolver"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Upsolver = expandUpsolverDestinationProperties(v[0].(map[string]any))
	}

	if v, ok := tfMap["zendesk"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.Zendesk = expandZendeskDestinationProperties(v[0].(map[string]any))
	}

	return a
}
