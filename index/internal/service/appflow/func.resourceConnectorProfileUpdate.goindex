package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConnectorProfileUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AppFlowClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &appflow.UpdateConnectorProfileInput{
		ConnectionMode:       types.ConnectionMode(d.Get("connection_mode").(string)),
		ConnectorProfileName: aws.String(name),
	}

	if v, ok := d.GetOk("connector_profile_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ConnectorProfileConfig = expandConnectorProfileConfig(v.([]any)[0].(map[string]any))
	}

	_, err := conn.UpdateConnectorProfile(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating AppFlow Connector Profile (%s): %s", d.Id(), err)
	}

	return append(diags, resourceConnectorProfileRead(ctx, d, meta)...)
}
