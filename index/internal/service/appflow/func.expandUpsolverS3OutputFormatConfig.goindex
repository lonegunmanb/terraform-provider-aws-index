package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUpsolverS3OutputFormatConfig(tfMap map[string]any) *types.UpsolverS3OutputFormatConfig {
	if tfMap == nil {
		return nil
	}

	a := &types.UpsolverS3OutputFormatConfig{}

	if v, ok := tfMap["aggregation_config"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.AggregationConfig = expandAggregationConfig(v[0].(map[string]any))
	}

	if v, ok := tfMap["file_type"].(string); ok && v != "" {
		a.FileType = types.FileType(v)
	}

	if v, ok := tfMap["prefix_config"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.PrefixConfig = expandPrefixConfig(v[0].(map[string]any))
	}

	return a
}
