package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandConnectorOperator(tfMap map[string]any) *types.ConnectorOperator {
	if tfMap == nil {
		return nil
	}

	a := &types.ConnectorOperator{}

	if v, ok := tfMap["amplitude"].(string); ok && v != "" {
		a.Amplitude = types.AmplitudeConnectorOperator(v)
	}

	if v, ok := tfMap["custom_connector"].(string); ok && v != "" {
		a.CustomConnector = types.Operator(v)
	}

	if v, ok := tfMap["datadog"].(string); ok && v != "" {
		a.Datadog = types.DatadogConnectorOperator(v)
	}

	if v, ok := tfMap["dynatrace"].(string); ok && v != "" {
		a.Dynatrace = types.DynatraceConnectorOperator(v)
	}

	if v, ok := tfMap["google_analytics"].(string); ok && v != "" {
		a.GoogleAnalytics = types.GoogleAnalyticsConnectorOperator(v)
	}

	if v, ok := tfMap["infor_nexus"].(string); ok && v != "" {
		a.InforNexus = types.InforNexusConnectorOperator(v)
	}

	if v, ok := tfMap["marketo"].(string); ok && v != "" {
		a.Marketo = types.MarketoConnectorOperator(v)
	}

	if v, ok := tfMap["s3"].(string); ok && v != "" {
		a.S3 = types.S3ConnectorOperator(v)
	}

	if v, ok := tfMap["sapo_data"].(string); ok && v != "" {
		a.SAPOData = types.SAPODataConnectorOperator(v)
	}

	if v, ok := tfMap["salesforce"].(string); ok && v != "" {
		a.Salesforce = types.SalesforceConnectorOperator(v)
	}

	if v, ok := tfMap["service_now"].(string); ok && v != "" {
		a.ServiceNow = types.ServiceNowConnectorOperator(v)
	}

	if v, ok := tfMap["singular"].(string); ok && v != "" {
		a.Singular = types.SingularConnectorOperator(v)
	}

	if v, ok := tfMap["slack"].(string); ok && v != "" {
		a.Slack = types.SlackConnectorOperator(v)
	}

	if v, ok := tfMap["trendmicro"].(string); ok && v != "" {
		a.Trendmicro = types.TrendmicroConnectorOperator(v)
	}

	if v, ok := tfMap["veeva"].(string); ok && v != "" {
		a.Veeva = types.VeevaConnectorOperator(v)
	}

	if v, ok := tfMap["zendesk"].(string); ok && v != "" {
		a.Zendesk = types.ZendeskConnectorOperator(v)
	}

	return a
}
