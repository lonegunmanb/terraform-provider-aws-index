package github.com/hashicorp/terraform-provider-aws/internal/service/appflow
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appflow/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRedshiftConnectorProfileProperties(properties *types.RedshiftConnectorProfileProperties) []any {
	m := make(map[string]any)

	m[names.AttrBucketName] = aws.ToString(properties.BucketName)

	if properties.BucketPrefix != nil {
		m[names.AttrBucketPrefix] = aws.ToString(properties.BucketPrefix)
	}

	if properties.DatabaseUrl != nil {
		m["database_url"] = aws.ToString(properties.DatabaseUrl)
	}

	m[names.AttrRoleARN] = aws.ToString(properties.RoleArn)
	m[names.AttrClusterIdentifier] = aws.ToString(properties.ClusterIdentifier)
	m["data_api_role_arn"] = aws.ToString(properties.DataApiRoleArn)
	m[names.AttrDatabaseName] = aws.ToString(properties.DatabaseName)

	return []any{m}
}
