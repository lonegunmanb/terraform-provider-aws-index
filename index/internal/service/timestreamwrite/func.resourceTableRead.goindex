package github.com/hashicorp/terraform-provider-aws/internal/service/timestreamwrite
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	"github.com/aws/aws-sdk-go-v2/service/timestreamwrite/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TimestreamWriteClient(ctx)

	tableName, databaseName, err := tableParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	table, err := findTableByTwoPartKey(ctx, conn, databaseName, tableName)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Timestream Table %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Timestream Table (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, table.Arn)
	d.Set(names.AttrDatabaseName, table.DatabaseName)
	if err := d.Set("magnetic_store_write_properties", flattenMagneticStoreWriteProperties(table.MagneticStoreWriteProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting magnetic_store_write_properties: %s", err)
	}
	if err := d.Set("retention_properties", flattenRetentionProperties(table.RetentionProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting retention_properties: %s", err)
	}
	if table.Schema != nil {
		if err := d.Set(names.AttrSchema, []any{flattenSchema(table.Schema)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting schema: %s", err)
		}
	} else {
		d.Set(names.AttrSchema, nil)
	}
	d.Set(names.AttrTableName, table.TableName)

	return diags
}
