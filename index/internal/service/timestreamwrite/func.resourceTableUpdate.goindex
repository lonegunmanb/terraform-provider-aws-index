package github.com/hashicorp/terraform-provider-aws/internal/service/timestreamwrite
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	"github.com/aws/aws-sdk-go-v2/service/timestreamwrite/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TimestreamWriteClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		tableName, databaseName, err := tableParseResourceID(d.Id())
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &timestreamwrite.UpdateTableInput{
			DatabaseName: aws.String(databaseName),
			TableName:    aws.String(tableName),
		}

		if d.HasChange("magnetic_store_write_properties") {
			input.MagneticStoreWriteProperties = expandMagneticStoreWriteProperties(d.Get("magnetic_store_write_properties").([]any))
		}

		if d.HasChange("retention_properties") {
			input.RetentionProperties = expandRetentionProperties(d.Get("retention_properties").([]any))
		}

		if d.HasChange(names.AttrSchema) {
			if v, ok := d.GetOk(names.AttrSchema); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.Schema = expandSchema(v.([]any)[0].(map[string]any))
			}
		}

		_, err = conn.UpdateTable(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Timestream Table (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceTableRead(ctx, d, meta)...)
}
