package github.com/hashicorp/terraform-provider-aws/internal/service/datazone
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datazone"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datazone/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func _findEnvironmentBlueprintByName(ctx context.Context, conn *datazone.Client, domainId, name string, managed bool, nextToken *string) (*awstypes.EnvironmentBlueprintSummary, error) {
	in := &datazone.ListEnvironmentBlueprintsInput{
		DomainIdentifier: aws.String(domainId),
		Managed:          aws.Bool(managed),
	}

	if nextToken != nil {
		in.NextToken = aws.String(*nextToken)
	}

	out, err := conn.ListEnvironmentBlueprints(ctx, in)
	if err != nil {
		return nil, err
	}

	if out == nil {
		return nil, tfresource.NewEmptyResultError(in)
	}

	for i := range out.Items {
		blueprint := out.Items[i]
		if name == aws.ToString(blueprint.Name) {
			return &blueprint, nil
		}
	}

	if out.NextToken == nil {
		return nil, tfresource.NewEmptyResultError(in)
	}

	return _findEnvironmentBlueprintByName(ctx, conn, domainId, name, managed, out.NextToken)
}
