package github.com/hashicorp/terraform-provider-aws/internal/service/datazone
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datazone"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepProjects(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.DataZoneClient(ctx)
	var sweepResources []sweep.Sweepable

	var domainsInput datazone.ListDomainsInput
	pages := datazone.NewListDomainsPaginator(conn, &domainsInput)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, domain := range page.Items {
			projectsInput := datazone.ListProjectsInput{
				DomainIdentifier: domain.Id,
			}
			pages := datazone.NewListProjectsPaginator(conn, &projectsInput)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)
				if err != nil {
					return nil, err
				}

				for _, project := range page.Items {
					sweepResources = append(sweepResources, framework.NewSweepResource(newProjectResource, client,
						framework.NewAttribute(names.AttrID, project.Id),
						framework.NewAttribute("domain_identifier", domain.Id),
						framework.NewAttribute("skip_deletion_check", true), // Automatically delete associated Glossaries
					))
				}
			}
		}
	}

	return sweepResources, nil
}
