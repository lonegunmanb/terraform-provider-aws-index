package github.com/hashicorp/terraform-provider-aws/internal/service/datazone
import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datazone"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRegionalParameters(ctx context.Context, apiObject *map[string]map[string]string) (types.Map, diag.Diagnostics) {
	var diags diag.Diagnostics
	elemType := types.MapType{ElemType: types.StringType}

	if apiObject == nil || len(*apiObject) == 0 {
		return types.MapNull(elemType), diags
	}

	elements := map[string]types.Map{}

	for k, v := range *apiObject {
		elements[k] = flex.FlattenFrameworkStringValueMap(ctx, v)
	}

	mapVal, d := types.MapValueFrom(ctx, types.MapType{ElemType: types.StringType}, elements)
	diags.Append(d...)

	return mapVal, diags
}
