package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAmazonopensearchserviceDestinationUpdate(os map[string]any) *types.AmazonopensearchserviceDestinationUpdate {
	roleARN := os[names.AttrRoleARN].(string)
	update := &types.AmazonopensearchserviceDestinationUpdate{
		BufferingHints: expandAmazonopensearchserviceBufferingHints(os),
		IndexName:      aws.String(os["index_name"].(string)),
		RetryOptions:   expandAmazonopensearchserviceRetryOptions(os),
		RoleARN:        aws.String(roleARN),
		TypeName:       aws.String(os["type_name"].(string)),
		S3Update:       expandS3DestinationUpdate(os["s3_configuration"].([]any)),
	}

	if v, ok := os["domain_arn"]; ok && v.(string) != "" {
		update.DomainARN = aws.String(v.(string))
	}

	if v, ok := os["cluster_endpoint"]; ok && v.(string) != "" {
		update.ClusterEndpoint = aws.String(v.(string))
	}

	if _, ok := os["cloudwatch_logging_options"]; ok {
		update.CloudWatchLoggingOptions = expandCloudWatchLoggingOptions(os)
	}

	if _, ok := os["processing_configuration"]; ok {
		update.ProcessingConfiguration = expandProcessingConfiguration(os, destinationTypeOpenSearch, roleARN)
	}

	if indexRotationPeriod, ok := os["index_rotation_period"]; ok {
		update.IndexRotationPeriod = types.AmazonopensearchserviceIndexRotationPeriod(indexRotationPeriod.(string))
	}

	if v, ok := os["document_id_options"].([]any); ok && len(v) > 0 && v[0] != nil {
		update.DocumentIdOptions = expandDocumentIDOptions(v[0].(map[string]any))
	}

	return update
}
