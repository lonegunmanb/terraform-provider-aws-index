package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDeliveryStreamCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FirehoseClient(ctx)

	sn := d.Get(names.AttrName).(string)
	input := &firehose.CreateDeliveryStreamInput{
		DeliveryStreamName: aws.String(sn),
		DeliveryStreamType: types.DeliveryStreamTypeDirectPut,
		Tags:               getTagsIn(ctx),
	}

	if v, ok := d.GetOk("kinesis_source_configuration"); ok {
		input.DeliveryStreamType = types.DeliveryStreamTypeKinesisStreamAsSource
		input.KinesisStreamSourceConfiguration = expandKinesisStreamSourceConfiguration(v.([]any)[0].(map[string]any))
	} else if v, ok := d.GetOk("msk_source_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DeliveryStreamType = types.DeliveryStreamTypeMSKAsSource
		input.MSKSourceConfiguration = expandMSKSourceConfiguration(v.([]any)[0].(map[string]any))
	}

	switch v := destinationType(d.Get(names.AttrDestination).(string)); v {
	case destinationTypeElasticsearch:
		if v, ok := d.GetOk("elasticsearch_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.ElasticsearchDestinationConfiguration = expandElasticsearchDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeExtendedS3:
		if v, ok := d.GetOk("extended_s3_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.ExtendedS3DestinationConfiguration = expandExtendedS3DestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeHTTPEndpoint:
		if v, ok := d.GetOk("http_endpoint_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.HttpEndpointDestinationConfiguration = expandHTTPEndpointDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeIceberg:
		if v, ok := d.GetOk("iceberg_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.IcebergDestinationConfiguration = expandIcebergDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeOpenSearch:
		if v, ok := d.GetOk("opensearch_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.AmazonopensearchserviceDestinationConfiguration = expandAmazonopensearchserviceDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeOpenSearchServerless:
		if v, ok := d.GetOk("opensearchserverless_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.AmazonOpenSearchServerlessDestinationConfiguration = expandAmazonOpenSearchServerlessDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeRedshift:
		if v, ok := d.GetOk("redshift_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.RedshiftDestinationConfiguration = expandRedshiftDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeSnowflake:
		if v, ok := d.GetOk("snowflake_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.SnowflakeDestinationConfiguration = expandSnowflakeDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	case destinationTypeSplunk:
		if v, ok := d.GetOk("splunk_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.SplunkDestinationConfiguration = expandSplunkDestinationConfiguration(v.([]any)[0].(map[string]any))
		}
	}

	_, err := retryDeliveryStreamOp(ctx, func() (any, error) {
		return conn.CreateDeliveryStream(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Kinesis Firehose Delivery Stream (%s): %s", sn, err)
	}

	output, err := waitDeliveryStreamCreated(ctx, conn, sn, d.Timeout(schema.TimeoutCreate))

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Kinesis Firehose Delivery Stream (%s) create: %s", sn, err)
	}

	d.SetId(aws.ToString(output.DeliveryStreamARN))

	if v, ok := d.GetOk("server_side_encryption"); ok && !isDeliveryStreamOptionDisabled(v) {
		input := &firehose.StartDeliveryStreamEncryptionInput{
			DeliveryStreamEncryptionConfigurationInput: expandDeliveryStreamEncryptionConfigurationInput(v.([]any)),
			DeliveryStreamName:                         aws.String(sn),
		}

		_, err := conn.StartDeliveryStreamEncryption(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "starting Kinesis Firehose Delivery Stream (%s) encryption: %s", sn, err)
		}

		if _, err := waitDeliveryStreamEncryptionEnabled(ctx, conn, sn, d.Timeout(schema.TimeoutCreate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Kinesis Firehose Delivery Stream (%s) encryption enable: %s", sn, err)
		}
	}

	return append(diags, resourceDeliveryStreamRead(ctx, d, meta)...)
}
