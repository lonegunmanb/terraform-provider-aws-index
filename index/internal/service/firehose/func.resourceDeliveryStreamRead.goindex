package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDeliveryStreamRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FirehoseClient(ctx)

	sn := d.Get(names.AttrName).(string)
	s, err := findDeliveryStreamByName(ctx, conn, sn)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Kinesis Firehose Delivery Stream (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Kinesis Firehose Delivery Stream (%s): %s", sn, err)
	}

	d.Set(names.AttrARN, s.DeliveryStreamARN)
	if v := s.Source; v != nil {
		if v := v.KinesisStreamSourceDescription; v != nil {
			if err := d.Set("kinesis_source_configuration", flattenKinesisStreamSourceDescription(v)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting kinesis_source_configuration: %s", err)
			}
		}
		if v := v.MSKSourceDescription; v != nil {
			if err := d.Set("msk_source_configuration", []any{flattenMSKSourceDescription(v)}); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting msk_source_configuration: %s", err)
			}
		}
	}
	d.Set(names.AttrName, s.DeliveryStreamName)
	d.Set("version_id", s.VersionId)

	sseOptions := map[string]any{
		names.AttrEnabled: false,
		"key_type":        types.KeyTypeAwsOwnedCmk,
	}
	if s.DeliveryStreamEncryptionConfiguration != nil && s.DeliveryStreamEncryptionConfiguration.Status == types.DeliveryStreamEncryptionStatusEnabled {
		sseOptions[names.AttrEnabled] = true
		sseOptions["key_type"] = s.DeliveryStreamEncryptionConfiguration.KeyType

		if v := s.DeliveryStreamEncryptionConfiguration.KeyARN; v != nil {
			sseOptions["key_arn"] = aws.ToString(v)
		}
	}
	if err := d.Set("server_side_encryption", []map[string]any{sseOptions}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting server_side_encryption: %s", err)
	}

	if len(s.Destinations) > 0 {
		destination := s.Destinations[0]
		switch {
		case destination.ElasticsearchDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeElasticsearch)
			if err := d.Set("elasticsearch_configuration", flattenElasticsearchDestinationDescription(destination.ElasticsearchDestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting elasticsearch_configuration: %s", err)
			}
		case destination.HttpEndpointDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeHTTPEndpoint)
			configuredAccessKey := d.Get("http_endpoint_configuration.0.access_key").(string)
			if err := d.Set("http_endpoint_configuration", flattenHTTPEndpointDestinationDescription(destination.HttpEndpointDestinationDescription, configuredAccessKey)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting http_endpoint_configuration: %s", err)
			}
		case destination.IcebergDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeIceberg)
			if err := d.Set("iceberg_configuration", flattenIcebergDestinationDescription(destination.IcebergDestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting iceberg_configuration: %s", err)
			}
		case destination.AmazonopensearchserviceDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeOpenSearch)
			if err := d.Set("opensearch_configuration", flattenAmazonopensearchserviceDestinationDescription(destination.AmazonopensearchserviceDestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting opensearch_configuration: %s", err)
			}
		case destination.AmazonOpenSearchServerlessDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeOpenSearchServerless)
			if err := d.Set("opensearchserverless_configuration", flattenAmazonOpenSearchServerlessDestinationDescription(destination.AmazonOpenSearchServerlessDestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting opensearchserverless_configuration: %s", err)
			}
		case destination.RedshiftDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeRedshift)
			configuredPassword := d.Get("redshift_configuration.0.password").(string)
			if err := d.Set("redshift_configuration", flattenRedshiftDestinationDescription(destination.RedshiftDestinationDescription, configuredPassword)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting redshift_configuration: %s", err)
			}
		case destination.SnowflakeDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeSnowflake)
			configuredKeyPassphrase := d.Get("snowflake_configuration.0.key_passphrase").(string)
			configuredPrivateKey := d.Get("snowflake_configuration.0.private_key").(string)
			if err := d.Set("snowflake_configuration", flattenSnowflakeDestinationDescription(destination.SnowflakeDestinationDescription, configuredKeyPassphrase, configuredPrivateKey)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting snowflake_configuration: %s", err)
			}
		case destination.SplunkDestinationDescription != nil:
			d.Set(names.AttrDestination, destinationTypeSplunk)
			if err := d.Set("splunk_configuration", flattenSplunkDestinationDescription(destination.SplunkDestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting splunk_configuration: %s", err)
			}
		default:
			d.Set(names.AttrDestination, destinationTypeExtendedS3)
			if err := d.Set("extended_s3_configuration", flattenExtendedS3DestinationDescription(destination.ExtendedS3DestinationDescription)); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting extended_s3_configuration: %s", err)
			}
		}
		d.Set("destination_id", destination.DestinationId)
	}

	return diags
}
