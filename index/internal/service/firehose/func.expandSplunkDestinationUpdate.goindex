package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSplunkDestinationUpdate(tfMap map[string]any) *types.SplunkDestinationUpdate {
	apiObject := &types.SplunkDestinationUpdate{
		HECAcknowledgmentTimeoutInSeconds: aws.Int32(int32(tfMap["hec_acknowledgment_timeout"].(int))),
		HECEndpoint:                       aws.String(tfMap["hec_endpoint"].(string)),
		HECEndpointType:                   types.HECEndpointType(tfMap["hec_endpoint_type"].(string)),
		RetryOptions:                      expandSplunkRetryOptions(tfMap),
		S3Update:                          expandS3DestinationUpdate(tfMap["s3_configuration"].([]any)),
	}

	bufferingHints := &types.SplunkBufferingHints{}
	if bufferingInterval, ok := tfMap["buffering_interval"].(int); ok {
		bufferingHints.IntervalInSeconds = aws.Int32(int32(bufferingInterval))
	}
	if bufferingSize, ok := tfMap["buffering_size"].(int); ok {
		bufferingHints.SizeInMBs = aws.Int32(int32(bufferingSize))
	}
	apiObject.BufferingHints = bufferingHints

	if _, ok := tfMap["cloudwatch_logging_options"]; ok {
		apiObject.CloudWatchLoggingOptions = expandCloudWatchLoggingOptions(tfMap)
	}

	if v, ok := tfMap["hec_token"]; ok && v.(string) != "" {
		apiObject.HECToken = aws.String(v.(string))
	}

	if _, ok := tfMap["processing_configuration"]; ok {
		apiObject.ProcessingConfiguration = expandProcessingConfiguration(tfMap, destinationTypeSplunk, "")
	}

	if v, ok := tfMap["s3_backup_mode"]; ok {
		apiObject.S3BackupMode = types.SplunkS3BackupMode(v.(string))
	}

	if _, ok := tfMap["secrets_manager_configuration"]; ok {
		apiObject.SecretsManagerConfiguration = expandSecretsManagerConfiguration(tfMap)
	}

	return apiObject
}
