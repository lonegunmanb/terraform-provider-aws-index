package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func retryDeliveryStreamOp(ctx context.Context, f func(context.Context) (any, error)) (any, error) {
	return tfresource.RetryWhen(ctx, propagationTimeout,
		f,
		func(err error) (bool, error) {
			// Access was denied when calling Glue. Please ensure that the role specified in the data format conversion configuration has the necessary permissions.
			if errs.IsAErrorMessageContains[*types.InvalidArgumentException](err, "Access was denied") {
				return true, err
			}
			if errs.IsAErrorMessageContains[*types.InvalidArgumentException](err, "is not authorized to") {
				return true, err
			}
			if errs.IsAErrorMessageContains[*types.InvalidArgumentException](err, "Please make sure the role specified in VpcConfiguration has permissions") {
				return true, err
			}
			// InvalidArgumentException: Verify that the IAM role has access to the Elasticsearch domain.
			if errs.IsAErrorMessageContains[*types.InvalidArgumentException](err, "Verify that the IAM role has access") {
				return true, err
			}
			if errs.IsAErrorMessageContains[*types.InvalidArgumentException](err, "Firehose is unable to assume role") {
				return true, err
			}
			return false, err
		},
	)
}
