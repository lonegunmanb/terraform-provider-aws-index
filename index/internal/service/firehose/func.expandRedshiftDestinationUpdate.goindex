package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRedshiftDestinationUpdate(tfMap map[string]any) *types.RedshiftDestinationUpdate {
	roleARN := tfMap[names.AttrRoleARN].(string)
	apiObject := &types.RedshiftDestinationUpdate{
		ClusterJDBCURL: aws.String(tfMap["cluster_jdbcurl"].(string)),
		CopyCommand:    expandCopyCommand(tfMap),
		RetryOptions:   expandRedshiftRetryOptions(tfMap),
		RoleARN:        aws.String(roleARN),
	}

	s3Config := expandS3DestinationUpdate(tfMap["s3_configuration"].([]any))
	// Redshift does not currently support ErrorOutputPrefix,
	// which is set to the empty string within "updateS3Config",
	// thus we must remove it here to avoid an InvalidArgumentException.
	s3Config.ErrorOutputPrefix = nil
	apiObject.S3Update = s3Config

	if _, ok := tfMap["cloudwatch_logging_options"]; ok {
		apiObject.CloudWatchLoggingOptions = expandCloudWatchLoggingOptions(tfMap)
	}

	if v, ok := tfMap[names.AttrPassword]; ok && v.(string) != "" {
		apiObject.Password = aws.String(v.(string))
	}

	if _, ok := tfMap["processing_configuration"]; ok {
		apiObject.ProcessingConfiguration = expandProcessingConfiguration(tfMap, destinationTypeRedshift, roleARN)
	}

	if v, ok := tfMap["s3_backup_mode"]; ok {
		apiObject.S3BackupMode = types.RedshiftS3BackupMode(v.(string))
		apiObject.S3BackupUpdate = expandS3DestinationUpdateBackup(tfMap)
		if apiObject.S3BackupUpdate != nil {
			// Redshift does not currently support ErrorOutputPrefix,
			// which is set to the empty string within "updateS3BackupConfig",
			// thus we must remove it here to avoid an InvalidArgumentException.
			apiObject.S3BackupUpdate.ErrorOutputPrefix = nil
		}
	}

	if _, ok := tfMap["secrets_manager_configuration"]; ok {
		apiObject.SecretsManagerConfiguration = expandSecretsManagerConfiguration(tfMap)
	}

	if v, ok := tfMap[names.AttrUsername]; ok && v.(string) != "" {
		apiObject.Username = aws.String(v.(string))
	}

	return apiObject
}
