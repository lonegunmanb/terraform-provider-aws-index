package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAmazonOpenSearchServerlessDestinationConfiguration(oss map[string]any) *types.AmazonOpenSearchServerlessDestinationConfiguration {
	roleARN := oss[names.AttrRoleARN].(string)
	config := &types.AmazonOpenSearchServerlessDestinationConfiguration{
		BufferingHints:  expandAmazonOpenSearchServerlessBufferingHints(oss),
		IndexName:       aws.String(oss["index_name"].(string)),
		RetryOptions:    expandAmazonOpenSearchServerlessRetryOptions(oss),
		RoleARN:         aws.String(roleARN),
		S3Configuration: expandS3DestinationConfiguration(oss["s3_configuration"].([]any)),
	}

	if v, ok := oss["collection_endpoint"]; ok && v.(string) != "" {
		config.CollectionEndpoint = aws.String(v.(string))
	}

	if _, ok := oss["cloudwatch_logging_options"]; ok {
		config.CloudWatchLoggingOptions = expandCloudWatchLoggingOptions(oss)
	}

	if _, ok := oss["processing_configuration"]; ok {
		config.ProcessingConfiguration = expandProcessingConfiguration(oss, destinationTypeOpenSearchServerless, roleARN)
	}

	if s3BackupMode, ok := oss["s3_backup_mode"]; ok {
		config.S3BackupMode = types.AmazonOpenSearchServerlessS3BackupMode(s3BackupMode.(string))
	}

	if _, ok := oss[names.AttrVPCConfig]; ok {
		config.VpcConfiguration = expandVPCConfiguration(oss)
	}

	return config
}
