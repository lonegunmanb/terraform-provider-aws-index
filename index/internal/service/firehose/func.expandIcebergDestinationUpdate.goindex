package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIcebergDestinationUpdate(tfMap map[string]any) *types.IcebergDestinationUpdate {
	roleARN := tfMap[names.AttrRoleARN].(string)
	apiObject := &types.IcebergDestinationUpdate{
		BufferingHints: &types.BufferingHints{
			IntervalInSeconds: aws.Int32(int32(tfMap["buffering_interval"].(int))),
			SizeInMBs:         aws.Int32(int32(tfMap["buffering_size"].(int))),
		},
		RoleARN: aws.String(roleARN),
	}

	if v, ok := tfMap["append_only"].(bool); ok && v {
		apiObject.AppendOnly = aws.Bool(v)
	}

	if catalogARN, ok := tfMap["catalog_arn"].(string); ok {
		apiObject.CatalogConfiguration = &types.CatalogConfiguration{
			CatalogARN: aws.String(catalogARN),
		}
	}

	if _, ok := tfMap["cloudwatch_logging_options"]; ok {
		apiObject.CloudWatchLoggingOptions = expandCloudWatchLoggingOptions(tfMap)
	}

	if _, ok := tfMap["destination_table_configuration"]; ok {
		apiObject.DestinationTableConfigurationList = expandDestinationTableConfigurationList(tfMap)
	}

	if _, ok := tfMap["processing_configuration"]; ok {
		apiObject.ProcessingConfiguration = expandProcessingConfiguration(tfMap, destinationTypeIceberg, roleARN)
	}

	if _, ok := tfMap["retry_duration"]; ok {
		apiObject.RetryOptions = expandIcebergRetryOptions(tfMap)
	}

	if v, ok := tfMap["s3_backup_mode"]; ok {
		apiObject.S3BackupMode = types.IcebergS3BackupMode(v.(string))
	}

	if v, ok := tfMap["s3_configuration"]; ok {
		apiObject.S3Configuration = expandS3DestinationConfiguration(v.([]any))
	}

	return apiObject
}
