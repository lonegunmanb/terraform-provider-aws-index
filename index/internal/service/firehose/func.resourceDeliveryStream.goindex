package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDeliveryStream() *schema.Resource {
	// lintignore:R011
	return &schema.Resource{
		CreateWithoutTimeout: resourceDeliveryStreamCreate,
		ReadWithoutTimeout:   resourceDeliveryStreamRead,
		UpdateWithoutTimeout: resourceDeliveryStreamUpdate,
		DeleteWithoutTimeout: resourceDeliveryStreamDelete,

		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
				idErr := fmt.Errorf("Expected ID in format of arn:PARTITION:firehose:REGION:ACCOUNTID:deliverystream/NAME and provided: %s", d.Id())
				resARN, err := arn.Parse(d.Id())
				if err != nil {
					return nil, idErr
				}
				resourceParts := strings.Split(resARN.Resource, "/")
				if len(resourceParts) != 2 {
					return nil, idErr
				}
				d.Set(names.AttrName, resourceParts[1])
				return []*schema.ResourceData{d}, nil
			},
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		SchemaVersion: 1,
		MigrateState:  MigrateState,
		SchemaFunc: func() map[string]*schema.Schema {
			cloudWatchLoggingOptionsSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							names.AttrLogGroupName: {
								Type:     schema.TypeString,
								Optional: true,
							},
							"log_stream_name": {
								Type:     schema.TypeString,
								Optional: true,
							},
						},
					},
				}
			}
			destinationTableConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					Optional: true,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabaseName: {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrTableName: {
								Type:     schema.TypeString,
								Required: true,
							},
							"s3_error_output_prefix": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(0, 1024),
							},
							"unique_keys": {
								Type:     schema.TypeList,
								Optional: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
						},
					},
				}
			}
			dynamicPartitioningConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
								ForceNew: true,
							},
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
						},
					},
				}
			}
			processingConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:             schema.TypeList,
					Optional:         true,
					MaxItems:         1,
					DiffSuppressFunc: verify.SuppressMissingOptionalConfigurationBlock,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Optional: true,
							},
							"processors": {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrParameters: {
											// See AWS::KinesisFirehose::DeliveryStream CloudFormation resource schema.
											// uniqueItems is true and insertionOrder is true.
											// However, IRL the order of the processors is not important.
											Type:     schema.TypeSet,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"parameter_name": {
														Type:             schema.TypeString,
														Required:         true,
														ValidateDiagFunc: enum.Validate[types.ProcessorParameterName](),
													},
													"parameter_value": {
														Type:         schema.TypeString,
														Required:     true,
														ValidateFunc: validation.StringLenBetween(1, 5120),
													},
												},
											},
										},
										names.AttrType: {
											Type:             schema.TypeString,
											Required:         true,
											ValidateDiagFunc: enum.Validate[types.ProcessorType](),
										},
									},
								},
							},
						},
					},
				}
			}
			requestConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"common_attributes": {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrValue: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							"content_encoding": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.ContentEncodingNone,
								ValidateDiagFunc: enum.Validate[types.ContentEncoding](),
							},
						},
					},
				}
			}
			s3ConfigurationElem := func() *schema.Resource {
				return &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bucket_arn": {
							Type:         schema.TypeString,
							Required:     true,
							ValidateFunc: verify.ValidARN,
						},
						"buffering_interval": {
							Type:     schema.TypeInt,
							Optional: true,
							Default:  300,
						},
						"buffering_size": {
							Type:         schema.TypeInt,
							Optional:     true,
							Default:      5,
							ValidateFunc: validation.IntAtLeast(1),
						},
						"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
						"compression_format": {
							Type:             schema.TypeString,
							Optional:         true,
							Default:          types.CompressionFormatUncompressed,
							ValidateDiagFunc: enum.Validate[types.CompressionFormat](),
						},
						"error_output_prefix": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: validation.StringLenBetween(0, 1024),
						},
						names.AttrKMSKeyARN: {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: verify.ValidARN,
						},
						names.AttrPrefix: {
							Type:     schema.TypeString,
							Optional: true,
						},
						names.AttrRoleARN: {
							Type:         schema.TypeString,
							Required:     true,
							ValidateFunc: verify.ValidARN,
						},
					},
				}
			}
			s3BackupConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					Elem:     s3ConfigurationElem(),
				}
			}
			s3ConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Required: true,
					Elem:     s3ConfigurationElem(),
				}
			}
			secretsManagerConfigurationSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Optional: true,
								Computed: true,
								ForceNew: true,
							},
							"secret_arn": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				}
			}

			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				names.AttrDestination: {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
					StateFunc: func(v any) string {
						value := v.(string)
						return strings.ToLower(value)
					},
					ValidateDiagFunc: enum.Validate[destinationType](),
				},
				"destination_id": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				"elasticsearch_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 900),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      5,
								ValidateFunc: validation.IntBetween(1, 100),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"cluster_endpoint": {
								Type:          schema.TypeString,
								Optional:      true,
								ConflictsWith: []string{"elasticsearch_configuration.0.domain_arn"},
							},
							"domain_arn": {
								Type:          schema.TypeString,
								Optional:      true,
								ValidateFunc:  verify.ValidARN,
								ConflictsWith: []string{"elasticsearch_configuration.0.cluster_endpoint"},
							},
							"index_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							"index_rotation_period": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.ElasticsearchIndexRotationPeriodOneDay,
								ValidateDiagFunc: enum.Validate[types.ElasticsearchIndexRotationPeriod](),
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								ForceNew:         true,
								Optional:         true,
								Default:          types.ElasticsearchS3BackupModeFailedDocumentsOnly,
								ValidateDiagFunc: enum.Validate[types.ElasticsearchS3BackupMode](),
							},
							"s3_configuration": s3ConfigurationSchema(),
							"type_name": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(0, 100),
							},
							names.AttrVPCConfig: {
								Type:     schema.TypeList,
								Optional: true,
								ForceNew: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrSecurityGroupIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrSubnetIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrVPCID: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
				"extended_s3_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"bucket_arn": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"buffering_interval": {
								Type:     schema.TypeInt,
								Optional: true,
								Default:  300,
							},
							"buffering_size": {
								Type:     schema.TypeInt,
								Optional: true,
								Default:  5,
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"compression_format": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.CompressionFormatUncompressed,
								ValidateDiagFunc: enum.Validate[types.CompressionFormat](),
							},
							"custom_time_zone": {
								Type:         schema.TypeString,
								Optional:     true,
								Default:      "UTC",
								ValidateFunc: validation.StringLenBetween(0, 50),
							},
							"data_format_conversion_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrEnabled: {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  true,
										},
										"input_format_configuration": {
											Type:     schema.TypeList,
											Required: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"deserializer": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"hive_json_ser_de": {
																	Type:          schema.TypeList,
																	Optional:      true,
																	MaxItems:      1,
																	ConflictsWith: []string{"extended_s3_configuration.0.data_format_conversion_configuration.0.input_format_configuration.0.deserializer.0.open_x_json_ser_de"},
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"timestamp_formats": {
																				Type:     schema.TypeList,
																				Optional: true,
																				Elem:     &schema.Schema{Type: schema.TypeString},
																			},
																		},
																	},
																},
																"open_x_json_ser_de": {
																	Type:          schema.TypeList,
																	Optional:      true,
																	MaxItems:      1,
																	ConflictsWith: []string{"extended_s3_configuration.0.data_format_conversion_configuration.0.input_format_configuration.0.deserializer.0.hive_json_ser_de"},
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"case_insensitive": {
																				Type:     schema.TypeBool,
																				Optional: true,
																				Default:  true,
																			},
																			"column_to_json_key_mappings": {
																				Type:     schema.TypeMap,
																				Optional: true,
																				Elem:     &schema.Schema{Type: schema.TypeString},
																			},
																			"convert_dots_in_json_keys_to_underscores": {
																				Type:     schema.TypeBool,
																				Optional: true,
																				Default:  false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										"output_format_configuration": {
											Type:     schema.TypeList,
											Required: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"serializer": {
														Type:     schema.TypeList,
														Required: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"orc_ser_de": {
																	Type:          schema.TypeList,
																	Optional:      true,
																	MaxItems:      1,
																	ConflictsWith: []string{"extended_s3_configuration.0.data_format_conversion_configuration.0.output_format_configuration.0.serializer.0.parquet_ser_de"},
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"block_size_bytes": {
																				Type:     schema.TypeInt,
																				Optional: true,
																				// 256 MiB
																				Default: 268435456,
																				// 64 MiB
																				ValidateFunc: validation.IntAtLeast(67108864),
																			},
																			"bloom_filter_columns": {
																				Type:     schema.TypeList,
																				Optional: true,
																				Elem:     &schema.Schema{Type: schema.TypeString},
																			},
																			"bloom_filter_false_positive_probability": {
																				Type:     schema.TypeFloat,
																				Optional: true,
																				Default:  0.05,
																			},
																			"compression": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				Default:          types.OrcCompressionSnappy,
																				ValidateDiagFunc: enum.Validate[types.OrcCompression](),
																			},
																			"dictionary_key_threshold": {
																				Type:     schema.TypeFloat,
																				Optional: true,
																				Default:  0.0,
																			},
																			"enable_padding": {
																				Type:     schema.TypeBool,
																				Optional: true,
																				Default:  false,
																			},
																			"format_version": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				Default:          types.OrcFormatVersionV012,
																				ValidateDiagFunc: enum.Validate[types.OrcFormatVersion](),
																			},
																			"padding_tolerance": {
																				Type:     schema.TypeFloat,
																				Optional: true,
																				Default:  0.05,
																			},
																			"row_index_stride": {
																				Type:         schema.TypeInt,
																				Optional:     true,
																				Default:      10000,
																				ValidateFunc: validation.IntAtLeast(1000),
																			},
																			"stripe_size_bytes": {
																				Type:     schema.TypeInt,
																				Optional: true,
																				// 64 MiB
																				Default: 67108864,
																				// 8 MiB
																				ValidateFunc: validation.IntAtLeast(8388608),
																			},
																		},
																	},
																},
																"parquet_ser_de": {
																	Type:          schema.TypeList,
																	Optional:      true,
																	MaxItems:      1,
																	ConflictsWith: []string{"extended_s3_configuration.0.data_format_conversion_configuration.0.output_format_configuration.0.serializer.0.orc_ser_de"},
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"block_size_bytes": {
																				Type:     schema.TypeInt,
																				Optional: true,
																				// 256 MiB
																				Default: 268435456,
																				// 64 MiB
																				ValidateFunc: validation.IntAtLeast(67108864),
																			},
																			"compression": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				Default:          types.ParquetCompressionSnappy,
																				ValidateDiagFunc: enum.Validate[types.ParquetCompression](),
																			},
																			"enable_dictionary_compression": {
																				Type:     schema.TypeBool,
																				Optional: true,
																				Default:  false,
																			},
																			"max_padding_bytes": {
																				Type:     schema.TypeInt,
																				Optional: true,
																				Default:  0,
																			},
																			"page_size_bytes": {
																				Type:     schema.TypeInt,
																				Optional: true,
																				// 1 MiB
																				Default: 1048576,
																				// 64 KiB
																				ValidateFunc: validation.IntAtLeast(65536),
																			},
																			"writer_version": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				Default:          types.ParquetWriterVersionV1,
																				ValidateDiagFunc: enum.Validate[types.ParquetWriterVersion](),
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										"schema_configuration": {
											Type:     schema.TypeList,
											Required: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrCatalogID: {
														Type:     schema.TypeString,
														Optional: true,
														Computed: true,
													},
													names.AttrDatabaseName: {
														Type:     schema.TypeString,
														Required: true,
													},
													names.AttrRegion: {
														Type:     schema.TypeString,
														Optional: true,
														Computed: true,
													},
													names.AttrRoleARN: {
														Type:         schema.TypeString,
														Required:     true,
														ValidateFunc: verify.ValidARN,
													},
													names.AttrTableName: {
														Type:     schema.TypeString,
														Required: true,
													},
													"version_id": {
														Type:     schema.TypeString,
														Optional: true,
														Default:  "LATEST",
													},
												},
											},
										},
									},
								},
							},
							"dynamic_partitioning_configuration": dynamicPartitioningConfigurationSchema(),
							"error_output_prefix": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(0, 1024),
							},
							"file_extension": {
								Type:     schema.TypeString,
								Optional: true,
								ValidateFunc: validation.All(
									validation.StringLenBetween(0, 50),
									validation.StringMatch(regexache.MustCompile(`^$|\.[0-9a-z!\-_.*'()]+`), ""),
								),
							},
							names.AttrKMSKeyARN: {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrPrefix: {
								Type:     schema.TypeString,
								Optional: true,
							},
							"processing_configuration": processingConfigurationSchema(),
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_configuration": s3BackupConfigurationSchema(),
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.S3BackupModeDisabled,
								ValidateDiagFunc: enum.Validate[types.S3BackupMode](),
							},
						},
					},
				},
				"http_endpoint_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrAccessKey: {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(0, 4096),
								Sensitive:    true,
							},
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 900),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      5,
								ValidateFunc: validation.IntBetween(1, 100),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							names.AttrName: {
								Type:     schema.TypeString,
								Optional: true,
								ValidateFunc: validation.All(
									validation.StringLenBetween(1, 256),
								),
							},
							"processing_configuration": processingConfigurationSchema(),
							"request_configuration":    requestConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.HttpEndpointS3BackupModeFailedDataOnly,
								ValidateDiagFunc: enum.Validate[types.HttpEndpointS3BackupMode](),
							},
							"s3_configuration":              s3ConfigurationSchema(),
							"secrets_manager_configuration": secretsManagerConfigurationSchema(),
							names.AttrURL: {
								Type:     schema.TypeString,
								Required: true,
								ValidateFunc: validation.All(
									validation.StringLenBetween(1, 1000),
									validation.StringMatch(regexache.MustCompile(`^https://.*$`), ""),
								),
							},
						},
					},
				},
				"iceberg_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"buffering_interval": {
								Type:     schema.TypeInt,
								Optional: true,
								Default:  300,
							},
							"buffering_size": {
								Type:     schema.TypeInt,
								Optional: true,
								Default:  5,
							},
							"catalog_arn": {
								Type:         schema.TypeString,
								Required:     true,
								ForceNew:     true,
								ValidateFunc: verify.ValidARN,
							},
							"cloudwatch_logging_options":      cloudWatchLoggingOptionsSchema(),
							"destination_table_configuration": destinationTableConfigurationSchema(),
							"processing_configuration":        processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.IcebergS3BackupModeFailedDataOnly,
								ValidateDiagFunc: enum.Validate[types.IcebergS3BackupMode](),
							},
							"s3_configuration": s3ConfigurationSchema(),
						},
					},
				},
				"kinesis_source_configuration": {
					Type:          schema.TypeList,
					ForceNew:      true,
					Optional:      true,
					MaxItems:      1,
					ConflictsWith: []string{"msk_source_configuration", "server_side_encryption"},
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"kinesis_stream_arn": {
								Type:         schema.TypeString,
								Required:     true,
								ForceNew:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ForceNew:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"msk_source_configuration": {
					Type:          schema.TypeList,
					ForceNew:      true,
					Optional:      true,
					MaxItems:      1,
					ConflictsWith: []string{"kinesis_source_configuration", "server_side_encryption"},
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"authentication_configuration": {
								Type:     schema.TypeList,
								ForceNew: true,
								Required: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"connectivity": {
											Type:             schema.TypeString,
											Required:         true,
											ForceNew:         true,
											ValidateDiagFunc: enum.Validate[types.Connectivity](),
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
							},
							"msk_cluster_arn": {
								Type:         schema.TypeString,
								Required:     true,
								ForceNew:     true,
								ValidateFunc: verify.ValidARN,
							},
							"read_from_timestamp": {
								Type:         schema.TypeString,
								Optional:     true,
								ForceNew:     true,
								ValidateFunc: validation.IsRFC3339Time,
							},
							"topic_name": {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
						},
					},
				},
				names.AttrName: {
					Type:         schema.TypeString,
					Required:     true,
					ForceNew:     true,
					ValidateFunc: validation.StringLenBetween(1, 64),
				},
				"opensearch_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 900),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      5,
								ValidateFunc: validation.IntBetween(1, 100),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"cluster_endpoint": {
								Type:          schema.TypeString,
								Optional:      true,
								ConflictsWith: []string{"opensearch_configuration.0.domain_arn"},
							},
							"document_id_options": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"default_document_id_format": {
											Type:             schema.TypeString,
											Required:         true,
											ValidateDiagFunc: enum.Validate[types.DefaultDocumentIdFormat](),
										},
									},
								},
							},
							"domain_arn": {
								Type:          schema.TypeString,
								Optional:      true,
								ValidateFunc:  verify.ValidARN,
								ConflictsWith: []string{"opensearch_configuration.0.cluster_endpoint"},
							},
							"index_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							"index_rotation_period": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.AmazonopensearchserviceIndexRotationPeriodOneDay,
								ValidateDiagFunc: enum.Validate[types.AmazonopensearchserviceIndexRotationPeriod](),
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								ForceNew:         true,
								Optional:         true,
								Default:          types.AmazonopensearchserviceS3BackupModeFailedDocumentsOnly,
								ValidateDiagFunc: enum.Validate[types.AmazonopensearchserviceS3BackupMode](),
							},
							"s3_configuration": s3ConfigurationSchema(),
							"type_name": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(0, 100),
							},
							names.AttrVPCConfig: {
								Type:     schema.TypeList,
								Optional: true,
								ForceNew: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrSecurityGroupIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrSubnetIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrVPCID: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
				"opensearchserverless_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 900),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      5,
								ValidateFunc: validation.IntBetween(1, 100),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"collection_endpoint": {
								Type:     schema.TypeString,
								Required: true,
							},
							"index_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      300,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								ForceNew:         true,
								Optional:         true,
								Default:          types.AmazonOpenSearchServerlessS3BackupModeFailedDocumentsOnly,
								ValidateDiagFunc: enum.Validate[types.AmazonOpenSearchServerlessS3BackupMode](),
							},
							"s3_configuration": s3ConfigurationSchema(),
							names.AttrVPCConfig: {
								Type:     schema.TypeList,
								Optional: true,
								ForceNew: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrSecurityGroupIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrSubnetIDs: {
											Type:     schema.TypeSet,
											Required: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrVPCID: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
						},
					},
				},
				"redshift_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"cluster_jdbcurl": {
								Type:     schema.TypeString,
								Required: true,
							},
							"copy_options": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"data_table_columns": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"data_table_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrPassword: {
								Type:      schema.TypeString,
								Optional:  true,
								Sensitive: true,
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      3600,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_configuration": s3BackupConfigurationSchema(),
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.RedshiftS3BackupModeDisabled,
								ValidateDiagFunc: enum.Validate[types.RedshiftS3BackupMode](),
							},
							"s3_configuration":              s3ConfigurationSchema(),
							"secrets_manager_configuration": secretsManagerConfigurationSchema(),
							names.AttrUsername: {
								Type:     schema.TypeString,
								Optional: true,
							},
						},
					},
				},
				"server_side_encryption": {
					Type:             schema.TypeList,
					Optional:         true,
					MaxItems:         1,
					DiffSuppressFunc: verify.SuppressMissingOptionalConfigurationBlock,
					ConflictsWith:    []string{"kinesis_source_configuration", "msk_source_configuration"},
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							"key_arn": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidARN,
								RequiredWith: []string{"server_side_encryption.0.enabled", "server_side_encryption.0.key_type"},
							},
							"key_type": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.KeyTypeAwsOwnedCmk,
								ValidateDiagFunc: enum.Validate[types.KeyType](),
								RequiredWith:     []string{"server_side_encryption.0.enabled"},
							},
						},
					},
				},
				"snowflake_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"account_url": {
								Type:     schema.TypeString,
								Required: true,
							},
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      0,
								ValidateFunc: validation.IntBetween(0, 900),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      1,
								ValidateFunc: validation.IntBetween(1, 128),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"content_column_name": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
							"data_loading_option": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.SnowflakeDataLoadingOptionJsonMapping,
								ValidateDiagFunc: enum.Validate[types.SnowflakeDataLoadingOption](),
							},
							names.AttrDatabase: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
							"key_passphrase": {
								Type:         schema.TypeString,
								Optional:     true,
								Sensitive:    true,
								ValidateFunc: validation.StringLenBetween(7, 255),
							},
							"metadata_column_name": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
							names.AttrPrivateKey: {
								Type:      schema.TypeString,
								Optional:  true,
								Sensitive: true,
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      60,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.SnowflakeS3BackupModeFailedDataOnly,
								ValidateDiagFunc: enum.Validate[types.SnowflakeS3BackupMode](),
							},
							"s3_configuration": s3ConfigurationSchema(),
							names.AttrSchema: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
							"secrets_manager_configuration": secretsManagerConfigurationSchema(),
							"snowflake_role_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrEnabled: {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  false,
										},
										"snowflake_role": {
											Type:         schema.TypeString,
											Optional:     true,
											ValidateFunc: validation.StringLenBetween(1, 255),
										},
									},
								},
								DiffSuppressFunc: verify.SuppressMissingOptionalConfigurationBlock,
							},
							"snowflake_vpc_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"private_link_vpce_id": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							"table": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
							"user": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.StringLenBetween(1, 255),
							},
						},
					},
				},
				"splunk_configuration": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"buffering_interval": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      60,
								ValidateFunc: validation.IntBetween(0, 60),
							},
							"buffering_size": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      5,
								ValidateFunc: validation.IntBetween(1, 5),
							},
							"cloudwatch_logging_options": cloudWatchLoggingOptionsSchema(),
							"hec_acknowledgment_timeout": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      180,
								ValidateFunc: validation.IntBetween(180, 600),
							},
							"hec_endpoint": {
								Type:     schema.TypeString,
								Required: true,
							},
							"hec_endpoint_type": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.HECEndpointTypeRaw,
								ValidateDiagFunc: enum.Validate[types.HECEndpointType](),
							},
							"hec_token": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"processing_configuration": processingConfigurationSchema(),
							"retry_duration": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      3600,
								ValidateFunc: validation.IntBetween(0, 7200),
							},
							"s3_backup_mode": {
								Type:             schema.TypeString,
								Optional:         true,
								Default:          types.SplunkS3BackupModeFailedEventsOnly,
								ValidateDiagFunc: enum.Validate[types.SplunkS3BackupMode](),
							},
							"s3_configuration":              s3ConfigurationSchema(),
							"secrets_manager_configuration": secretsManagerConfigurationSchema(),
						},
					},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"version_id": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
			}
		},

		CustomizeDiff: customdiff.All(
			func(ctx context.Context, d *schema.ResourceDiff, meta any) error {
				destination := destinationType(d.Get(names.AttrDestination).(string))
				requiredAttribute := map[destinationType]string{
					destinationTypeElasticsearch:        "elasticsearch_configuration",
					destinationTypeExtendedS3:           "extended_s3_configuration",
					destinationTypeHTTPEndpoint:         "http_endpoint_configuration",
					destinationTypeIceberg:              "iceberg_configuration",
					destinationTypeOpenSearch:           "opensearch_configuration",
					destinationTypeOpenSearchServerless: "opensearchserverless_configuration",
					destinationTypeRedshift:             "redshift_configuration",
					destinationTypeSnowflake:            "snowflake_configuration",
					destinationTypeSplunk:               "splunk_configuration",
				}[destination]

				if _, ok := d.GetOk(requiredAttribute); !ok {
					return fmt.Errorf("when destination is '%s', %s is required", destination, requiredAttribute)
				}

				return nil
			},
		),
	}
}
