package github.com/hashicorp/terraform-provider-aws/internal/service/firehose
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/firehose/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRedshiftDestinationDescription(apiObject *types.RedshiftDestinationDescription, configuredPassword string) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{
		"cloudwatch_logging_options":    flattenCloudWatchLoggingOptions(apiObject.CloudWatchLoggingOptions),
		"cluster_jdbcurl":               aws.ToString(apiObject.ClusterJDBCURL),
		names.AttrPassword:              configuredPassword,
		"processing_configuration":      flattenProcessingConfiguration(apiObject.ProcessingConfiguration, destinationTypeRedshift, aws.ToString(apiObject.RoleARN)),
		names.AttrRoleARN:               aws.ToString(apiObject.RoleARN),
		"s3_backup_configuration":       flattenS3DestinationDescription(apiObject.S3BackupDescription),
		"s3_backup_mode":                apiObject.S3BackupMode,
		"s3_configuration":              flattenS3DestinationDescription(apiObject.S3DestinationDescription),
		"secrets_manager_configuration": flattenSecretsManagerConfiguration(apiObject.SecretsManagerConfiguration),
		names.AttrUsername:              aws.ToString(apiObject.Username),
	}

	if apiObject.CopyCommand != nil {
		tfMap["copy_options"] = aws.ToString(apiObject.CopyCommand.CopyOptions)
		tfMap["data_table_columns"] = aws.ToString(apiObject.CopyCommand.DataTableColumns)
		tfMap["data_table_name"] = aws.ToString(apiObject.CopyCommand.DataTableName)
	}

	if apiObject.RetryOptions != nil {
		tfMap["retry_duration"] = aws.ToInt32(apiObject.RetryOptions.DurationInSeconds)
	}

	return []any{tfMap}
}
