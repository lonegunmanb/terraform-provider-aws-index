package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func tableItemCreateResourceID(tableName string, hashKey string, rangeKey string, attrs map[string]awstypes.AttributeValue) string {
	id := []string{tableName, hashKey}

	if v, ok := attrs[hashKey]; ok {
		switch v := v.(type) {
		case *awstypes.AttributeValueMemberB:
			id = append(id, itypes.Base64EncodeOnce(v.Value))
		case *awstypes.AttributeValueMemberN:
			id = append(id, v.Value)
		case *awstypes.AttributeValueMemberS:
			id = append(id, v.Value)
		}
	}

	if v, ok := attrs[rangeKey]; ok && rangeKey != "" {
		switch v := v.(type) {
		case *awstypes.AttributeValueMemberB:
			id = append(id, itypes.Base64EncodeOnce(v.Value))
		case *awstypes.AttributeValueMemberN:
			id = append(id, v.Value)
		case *awstypes.AttributeValueMemberS:
			id = append(id, v.Value)
		}
	}

	return strings.Join(id, "|")
}
