package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableItemCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DynamoDBClient(ctx)

	attributes, err := expandTableItemAttributes(d.Get("item").(string))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	tableName := d.Get(names.AttrTableName).(string)
	hashKey := d.Get("hash_key").(string)
	input := &dynamodb.PutItemInput{
		// Explode if item exists. We didn't create it.
		ConditionExpression:      aws.String("attribute_not_exists(#hk)"),
		ExpressionAttributeNames: map[string]string{"#hk": hashKey},
		Item:                     attributes,
		TableName:                aws.String(tableName),
	}

	_, err = conn.PutItem(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating DynamoDB Table (%s) Item: %s", tableName, err)
	}

	d.SetId(tableItemCreateResourceID(tableName, hashKey, d.Get("range_key").(string), attributes))

	return append(diags, resourceTableItemRead(ctx, d, meta)...)
}
