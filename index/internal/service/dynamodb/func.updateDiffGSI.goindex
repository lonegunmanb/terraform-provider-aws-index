package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateDiffGSI(oldGsi, newGsi []any, billingMode awstypes.BillingMode) ([]awstypes.GlobalSecondaryIndexUpdate, error) {
	// Transform slices into maps
	oldGsis := make(map[string]any)
	for _, gsidata := range oldGsi {
		m := gsidata.(map[string]any)
		oldGsis[m[names.AttrName].(string)] = m
	}
	newGsis := make(map[string]any)
	for _, gsidata := range newGsi {
		m := gsidata.(map[string]any)
		// validate throughput input early, to avoid unnecessary processing
		if err := validateGSIProvisionedThroughput(m, billingMode); err != nil {
			return nil, err
		}
		newGsis[m[names.AttrName].(string)] = m
	}

	var ops []awstypes.GlobalSecondaryIndexUpdate

	for _, data := range newGsi {
		newMap := data.(map[string]any)
		newName := newMap[names.AttrName].(string)

		if _, exists := oldGsis[newName]; !exists {
			m := data.(map[string]any)
			idxName := m[names.AttrName].(string)

			c := awstypes.CreateGlobalSecondaryIndexAction{
				IndexName:             aws.String(idxName),
				KeySchema:             expandKeySchema(m),
				ProvisionedThroughput: expandProvisionedThroughput(m, billingMode),
				Projection:            expandProjection(m),
			}

			if v, ok := m["on_demand_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				c.OnDemandThroughput = expandOnDemandThroughput(v[0].(map[string]any))
			}

			if v, ok := m["warm_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				c.WarmThroughput = expandWarmThroughput(v[0].(map[string]any))
			}

			ops = append(ops, awstypes.GlobalSecondaryIndexUpdate{
				Create: &c,
			})
		}
	}

	for _, data := range oldGsi {
		oldMap := data.(map[string]any)
		oldName := oldMap[names.AttrName].(string)

		newData, exists := newGsis[oldName]
		if exists {
			newMap := newData.(map[string]any)
			idxName := newMap[names.AttrName].(string)

			oldWriteCapacity, oldReadCapacity := oldMap["write_capacity"].(int), oldMap["read_capacity"].(int)
			newWriteCapacity, newReadCapacity := newMap["write_capacity"].(int), newMap["read_capacity"].(int)
			capacityChanged := (oldWriteCapacity != newWriteCapacity || oldReadCapacity != newReadCapacity)

			oldOnDemandThroughput := &awstypes.OnDemandThroughput{}
			newOnDemandThroughput := &awstypes.OnDemandThroughput{}
			if v, ok := oldMap["on_demand_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				oldOnDemandThroughput = expandOnDemandThroughput(v[0].(map[string]any))
			}

			if v, ok := newMap["on_demand_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				newOnDemandThroughput = expandOnDemandThroughput(v[0].(map[string]any))
			}
			var onDemandThroughputChanged bool
			if !reflect.DeepEqual(oldOnDemandThroughput, newOnDemandThroughput) {
				onDemandThroughputChanged = true
			}

			var oldWarmThroughput *awstypes.WarmThroughput
			var newWarmThroughput *awstypes.WarmThroughput
			if v, ok := oldMap["warm_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				oldWarmThroughput = expandWarmThroughput(v[0].(map[string]any))
			}

			if v, ok := newMap["warm_throughput"].([]any); ok && len(v) > 0 && v[0] != nil {
				newWarmThroughput = expandWarmThroughput(v[0].(map[string]any))
			}

			var warmThroughputChanged bool
			if !reflect.DeepEqual(oldWarmThroughput, newWarmThroughput) {
				warmThroughputChanged = true
			}

			var warmThroughPutDecreased bool
			if warmThroughputChanged && newWarmThroughput != nil && oldWarmThroughput != nil {
				warmThroughPutDecreased = (aws.ToInt64(newWarmThroughput.ReadUnitsPerSecond) < aws.ToInt64(oldWarmThroughput.ReadUnitsPerSecond) ||
					aws.ToInt64(newWarmThroughput.WriteUnitsPerSecond) < aws.ToInt64(oldWarmThroughput.WriteUnitsPerSecond))
			}

			// pluck non_key_attributes from oldAttributes and newAttributes as reflect.DeepEquals will compare
			// ordinal of elements in its equality (which we actually don't care about)
			nonKeyAttributesChanged := checkIfNonKeyAttributesChanged(oldMap, newMap)

			oldAttributes, err := stripCapacityAttributes(oldMap)
			if err != nil {
				return ops, err
			}
			oldAttributes, err = stripNonKeyAttributes(oldAttributes)
			if err != nil {
				return ops, err
			}
			oldAttributes, err = stripOnDemandThroughputAttributes(oldAttributes)
			if err != nil {
				return ops, err
			}
			oldAttributes, err = stripWarmThroughputAttributes(oldAttributes)
			if err != nil {
				return ops, err
			}
			newAttributes, err := stripCapacityAttributes(newMap)
			if err != nil {
				return ops, err
			}
			newAttributes, err = stripNonKeyAttributes(newAttributes)
			if err != nil {
				return ops, err
			}
			newAttributes, err = stripOnDemandThroughputAttributes(newAttributes)
			if err != nil {
				return ops, err
			}
			newAttributes, err = stripWarmThroughputAttributes(newAttributes)
			if err != nil {
				return ops, err
			}
			gsiNeedsRecreate := nonKeyAttributesChanged || !reflect.DeepEqual(oldAttributes, newAttributes) || warmThroughPutDecreased

			// One step in most cases, an extra step in case of warmThroughputChanged without recreation necessity:
			if (capacityChanged) && !gsiNeedsRecreate && billingMode == awstypes.BillingModeProvisioned {
				update := awstypes.GlobalSecondaryIndexUpdate{
					Update: &awstypes.UpdateGlobalSecondaryIndexAction{
						IndexName:             aws.String(idxName),
						ProvisionedThroughput: expandProvisionedThroughput(newMap, billingMode),
					},
				}
				ops = append(ops, update)
			} else if onDemandThroughputChanged && !gsiNeedsRecreate && billingMode == awstypes.BillingModePayPerRequest {
				update := awstypes.GlobalSecondaryIndexUpdate{
					Update: &awstypes.UpdateGlobalSecondaryIndexAction{
						IndexName:          aws.String(idxName),
						OnDemandThroughput: newOnDemandThroughput,
					},
				}
				ops = append(ops, update)
			} else if gsiNeedsRecreate {
				// Other attributes cannot be updated
				ops = append(ops, awstypes.GlobalSecondaryIndexUpdate{
					Delete: &awstypes.DeleteGlobalSecondaryIndexAction{
						IndexName: aws.String(idxName),
					},
				})

				ops = append(ops, awstypes.GlobalSecondaryIndexUpdate{
					Create: &awstypes.CreateGlobalSecondaryIndexAction{
						IndexName:             aws.String(idxName),
						KeySchema:             expandKeySchema(newMap),
						ProvisionedThroughput: expandProvisionedThroughput(newMap, billingMode),
						Projection:            expandProjection(newMap),
						WarmThroughput:        newWarmThroughput,
					},
				})
			}
			// Separating the WarmThroughput updates from the others
			if !gsiNeedsRecreate && warmThroughputChanged {
				update := awstypes.GlobalSecondaryIndexUpdate{
					Update: &awstypes.UpdateGlobalSecondaryIndexAction{
						IndexName:      aws.String(idxName),
						WarmThroughput: newWarmThroughput,
					},
				}
				ops = append(ops, update)
			}
		} else {
			idxName := oldName
			ops = append(ops, awstypes.GlobalSecondaryIndexUpdate{
				Delete: &awstypes.DeleteGlobalSecondaryIndexAction{
					IndexName: aws.String(idxName),
				},
			})
		}
	}
	return ops, nil
}
