package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func (bs backupSweeper) Delete(ctx context.Context, optFns ...tfresource.OptionsFunc) error {
	input := &dynamodb.DeleteBackupInput{
		BackupArn: aws.String(bs.arn),
	}

	const (
		timeout = 10 * time.Minute
	)
	err := tfresource.Retry(ctx, timeout, func() *retry.RetryError {
		log.Printf("[DEBUG] Deleting DynamoDB Backup: %s", bs.arn)
		_, err := bs.conn.DeleteBackup(ctx, input)
		if errs.IsA[*awstypes.BackupNotFoundException](err) {
			return nil
		}
		if errs.IsA[*awstypes.BackupInUseException](err) || errs.IsA[*awstypes.LimitExceededException](err) {
			return retry.RetryableError(err)
		}
		if err != nil {
			return retry.NonRetryableError(err)
		}

		return nil
	}, optFns...)
	if tfresource.TimedOut(err) {
		_, err = bs.conn.DeleteBackup(ctx, input)
	}

	return err
}
