package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
)
func waitReplicaDeleted(ctx context.Context, conn *dynamodb.Client, tableName, region string, timeout time.Duration, optFns ...func(*dynamodb.Options)) (*awstypes.TableDescription, error) { //nolint:unparam
	stateConf := &retry.StateChangeConf{
		Pending: enum.Slice(
			awstypes.ReplicaStatusCreating,
			awstypes.ReplicaStatusUpdating,
			awstypes.ReplicaStatusDeleting,
			awstypes.ReplicaStatusActive,
		),
		Target:  []string{},
		Refresh: statusReplicaDelete(ctx, conn, tableName, region, optFns...),
		Timeout: max(replicaUpdateTimeout, timeout),
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*awstypes.TableDescription); ok {
		return output, err
	}

	return nil, err
}
