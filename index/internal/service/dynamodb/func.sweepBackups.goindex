package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func sweepBackups(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.DynamoDBClient(ctx)
	input := &dynamodb.ListBackupsInput{
		BackupType: awstypes.BackupTypeFilterAll,
	}
	sweepResources := make([]sweep.Sweepable, 0)

	err = listBackupsPages(ctx, conn, input, func(page *dynamodb.ListBackupsOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		for _, v := range page.BackupSummaries {
			arn := aws.ToString(v.BackupArn)

			if v.BackupType == awstypes.BackupTypeSystem {
				log.Printf("[DEBUG] Skipping DynamoDB Backup %s: BackupType=%s", arn, v.BackupType)
				continue
			}

			sweepResources = append(sweepResources, backupSweeper{
				conn: conn,
				arn:  arn,
			})
		}

		return !lastPage
	})

	if awsv2.SkipSweepError(err) {
		log.Printf("[WARN] Skipping DynamoDB Backup sweep for %s: %s", region, err)
		return nil
	}

	if err != nil {
		return fmt.Errorf("error listing DynamoDB Backups (%s): %w", region, err)
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping DynamoDB Backups (%s): %w", region, err)
	}

	return nil
}
