package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceTable() *schema.Resource {
	return &schema.Resource{
		ReadWithoutTimeout: dataSourceTableRead,

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"attribute": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrName: {
								Type:     schema.TypeString,
								Computed: true,
							},
							names.AttrType: {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				"billing_mode": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"deletion_protection_enabled": {
					Type:     schema.TypeBool,
					Computed: true,
				},
				"global_secondary_index": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"hash_key": {
								Type:     schema.TypeString,
								Computed: true,
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Computed: true,
							},
							"non_key_attributes": {
								Type:     schema.TypeList,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"on_demand_throughput": {
								Type:     schema.TypeList,
								Computed: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"max_read_request_units": {
											Type:     schema.TypeInt,
											Computed: true,
										},
										"max_write_request_units": {
											Type:     schema.TypeInt,
											Computed: true,
										},
									},
								},
							},
							"projection_type": {
								Type:     schema.TypeString,
								Computed: true,
							},
							"range_key": {
								Type:     schema.TypeString,
								Computed: true,
							},
							"read_capacity": {
								Type:     schema.TypeInt,
								Computed: true,
							},
							"warm_throughput": sdkv2.ComputedOnlyFromSchema(warmThroughputSchema()),
							"write_capacity": {
								Type:     schema.TypeInt,
								Computed: true,
							},
						},
					},
				},
				"hash_key": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"local_secondary_index": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrName: {
								Type:     schema.TypeString,
								Computed: true,
							},
							"non_key_attributes": {
								Type:     schema.TypeList,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"projection_type": {
								Type:     schema.TypeString,
								Computed: true,
							},
							"range_key": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
				},
				"on_demand_throughput": {
					Type:     schema.TypeList,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"max_read_request_units": {
								Type:     schema.TypeInt,
								Computed: true,
							},
							"max_write_request_units": {
								Type:     schema.TypeInt,
								Computed: true,
							},
						},
					},
				},
				"point_in_time_recovery": {
					Type:     schema.TypeList,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Computed: true,
							},
							"recovery_period_in_days": {
								Type:     schema.TypeInt,
								Computed: true,
							},
						},
					},
				},
				"range_key": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"read_capacity": {
					Type:     schema.TypeInt,
					Computed: true,
				},
				"replica": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrKMSKeyARN: {
								Type:     schema.TypeString,
								Computed: true,
							},
							"region_name": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				"server_side_encryption": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Computed: true,
							},
							names.AttrKMSKeyARN: {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				names.AttrStreamARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"stream_enabled": {
					Type:     schema.TypeBool,
					Computed: true,
				},
				"stream_label": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"stream_view_type": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"table_class": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrTags: tftags.TagsSchemaComputed(),
				"ttl": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"attribute_name": {
								Type:     schema.TypeString,
								Computed: true,
							},
							names.AttrEnabled: {
								Type:     schema.TypeBool,
								Computed: true,
							},
						},
					},
				},
				"warm_throughput": sdkv2.ComputedOnlyFromSchema(warmThroughputSchema()),
				"write_capacity": {
					Type:     schema.TypeInt,
					Computed: true,
				},
			}
		},
	}
}
