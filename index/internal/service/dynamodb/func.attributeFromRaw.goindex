package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"fmt"

	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
)
func attributeFromRaw(v any) (awstypes.AttributeValue, error) {
	m, ok := v.(map[string]any)
	if !ok {
		return nil, fmt.Errorf("unexpected raw attribute type: %T", v)
	}

	if n := len(m); n != 1 {
		return nil, fmt.Errorf("invalid raw attribute map len: %d", n)
	}

	for k, v := range m {
		switch v := v.(type) {
		case bool:
			switch k {
			case dataTypeDescriptorBoolean:
				return &awstypes.AttributeValueMemberBOOL{Value: v}, nil
			case dataTypeDescriptorNull:
				return &awstypes.AttributeValueMemberNULL{Value: v}, nil
			}
		case string:
			switch k {
			case dataTypeDescriptorBinary:
				v, err := itypes.Base64Decode(v)
				if err != nil {
					return nil, err
				}
				return &awstypes.AttributeValueMemberB{Value: v}, nil
			case dataTypeDescriptorNumber:
				return &awstypes.AttributeValueMemberN{Value: v}, nil
			case dataTypeDescriptorString:
				return &awstypes.AttributeValueMemberS{Value: v}, nil
			}
		case []any:
			switch k {
			case dataTypeDescriptorBinarySet:
				v, err := tfslices.ApplyToAllWithError(v, func(v any) ([]byte, error) {
					switch v := v.(type) {
					case string:
						return itypes.Base64Decode(v)
					default:
						return nil, unexpectedRawAttributeElementTypeError(v, k)
					}
				})
				if err != nil {
					return nil, err
				}
				return &awstypes.AttributeValueMemberBS{Value: v}, nil
			case dataTypeDescriptorList:
				v, err := tfslices.ApplyToAllWithError(v, attributeFromRaw)
				if err != nil {
					return nil, err
				}
				return &awstypes.AttributeValueMemberL{Value: v}, nil
			case dataTypeDescriptorNumberSet, dataTypeDescriptorStringSet:
				v, err := tfslices.ApplyToAllWithError(v, func(v any) (string, error) {
					switch v := v.(type) {
					case string:
						return v, nil
					default:
						return "", unexpectedRawAttributeElementTypeError(v, k)
					}
				})
				if err != nil {
					return nil, err
				}
				if k == dataTypeDescriptorNumberSet {
					return &awstypes.AttributeValueMemberNS{Value: v}, nil
				}
				return &awstypes.AttributeValueMemberSS{Value: v}, nil
			}
		case map[string]any:
			switch k {
			case dataTypeDescriptorMap:
				v, err := tfmaps.ApplyToAllValuesWithError(v, attributeFromRaw)
				if err != nil {
					return nil, err
				}
				return &awstypes.AttributeValueMemberM{Value: v}, nil
			}
		}

		return nil, fmt.Errorf("unexpected raw attribute type (%T) for data type descriptor: %s", v, k)
	}

	panic("unreachable") //lintignore:R009
}
