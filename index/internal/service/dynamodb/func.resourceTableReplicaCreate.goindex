package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableReplicaCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DynamoDBClient(ctx)

	replicaRegion := meta.(*conns.AWSClient).Region(ctx)

	mainRegion, err := regionFromARN(d.Get("global_table_arn").(string))
	if err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionCreating, resNameTableReplica, d.Get("global_table_arn").(string), err)
	}

	if mainRegion == replicaRegion {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionCreating, resNameTableReplica, d.Get("global_table_arn").(string), errors.New("replica cannot be in same region as main table"))
	}

	// now main table region
	optFn := func(o *dynamodb.Options) {
		o.Region = mainRegion
	}

	var replicaInput = &awstypes.CreateReplicationGroupMemberAction{}

	replicaInput.RegionName = aws.String(replicaRegion)

	if v, ok := d.GetOk(names.AttrKMSKeyARN); ok {
		replicaInput.KMSMasterKeyId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("table_class_override"); ok {
		replicaInput.TableClassOverride = awstypes.TableClass(v.(string))
	}

	tableName, err := tableNameFromARN(d.Get("global_table_arn").(string))
	if err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionCreating, resNameTableReplica, d.Get("global_table_arn").(string), err)
	}

	input := &dynamodb.UpdateTableInput{
		TableName: aws.String(tableName),
		ReplicaUpdates: []awstypes.ReplicationGroupUpdate{{
			Create: replicaInput,
		}},
	}

	err = tfresource.Retry(ctx, max(replicaUpdateTimeout, d.Timeout(schema.TimeoutCreate)), func(ctx context.Context) *tfresource.RetryError {
		_, err := conn.UpdateTable(ctx, input, optFn)
		if err != nil {
			if tfawserr.ErrCodeEquals(err, errCodeThrottlingException) {
				return tfresource.RetryableError(err)
			}
			if errs.IsAErrorMessageContains[*awstypes.LimitExceededException](err, "simultaneously") {
				return tfresource.RetryableError(err)
			}
			if errs.IsA[*awstypes.ResourceInUseException](err) {
				return tfresource.RetryableError(err)
			}

			return tfresource.NonRetryableError(err)
		}
		return nil
	})

	if err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionCreating, resNameTableReplica, d.Get("global_table_arn").(string), err)
	}

	// Some attributes take time to propagate to the table replica, so set a delay
	delay := replicaDelayDefault
	if _, ok := d.GetOk("deletion_protection_enabled"); ok {
		delay = replicaPropagationDelay
	}

	if _, err := waitReplicaActive(ctx, conn, tableName, meta.(*conns.AWSClient).Region(ctx), d.Timeout(schema.TimeoutCreate), delay, optFn); err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionWaitingForCreation, resNameTableReplica, d.Get("global_table_arn").(string), err)
	}

	d.SetId(tableReplicaCreateResourceID(tableName, mainRegion))

	repARN, err := arnForNewRegion(d.Get("global_table_arn").(string), replicaRegion)
	if err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionCreating, resNameTableReplica, d.Id(), err)
	}

	d.Set(names.AttrARN, repARN)

	if err := createTags(ctx, conn, repARN, getTagsIn(ctx)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting DynamoDB Table Replica (%s) tags: %s", d.Id(), err)
	}

	return append(diags, resourceTableReplicaUpdate(ctx, d, meta)...)
}
