package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
)
func waitTTLUpdated(ctx context.Context, conn *dynamodb.Client, tableName string, toEnable bool, timeout time.Duration) (*awstypes.TimeToLiveDescription, error) {
	pending := enum.Slice(awstypes.TimeToLiveStatusEnabled, awstypes.TimeToLiveStatusDisabling)
	target := enum.Slice(awstypes.TimeToLiveStatusDisabled)

	if toEnable {
		pending = enum.Slice(awstypes.TimeToLiveStatusDisabled, awstypes.TimeToLiveStatusEnabling)
		target = enum.Slice(awstypes.TimeToLiveStatusEnabled)
	}

	stateConf := &retry.StateChangeConf{
		Pending: pending,
		Target:  target,
		Timeout: max(ttlUpdateTimeout, timeout),
		Refresh: statusTTL(ctx, conn, tableName),
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*awstypes.TimeToLiveDescription); ok {
		return output, err
	}

	return nil, err
}
