package github.com/hashicorp/terraform-provider-aws/internal/service/dynamodb
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ttlPlantimeValidate(ttlPath cty.Path, ttl cty.Value, diags *diag.Diagnostics) {
	attribute := ttl.GetAttr("attribute_name")
	if !attribute.IsKnown() {
		return
	}

	enabled := ttl.GetAttr(names.AttrEnabled)
	if !enabled.IsKnown() {
		return
	}
	if enabled.IsNull() {
		return
	}

	if enabled.True() {
		if attribute.IsNull() {
			*diags = append(*diags, errs.NewAttributeRequiredWhenError(
				ttlPath.GetAttr("attribute_name"),
				ttlPath.GetAttr(names.AttrEnabled),
				"true",
			))
		} else if attribute.AsString() == "" {
			*diags = append(*diags, errs.NewInvalidValueAttributeErrorf(
				ttlPath.GetAttr("attribute_name"),
				"Attribute %q cannot have an empty value",
				errs.PathString(ttlPath.GetAttr("attribute_name")),
			))
		}
	}

	// !! Not a validation error for attribute_name to be set when enabled is false !!
	// AWS *requires* attribute_name to be set when disabling TTL but does not return it, causing a diff.
	// The diff is handled by DiffSuppressFunc of attribute_name.
}
