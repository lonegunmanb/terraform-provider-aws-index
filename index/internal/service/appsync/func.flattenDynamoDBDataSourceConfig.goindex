package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenDynamoDBDataSourceConfig(apiObject *awstypes.DynamodbDataSourceConfig) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		names.AttrRegion:         aws.ToString(apiObject.AwsRegion),
		names.AttrTableName:      aws.ToString(apiObject.TableName),
		"use_caller_credentials": apiObject.UseCallerCredentials,
		"versioned":              apiObject.Versioned,
	}

	if apiObject.DeltaSyncConfig != nil {
		tfMap["delta_sync_config"] = flattenDeltaSyncConfig(apiObject.DeltaSyncConfig)
	}

	return []any{tfMap}
}
