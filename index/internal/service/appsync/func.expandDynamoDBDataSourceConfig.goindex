package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDynamoDBDataSourceConfig(tfList []any, currentRegion string) *awstypes.DynamodbDataSourceConfig {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.DynamodbDataSourceConfig{
		AwsRegion: aws.String(currentRegion),
		TableName: aws.String(tfMap[names.AttrTableName].(string)),
	}

	if v, ok := tfMap["delta_sync_config"].([]any); ok && len(v) > 0 {
		apiObject.DeltaSyncConfig = expandDeltaSyncConfig(v)
	}

	if v, ok := tfMap[names.AttrRegion]; ok && v.(string) != "" {
		apiObject.AwsRegion = aws.String(v.(string))
	}

	if v, ok := tfMap["use_caller_credentials"]; ok {
		apiObject.UseCallerCredentials = v.(bool)
	}

	if v, ok := tfMap["versioned"]; ok {
		apiObject.Versioned = v.(bool)
	}

	return apiObject
}
