package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAdditionalAuthenticationProviders(tfList []any, currentRegion string) []awstypes.AdditionalAuthenticationProvider {
	if len(tfList) < 1 {
		return nil
	}

	apiObjects := make([]awstypes.AdditionalAuthenticationProvider, 0)
	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := awstypes.AdditionalAuthenticationProvider{
			AuthenticationType: awstypes.AuthenticationType(tfMap["authentication_type"].(string)),
		}

		if v, ok := tfMap["lambda_authorizer_config"]; ok {
			apiObject.LambdaAuthorizerConfig = expandLambdaAuthorizerConfig(v.([]any))
		}

		if v, ok := tfMap["openid_connect_config"]; ok {
			apiObject.OpenIDConnectConfig = expandOpenIDConnectConfig(v.([]any))
		}

		if v, ok := tfMap["user_pool_config"]; ok {
			apiObject.UserPoolConfig = expandCognitoUserPoolConfig(v.([]any), currentRegion)
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
