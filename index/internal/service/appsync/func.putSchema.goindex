package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func putSchema(ctx context.Context, conn *appsync.Client, apiID, definition string, timeout time.Duration) error {
	input := &appsync.StartSchemaCreationInput{
		ApiId:      aws.String(apiID),
		Definition: ([]byte)(definition),
	}

	_, err := conn.StartSchemaCreation(ctx, input)

	if err != nil {
		return fmt.Errorf("creating AppSync GraphQL API (%s) schema: %w", apiID, err)
	}

	if _, err := waitSchemaCreated(ctx, conn, apiID, timeout); err != nil {
		return fmt.Errorf("waiting for AppSync GraphQL API (%s) schema create: %w", apiID, err)
	}

	return nil
}
