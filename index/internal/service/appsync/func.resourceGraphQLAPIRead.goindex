package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGraphQLAPIRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppSyncClient(ctx)

	api, err := findGraphQLAPIByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] AppSync GraphQL API (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppSync GraphQL API (%s): %s", d.Id(), err)
	}

	if err := d.Set("additional_authentication_provider", flattenAdditionalAuthenticationProviders(api.AdditionalAuthenticationProviders)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting additional_authentication_provider: %s", err)
	}
	d.Set("api_type", api.ApiType)
	d.Set(names.AttrARN, api.Arn)
	d.Set("authentication_type", api.AuthenticationType)
	if err := d.Set("enhanced_metrics_config", flattenEnhancedMetricsConfig(api.EnhancedMetricsConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting enhanced_metrics_config: %s", err)
	}
	d.Set("introspection_config", api.IntrospectionConfig)
	if err := d.Set("lambda_authorizer_config", flattenLambdaAuthorizerConfig(api.LambdaAuthorizerConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting lambda_authorizer_config: %s", err)
	}
	if err := d.Set("log_config", flattenLogConfig(api.LogConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting log_config: %s", err)
	}
	d.Set("merged_api_execution_role_arn", api.MergedApiExecutionRoleArn)
	d.Set(names.AttrName, api.Name)
	if err := d.Set("openid_connect_config", flattenOpenIDConnectConfig(api.OpenIDConnectConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting openid_connect_config: %s", err)
	}
	d.Set("query_depth_limit", api.QueryDepthLimit)
	d.Set("resolver_count_limit", api.ResolverCountLimit)
	d.Set("uris", api.Uris)
	if err := d.Set("user_pool_config", flattenUserPoolConfig(api.UserPoolConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting user_pool_config: %s", err)
	}
	d.Set("visibility", api.Visibility)
	d.Set("xray_enabled", api.XrayEnabled)

	setTagsOut(ctx, api.Tags)

	return diags
}
