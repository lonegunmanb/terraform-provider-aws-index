package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenAdditionalAuthenticationProviders(apiObjects []awstypes.AdditionalAuthenticationProvider) []any {
	if len(apiObjects) == 0 {
		return []any{}
	}

	tfList := make([]any, len(apiObjects))
	for i, apiObject := range apiObjects {
		tfList[i] = map[string]any{
			"authentication_type":      apiObject.AuthenticationType,
			"lambda_authorizer_config": flattenLambdaAuthorizerConfig(apiObject.LambdaAuthorizerConfig),
			"openid_connect_config":    flattenOpenIDConnectConfig(apiObject.OpenIDConnectConfig),
			"user_pool_config":         flattenCognitoUserPoolConfig(apiObject.UserPoolConfig),
		}
	}

	return tfList
}
