package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	autoflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *sourceAPIAssociationResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	conn := r.Meta().AppSyncClient(ctx)

	var plan, state sourceAPIAssociationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &plan)...)
	response.Diagnostics.Append(request.State.Get(ctx, &state)...)
	if response.Diagnostics.HasError() {
		return
	}

	if !plan.Description.Equal(state.Description) ||
		!plan.SourceAPIAssociationConfig.Equal(state.SourceAPIAssociationConfig) {
		in := &appsync.UpdateSourceApiAssociationInput{
			AssociationId:       flex.StringFromFramework(ctx, plan.AssociationID),
			MergedApiIdentifier: flex.StringFromFramework(ctx, plan.MergedAPIARN),
		}

		if !plan.Description.Equal(state.Description) {
			in.Description = flex.StringFromFramework(ctx, plan.Description)
		}

		if !plan.SourceAPIAssociationConfig.Equal(state.SourceAPIAssociationConfig) {
			var elements []sourceAPIAssociationConfigModel
			response.Diagnostics.Append(plan.SourceAPIAssociationConfig.ElementsAs(ctx, &elements, false)...)
			if response.Diagnostics.HasError() {
				return
			}
			if len(elements) == 1 {
				saac := &awstypes.SourceApiAssociationConfig{}
				flex.Expand(ctx, elements[0], saac)
				in.SourceApiAssociationConfig = saac
			}
		}

		out, err := conn.UpdateSourceApiAssociation(ctx, in)
		if err != nil {
			response.Diagnostics.AddError(
				create.ProblemStandardMessage(names.AppSync, create.ErrActionUpdating, resNameSourceAPIAssociation, plan.ID.String(), err),
				err.Error(),
			)
			return
		}
		if out == nil || out.SourceApiAssociation == nil {
			response.Diagnostics.AddError(
				create.ProblemStandardMessage(names.AppSync, create.ErrActionUpdating, resNameSourceAPIAssociation, plan.ID.String(), nil),
				errors.New("empty output").Error(),
			)
			return
		}
	}

	updateTimeout := r.UpdateTimeout(ctx, plan.Timeouts)
	_, err := waitSourceAPIAssociationUpdated(ctx, conn, plan.AssociationID.ValueString(), plan.MergedAPIARN.ValueString(), updateTimeout)
	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.AppSync, create.ErrActionWaitingForUpdate, resNameSourceAPIAssociation, plan.ID.String(), err),
			err.Error(),
		)
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &plan)...)
}
