package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainNameCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppSyncClient(ctx)

	domainName := d.Get(names.AttrDomainName).(string)
	input := &appsync.CreateDomainNameInput{
		CertificateArn: aws.String(d.Get(names.AttrCertificateARN).(string)),
		Description:    aws.String(d.Get(names.AttrDescription).(string)),
		DomainName:     aws.String(domainName),
	}

	output, err := conn.CreateDomainName(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Appsync Domain Name (%s): %s", domainName, err)
	}

	d.SetId(aws.ToString(output.DomainNameConfig.DomainName))

	return append(diags, resourceDomainNameRead(ctx, d, meta)...)
}
