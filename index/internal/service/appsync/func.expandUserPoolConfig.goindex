package github.com/hashicorp/terraform-provider-aws/internal/service/appsync
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appsync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUserPoolConfig(tfList []any, currentRegion string) *awstypes.UserPoolConfig {
	if len(tfList) < 1 || tfList[0] == nil {
		return nil
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.UserPoolConfig{
		AwsRegion:     aws.String(currentRegion),
		DefaultAction: awstypes.DefaultAction(tfMap[names.AttrDefaultAction].(string)),
		UserPoolId:    aws.String(tfMap[names.AttrUserPoolID].(string)),
	}

	if v, ok := tfMap["app_id_client_regex"].(string); ok && v != "" {
		apiObject.AppIdClientRegex = aws.String(v)
	}

	if v, ok := tfMap["aws_region"].(string); ok && v != "" {
		apiObject.AwsRegion = aws.String(v)
	}

	return apiObject
}
