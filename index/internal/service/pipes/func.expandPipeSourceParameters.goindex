package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPipeSourceParameters(tfMap map[string]any) *types.PipeSourceParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.PipeSourceParameters{}

	if v, ok := tfMap["activemq_broker_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.ActiveMQBrokerParameters = expandPipeSourceActiveMQBrokerParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["dynamodb_stream_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.DynamoDBStreamParameters = expandPipeSourceDynamoDBStreamParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["filter_criteria"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.FilterCriteria = expandFilterCriteria(v[0].(map[string]any))
	}

	if v, ok := tfMap["kinesis_stream_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.KinesisStreamParameters = expandPipeSourceKinesisStreamParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["managed_streaming_kafka_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.ManagedStreamingKafkaParameters = expandPipeSourceManagedStreamingKafkaParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["rabbitmq_broker_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.RabbitMQBrokerParameters = expandPipeSourceRabbitMQBrokerParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["self_managed_kafka_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.SelfManagedKafkaParameters = expandPipeSourceSelfManagedKafkaParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["sqs_queue_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.SqsQueueParameters = expandPipeSourceSQSQueueParameters(v[0].(map[string]any))
	}

	return apiObject
}
