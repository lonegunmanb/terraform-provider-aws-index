package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPipeTargetParameters(tfMap map[string]any) *types.PipeTargetParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.PipeTargetParameters{}

	if v, ok := tfMap["batch_job_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.BatchJobParameters = expandPipeTargetBatchJobParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["cloudwatch_logs_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.CloudWatchLogsParameters = expandPipeTargetCloudWatchLogsParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["ecs_task_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.EcsTaskParameters = expandPipeTargetECSTaskParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["eventbridge_event_bus_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.EventBridgeEventBusParameters = expandPipeTargetEventBridgeEventBusParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["http_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.HttpParameters = expandPipeTargetHTTPParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["input_template"].(string); ok && v != "" {
		apiObject.InputTemplate = aws.String(v)
	}

	if v, ok := tfMap["kinesis_stream_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.KinesisStreamParameters = expandPipeTargetKinesisStreamParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["lambda_function_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.LambdaFunctionParameters = expandPipeTargetLambdaFunctionParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["redshift_data_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.RedshiftDataParameters = expandPipeTargetRedshiftDataParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["sagemaker_pipeline_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.SageMakerPipelineParameters = expandPipeTargetSageMakerPipelineParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["sqs_queue_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.SqsQueueParameters = expandPipeTargetSQSQueueParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["step_function_state_machine_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.StepFunctionStateMachineParameters = expandPipeTargetStateMachineParameters(v[0].(map[string]any))
	}

	return apiObject
}
