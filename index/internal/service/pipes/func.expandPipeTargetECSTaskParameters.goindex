package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPipeTargetECSTaskParameters(tfMap map[string]any) *types.PipeTargetEcsTaskParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.PipeTargetEcsTaskParameters{}

	if v, ok := tfMap[names.AttrCapacityProviderStrategy].([]any); ok && len(v) > 0 {
		apiObject.CapacityProviderStrategy = expandCapacityProviderStrategyItems(v)
	}

	if v, ok := tfMap["enable_ecs_managed_tags"].(bool); ok {
		apiObject.EnableECSManagedTags = v
	}

	if v, ok := tfMap["enable_execute_command"].(bool); ok {
		apiObject.EnableExecuteCommand = v
	}

	if v, ok := tfMap["group"].(string); ok && v != "" {
		apiObject.Group = aws.String(v)
	}

	if v, ok := tfMap["launch_type"].(string); ok && v != "" {
		apiObject.LaunchType = types.LaunchType(v)
	}

	if v, ok := tfMap[names.AttrNetworkConfiguration].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.NetworkConfiguration = expandNetworkConfiguration(v[0].(map[string]any))
	}

	if v, ok := tfMap["overrides"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Overrides = expandECSTaskOverride(v[0].(map[string]any))
	}

	if v, ok := tfMap["placement_constraint"].([]any); ok && len(v) > 0 {
		apiObject.PlacementConstraints = expandPlacementConstraints(v)
	}

	if v, ok := tfMap["placement_strategy"].([]any); ok && len(v) > 0 {
		apiObject.PlacementStrategy = expandPlacementStrategies(v)
	}

	if v, ok := tfMap["platform_version"].(string); ok && v != "" {
		apiObject.PlatformVersion = aws.String(v)
	}

	if v, ok := tfMap[names.AttrPropagateTags].(string); ok && v != "" {
		apiObject.PropagateTags = types.PropagateTags(v)
	}

	if v, ok := tfMap["reference_id"].(string); ok && v != "" {
		apiObject.ReferenceId = aws.String(v)
	}

	if v, ok := tfMap[names.AttrTags].(map[string]any); ok && len(v) > 0 {
		for k, v := range flex.ExpandStringValueMap(v) {
			apiObject.Tags = append(apiObject.Tags, types.Tag{Key: aws.String(k), Value: aws.String(v)})
		}
	}

	if v, ok := tfMap["task_count"].(int); ok {
		apiObject.TaskCount = aws.Int32(int32(v))
	}

	if v, ok := tfMap["task_definition_arn"].(string); ok && v != "" {
		apiObject.TaskDefinitionArn = aws.String(v)
	}

	return apiObject
}
