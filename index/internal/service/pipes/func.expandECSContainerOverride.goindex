package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandECSContainerOverride(tfMap map[string]any) *types.EcsContainerOverride {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.EcsContainerOverride{}

	if v, ok := tfMap["command"].([]any); ok && len(v) > 0 {
		apiObject.Command = flex.ExpandStringValueList(v)
	}

	if v, ok := tfMap["cpu"].(int); ok {
		apiObject.Cpu = aws.Int32(int32(v))
	}

	if v, ok := tfMap[names.AttrEnvironment].([]any); ok && len(v) > 0 {
		apiObject.Environment = expandECSEnvironmentVariables(v)
	}

	if v, ok := tfMap["environment_file"].([]any); ok && len(v) > 0 {
		apiObject.EnvironmentFiles = expandECSEnvironmentFiles(v)
	}

	if v, ok := tfMap["memory"].(int); ok {
		apiObject.Memory = aws.Int32(int32(v))
	}

	if v, ok := tfMap["memory_reservation"].(int); ok {
		apiObject.MemoryReservation = aws.Int32(int32(v))
	}

	if v, ok := tfMap[names.AttrName].(string); ok && v != "" {
		apiObject.Name = aws.String(v)
	}

	if v, ok := tfMap["resource_requirement"].([]any); ok && len(v) > 0 {
		apiObject.ResourceRequirements = expandECSResourceRequirements(v)
	}

	return apiObject
}
