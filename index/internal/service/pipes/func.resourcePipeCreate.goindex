package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes"
	awstypes "github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePipeCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).PipesClient(ctx)

	name := create.Name(d.Get(names.AttrName).(string), d.Get(names.AttrNamePrefix).(string))
	input := &pipes.CreatePipeInput{
		DesiredState: awstypes.RequestedPipeState(d.Get("desired_state").(string)),
		Name:         aws.String(name),
		RoleArn:      aws.String(d.Get(names.AttrRoleARN).(string)),
		Source:       aws.String(d.Get(names.AttrSource).(string)),
		Tags:         getTagsIn(ctx),
		Target:       aws.String(d.Get(names.AttrTarget).(string)),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("enrichment"); ok && v != "" {
		input.Enrichment = aws.String(v.(string))
	}

	if v, ok := d.GetOk("enrichment_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.EnrichmentParameters = expandPipeEnrichmentParameters(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("kms_key_identifier"); ok && v != "" {
		input.KmsKeyIdentifier = aws.String(v.(string))
	}

	if v, ok := d.GetOk("source_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.SourceParameters = expandPipeSourceParameters(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("target_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.TargetParameters = expandPipeTargetParameters(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("log_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.LogConfiguration = expandPipeLogConfigurationParameters(v.([]any)[0].(map[string]any))
	}

	output, err := conn.CreatePipe(ctx, input)

	if err != nil {
		return create.AppendDiagError(diags, names.Pipes, create.ErrActionCreating, ResNamePipe, name, err)
	}

	d.SetId(aws.ToString(output.Name))

	if _, err := waitPipeCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.Pipes, create.ErrActionWaitingForCreation, ResNamePipe, d.Id(), err)
	}

	return append(diags, resourcePipeRead(ctx, d, meta)...)
}
