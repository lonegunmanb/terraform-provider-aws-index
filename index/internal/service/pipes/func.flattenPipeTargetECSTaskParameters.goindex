package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPipeTargetECSTaskParameters(apiObject *types.PipeTargetEcsTaskParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"enable_ecs_managed_tags": apiObject.EnableECSManagedTags,
		"enable_execute_command":  apiObject.EnableExecuteCommand,
	}

	if v := apiObject.CapacityProviderStrategy; v != nil {
		tfMap[names.AttrCapacityProviderStrategy] = flattenCapacityProviderStrategyItems(v)
	}

	if v := apiObject.Group; v != nil {
		tfMap["group"] = aws.ToString(v)
	}

	if v := apiObject.LaunchType; v != "" {
		tfMap["launch_type"] = v
	}

	if v := apiObject.NetworkConfiguration; v != nil {
		tfMap[names.AttrNetworkConfiguration] = []any{flattenNetworkConfiguration(v)}
	}

	if v := apiObject.Overrides; v != nil {
		tfMap["overrides"] = []any{flattenECSTaskOverride(v)}
	}

	if v := apiObject.PlacementConstraints; v != nil {
		tfMap["placement_constraint"] = flattenPlacementConstraints(v)
	}

	if v := apiObject.PlacementStrategy; v != nil {
		tfMap["placement_strategy"] = flattenPlacementStrategies(v)
	}

	if v := apiObject.PlatformVersion; v != nil {
		tfMap["platform_version"] = aws.ToString(v)
	}

	if v := apiObject.PropagateTags; v != "" {
		tfMap[names.AttrPropagateTags] = v
	}

	if v := apiObject.ReferenceId; v != nil {
		tfMap["reference_id"] = aws.ToString(v)
	}

	if v := apiObject.Tags; v != nil {
		tags := map[string]any{}

		for _, apiObject := range v {
			tags[aws.ToString(apiObject.Key)] = aws.ToString(apiObject.Value)
		}

		tfMap[names.AttrTags] = tags
	}

	if v := apiObject.TaskCount; v != nil {
		tfMap["task_count"] = aws.ToInt32(v)
	}

	if v := apiObject.TaskDefinitionArn; v != nil {
		tfMap["task_definition_arn"] = aws.ToString(v)
	}

	return tfMap
}
