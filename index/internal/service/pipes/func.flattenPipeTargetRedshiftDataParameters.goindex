package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPipeTargetRedshiftDataParameters(apiObject *types.PipeTargetRedshiftDataParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"with_event": apiObject.WithEvent,
	}

	if v := apiObject.Database; v != nil {
		tfMap[names.AttrDatabase] = aws.ToString(v)
	}

	if v := apiObject.DbUser; v != nil {
		tfMap["db_user"] = aws.ToString(v)
	}

	if v := apiObject.SecretManagerArn; v != nil {
		tfMap["secret_manager_arn"] = aws.ToString(v)
	}

	if v := apiObject.Sqls; v != nil {
		tfMap["sqls"] = v
	}

	if v := apiObject.StatementName; v != nil {
		tfMap["statement_name"] = aws.ToString(v)
	}

	return tfMap
}
