package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPipeSourceRabbitMQBrokerParameters(apiObject *types.PipeSourceRabbitMQBrokerParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.BatchSize; v != nil {
		tfMap["batch_size"] = aws.ToInt32(v)
	}

	if v := apiObject.Credentials; v != nil {
		tfMap["credentials"] = []any{flattenMQBrokerAccessCredentials(v)}
	}

	if v := apiObject.MaximumBatchingWindowInSeconds; v != nil {
		tfMap["maximum_batching_window_in_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.QueueName; v != nil {
		tfMap["queue_name"] = aws.ToString(v)
	}

	if v := apiObject.VirtualHost; v != nil {
		tfMap["virtual_host"] = aws.ToString(v)
	}

	return tfMap
}
