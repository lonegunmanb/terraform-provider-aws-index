package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes"
	awstypes "github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePipeUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).PipesClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &pipes.UpdatePipeInput{
			Description:  aws.String(d.Get(names.AttrDescription).(string)),
			DesiredState: awstypes.RequestedPipeState(d.Get("desired_state").(string)),
			Name:         aws.String(d.Id()),
			RoleArn:      aws.String(d.Get(names.AttrRoleARN).(string)),
			Target:       aws.String(d.Get(names.AttrTarget).(string)),
		}

		if d.HasChange("enrichment") {
			input.Enrichment = aws.String(d.Get("enrichment").(string))
		}

		if d.HasChange("enrichment_parameters") {
			if v, ok := d.GetOk("enrichment_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.EnrichmentParameters = expandPipeEnrichmentParameters(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChange("kms_key_identifier") {
			input.KmsKeyIdentifier = aws.String(d.Get("kms_key_identifier").(string))
		}

		if d.HasChange("log_configuration") {
			if v, ok := d.GetOk("log_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.LogConfiguration = expandPipeLogConfigurationParameters(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChange("source_parameters") {
			if v, ok := d.GetOk("source_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.SourceParameters = expandUpdatePipeSourceParameters(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChange("target_parameters") {
			// Reset state in case it's a deletion, have to set the input to an empty string otherwise it doesn't get overwritten.
			input.TargetParameters = &awstypes.PipeTargetParameters{
				InputTemplate: aws.String(""),
			}
			if v, ok := d.GetOk("target_parameters"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.TargetParameters = expandPipeTargetParameters(v.([]any)[0].(map[string]any))
			}
		}

		output, err := conn.UpdatePipe(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.Pipes, create.ErrActionUpdating, ResNamePipe, d.Id(), err)
		}

		if _, err := waitPipeUpdated(ctx, conn, aws.ToString(output.Name), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return create.AppendDiagError(diags, names.Pipes, create.ErrActionWaitingForUpdate, ResNamePipe, d.Id(), err)
		}
	}

	return append(diags, resourcePipeRead(ctx, d, meta)...)
}
