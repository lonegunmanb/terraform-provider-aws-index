package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUpdatePipeSourceSelfManagedKafkaParameters(tfMap map[string]any) *types.UpdatePipeSourceSelfManagedKafkaParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.UpdatePipeSourceSelfManagedKafkaParameters{}

	if v, ok := tfMap["batch_size"].(int); ok && v != 0 {
		apiObject.BatchSize = aws.Int32(int32(v))
	}

	if v, ok := tfMap["credentials"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Credentials = expandSelfManagedKafkaAccessConfigurationCredentials(v[0].(map[string]any))
	}

	if v, ok := tfMap["maximum_batching_window_in_seconds"].(int); ok {
		apiObject.MaximumBatchingWindowInSeconds = aws.Int32(int32(v))
	}

	if v, ok := tfMap["server_root_ca_certificate"].(string); ok {
		apiObject.ServerRootCaCertificate = aws.String(v)
	}

	if v, ok := tfMap["vpc"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Vpc = expandSelfManagedKafkaAccessConfigurationVPC(v[0].(map[string]any))
	} else {
		apiObject.Vpc = &types.SelfManagedKafkaAccessConfigurationVpc{}
	}

	return apiObject
}
