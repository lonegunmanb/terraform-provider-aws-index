package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPipeSourceDynamoDBStreamParameters(apiObject *types.PipeSourceDynamoDBStreamParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.BatchSize; v != nil {
		tfMap["batch_size"] = aws.ToInt32(v)
	}

	if v := apiObject.DeadLetterConfig; v != nil {
		tfMap["dead_letter_config"] = []any{flattenDeadLetterConfig(v)}
	}

	if v := apiObject.MaximumBatchingWindowInSeconds; v != nil {
		tfMap["maximum_batching_window_in_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.MaximumRecordAgeInSeconds; v != nil {
		tfMap["maximum_record_age_in_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.MaximumRetryAttempts; v != nil {
		tfMap["maximum_retry_attempts"] = aws.ToInt32(v)
	}

	if v := apiObject.OnPartialBatchItemFailure; v != "" {
		tfMap["on_partial_batch_item_failure"] = v
	}

	if v := apiObject.ParallelizationFactor; v != nil {
		tfMap["parallelization_factor"] = aws.ToInt32(v)
	}

	if v := apiObject.StartingPosition; v != "" {
		tfMap["starting_position"] = v
	}

	return tfMap
}
