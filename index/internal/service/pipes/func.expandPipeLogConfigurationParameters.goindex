package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPipeLogConfigurationParameters(tfMap map[string]any) *types.PipeLogConfigurationParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.PipeLogConfigurationParameters{}

	if v, ok := tfMap["cloudwatch_logs_log_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.CloudwatchLogsLogDestination = expandCloudWatchLogsLogDestinationParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["firehose_log_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.FirehoseLogDestination = expandFirehoseLogDestinationParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["include_execution_data"].(*schema.Set); ok && v != nil {
		apiObject.IncludeExecutionData = flex.ExpandStringyValueSet[types.IncludeExecutionDataOption](v)
	}

	if v, ok := tfMap["level"].(string); ok && v != "" {
		apiObject.Level = types.LogLevel(v)
	}

	if v, ok := tfMap["s3_log_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.S3LogDestination = expandS3LogDestinationParameters(v[0].(map[string]any))
	}

	return apiObject
}
