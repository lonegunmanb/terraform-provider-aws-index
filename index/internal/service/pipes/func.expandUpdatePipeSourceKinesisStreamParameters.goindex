package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUpdatePipeSourceKinesisStreamParameters(tfMap map[string]any) *types.UpdatePipeSourceKinesisStreamParameters {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.UpdatePipeSourceKinesisStreamParameters{}

	if v, ok := tfMap["batch_size"].(int); ok && v != 0 {
		apiObject.BatchSize = aws.Int32(int32(v))
	}

	if v, ok := tfMap["dead_letter_config"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.DeadLetterConfig = expandDeadLetterConfig(v[0].(map[string]any))
	} else {
		apiObject.DeadLetterConfig = &types.DeadLetterConfig{}
	}

	if v, ok := tfMap["maximum_batching_window_in_seconds"].(int); ok {
		apiObject.MaximumBatchingWindowInSeconds = aws.Int32(int32(v))
	}

	if v, ok := tfMap["maximum_record_age_in_seconds"].(int); ok && v != 0 {
		apiObject.MaximumRecordAgeInSeconds = aws.Int32(int32(v))
	}

	if v, ok := tfMap["maximum_retry_attempts"].(int); ok {
		apiObject.MaximumRetryAttempts = aws.Int32(int32(v))
	}

	if v, ok := tfMap["on_partial_batch_item_failure"].(string); ok {
		apiObject.OnPartialBatchItemFailure = types.OnPartialBatchItemFailureStreams(v)
	}

	if v, ok := tfMap["parallelization_factor"].(int); ok && v != 0 {
		apiObject.ParallelizationFactor = aws.Int32(int32(v))
	}

	return apiObject
}
