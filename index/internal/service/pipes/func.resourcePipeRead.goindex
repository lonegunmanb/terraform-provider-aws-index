package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes"
	awstypes "github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePipeRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).PipesClient(ctx)

	output, err := findPipeByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] EventBridge Pipes Pipe (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return create.AppendDiagError(diags, names.Pipes, create.ErrActionReading, ResNamePipe, d.Id(), err)
	}

	d.Set(names.AttrARN, output.Arn)
	d.Set(names.AttrDescription, output.Description)
	d.Set("desired_state", output.DesiredState)
	d.Set("enrichment", output.Enrichment)
	if v := output.EnrichmentParameters; !types.IsZero(v) {
		if err := d.Set("enrichment_parameters", []any{flattenPipeEnrichmentParameters(v)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting enrichment_parameters: %s", err)
		}
	} else {
		d.Set("enrichment_parameters", nil)
	}
	d.Set("kms_key_identifier", output.KmsKeyIdentifier)
	if v := output.LogConfiguration; !types.IsZero(v) {
		if err := d.Set("log_configuration", []any{flattenPipeLogConfiguration(v)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting log_configuration: %s", err)
		}
	} else {
		d.Set("log_configuration", nil)
	}
	d.Set(names.AttrName, output.Name)
	d.Set(names.AttrNamePrefix, create.NamePrefixFromName(aws.ToString(output.Name)))
	d.Set(names.AttrRoleARN, output.RoleArn)
	d.Set(names.AttrSource, output.Source)
	if v := output.SourceParameters; !types.IsZero(v) {
		if err := d.Set("source_parameters", []any{flattenPipeSourceParameters(v)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting source_parameters: %s", err)
		}
	} else {
		d.Set("source_parameters", nil)
	}
	d.Set(names.AttrTarget, output.Target)
	if v := output.TargetParameters; !types.IsZero(v) {
		if err := d.Set("target_parameters", []any{flattenPipeTargetParameters(v)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting target_parameters: %s", err)
		}
	} else {
		d.Set("target_parameters", nil)
	}

	return diags
}
