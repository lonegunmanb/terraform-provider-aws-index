package github.com/hashicorp/terraform-provider-aws/internal/service/pipes
import (
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pipes/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPipeSourceSelfManagedKafkaParameters(apiObject *types.PipeSourceSelfManagedKafkaParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.AdditionalBootstrapServers; v != nil {
		tfMap["additional_bootstrap_servers"] = v
	}

	if v := apiObject.BatchSize; v != nil {
		tfMap["batch_size"] = aws.ToInt32(v)
	}

	if v := apiObject.ConsumerGroupID; v != nil {
		tfMap["consumer_group_id"] = aws.ToString(v)
	}

	if v := apiObject.Credentials; v != nil {
		tfMap["credentials"] = []any{flattenSelfManagedKafkaAccessConfigurationCredentials(v)}
	}

	if v := apiObject.MaximumBatchingWindowInSeconds; v != nil {
		tfMap["maximum_batching_window_in_seconds"] = aws.ToInt32(v)
	}

	if v := apiObject.ServerRootCaCertificate; v != nil {
		tfMap["server_root_ca_certificate"] = aws.ToString(v)
	}

	if v := apiObject.StartingPosition; v != "" {
		tfMap["starting_position"] = v
	}

	if v := apiObject.TopicName; v != nil {
		tfMap["topic_name"] = aws.ToString(v)
	}

	if v := apiObject.Vpc; v != nil {
		tfMap["vpc"] = []any{flattenSelfManagedKafkaAccessConfigurationVPC(v)}
	}

	return tfMap
}
