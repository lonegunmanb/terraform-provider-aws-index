package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenGatewayRouteTarget(routeTarget *awstypes.GatewayRouteTarget) []any {
	if routeTarget == nil {
		return []any{}
	}

	mRouteTarget := map[string]any{
		names.AttrPort: aws.ToInt32(routeTarget.Port),
	}

	if virtualService := routeTarget.VirtualService; virtualService != nil {
		mVirtualService := map[string]any{
			"virtual_service_name": aws.ToString(virtualService.VirtualServiceName),
		}

		mRouteTarget["virtual_service"] = []any{mVirtualService}
	}

	return []any{mRouteTarget}
}
