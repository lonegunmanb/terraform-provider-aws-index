package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	multierror "github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepGatewayRoutes(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("error getting client: %w", err)
	}
	conn := client.AppMeshClient(ctx)
	input := &appmesh.ListMeshesInput{}
	sweepResources := make([]sweep.Sweepable, 0)
	var sweeperErrs *multierror.Error

	pages := appmesh.NewListMeshesPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if awsv2.SkipSweepError(err) {
			log.Printf("[WARN] Skipping App Mesh Gateway Route sweep for %s: %s", region, err)
			return sweeperErrs.ErrorOrNil() // In case we have completed some pages, but had errors
		}

		if err != nil {
			sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing App Mesh Service Meshes (%s): %w", region, err))
		}

		for _, v := range page.Meshes {
			meshName := aws.ToString(v.MeshName)
			input := &appmesh.ListVirtualGatewaysInput{
				MeshName: aws.String(meshName),
			}

			pages := appmesh.NewListVirtualGatewaysPaginator(conn, input)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)

				if awsv2.SkipSweepError(err) {
					continue
				}

				if err != nil {
					sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing App Mesh Virtual Gateways (%s): %w", region, err))
				}

				for _, v := range page.VirtualGateways {
					virtualGatewayName := aws.ToString(v.VirtualGatewayName)
					input := &appmesh.ListGatewayRoutesInput{
						MeshName:           aws.String(meshName),
						VirtualGatewayName: aws.String(virtualGatewayName),
					}

					pages := appmesh.NewListGatewayRoutesPaginator(conn, input)
					for pages.HasMorePages() {
						page, err := pages.NextPage(ctx)

						if awsv2.SkipSweepError(err) {
							continue
						}

						if err != nil {
							sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing App Mesh Gateway Routes (%s): %w", region, err))
						}

						for _, v := range page.GatewayRoutes {
							gatewayRouteName := aws.ToString(v.GatewayRouteName)
							r := resourceGatewayRoute()
							d := r.Data(nil)
							d.SetId(fmt.Sprintf("%s/%s/%s", meshName, virtualGatewayName, gatewayRouteName)) // Logged in Delete handler, not used in API call.
							d.Set("mesh_name", meshName)
							d.Set(names.AttrName, gatewayRouteName)
							d.Set("virtual_gateway_name", virtualGatewayName)

							sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
						}
					}
				}
			}
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error sweeping App Mesh Gateway Routes (%s): %w", region, err))
	}

	return sweeperErrs.ErrorOrNil()
}
