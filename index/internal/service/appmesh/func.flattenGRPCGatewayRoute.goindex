package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenGRPCGatewayRoute(grpcRoute *awstypes.GrpcGatewayRoute) []any {
	if grpcRoute == nil {
		return []any{}
	}

	mGrpcRoute := map[string]any{}

	if routeAction := grpcRoute.Action; routeAction != nil {
		mRouteAction := map[string]any{
			names.AttrTarget: flattenGatewayRouteTarget(routeAction.Target),
		}

		mGrpcRoute[names.AttrAction] = []any{mRouteAction}
	}

	if routeMatch := grpcRoute.Match; routeMatch != nil {
		mRouteMatch := map[string]any{
			names.AttrServiceName: aws.ToString(routeMatch.ServiceName),
		}
		if routeMatch.Port != nil {
			mRouteMatch[names.AttrPort] = aws.ToInt32(routeMatch.Port)
		}

		mGrpcRoute["match"] = []any{mRouteMatch}
	}

	return []any{mGrpcRoute}
}
