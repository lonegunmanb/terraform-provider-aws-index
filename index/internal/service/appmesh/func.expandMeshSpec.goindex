package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandMeshSpec(vSpec []any) *awstypes.MeshSpec {
	spec := &awstypes.MeshSpec{}

	if len(vSpec) == 0 || vSpec[0] == nil {
		// Empty Spec is allowed.
		return spec
	}
	mSpec := vSpec[0].(map[string]any)

	if vEgressFilter, ok := mSpec["egress_filter"].([]any); ok && len(vEgressFilter) > 0 && vEgressFilter[0] != nil {
		mEgressFilter := vEgressFilter[0].(map[string]any)

		if vType, ok := mEgressFilter[names.AttrType].(string); ok && vType != "" {
			spec.EgressFilter = &awstypes.EgressFilter{
				Type: awstypes.EgressFilterType(vType),
			}
		}
	}

	if vServiceDiscovery, ok := mSpec["service_discovery"].([]any); ok && len(vServiceDiscovery) > 0 && vServiceDiscovery[0] != nil {
		mServiceDiscovery := vServiceDiscovery[0].(map[string]any)

		if vIpPreference, ok := mServiceDiscovery["ip_preference"].(string); ok && vIpPreference != "" {
			spec.ServiceDiscovery = &awstypes.MeshServiceDiscovery{
				IpPreference: awstypes.IpPreference(vIpPreference),
			}
		}
	}

	return spec
}
