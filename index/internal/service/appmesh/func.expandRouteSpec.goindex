package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRouteSpec(vSpec []any) *awstypes.RouteSpec {
	spec := &awstypes.RouteSpec{}

	if len(vSpec) == 0 || vSpec[0] == nil {
		// Empty Spec is allowed.
		return spec
	}
	mSpec := vSpec[0].(map[string]any)

	if vGrpcRoute, ok := mSpec["grpc_route"].([]any); ok {
		spec.GrpcRoute = expandGRPCRoute(vGrpcRoute)
	}

	if vHttp2Route, ok := mSpec["http2_route"].([]any); ok {
		spec.Http2Route = expandHTTPRoute(vHttp2Route)
	}

	if vHttpRoute, ok := mSpec["http_route"].([]any); ok {
		spec.HttpRoute = expandHTTPRoute(vHttpRoute)
	}

	if vPriority, ok := mSpec[names.AttrPriority].(int); ok && vPriority > 0 {
		spec.Priority = aws.Int32(int32(vPriority))
	}

	if vTcpRoute, ok := mSpec["tcp_route"].([]any); ok {
		spec.TcpRoute = expandTCPRoute(vTcpRoute)
	}

	return spec
}
