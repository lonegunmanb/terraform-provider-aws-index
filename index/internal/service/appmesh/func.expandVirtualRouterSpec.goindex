package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVirtualRouterSpec(vSpec []any) *awstypes.VirtualRouterSpec {
	spec := &awstypes.VirtualRouterSpec{}

	if len(vSpec) == 0 || vSpec[0] == nil {
		// Empty Spec is allowed.
		return spec
	}
	mSpec := vSpec[0].(map[string]any)

	if vListeners, ok := mSpec["listener"].([]any); ok && len(vListeners) > 0 && vListeners[0] != nil {
		listeners := []awstypes.VirtualRouterListener{}

		for _, vListener := range vListeners {
			listener := awstypes.VirtualRouterListener{}

			mListener := vListener.(map[string]any)

			if vPortMapping, ok := mListener["port_mapping"].([]any); ok && len(vPortMapping) > 0 && vPortMapping[0] != nil {
				mPortMapping := vPortMapping[0].(map[string]any)

				listener.PortMapping = &awstypes.PortMapping{}

				if vPort, ok := mPortMapping[names.AttrPort].(int); ok && vPort > 0 {
					listener.PortMapping.Port = aws.Int32(int32(vPort))
				}
				if vProtocol, ok := mPortMapping[names.AttrProtocol].(string); ok && vProtocol != "" {
					listener.PortMapping.Protocol = awstypes.PortProtocol(vProtocol)
				}
			}
			listeners = append(listeners, listener)
		}
		spec.Listeners = listeners
	}

	return spec
}
