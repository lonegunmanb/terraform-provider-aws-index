package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTCPRoute(tcpRoute *awstypes.TcpRoute) []any {
	if tcpRoute == nil {
		return []any{}
	}

	mTcpRoute := map[string]any{}

	if action := tcpRoute.Action; action != nil {
		if weightedTargets := action.WeightedTargets; weightedTargets != nil {
			vWeightedTargets := []any{}

			for _, weightedTarget := range weightedTargets {
				mWeightedTarget := map[string]any{
					"virtual_node":   aws.ToString(weightedTarget.VirtualNode),
					names.AttrWeight: weightedTarget.Weight,
				}

				if v := aws.ToInt32(weightedTarget.Port); v != 0 {
					mWeightedTarget[names.AttrPort] = v
				}

				vWeightedTargets = append(vWeightedTargets, mWeightedTarget)
			}

			mTcpRoute[names.AttrAction] = []any{
				map[string]any{
					"weighted_target": vWeightedTargets,
				},
			}
		}
	}

	if tcpRouteMatch := tcpRoute.Match; tcpRouteMatch != nil {
		mTcpRoute["match"] = []any{
			map[string]any{
				names.AttrPort: aws.ToInt32(tcpRouteMatch.Port),
			},
		}
	}

	mTcpRoute[names.AttrTimeout] = flattenTCPTimeout(tcpRoute.Timeout)

	return []any{mTcpRoute}
}
