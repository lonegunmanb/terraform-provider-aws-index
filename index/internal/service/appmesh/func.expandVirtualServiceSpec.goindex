package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVirtualServiceSpec(vSpec []any) *awstypes.VirtualServiceSpec {
	spec := &awstypes.VirtualServiceSpec{}

	if len(vSpec) == 0 || vSpec[0] == nil {
		// Empty Spec is allowed.
		return spec
	}
	mSpec := vSpec[0].(map[string]any)

	if vProvider, ok := mSpec["provider"].([]any); ok && len(vProvider) > 0 && vProvider[0] != nil {
		mProvider := vProvider[0].(map[string]any)

		if vVirtualNode, ok := mProvider["virtual_node"].([]any); ok && len(vVirtualNode) > 0 && vVirtualNode[0] != nil {
			provider := &awstypes.VirtualServiceProviderMemberVirtualNode{}
			mVirtualNode := vVirtualNode[0].(map[string]any)

			if vVirtualNodeName, ok := mVirtualNode["virtual_node_name"].(string); ok && vVirtualNodeName != "" {
				provider.Value = awstypes.VirtualNodeServiceProvider{
					VirtualNodeName: aws.String(vVirtualNodeName),
				}
			}

			spec.Provider = provider
		}

		if vVirtualRouter, ok := mProvider["virtual_router"].([]any); ok && len(vVirtualRouter) > 0 && vVirtualRouter[0] != nil {
			provider := &awstypes.VirtualServiceProviderMemberVirtualRouter{}
			mVirtualRouter := vVirtualRouter[0].(map[string]any)

			if vVirtualRouterName, ok := mVirtualRouter["virtual_router_name"].(string); ok && vVirtualRouterName != "" {
				provider.Value = awstypes.VirtualRouterServiceProvider{
					VirtualRouterName: aws.String(vVirtualRouterName),
				}
			}

			spec.Provider = provider
		}
	}

	return spec
}
