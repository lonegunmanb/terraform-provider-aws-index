package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTCPRoute(vTcpRoute []any) *awstypes.TcpRoute {
	if len(vTcpRoute) == 0 || vTcpRoute[0] == nil {
		return nil
	}

	mTcpRoute := vTcpRoute[0].(map[string]any)

	tcpRoute := &awstypes.TcpRoute{}

	if vTcpRouteAction, ok := mTcpRoute[names.AttrAction].([]any); ok && len(vTcpRouteAction) > 0 && vTcpRouteAction[0] != nil {
		mTcpRouteAction := vTcpRouteAction[0].(map[string]any)

		if vWeightedTargets, ok := mTcpRouteAction["weighted_target"].(*schema.Set); ok && vWeightedTargets.Len() > 0 {
			weightedTargets := []awstypes.WeightedTarget{}

			for _, vWeightedTarget := range vWeightedTargets.List() {
				weightedTarget := awstypes.WeightedTarget{}

				mWeightedTarget := vWeightedTarget.(map[string]any)

				if vPort, ok := mWeightedTarget[names.AttrPort].(int); ok && vPort > 0 {
					weightedTarget.Port = aws.Int32(int32(vPort))
				}
				if vVirtualNode, ok := mWeightedTarget["virtual_node"].(string); ok && vVirtualNode != "" {
					weightedTarget.VirtualNode = aws.String(vVirtualNode)
				}
				if vWeight, ok := mWeightedTarget[names.AttrWeight].(int); ok {
					weightedTarget.Weight = int32(vWeight)
				}

				weightedTargets = append(weightedTargets, weightedTarget)
			}

			tcpRoute.Action = &awstypes.TcpRouteAction{
				WeightedTargets: weightedTargets,
			}
		}
	}

	if vTcpRouteMatch, ok := mTcpRoute["match"].([]any); ok && len(vTcpRouteMatch) > 0 && vTcpRouteMatch[0] != nil {
		tcpRouteMatch := &awstypes.TcpRouteMatch{}

		mTcpRouteMatch := vTcpRouteMatch[0].(map[string]any)

		if vPort, ok := mTcpRouteMatch[names.AttrPort].(int); ok && vPort > 0 {
			tcpRouteMatch.Port = aws.Int32(int32(vPort))
		}

		tcpRoute.Match = tcpRouteMatch
	}

	if vTcpTimeout, ok := mTcpRoute[names.AttrTimeout].([]any); ok {
		tcpRoute.Timeout = expandTCPTimeout(vTcpTimeout)
	}

	return tcpRoute
}
