package github.com/hashicorp/terraform-provider-aws/internal/service/appmesh
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appmesh/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenHTTPGatewayRouteRewrite(routeRewrite *awstypes.HttpGatewayRouteRewrite) []any {
	if routeRewrite == nil {
		return []any{}
	}

	mRouteRewrite := map[string]any{}

	if rewriteHostname := routeRewrite.Hostname; rewriteHostname != nil {
		mRewriteHostname := map[string]any{
			"default_target_hostname": rewriteHostname.DefaultTargetHostname,
		}
		mRouteRewrite["hostname"] = []any{mRewriteHostname}
	}

	if rewritePath := routeRewrite.Path; rewritePath != nil {
		mRewritePath := map[string]any{
			"exact": aws.ToString(rewritePath.Exact),
		}
		mRouteRewrite[names.AttrPath] = []any{mRewritePath}
	}

	if rewritePrefix := routeRewrite.Prefix; rewritePrefix != nil {
		mRewritePrefix := map[string]any{
			"default_prefix": rewritePrefix.DefaultPrefix,
		}
		if rewritePrefixValue := rewritePrefix.Value; rewritePrefixValue != nil {
			mRewritePrefix[names.AttrValue] = aws.ToString(rewritePrefix.Value)
		}
		mRouteRewrite[names.AttrPrefix] = []any{mRewritePrefix}
	}

	return []any{mRouteRewrite}
}
