package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceInstanceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	var matchedInstance *awstypes.Instance

	if v, ok := d.GetOk(names.AttrInstanceID); ok {
		instanceID := v.(string)
		instance, err := findInstanceByID(ctx, conn, instanceID)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Connect Instance (%s): %s", instanceID, err)
		}

		matchedInstance = instance
	} else if v, ok := d.GetOk("instance_alias"); ok {
		instanceAlias := v.(string)
		instanceSummary, err := findInstanceSummaryByAlias(ctx, conn, instanceAlias)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Connect Instance (%s) summary: %s", instanceAlias, err)
		}

		matchedInstance = &awstypes.Instance{
			Arn:                    instanceSummary.Arn,
			CreatedTime:            instanceSummary.CreatedTime,
			Id:                     instanceSummary.Id,
			IdentityManagementType: instanceSummary.IdentityManagementType,
			InboundCallsEnabled:    instanceSummary.InboundCallsEnabled,
			InstanceAlias:          instanceSummary.InstanceAlias,
			InstanceStatus:         instanceSummary.InstanceStatus,
			OutboundCallsEnabled:   instanceSummary.OutboundCallsEnabled,
			ServiceRole:            instanceSummary.ServiceRole,
		}
	}

	d.SetId(aws.ToString(matchedInstance.Id))
	d.Set(names.AttrARN, matchedInstance.Arn)
	if matchedInstance.CreatedTime != nil {
		d.Set(names.AttrCreatedTime, matchedInstance.CreatedTime.Format(time.RFC3339))
	}
	d.Set("identity_management_type", matchedInstance.IdentityManagementType)
	d.Set("inbound_calls_enabled", matchedInstance.InboundCallsEnabled)
	d.Set("instance_alias", matchedInstance.InstanceAlias)
	d.Set("outbound_calls_enabled", matchedInstance.OutboundCallsEnabled)
	d.Set(names.AttrServiceRole, matchedInstance.ServiceRole)
	d.Set(names.AttrStatus, matchedInstance.InstanceStatus)

	if err := readInstanceAttributes(ctx, conn, d); err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	setTagsOut(ctx, matchedInstance.Tags)

	return diags
}
