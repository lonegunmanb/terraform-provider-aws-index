package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBotAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID := d.Get(names.AttrInstanceID).(string)
	input := &connect.AssociateBotInput{
		InstanceId: aws.String(instanceID),
	}

	if v, ok := d.GetOk("lex_bot"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.LexBot = expandLexBot(v.([]any)[0].(map[string]any))
		if input.LexBot.LexRegion == nil {
			input.LexBot.LexRegion = aws.String(meta.(*conns.AWSClient).Region(ctx))
		}
	}

	id := botAssociationCreateResourceID(instanceID, aws.ToString(input.LexBot.Name), aws.ToString(input.LexBot.LexRegion))

	const (
		timeout = 5 * time.Minute
	)
	_, err := tfresource.RetryWhenIsA[*awstypes.InvalidRequestException](ctx, timeout, func() (any, error) {
		return conn.AssociateBot(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Connect Bot Association (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceBotAssociationRead(ctx, d, meta)...)
}
