package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceInstanceStorageConfigRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	associationID := d.Get(names.AttrAssociationID).(string)
	instanceID := d.Get(names.AttrInstanceID).(string)
	resourceType := awstypes.InstanceStorageResourceType(d.Get(names.AttrResourceType).(string))
	id := instanceStorageConfigCreateResourceID(instanceID, associationID, resourceType)
	storageConfig, err := findInstanceStorageConfigByThreePartKey(ctx, conn, instanceID, associationID, resourceType)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Connect Instance Storage Config (%s): %s", id, err)
	}

	d.SetId(id)
	if err := d.Set("storage_config", flattenStorageConfig(storageConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting storage_config: %s", err)
	}

	return diags
}
