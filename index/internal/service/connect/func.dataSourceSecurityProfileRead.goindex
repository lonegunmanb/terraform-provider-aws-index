package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSecurityProfileRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID := d.Get(names.AttrInstanceID).(string)
	input := &connect.DescribeSecurityProfileInput{
		InstanceId: aws.String(instanceID),
	}

	if v, ok := d.GetOk("security_profile_id"); ok {
		input.SecurityProfileId = aws.String(v.(string))
	} else if v, ok := d.GetOk(names.AttrName); ok {
		name := v.(string)
		securityProfileSummary, err := findSecurityProfileSummaryByTwoPartKey(ctx, conn, instanceID, name)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Connect Security Profile (%s) summary: %s", name, err)
		}

		input.SecurityProfileId = securityProfileSummary.Id
	}

	securityProfile, err := findSecurityProfile(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Connect Security Profile: %s", err)
	}

	securityProfileID := aws.ToString(securityProfile.Id)
	id := securityProfileCreateResourceID(instanceID, securityProfileID)
	d.SetId(id)
	d.Set(names.AttrARN, securityProfile.Arn)
	d.Set(names.AttrDescription, securityProfile.Description)
	d.Set(names.AttrInstanceID, instanceID)
	d.Set(names.AttrName, securityProfile.SecurityProfileName)
	d.Set("organization_resource_id", securityProfile.OrganizationResourceId)
	d.Set("security_profile_id", securityProfileID)

	permissions, err := findSecurityProfilePermissionsByTwoPartKey(ctx, conn, instanceID, securityProfileID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Connect Security Profile (%s) permissions: %s", d.Id(), err)
	}

	d.Set(names.AttrPermissions, permissions)

	setTagsOut(ctx, securityProfile.Tags)

	return diags
}
