package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateRoutingProfileQueueAssociations(ctx context.Context, conn *connect.Client, instanceID, routingProfileID string, add, del []awstypes.RoutingProfileQueueConfig) error {
	// updates to queue configs
	// There are 3 APIs for this
	// AssociateRoutingProfileQueues - Associates a set of queues with a routing profile.
	// DisassociateRoutingProfileQueues - Disassociates a set of queues from a routing profile.
	// UpdateRoutingProfileQueues - Updates the properties associated with a set of queues for a routing profile.
	// since the update only updates the existing queues that are associated, we will instead disassociate and associate
	// the respective queues based on the diff detected

	// disassociate first since Queue and channel type combination cannot be duplicated
	for chunk := range slices.Chunk(del, routingProfileQueueAssociationChunkSize) {
		var queueReferences []awstypes.RoutingProfileQueueReference
		for _, v := range chunk {
			if v := v.QueueReference; v != nil {
				queueReferences = append(queueReferences, *v)
			}
		}

		if len(queueReferences) > 0 {
			input := &connect.DisassociateRoutingProfileQueuesInput{
				InstanceId:       aws.String(instanceID),
				QueueReferences:  queueReferences,
				RoutingProfileId: aws.String(routingProfileID),
			}

			_, err := conn.DisassociateRoutingProfileQueues(ctx, input)

			if err != nil {
				return fmt.Errorf("disassociating Connect Routing Profile (%s) queues: %w", routingProfileID, err)
			}
		}
	}

	for chunk := range slices.Chunk(add, routingProfileQueueAssociationChunkSize) {
		input := &connect.AssociateRoutingProfileQueuesInput{
			InstanceId:       aws.String(instanceID),
			QueueConfigs:     chunk,
			RoutingProfileId: aws.String(routingProfileID),
		}

		_, err := conn.AssociateRoutingProfileQueues(ctx, input)

		if err != nil {
			return fmt.Errorf("associating Connect Routing Profile (%s) queues: %w", routingProfileID, err)
		}
	}

	return nil
}
