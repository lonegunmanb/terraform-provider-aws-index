package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandHoursOfOperationConfigs(tfList []any) []awstypes.HoursOfOperationConfig {
	if len(tfList) == 0 {
		return nil
	}

	apiObjects := []awstypes.HoursOfOperationConfig{}

	for _, config := range tfList {
		tfMap := config.(map[string]any)
		apiObject := awstypes.HoursOfOperationConfig{
			Day: awstypes.HoursOfOperationDays(tfMap["day"].(string)),
		}

		if v, ok := tfMap["end_time"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)

			apiObject.EndTime = &awstypes.HoursOfOperationTimeSlice{
				Hours:   aws.Int32(int32(tfMap["hours"].(int))),
				Minutes: aws.Int32(int32(tfMap["minutes"].(int))),
			}
		}

		if v, ok := tfMap[names.AttrStartTime].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)

			apiObject.StartTime = &awstypes.HoursOfOperationTimeSlice{
				Hours:   aws.Int32(int32(tfMap["hours"].(int))),
				Minutes: aws.Int32(int32(tfMap["minutes"].(int))),
			}
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
