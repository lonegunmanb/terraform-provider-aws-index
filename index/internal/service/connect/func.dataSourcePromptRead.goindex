package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourcePromptRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID := d.Get(names.AttrInstanceID).(string)
	name := d.Get(names.AttrName).(string)
	promptSummary, err := findPromptSummaryByTwoPartKey(ctx, conn, instanceID, name)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Connect Prompt (%s) summary: %s", name, err)
	}

	promptID := aws.ToString(promptSummary.Id)
	id := promptCreateResourceID(instanceID, promptID)
	d.SetId(id)
	d.Set(names.AttrARN, promptSummary.Arn)
	d.Set(names.AttrInstanceID, instanceID)
	d.Set(names.AttrName, promptSummary.Name)
	d.Set("prompt_id", promptID)

	return diags
}
