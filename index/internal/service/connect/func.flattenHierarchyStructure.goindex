package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenHierarchyStructure(apiObject *awstypes.HierarchyStructure) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{}

	if apiObject.LevelOne != nil {
		tfMap["level_one"] = flattenHierarchyLevel(apiObject.LevelOne)
	}

	if apiObject.LevelTwo != nil {
		tfMap["level_two"] = flattenHierarchyLevel(apiObject.LevelTwo)
	}

	if apiObject.LevelThree != nil {
		tfMap["level_three"] = flattenHierarchyLevel(apiObject.LevelThree)
	}

	if apiObject.LevelFour != nil {
		tfMap["level_four"] = flattenHierarchyLevel(apiObject.LevelFour)
	}

	if apiObject.LevelFive != nil {
		tfMap["level_five"] = flattenHierarchyLevel(apiObject.LevelFive)
	}

	return []any{tfMap}
}
