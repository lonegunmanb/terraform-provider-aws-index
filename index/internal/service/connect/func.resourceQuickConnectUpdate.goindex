package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceQuickConnectUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID, quickConnectID, err := quickConnectParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	// QuickConnect has 2 update APIs
	// UpdateQuickConnectNameWithContext: Updates the name and description of a quick connect.
	// UpdateQuickConnectConfigWithContext: Updates the configuration settings for the specified quick connect.

	// Either QuickConnectName or QuickConnectDescription must be specified. Both cannot be null or empty
	if d.HasChanges(names.AttrName, names.AttrDescription) {
		// updates to name and/or description
		input := &connect.UpdateQuickConnectNameInput{
			Description:    aws.String(d.Get(names.AttrDescription).(string)),
			InstanceId:     aws.String(instanceID),
			Name:           aws.String(d.Get(names.AttrName).(string)),
			QuickConnectId: aws.String(quickConnectID),
		}

		_, err = conn.UpdateQuickConnectName(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Connect Quick Connect(%s) Name: %s", d.Id(), err)
		}
	}

	// QuickConnectConfig is a required field but does not require update if it is unchanged
	if d.HasChange("quick_connect_config") {
		// updates to configuration settings
		input := &connect.UpdateQuickConnectConfigInput{
			InstanceId:         aws.String(instanceID),
			QuickConnectConfig: expandQuickConnectConfig(d.Get("quick_connect_config").([]any)),
			QuickConnectId:     aws.String(quickConnectID),
		}

		_, err = conn.UpdateQuickConnectConfig(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Connect Quick Connect (%s) Config: %s", d.Id(), err)
		}
	}

	return append(diags, resourceQuickConnectRead(ctx, d, meta)...)
}
