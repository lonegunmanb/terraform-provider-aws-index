package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceInstanceStorageConfigCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID := d.Get(names.AttrInstanceID).(string)
	resourceType := awstypes.InstanceStorageResourceType(d.Get(names.AttrResourceType).(string))
	input := &connect.AssociateInstanceStorageConfigInput{
		InstanceId:    aws.String(instanceID),
		ResourceType:  resourceType,
		StorageConfig: expandInstanceStorageConfig(d.Get("storage_config").([]any)),
	}

	output, err := conn.AssociateInstanceStorageConfig(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Connect Instance (%s) Storage Config (%s): %s", instanceID, resourceType, err)
	}

	id := instanceStorageConfigCreateResourceID(instanceID, aws.ToString(output.AssociationId), resourceType)
	d.SetId(id)

	return append(diags, resourceInstanceStorageConfigRead(ctx, d, meta)...)
}
