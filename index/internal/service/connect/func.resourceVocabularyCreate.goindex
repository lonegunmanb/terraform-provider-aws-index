package github.com/hashicorp/terraform-provider-aws/internal/service/connect
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/connect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVocabularyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConnectClient(ctx)

	instanceID := d.Get(names.AttrInstanceID).(string)
	vocabularyName := d.Get(names.AttrName).(string)
	input := &connect.CreateVocabularyInput{
		ClientToken:    aws.String(id.UniqueId()),
		InstanceId:     aws.String(instanceID),
		Content:        aws.String(d.Get(names.AttrContent).(string)),
		LanguageCode:   awstypes.VocabularyLanguageCode(d.Get(names.AttrLanguageCode).(string)),
		Tags:           getTagsIn(ctx),
		VocabularyName: aws.String(vocabularyName),
	}

	output, err := conn.CreateVocabulary(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Connect Vocabulary (%s): %s", vocabularyName, err)
	}

	vocabularyID := aws.ToString(output.VocabularyId)
	id := vocabularyCreateResourceID(instanceID, vocabularyID)
	d.SetId(id)

	if _, err := waitVocabularyCreated(ctx, conn, instanceID, vocabularyID, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Connect Vocabulary (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceVocabularyRead(ctx, d, meta)...)
}
