package github.com/hashicorp/terraform-provider-aws/internal/service/networkmonitor
import (
	"context"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmonitor"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmonitor/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *probeResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new probeResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().NetworkMonitorClient(ctx)

	if !new.Destination.Equal(old.Destination) ||
		!new.DestinationPort.Equal(old.DestinationPort) ||
		!new.PacketSize.Equal(old.PacketSize) ||
		!new.Protocol.Equal(old.Protocol) {
		input := &networkmonitor.UpdateProbeInput{
			MonitorName: fwflex.StringFromFramework(ctx, new.MonitorName),
			ProbeId:     fwflex.StringFromFramework(ctx, new.ProbeID),
		}

		if !new.Destination.Equal(old.Destination) {
			input.Destination = fwflex.StringFromFramework(ctx, new.Destination)
		}
		if !new.DestinationPort.Equal(old.DestinationPort) {
			input.DestinationPort = fwflex.Int32FromFrameworkInt64(ctx, new.DestinationPort)
		}
		if !new.PacketSize.Equal(old.PacketSize) {
			input.PacketSize = fwflex.Int32FromFrameworkInt64(ctx, new.PacketSize)
		}
		if !new.Protocol.Equal(old.Protocol) {
			input.Protocol = new.Protocol.ValueEnum()
		}

		_, err := conn.UpdateProbe(ctx, input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating CloudWatch Network Monitor Probe (%s)", new.ID.String()), err.Error())

			return
		}

		outputGP, err := waitProbeReady(ctx, conn, new.MonitorName.ValueString(), new.ProbeID.ValueString())

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for CloudWatch Network Monitor Probe (%s) update", new.ID.ValueString()), err.Error())

			return
		}

		// Set values for unknowns.
		new.AddressFamily = fwtypes.StringEnumValue(outputGP.AddressFamily)
	} else {
		new.AddressFamily = old.AddressFamily
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
