package github.com/hashicorp/terraform-provider-aws/internal/service/networkmonitor
import (
	"context"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmonitor"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmonitor/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *probeResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data probeResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().NetworkMonitorClient(ctx)

	probeInput := &awstypes.ProbeInput{}
	response.Diagnostics.Append(fwflex.Expand(ctx, data, probeInput)...)
	if response.Diagnostics.HasError() {
		return
	}

	input := &networkmonitor.CreateProbeInput{
		ClientToken: aws.String(id.UniqueId()),
		MonitorName: fwflex.StringFromFramework(ctx, data.MonitorName),
		Probe:       probeInput,
		Tags:        getTagsIn(ctx),
	}

	outputCP, err := conn.CreateProbe(ctx, input)

	if err != nil {
		response.Diagnostics.AddError("creating CloudWatch Network Monitor Probe (%s)", err.Error())

		return
	}

	// Set values for unknowns.
	data.ProbeARN = fwflex.StringToFramework(ctx, outputCP.ProbeArn)
	data.ProbeID = fwflex.StringToFramework(ctx, outputCP.ProbeId)
	id, err := data.setID()
	if err != nil {
		response.Diagnostics.AddError("creating CloudWatch Network Monitor Probe (%s)", err.Error())
		return
	}
	data.ID = types.StringValue(id)

	outputGP, err := waitProbeReady(ctx, conn, data.MonitorName.ValueString(), data.ProbeID.ValueString())

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("waiting for CloudWatch Network Monitor Probe (%s) create", data.ID.ValueString()), err.Error())

		return
	}

	// Set values for unknowns.
	data.AddressFamily = fwtypes.StringEnumValue(outputGP.AddressFamily)
	if data.PacketSize.IsUnknown() {
		data.PacketSize = fwflex.Int32ToFrameworkInt64(ctx, outputGP.PacketSize)
	}
	data.VpcID = fwflex.StringToFramework(ctx, outputGP.VpcId)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
