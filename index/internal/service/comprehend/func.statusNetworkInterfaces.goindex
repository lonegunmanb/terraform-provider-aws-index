package github.com/hashicorp/terraform-provider-aws/internal/service/comprehend
import (
	"context"
	"strings"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/comprehend/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func statusNetworkInterfaces(ctx context.Context, conn *ec2.Client, initialENIs map[string]bool, securityGroups []string, subnets []string) retry.StateRefreshFunc {
	return func() (any, string, error) {
		out, err := findNetworkInterfaces(ctx, conn, securityGroups, subnets)
		if err != nil {
			return nil, "", err
		}

		var added ec2types.NetworkInterface
		for _, v := range out {
			if _, ok := initialENIs[aws.ToString(v.NetworkInterfaceId)]; !ok {
				added = v
				break
			}
		}

		if added.NetworkInterfaceId == nil {
			return nil, "", nil
		}

		return added, string(added.Status), nil
	}
}
