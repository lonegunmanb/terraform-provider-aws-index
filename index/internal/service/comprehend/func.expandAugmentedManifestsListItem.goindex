package github.com/hashicorp/terraform-provider-aws/internal/service/comprehend
import (
	"context"
	"strings"
	"sync"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/comprehend/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAugmentedManifestsListItem(tfMap map[string]any) *types.AugmentedManifestsListItem {
	if tfMap == nil {
		return nil
	}

	a := &types.AugmentedManifestsListItem{
		AttributeNames: flex.ExpandStringValueList(tfMap["attribute_names"].([]any)),
		S3Uri:          aws.String(tfMap["s3_uri"].(string)),
		DocumentType:   types.AugmentedManifestsDocumentTypeFormat(tfMap["document_type"].(string)),
		Split:          types.Split(tfMap["split"].(string)),
	}

	if v, ok := tfMap["annotation_data_s3_uri"].(string); ok && v != "" {
		a.AnnotationDataS3Uri = aws.String(v)
	}

	if v, ok := tfMap["source_documents_s3_uri"].(string); ok && v != "" {
		a.SourceDocumentsS3Uri = aws.String(v)
	}

	return a
}
