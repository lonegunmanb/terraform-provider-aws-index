package github.com/hashicorp/terraform-provider-aws/internal/service/lexv2models
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lexmodelsv2/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *intentResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	slotPriorityLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[SlotPriority](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrPriority: schema.Int64Attribute{
					Required: true,
				},
				"slot_id": schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	sampleUtteranceLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[SampleUtterance](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"utterance": schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	outputContextLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(10),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[OutputContext](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrName: schema.StringAttribute{
					Required: true,
				},
				"time_to_live_in_seconds": schema.Int64Attribute{
					Required: true,
				},
				"turns_to_live": schema.Int64Attribute{
					Required: true,
				},
			},
		},
	}

	kendraConfigurationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[KendraConfiguration](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"kendra_index": schema.StringAttribute{
					Required: true,
				},
				"query_filter_string": schema.StringAttribute{
					Optional: true,
				},
				"query_filter_string_enabled": schema.BoolAttribute{
					Optional: true,
				},
			},
		},
	}

	customPayloadLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[CustomPayload](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrValue: schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	buttonLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[Button](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"text": schema.StringAttribute{
					Required: true,
				},
				names.AttrValue: schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	imageResponseCardLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[ImageResponseCard](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"image_url": schema.StringAttribute{
					Optional: true,
				},
				"subtitle": schema.StringAttribute{
					Optional: true,
				},
				"title": schema.StringAttribute{
					Required: true,
				},
			},
			Blocks: map[string]schema.Block{
				"button": buttonLNB,
			},
		},
	}

	plainTextMessageLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[PlainTextMessage](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrValue: schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	ssmlMessageLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[SSMLMessage](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrValue: schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	messageNBO := schema.NestedBlockObject{
		Blocks: map[string]schema.Block{
			"custom_payload":      customPayloadLNB,
			"image_response_card": imageResponseCardLNB,
			"plain_text_message":  plainTextMessageLNB,
			"ssml_message":        ssmlMessageLNB,
		},
	}

	messageGroupLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtLeast(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[MessageGroup](ctx),
		NestedObject: schema.NestedBlockObject{
			Blocks: map[string]schema.Block{
				names.AttrMessage: schema.ListNestedBlock{
					Validators: []validator.List{
						listvalidator.SizeBetween(1, 1),
					},
					CustomType:   fwtypes.NewListNestedObjectTypeOf[Message](ctx),
					NestedObject: messageNBO,
				},
				"variation": schema.ListNestedBlock{
					CustomType:   fwtypes.NewListNestedObjectTypeOf[Message](ctx),
					NestedObject: messageNBO,
				},
			},
		},
	}

	slotValueLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[SlotValue](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"interpreted_value": schema.StringAttribute{
					Optional: true,
					Validators: []validator.String{
						stringvalidator.LengthAtLeast(1),
					},
				},
			},
		},
	}

	slotValueOverrideLNB := schema.SetNestedBlock{
		CustomType: fwtypes.NewSetNestedObjectTypeOf[SlotValueOverride](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{ // nosemgrep:ci.semgrep.framework.map_block_key-meaningful-names
				"map_block_key": schema.StringAttribute{
					Required: true,
				},
				"shape": schema.StringAttribute{
					Optional:   true,
					CustomType: fwtypes.StringEnumType[awstypes.SlotShape](),
				},
			},
			Blocks: map[string]schema.Block{
				names.AttrValue: slotValueLNB,
			},
		},
	}

	// slotValueOverrideLNB.NestedObject.Blocks["values"] = slotValueOverrideLNB // recursive type, purposely left out, future feature

	dialogActionLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[DialogAction](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrType: schema.StringAttribute{
					Required:   true,
					CustomType: fwtypes.StringEnumType[awstypes.DialogActionType](),
				},
				"slot_to_elicit": schema.StringAttribute{
					Optional: true,
				},
				"suppress_next_message": schema.BoolAttribute{
					Optional: true,
				},
			},
		},
	}

	intentOverrideLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[IntentOverride](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrName: schema.StringAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"slot": slotValueOverrideLNB,
			},
		},
	}

	dialogStateNBO := schema.NestedBlockObject{
		Attributes: map[string]schema.Attribute{
			"session_attributes": schema.MapAttribute{
				ElementType: types.StringType,
				CustomType:  fwtypes.NewMapTypeOf[types.String](ctx),
				Optional:    true,
			},
		},
		Blocks: map[string]schema.Block{
			"dialog_action": dialogActionLNB,
			"intent":        intentOverrideLNB,
		},
	}

	responseSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[ResponseSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"allow_interrupt": schema.BoolAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"message_group": messageGroupLNB,
			},
		},
	}

	conditionLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeBetween(1, 1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[Condition](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"expression_string": schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	conditionalBranchLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtLeast(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[ConditionalBranch](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrName: schema.StringAttribute{
					Required: true,
				},
			},
			Blocks: map[string]schema.Block{
				names.AttrCondition: conditionLNB,
				"next_step": schema.ListNestedBlock{
					Validators: []validator.List{
						listvalidator.SizeBetween(1, 1),
					},
					CustomType:   fwtypes.NewListNestedObjectTypeOf[DialogState](ctx),
					NestedObject: dialogStateNBO,
				},
				"response": responseSpecificationLNB,
			},
		},
	}

	nextStepLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType:   fwtypes.NewListNestedObjectTypeOf[DialogState](ctx),
		NestedObject: dialogStateNBO,
	}

	defaultBranchLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeBetween(1, 1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[DefaultConditionalBranch](ctx),
		NestedObject: schema.NestedBlockObject{
			Blocks: map[string]schema.Block{
				"next_step": nextStepLNB,
				"response":  responseSpecificationLNB,
			},
		},
	}

	conditionalSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[ConditionalSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Required: true,
				},
			},
			Blocks: map[string]schema.Block{
				"conditional_branch": conditionalBranchLNB,
				"default_branch":     defaultBranchLNB,
			},
		},
	}

	closingSettingLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[IntentClosingSetting](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"closing_response": responseSpecificationLNB,
				"conditional":      conditionalSpecificationLNB,
				"next_step":        nextStepLNB,
			},
		},
	}

	inputContextLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(5),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[InputContext](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrName: schema.StringAttribute{
					Required: true,
				},
			},
		},
	}

	allowedInputTypesLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeBetween(1, 1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[AllowedInputTypes](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"allow_audio_input": schema.BoolAttribute{
					Required: true,
				},
				"allow_dtmf_input": schema.BoolAttribute{
					Required: true,
				},
			},
		},
	}

	audioSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[AudioSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"end_timeout_ms": schema.Int64Attribute{
					Required: true,
					Validators: []validator.Int64{
						int64validator.AtLeast(1),
					},
				},
				"max_length_ms": schema.Int64Attribute{
					Required: true,
					Validators: []validator.Int64{
						int64validator.AtLeast(1),
					},
				},
			},
		},
	}

	dtmfSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[DTMFSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"deletion_character": schema.StringAttribute{
					Required: true,
					Validators: []validator.String{
						stringvalidator.RegexMatches(
							regexache.MustCompile(`^[A-D0-9#*]{1}$`),
							"alphanumeric characters",
						),
					},
				},
				"end_character": schema.StringAttribute{
					Required: true,
					Validators: []validator.String{
						stringvalidator.RegexMatches(
							regexache.MustCompile(`^[A-D0-9#*]{1}$`),
							"alphanumeric characters",
						),
					},
				},
				"end_timeout_ms": schema.Int64Attribute{
					Required: true,
					Validators: []validator.Int64{
						int64validator.AtLeast(1),
					},
				},
				"max_length": schema.Int64Attribute{
					Required: true,
					Validators: []validator.Int64{
						int64validator.Between(1, 1024),
					},
				},
			},
		},
	}

	audioAndDTMFInputSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[AudioAndDTMFInputSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"start_timeout_ms": schema.Int64Attribute{
					Required: true,
					Validators: []validator.Int64{
						int64validator.AtLeast(1),
					},
				},
			},
			Blocks: map[string]schema.Block{
				"audio_specification": audioSpecificationLNB,
				"dtmf_specification":  dtmfSpecificationLNB,
			},
		},
	}

	textInputSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[TextInputSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"start_timeout_ms": schema.Int64Attribute{
					Required: true,
					//Min:       1,
				},
			},
		},
	}

	promptAttemptsSpecificationLNB := schema.SetNestedBlock{
		Validators: []validator.Set{
			setvalidator.SizeAtMost(6),
		},
		CustomType: fwtypes.NewSetNestedObjectTypeOf[PromptAttemptsSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{ // nosemgrep:ci.semgrep.framework.map_block_key-meaningful-names
				"map_block_key": schema.StringAttribute{
					Required:   true,
					CustomType: fwtypes.StringEnumType[PromptAttemptsType](),
				},
				"allow_interrupt": schema.BoolAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"allowed_input_types":                allowedInputTypesLNB,
				"audio_and_dtmf_input_specification": audioAndDTMFInputSpecificationLNB,
				"text_input_specification":           textInputSpecificationLNB,
			},
		},
	}

	promptSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeBetween(1, 1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[PromptSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"allow_interrupt": schema.BoolAttribute{
					Optional: true,
				},
				"max_retries": schema.Int64Attribute{
					Required: true,
				},
				"message_selection_strategy": schema.StringAttribute{
					Optional:   true,
					CustomType: fwtypes.StringEnumType[awstypes.MessageSelectionStrategy](),
				},
			},
			Blocks: map[string]schema.Block{
				"message_group":                 messageGroupLNB,
				"prompt_attempts_specification": promptAttemptsSpecificationLNB,
			},
		},
	}

	failureSuccessTimeoutNBO := schema.NestedBlockObject{
		Blocks: map[string]schema.Block{
			"failure_conditional": conditionalSpecificationLNB,
			"failure_next_step":   nextStepLNB,
			"failure_response":    responseSpecificationLNB,
			"success_conditional": conditionalSpecificationLNB,
			"success_next_step":   nextStepLNB,
			"success_response":    responseSpecificationLNB,
			"timeout_conditional": conditionalSpecificationLNB,
			"timeout_next_step":   nextStepLNB,
			"timeout_response":    responseSpecificationLNB,
		},
	}

	postCodeHookSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeBetween(1, 1),
		},
		CustomType:   fwtypes.NewListNestedObjectTypeOf[FailureSuccessTimeout](ctx),
		NestedObject: failureSuccessTimeoutNBO,
	}

	codeHookLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[DialogCodeHookInvocationSetting](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Required: true,
				},
				"enable_code_hook_invocation": schema.BoolAttribute{
					Required: true,
				},
				"invocation_label": schema.StringAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"post_code_hook_specification": postCodeHookSpecificationLNB,
			},
		},
	}

	elicitationCodeHookInvocationSettingLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[ElicitationCodeHookInvocationSetting](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"enable_code_hook_invocation": schema.BoolAttribute{
					Optional: true,
				},
				"invocation_label": schema.StringAttribute{
					Optional: true,
				},
			},
		},
	}

	confirmationSettingLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[IntentConfirmationSetting](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"code_hook":                codeHookLNB,
				"confirmation_conditional": conditionalSpecificationLNB,
				"confirmation_next_step":   nextStepLNB,
				"confirmation_response":    responseSpecificationLNB,
				"declination_conditional":  conditionalSpecificationLNB,
				"declination_next_step":    nextStepLNB,
				"declination_response":     responseSpecificationLNB,
				"elicitation_code_hook":    elicitationCodeHookInvocationSettingLNB,
				"failure_conditional":      conditionalSpecificationLNB,
				"failure_next_step":        nextStepLNB,
				"failure_response":         responseSpecificationLNB,
				"prompt_specification":     promptSpecificationLNB,
			},
		},
	}

	initialResponseSettingLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[InitialResponseSetting](ctx),
		NestedObject: schema.NestedBlockObject{
			Blocks: map[string]schema.Block{
				"code_hook":        codeHookLNB,
				"conditional":      conditionalSpecificationLNB,
				"initial_response": responseSpecificationLNB,
				"next_step":        nextStepLNB,
			},
		},
	}

	updateResponseLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[FulfillmentUpdateResponseSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"allow_interrupt": schema.BoolAttribute{
					Optional: true,
				},
				"frequency_in_seconds": schema.Int64Attribute{
					Required: true,
				},
			},
			Blocks: map[string]schema.Block{
				"message_group": messageGroupLNB,
			},
		},
	}

	startResponseLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[FulfillmentStartResponseSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"allow_interrupt": schema.BoolAttribute{
					Optional: true,
				},
				"delay_in_seconds": schema.Int64Attribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"message_group": messageGroupLNB,
			},
		},
	}

	fulfillmentUpdatesSpecificationLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[FulfillmentUpdatesSpecification](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Required: true,
				},
				"timeout_in_seconds": schema.Int64Attribute{
					Optional: true,
				},
			},
			Blocks: map[string]schema.Block{
				"start_response":  startResponseLNB,
				"update_response": updateResponseLNB,
			},
		},
	}

	fulfillmentCodeHookLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[FulfillmentCodeHookSettings](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				"active": schema.BoolAttribute{
					Optional: true,
				},
				names.AttrEnabled: schema.BoolAttribute{
					Required: true,
				},
			},
			Blocks: map[string]schema.Block{
				"fulfillment_updates_specification": fulfillmentUpdatesSpecificationLNB,
				"post_fulfillment_status_specification": schema.ListNestedBlock{
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
					},
					CustomType:   fwtypes.NewListNestedObjectTypeOf[FailureSuccessTimeout](ctx),
					NestedObject: failureSuccessTimeoutNBO,
				},
			},
		},
	}

	dialogCodeHookLNB := schema.ListNestedBlock{
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		CustomType: fwtypes.NewListNestedObjectTypeOf[DialogCodeHookSettings](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrEnabled: schema.BoolAttribute{
					Required: true,
				},
			},
		},
	}

	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bot_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"bot_version": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"creation_date_time": schema.StringAttribute{
				Computed:   true,
				CustomType: timetypes.RFC3339Type{},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrDescription: schema.StringAttribute{
				Optional: true,
			},
			names.AttrID: framework.IDAttribute(),
			"intent_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"last_updated_date_time": schema.StringAttribute{
				Computed:   true,
				CustomType: timetypes.RFC3339Type{},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"locale_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrName: schema.StringAttribute{
				Required: true,
			},
			"parent_intent_signature": schema.StringAttribute{
				Optional: true,
			},
		},
		Blocks: map[string]schema.Block{
			"dialog_code_hook":         dialogCodeHookLNB,
			"fulfillment_code_hook":    fulfillmentCodeHookLNB,
			"initial_response_setting": initialResponseSettingLNB,
			"input_context":            inputContextLNB,
			"closing_setting":          closingSettingLNB,
			"confirmation_setting":     confirmationSettingLNB,
			"kendra_configuration":     kendraConfigurationLNB,
			"output_context":           outputContextLNB,
			"sample_utterance":         sampleUtteranceLNB,
			"slot_priority":            slotPriorityLNB,
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}
