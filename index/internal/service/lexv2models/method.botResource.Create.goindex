package github.com/hashicorp/terraform-provider-aws/internal/service/lexv2models
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelsv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lexmodelsv2/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *botResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data botResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().LexV2ModelsClient(ctx)

	name := fwflex.StringValueFromFramework(ctx, data.BotName)
	var input lexmodelsv2.CreateBotInput
	response.Diagnostics.Append(fwflex.Expand(ctx, data, &input)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Additional fields.
	input.BotTags = getTagsIn(ctx)

	output, err := conn.CreateBot(ctx, &input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating Lex v2 Bot (%s)", name), err.Error())

		return
	}

	// Set values for unknowns.
	botID := aws.ToString(output.BotId)
	data.ARN = fwflex.StringValueToFramework(ctx, r.botARN(ctx, botID))
	data.BotID = fwflex.StringValueToFramework(ctx, botID)
	data.BotType = fwtypes.StringEnumValue(output.BotType)

	if _, err := waitBotCreated(ctx, conn, botID, r.CreateTimeout(ctx, data.Timeouts)); err != nil {
		response.State.SetAttribute(ctx, path.Root(names.AttrID), data.BotID) // Set 'id' so as to taint the resource.
		response.Diagnostics.AddError(fmt.Sprintf("waiting for Lex v2 Bot (%s) create", botID), err.Error())

		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
