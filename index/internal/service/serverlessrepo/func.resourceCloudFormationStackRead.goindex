package github.com/hashicorp/terraform-provider-aws/internal/service/serverlessrepo
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"fmt"
	"log"
	"slices"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	cloudformationtypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	serverlessrepo "github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository"
	awstypes "github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfcloudformation "github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCloudFormationStackRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	serverlessConn := meta.(*conns.AWSClient).ServerlessRepoClient(ctx)
	cfConn := meta.(*conns.AWSClient).CloudFormationClient(ctx)

	stack, err := tfcloudformation.FindStackByName(ctx, cfConn, d.Id())

	if tfresource.NotFound(err) {
		log.Printf("[WARN] Serverless Application Repository CloudFormation Stack (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "describing Serverless Application Repository CloudFormation Stack (%s): %s", d.Id(), err)
	}

	// Serverless Application Repo prefixes the stack name with "serverlessrepo-", so remove it from the saved string
	stackName := strings.TrimPrefix(aws.ToString(stack.StackName), CloudFormationStackNamePrefix)
	d.Set(names.AttrName, &stackName)

	tags := tfcloudformation.KeyValueTags(ctx, stack.Tags)
	var applicationID, semanticVersion string
	if v, ok := tags[cloudFormationStackTagApplicationID]; ok {
		applicationID = aws.ToString(v.Value)
		d.Set(names.AttrApplicationID, applicationID)
	} else {
		return sdkdiag.AppendErrorf(diags, "describing Serverless Application Repository CloudFormation Stack (%s): missing required tag \"%s\"", d.Id(), cloudFormationStackTagApplicationID)
	}
	if v, ok := tags[cloudFormationStackTagSemanticVersion]; ok {
		semanticVersion = aws.ToString(v.Value)
		d.Set("semantic_version", semanticVersion)
	} else {
		return sdkdiag.AppendErrorf(diags, "describing Serverless Application Repository CloudFormation Stack (%s): missing required tag \"%s\"", d.Id(), cloudFormationStackTagSemanticVersion)
	}

	setTagsOut(ctx, svcTags(tags))

	if err = d.Set("outputs", flattenCloudFormationOutputs(stack.Outputs)); err != nil {
		return sdkdiag.AppendErrorf(diags, "to set outputs: %s", err)
	}

	getApplicationOutput, err := findApplication(ctx, serverlessConn, applicationID, semanticVersion)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "getting Serverless Application Repository application (%s, v%s): %s", applicationID, semanticVersion, err)
	}

	if getApplicationOutput == nil || getApplicationOutput.Version == nil {
		return sdkdiag.AppendErrorf(diags, "getting Serverless Application Repository application (%s, v%s): empty response", applicationID, semanticVersion)
	}

	version := getApplicationOutput.Version

	if err = d.Set(names.AttrParameters, flattenNonDefaultCloudFormationParameters(stack.Parameters, version.ParameterDefinitions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "to set parameters: %s", err)
	}

	if err = d.Set("capabilities", flattenStackCapabilities(stack.Capabilities, version.RequiredCapabilities)); err != nil {
		return sdkdiag.AppendErrorf(diags, "to set capabilities: %s", err)
	}

	return diags
}
