package github.com/hashicorp/terraform-provider-aws/internal/service/datasync
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datasync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datasync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLocationHDFSCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DataSyncClient(ctx)

	input := &datasync.CreateLocationHdfsInput{
		AgentArns:          flex.ExpandStringValueSet(d.Get("agent_arns").(*schema.Set)),
		AuthenticationType: awstypes.HdfsAuthenticationType(d.Get("authentication_type").(string)),
		NameNodes:          expandHDFSNameNodes(d.Get("name_node").(*schema.Set)),
		Subdirectory:       aws.String(d.Get("subdirectory").(string)),
		Tags:               getTagsIn(ctx),
	}

	if v, ok := d.GetOk("block_size"); ok {
		input.BlockSize = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("kerberos_keytab"); ok {
		input.KerberosKeytab = []byte(v.(string))
	} else if v, ok := d.GetOk("kerberos_keytab_base64"); ok {
		v := v.(string)
		b, err := itypes.Base64Decode(v)
		if err != nil {
			b = []byte(v)
		}
		input.KerberosKeytab = b
	}

	if v, ok := d.GetOk("kerberos_krb5_conf"); ok {
		input.KerberosKrb5Conf = []byte(v.(string))
	} else if v, ok := d.GetOk("kerberos_krb5_conf_base64"); ok {
		v := v.(string)
		b, err := itypes.Base64Decode(v)
		if err != nil {
			b = []byte(v)
		}
		input.KerberosKrb5Conf = b
	}

	if v, ok := d.GetOk("kerberos_principal"); ok {
		input.KerberosPrincipal = aws.String(v.(string))
	}

	if v, ok := d.GetOk("kms_key_provider_uri"); ok {
		input.KmsKeyProviderUri = aws.String(v.(string))
	}

	if v, ok := d.GetOk("qop_configuration"); ok && len(v.([]any)) > 0 {
		input.QopConfiguration = expandHDFSQOPConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("replication_factor"); ok {
		input.ReplicationFactor = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("simple_user"); ok {
		input.SimpleUser = aws.String(v.(string))
	}

	output, err := conn.CreateLocationHdfs(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating DataSync Location HDFS: %s", err)
	}

	d.SetId(aws.ToString(output.LocationArn))

	return append(diags, resourceLocationHDFSRead(ctx, d, meta)...)
}
