package github.com/hashicorp/terraform-provider-aws/internal/service/datasync
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datasync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datasync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLocationAzureBlobUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DataSyncClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &datasync.UpdateLocationAzureBlobInput{
			LocationArn: aws.String(d.Id()),
		}

		if d.HasChange("access_tier") {
			input.AccessTier = awstypes.AzureAccessTier(d.Get("access_tier").(string))
		}

		if d.HasChange("agent_arns") {
			input.AgentArns = flex.ExpandStringValueSet(d.Get("agent_arns").(*schema.Set))
		}

		if d.HasChange("authentication_type") {
			input.AuthenticationType = awstypes.AzureBlobAuthenticationType(d.Get("authentication_type").(string))
		}

		if d.HasChange("blob_type") {
			input.BlobType = awstypes.AzureBlobType(d.Get("blob_type").(string))
		}

		if d.HasChange("sas_configuration") {
			input.SasConfiguration = expandAzureBlobSasConfiguration(d.Get("sas_configuration").([]any))
		}

		if d.HasChange("subdirectory") {
			input.Subdirectory = aws.String(d.Get("subdirectory").(string))
		}

		_, err := conn.UpdateLocationAzureBlob(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating DataSync Location Microsoft Azure Blob Storage (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceLocationAzureBlobRead(ctx, d, meta)...)
}
