package github.com/hashicorp/terraform-provider-aws/internal/service/datasync
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datasync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datasync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLocationAzureBlob() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceLocationAzureBlobCreate,
		ReadWithoutTimeout:   resourceLocationAzureBlobRead,
		UpdateWithoutTimeout: resourceLocationAzureBlobUpdate,
		DeleteWithoutTimeout: resourceLocationAzureBlobDelete,

		Schema: map[string]*schema.Schema{
			"access_tier": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.AzureAccessTierHot,
				ValidateDiagFunc: enum.Validate[awstypes.AzureAccessTier](),
			},
			"agent_arns": {
				Type:     schema.TypeSet,
				Required: true,
				Elem: &schema.Schema{
					Type:         schema.TypeString,
					ValidateFunc: verify.ValidARN,
				},
			},
			names.AttrARN: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"authentication_type": {
				Type:             schema.TypeString,
				Required:         true,
				ValidateDiagFunc: enum.Validate[awstypes.AzureBlobAuthenticationType](),
			},
			"blob_type": {
				Type:             schema.TypeString,
				Optional:         true,
				Default:          awstypes.AzureBlobTypeBlock,
				ValidateDiagFunc: enum.Validate[awstypes.AzureBlobType](),
			},
			"container_url": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"sas_configuration": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"token": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
			"subdirectory": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				// Ignore missing trailing slash
				DiffSuppressFunc: func(k, old, new string, d *schema.ResourceData) bool {
					if new == "/" {
						return false
					}
					if strings.TrimSuffix(old, "/") == strings.TrimSuffix(new, "/") {
						return true
					}
					return false
				},
			},
			names.AttrTags:    tftags.TagsSchema(),
			names.AttrTagsAll: tftags.TagsSchemaComputed(),
			names.AttrURI: {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}
