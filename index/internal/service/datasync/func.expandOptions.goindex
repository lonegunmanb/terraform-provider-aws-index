package github.com/hashicorp/terraform-provider-aws/internal/service/datasync
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datasync"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datasync/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandOptions(l []any) *awstypes.Options {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	m := l[0].(map[string]any)

	options := &awstypes.Options{
		Atime:                awstypes.Atime(m["atime"].(string)),
		Gid:                  awstypes.Gid(m["gid"].(string)),
		LogLevel:             awstypes.LogLevel(m["log_level"].(string)),
		Mtime:                awstypes.Mtime(m["mtime"].(string)),
		ObjectTags:           awstypes.ObjectTags(m["object_tags"].(string)),
		OverwriteMode:        awstypes.OverwriteMode(m["overwrite_mode"].(string)),
		PreserveDeletedFiles: awstypes.PreserveDeletedFiles(m["preserve_deleted_files"].(string)),
		PreserveDevices:      awstypes.PreserveDevices(m["preserve_devices"].(string)),
		PosixPermissions:     awstypes.PosixPermissions(m["posix_permissions"].(string)),
		TaskQueueing:         awstypes.TaskQueueing(m["task_queueing"].(string)),
		TransferMode:         awstypes.TransferMode(m["transfer_mode"].(string)),
		Uid:                  awstypes.Uid(m["uid"].(string)),
		VerifyMode:           awstypes.VerifyMode(m["verify_mode"].(string)),
	}

	if v, ok := m["bytes_per_second"].(int); ok && v != 0 {
		options.BytesPerSecond = aws.Int64(int64(v))
	}

	if v, ok := m["security_descriptor_copy_flags"].(string); ok && v != "" {
		options.SecurityDescriptorCopyFlags = awstypes.SmbSecurityDescriptorCopyFlags(v)
	}

	return options
}
