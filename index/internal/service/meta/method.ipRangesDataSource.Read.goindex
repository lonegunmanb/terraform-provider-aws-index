package github.com/hashicorp/terraform-provider-aws/internal/service/meta
import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"slices"
	"strconv"
	"strings"

	cleanhttp "github.com/hashicorp/go-cleanhttp"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *ipRangesDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data ipRangesDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	var url string
	if data.URL.IsNull() {
		// Data sources make no use of AttributePlanModifiers to set default values.
		url = "https://ip-ranges.amazonaws.com/ip-ranges.json"
	} else {
		url = data.URL.ValueString()
	}

	bytes, err := readAll(ctx, url)
	if err != nil {
		response.Diagnostics.AddError("downloading IP ranges", err.Error())

		return
	}

	ipRanges := new(ipRanges)
	if err := json.Unmarshal(bytes, ipRanges); err != nil {
		response.Diagnostics.AddError("parsing JSON", err.Error())

		return
	}

	syncToken, err := strconv.Atoi(ipRanges.SyncToken)
	if err != nil {
		response.Diagnostics.AddError("parsing SyncToken", err.Error())

		return
	}

	regions := tfslices.ApplyToAll(fwflex.ExpandFrameworkStringValueSet(ctx, data.Regions), strings.ToLower)
	services := tfslices.ApplyToAll(fwflex.ExpandFrameworkStringValueSet(ctx, data.Services), strings.ToLower)
	matchFilter := func(region, service string) bool {
		matchRegion := len(regions) == 0 || slices.Contains(regions, strings.ToLower(region))
		matchService := slices.Contains(services, strings.ToLower(service))

		return matchRegion && matchService
	}

	var ipv4Prefixes []string
	for _, v := range ipRanges.IPv4Prefixes {
		if matchFilter(v.Region, v.Service) {
			ipv4Prefixes = append(ipv4Prefixes, v.Prefix)
		}
	}
	slices.Sort(ipv4Prefixes)

	var ipv6Prefixes []string
	for _, v := range ipRanges.IPv6Prefixes {
		if matchFilter(v.Region, v.Service) {
			ipv6Prefixes = append(ipv6Prefixes, v.Prefix)
		}
	}
	slices.Sort(ipv6Prefixes)

	data.CreateDate = fwflex.StringValueToFrameworkLegacy(ctx, ipRanges.CreateDate)
	data.ID = fwflex.StringValueToFrameworkLegacy(ctx, ipRanges.SyncToken)
	data.IPv4CIDRBlocks = fwflex.FlattenFrameworkStringValueListOfStringLegacy(ctx, ipv4Prefixes)
	data.IPv6CIDRBlocks = fwflex.FlattenFrameworkStringValueListOfStringLegacy(ctx, ipv6Prefixes)
	data.SyncToken = types.Int64Value(int64(syncToken))
	data.URL = fwflex.StringValueToFrameworkLegacy(ctx, url)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
