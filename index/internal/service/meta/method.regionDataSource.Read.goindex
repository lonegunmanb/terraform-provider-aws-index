package github.com/hashicorp/terraform-provider-aws/internal/service/meta
import (
	"context"
	"fmt"
	"net/url"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-framework-validators/datasourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *regionDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data regionDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	var region *endpoints.Region

	if !data.Endpoint.IsNull() {
		endpoint := data.Endpoint.ValueString()
		matchingRegion, err := findRegionByEC2Endpoint(ctx, endpoint)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("finding Region by endpoint (%s)", endpoint), err.Error())

			return
		}

		region = matchingRegion
	}

	var name string
	if !data.Region.IsNull() {
		name = data.Region.ValueString()
	} else if !data.Name.IsNull() {
		name = data.Name.ValueString()
	}
	if name != "" {
		matchingRegion, err := findRegionByName(ctx, name)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("finding Region by name (%s)", name), err.Error())

			return
		}

		if region != nil && region.ID() != matchingRegion.ID() {
			response.Diagnostics.AddError("multiple Regions matched", "use additional constraints to reduce matches to a single Region")

			return
		}

		region = matchingRegion
	}

	// Default to provider current Region if no other filters matched.
	if region == nil {
		name := d.Meta().Region(ctx)
		matchingRegion, err := findRegionByName(ctx, name)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("finding Region by name (%s)", name), err.Error())

			return
		}

		region = matchingRegion
	}

	regionEndpointEC2, err := ec2Endpoint(ctx, region)

	if err != nil {
		response.Diagnostics.AddError("resolving EC2 endpoint", err.Error())

		return
	}

	data.Description = fwflex.StringValueToFrameworkLegacy(ctx, region.Description())
	data.Endpoint = fwflex.StringValueToFrameworkLegacy(ctx, regionEndpointEC2.Host)
	data.ID = fwflex.StringValueToFrameworkLegacy(ctx, region.ID())
	data.Name = fwflex.StringValueToFrameworkLegacy(ctx, region.ID())
	data.Region = fwflex.StringValueToFrameworkLegacy(ctx, region.ID())

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
