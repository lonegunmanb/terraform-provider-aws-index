package github.com/hashicorp/terraform-provider-aws/internal/service/meta
import (
	"context"
	"fmt"

	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *servicePrincipalDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data servicePrincipalDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	name := d.Meta().Region(ctx)
	region, err := findRegionByName(ctx, name)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("finding Region by name (%s)", name), err.Error())

		return
	}

	regionID := region.ID()
	serviceName := fwflex.StringValueFromFramework(ctx, data.ServiceName)
	sourceServicePrincipal := servicePrincipalNameForPartition(serviceName, names.PartitionForRegion(regionID))

	data.ID = fwflex.StringValueToFrameworkLegacy(ctx, serviceName+"."+regionID+"."+sourceServicePrincipal)
	data.Name = fwflex.StringValueToFrameworkLegacy(ctx, serviceName+"."+sourceServicePrincipal)
	data.Suffix = fwflex.StringValueToFrameworkLegacy(ctx, sourceServicePrincipal)
	data.Region = fwflex.StringValueToFrameworkLegacy(ctx, regionID)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
