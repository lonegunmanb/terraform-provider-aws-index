package github.com/hashicorp/terraform-provider-aws/internal/service/cur
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	cur "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	"github.com/aws/aws-sdk-go-v2/service/costandusagereportservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReportDefinitionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CURClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		additionalArtifacts := flex.ExpandStringyValueSet[types.AdditionalArtifact](d.Get("additional_artifacts").(*schema.Set))
		compression := types.CompressionFormat(d.Get("compression").(string))
		format := types.ReportFormat(d.Get(names.AttrFormat).(string))
		prefix := d.Get("s3_prefix").(string)
		reportVersioning := types.ReportVersioning(d.Get("report_versioning").(string))

		if err := checkReportDefinitionPropertyCombination(
			additionalArtifacts,
			compression,
			format,
			prefix,
			reportVersioning,
		); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &cur.ModifyReportDefinitionInput{
			ReportDefinition: &types.ReportDefinition{
				AdditionalArtifacts:      additionalArtifacts,
				AdditionalSchemaElements: flex.ExpandStringyValueSet[types.SchemaElement](d.Get("additional_schema_elements").(*schema.Set)),
				Compression:              compression,
				Format:                   format,
				RefreshClosedReports:     aws.Bool(d.Get("refresh_closed_reports").(bool)),
				ReportName:               aws.String(d.Id()),
				ReportVersioning:         reportVersioning,
				S3Bucket:                 aws.String(d.Get(names.AttrS3Bucket).(string)),
				S3Prefix:                 aws.String(prefix),
				S3Region:                 types.AWSRegion(d.Get("s3_region").(string)),
				TimeUnit:                 types.TimeUnit(d.Get("time_unit").(string)),
			},
			ReportName: aws.String(d.Id()),
		}

		_, err := conn.ModifyReportDefinition(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Cost And Usage Report Definition (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceReportDefinitionRead(ctx, d, meta)...)
}
