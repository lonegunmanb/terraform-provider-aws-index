package github.com/hashicorp/terraform-provider-aws/internal/service/cur
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	cur "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	"github.com/aws/aws-sdk-go-v2/service/costandusagereportservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReportDefinitionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CURClient(ctx)

	reportName := d.Get("report_name").(string)
	additionalArtifacts := flex.ExpandStringyValueSet[types.AdditionalArtifact](d.Get("additional_artifacts").(*schema.Set))
	compression := types.CompressionFormat(d.Get("compression").(string))
	format := types.ReportFormat(d.Get(names.AttrFormat).(string))
	prefix := d.Get("s3_prefix").(string)
	reportVersioning := types.ReportVersioning(d.Get("report_versioning").(string))

	if err := checkReportDefinitionPropertyCombination(
		additionalArtifacts,
		compression,
		format,
		prefix,
		reportVersioning,
	); err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	input := &cur.PutReportDefinitionInput{
		ReportDefinition: &types.ReportDefinition{
			AdditionalArtifacts:      additionalArtifacts,
			AdditionalSchemaElements: flex.ExpandStringyValueSet[types.SchemaElement](d.Get("additional_schema_elements").(*schema.Set)),
			Compression:              compression,
			Format:                   format,
			RefreshClosedReports:     aws.Bool(d.Get("refresh_closed_reports").(bool)),
			ReportName:               aws.String(reportName),
			ReportVersioning:         reportVersioning,
			S3Bucket:                 aws.String(d.Get(names.AttrS3Bucket).(string)),
			S3Prefix:                 aws.String(prefix),
			S3Region:                 types.AWSRegion(d.Get("s3_region").(string)),
			TimeUnit:                 types.TimeUnit(d.Get("time_unit").(string)),
		},
		Tags: getTagsIn(ctx),
	}

	_, err := conn.PutReportDefinition(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cost And Usage Report Definition (%s): %s", reportName, err)
	}

	d.SetId(reportName)

	return append(diags, resourceReportDefinitionRead(ctx, d, meta)...)
}
