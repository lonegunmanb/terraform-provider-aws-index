package github.com/hashicorp/terraform-provider-aws/internal/service/cur
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	cur "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	"github.com/aws/aws-sdk-go-v2/service/costandusagereportservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReportDefinition() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceReportDefinitionCreate,
		ReadWithoutTimeout:   resourceReportDefinitionRead,
		UpdateWithoutTimeout: resourceReportDefinitionUpdate,
		DeleteWithoutTimeout: resourceReportDefinitionDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"additional_artifacts": {
				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Schema{Type: schema.TypeString,
					ValidateDiagFunc: enum.Validate[types.AdditionalArtifact](),
				},
			},
			"additional_schema_elements": {
				Type:     schema.TypeSet,
				Required: true,
				ForceNew: true,
				Elem: &schema.Schema{
					Type:             schema.TypeString,
					ValidateDiagFunc: enum.Validate[types.SchemaElement](),
				},
			},
			names.AttrARN: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"compression": {
				Type:             schema.TypeString,
				Required:         true,
				ValidateDiagFunc: enum.Validate[types.CompressionFormat](),
			},
			names.AttrFormat: {
				Type:             schema.TypeString,
				Required:         true,
				ValidateDiagFunc: enum.Validate[types.ReportFormat](),
			},
			"refresh_closed_reports": {
				Type:     schema.TypeBool,
				Default:  true,
				Optional: true,
			},
			"report_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				ValidateFunc: validation.All(
					validation.StringLenBetween(1, 256),
					validation.StringMatch(regexache.MustCompile(`[0-9A-Za-z!\-_.*\'()]+`), "The name must be unique, is case sensitive, and can't include spaces."),
				),
			},
			"report_versioning": {
				Type:             schema.TypeString,
				ForceNew:         true,
				Optional:         true,
				Default:          types.ReportVersioningCreateNewReport,
				ValidateDiagFunc: enum.Validate[types.ReportVersioning](),
			},
			names.AttrS3Bucket: {
				Type:     schema.TypeString,
				Required: true,
			},
			"s3_prefix": {
				Type:     schema.TypeString,
				Required: true,
				ValidateFunc: validation.All(
					validation.StringLenBetween(1, 256),
					validation.StringMatch(regexache.MustCompile(`[0-9A-Za-z!\-_.*\'()]+`), "The prefix can't include invalid characters (!-_.*'()/) or spaces."),
				),
			},
			"s3_region": {
				Type:             schema.TypeString,
				Required:         true,
				ValidateDiagFunc: enum.Validate[types.AWSRegion](),
			},
			"time_unit": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				ValidateDiagFunc: enum.Validate[types.TimeUnit](),
			},
			names.AttrTags:    tftags.TagsSchema(),
			names.AttrTagsAll: tftags.TagsSchemaComputed(),
		},
	}
}
