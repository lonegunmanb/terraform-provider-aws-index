package github.com/hashicorp/terraform-provider-aws/internal/service/qbusiness
import (
	"context"
	"errors"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/qbusiness"
	awstypes "github.com/aws/aws-sdk-go-v2/service/qbusiness/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *applicationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var state, plan applicationResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !state.AttachmentsConfiguration.Equal(plan.AttachmentsConfiguration) ||
		!state.EncryptionConfiguration.Equal(plan.EncryptionConfiguration) ||
		!state.Description.Equal(plan.Description) ||
		!state.DisplayName.Equal(plan.DisplayName) ||
		!state.RoleArn.Equal(plan.RoleArn) ||
		!state.IdentityCenterInstanceArn.Equal(plan.IdentityCenterInstanceArn) {
		conn := r.Meta().QBusinessClient(ctx)

		input := &qbusiness.UpdateApplicationInput{}
		resp.Diagnostics.Append(fwflex.Expand(ctx, plan, input)...)
		if resp.Diagnostics.HasError() {
			return
		}

		_, err := conn.UpdateApplication(ctx, input)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QBusiness, create.ErrActionUpdating, ResNameApplication, plan.ApplicationId.String(), err),
				err.Error(),
			)
			return
		}

		id := plan.ApplicationId.ValueString()
		if _, err := waitApplicationActive(ctx, conn, id, r.UpdateTimeout(ctx, plan.Timeouts)); err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QBusiness, create.ErrActionWaitingForUpdate, ResNameApplication, id, err),
				err.Error(),
			)
			return
		}

		findOut, err := findApplicationByID(ctx, conn, id)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.QBusiness, create.ErrActionUpdating, ResNameApplication, id, err),
				err.Error(),
			)
			return
		}

		// Set unknown values
		resp.Diagnostics.Append(fwflex.Flatten(ctx, findOut, &plan)...)
		if resp.Diagnostics.HasError() {
			return
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}
