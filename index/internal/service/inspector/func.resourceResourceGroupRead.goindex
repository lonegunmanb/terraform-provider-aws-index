package github.com/hashicorp/terraform-provider-aws/internal/service/inspector
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/inspector"
	awstypes "github.com/aws/aws-sdk-go-v2/service/inspector/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResourceGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).InspectorClient(ctx)

	resp, err := conn.DescribeResourceGroups(ctx, &inspector.DescribeResourceGroupsInput{
		ResourceGroupArns: []string{d.Id()},
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Inspector Classic Resource Group (%s): %s", d.Id(), err)
	}

	if len(resp.ResourceGroups) == 0 {
		if failedItem, ok := resp.FailedItems[d.Id()]; ok {
			if failedItem.FailureCode == awstypes.FailedItemErrorCodeItemDoesNotExist {
				log.Printf("[WARN] Inspector Classic Resource Group (%s) not found, removing from state", d.Id())
				d.SetId("")
				return diags
			}

			return sdkdiag.AppendErrorf(diags, "reading Inspector Classic Resource Group (%s): %s", d.Id(), string(failedItem.FailureCode))
		}

		return sdkdiag.AppendErrorf(diags, "reading Inspector Classic Resource Group (%s): %v", d.Id(), resp.FailedItems)
	}

	resourceGroup := resp.ResourceGroups[0]
	d.Set(names.AttrARN, resourceGroup.Arn)

	if err := d.Set(names.AttrTags, flattenResourceGroupTags(resourceGroup.Tags)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
	}

	return diags
}
