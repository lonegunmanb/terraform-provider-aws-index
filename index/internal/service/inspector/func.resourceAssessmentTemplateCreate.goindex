package github.com/hashicorp/terraform-provider-aws/internal/service/inspector
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/inspector"
	awstypes "github.com/aws/aws-sdk-go-v2/service/inspector/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAssessmentTemplateCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).InspectorClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &inspector.CreateAssessmentTemplateInput{
		AssessmentTargetArn:    aws.String(d.Get(names.AttrTargetARN).(string)),
		AssessmentTemplateName: aws.String(name),
		DurationInSeconds:      aws.Int32(int32(d.Get(names.AttrDuration).(int))),
		RulesPackageArns:       flex.ExpandStringValueSet(d.Get("rules_package_arns").(*schema.Set)),
	}

	output, err := conn.CreateAssessmentTemplate(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Inspector Classic Assessment Template (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.AssessmentTemplateArn))

	if err := createTags(ctx, conn, d.Id(), getTagsIn(ctx)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting Inspector Classic Assessment Template (%s) tags: %s", d.Id(), err)
	}

	if v, ok := d.GetOk("event_subscription"); ok && v.(*schema.Set).Len() > 0 {
		input := expandEventSubscriptions(v.(*schema.Set).List(), output.AssessmentTemplateArn)

		if err := subscribeToEvents(ctx, conn, input); err != nil {
			return create.AppendDiagError(diags, names.Inspector, create.ErrActionCreating, ResNameAssessmentTemplate, d.Id(), err)
		}
	}

	return append(diags, resourceAssessmentTemplateRead(ctx, d, meta)...)
}
