package github.com/hashicorp/terraform-provider-aws/internal/service/costoptimizationhub
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costoptimizationhub"
	awstypes "github.com/aws/aws-sdk-go-v2/service/costoptimizationhub/types"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *enrollmentStatusResource) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data enrollmentStatusResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().CostOptimizationHubClient(ctx)

	out, err := findEnrollmentStatus(ctx, conn)
	if tfresource.NotFound(err) {
		response.Diagnostics.Append(fwdiag.NewResourceNotFoundWarningDiagnostic(err))
		response.State.RemoveResource(ctx)

		return
	}

	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.CostOptimizationHub, create.ErrActionSetting, ResNameEnrollmentStatus, data.ID.String(), err),
			err.Error(),
		)
		return
	}

	//For this Enrollment resource, The non-existence of this resource will mean status will be "Inactive"
	//So if that is the case, remove the resource from data
	if out != nil && len(out.Items) > 0 && out.Items[0].Status == "Inactive" {
		response.State.RemoveResource(ctx)
		return
	}

	// Set attributes for import.
	// A gratuitous call to Autoflex since status is in out.Items[0].Status.
	response.Diagnostics.Append(fwflex.Flatten(ctx, out, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	data.Status = fwflex.StringValueToFramework(ctx, out.Items[0].Status)

	// out includes the IncludeMemberAccounts field ATM but it is always nil. Thus, we cannot update state
	// and drift detection is not possible. (However, we can still update if the configuration changes.)
	// If drift detection becomes possible, we can uncomment the following code:

	// data.IncludeMemberAccounts = types.BoolValue(false)
	// if out.IncludeMemberAccounts != nil {
	// 	data.IncludeMemberAccounts = fwflex.BoolToFramework(ctx, out.IncludeMemberAccounts)
	// }

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
