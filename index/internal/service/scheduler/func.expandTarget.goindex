package github.com/hashicorp/terraform-provider-aws/internal/service/scheduler
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/scheduler/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTarget(ctx context.Context, tfMap map[string]any) *types.Target {
	if tfMap == nil {
		return nil
	}

	a := &types.Target{}

	if v, ok := tfMap[names.AttrARN].(string); ok && v != "" {
		a.Arn = aws.String(v)
	}

	if v, ok := tfMap["dead_letter_config"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.DeadLetterConfig = expandDeadLetterConfig(v[0].(map[string]any))
	}

	if v, ok := tfMap["ecs_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.EcsParameters = expandECSParameters(ctx, v[0].(map[string]any))
	}

	if v, ok := tfMap["eventbridge_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.EventBridgeParameters = expandEventBridgeParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["input"].(string); ok && v != "" {
		a.Input = aws.String(v)
	}

	if v, ok := tfMap["kinesis_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.KinesisParameters = expandKinesisParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap[names.AttrRoleARN].(string); ok && v != "" {
		a.RoleArn = aws.String(v)
	}

	if v, ok := tfMap["retry_policy"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.RetryPolicy = expandRetryPolicy(v[0].(map[string]any))
	}

	if v, ok := tfMap["sagemaker_pipeline_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.SageMakerPipelineParameters = expandSageMakerPipelineParameters(v[0].(map[string]any))
	}

	if v, ok := tfMap["sqs_parameters"].([]any); ok && len(v) > 0 && v[0] != nil {
		a.SqsParameters = expandSQSParameters(v[0].(map[string]any))
	}

	return a
}
