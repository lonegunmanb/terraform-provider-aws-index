package github.com/hashicorp/terraform-provider-aws/internal/service/scheduler
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/scheduler/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandECSParameters(ctx context.Context, tfMap map[string]any) *types.EcsParameters {
	if tfMap == nil {
		return nil
	}

	a := &types.EcsParameters{}

	if v, ok := tfMap[names.AttrCapacityProviderStrategy].(*schema.Set); ok && v.Len() > 0 {
		for _, s := range v.List() {
			a.CapacityProviderStrategy = append(a.CapacityProviderStrategy, expandCapacityProviderStrategyItem(s.(map[string]any)))
		}
	}

	if v, ok := tfMap["enable_ecs_managed_tags"].(bool); ok {
		a.EnableECSManagedTags = aws.Bool(v)
	}

	if v, ok := tfMap["enable_execute_command"].(bool); ok {
		a.EnableExecuteCommand = aws.Bool(v)
	}

	if v, ok := tfMap["group"].(string); ok && v != "" {
		a.Group = aws.String(v)
	}

	if v, ok := tfMap["launch_type"].(string); ok && v != "" {
		a.LaunchType = types.LaunchType(v)
	}

	if v, ok := tfMap[names.AttrNetworkConfiguration].([]any); ok && len(v) > 0 && v[0] != nil {
		a.NetworkConfiguration = expandNetworkConfiguration(v[0].(map[string]any))
	}

	if v, ok := tfMap["placement_constraints"].(*schema.Set); ok && v.Len() > 0 {
		for _, c := range v.List() {
			a.PlacementConstraints = append(a.PlacementConstraints, expandPlacementConstraint(c.(map[string]any)))
		}
	}

	if v, ok := tfMap["placement_strategy"].(*schema.Set); ok && v.Len() > 0 {
		for _, c := range v.List() {
			a.PlacementStrategy = append(a.PlacementStrategy, expandPlacementStrategy(c.(map[string]any)))
		}
	}

	if v, ok := tfMap["platform_version"].(string); ok && v != "" {
		a.PlatformVersion = aws.String(v)
	}

	if v, ok := tfMap[names.AttrPropagateTags].(string); ok && v != "" {
		a.PropagateTags = types.PropagateTags(v)
	}

	if v, ok := tfMap["reference_id"].(string); ok && v != "" {
		a.ReferenceId = aws.String(v)
	}

	tags := tftags.New(ctx, tfMap[names.AttrTags].(map[string]any))

	if len(tags) > 0 {
		for k, v := range tags.IgnoreAWS().Map() {
			a.Tags = append(a.Tags, map[string]string{
				names.AttrKey:   k,
				names.AttrValue: v,
			})
		}
	}

	if v, ok := tfMap["task_count"].(int); ok {
		a.TaskCount = aws.Int32(int32(v))
	}

	if v, ok := tfMap["task_definition_arn"].(string); ok && v != "" {
		a.TaskDefinitionArn = aws.String(v)
	}

	return a
}
