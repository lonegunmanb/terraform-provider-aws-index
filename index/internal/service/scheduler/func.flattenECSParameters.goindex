package github.com/hashicorp/terraform-provider-aws/internal/service/scheduler
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/scheduler/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenECSParameters(ctx context.Context, apiObject *types.EcsParameters) map[string]any {
	if apiObject == nil {
		return nil
	}

	m := map[string]any{}

	if v := apiObject.CapacityProviderStrategy; v != nil {
		set := schema.NewSet(capacityProviderHash, nil)

		for _, p := range v {
			set.Add(flattenCapacityProviderStrategyItem(p))
		}

		m[names.AttrCapacityProviderStrategy] = set
	}

	if v := apiObject.EnableECSManagedTags; v != nil {
		m["enable_ecs_managed_tags"] = aws.ToBool(v)
	}

	if v := apiObject.EnableExecuteCommand; v != nil {
		m["enable_execute_command"] = aws.ToBool(v)
	}

	if v := apiObject.Group; v != nil {
		m["group"] = aws.ToString(v)
	}

	if v := string(apiObject.LaunchType); v != "" {
		m["launch_type"] = v
	}

	if v := apiObject.NetworkConfiguration; v != nil {
		m[names.AttrNetworkConfiguration] = []any{flattenNetworkConfiguration(v)}
	}

	if v := apiObject.PlacementConstraints; len(v) > 0 {
		set := schema.NewSet(placementConstraintHash, nil)

		for _, c := range v {
			set.Add(flattenPlacementConstraint(c))
		}

		m["placement_constraints"] = set
	}

	if v := apiObject.PlacementStrategy; len(v) > 0 {
		set := schema.NewSet(placementStrategyHash, nil)

		for _, s := range v {
			set.Add(flattenPlacementStrategy(s))
		}

		m["placement_strategy"] = set
	}

	if v := apiObject.PlatformVersion; v != nil {
		m["platform_version"] = aws.ToString(v)
	}

	if v := string(apiObject.PropagateTags); v != "" {
		m[names.AttrPropagateTags] = v
	}

	if v := apiObject.ReferenceId; v != nil {
		m["reference_id"] = aws.ToString(v)
	}

	if v := apiObject.Tags; len(v) > 0 {
		tags := make(map[string]any)

		for _, tagMap := range v {
			key := tagMap[names.AttrKey]

			// The EventBridge Scheduler API documents raw maps instead of
			// the key-value structure expected by the RunTask API.
			if key == "" {
				continue
			}

			tags[key] = tagMap[names.AttrValue]
		}

		m[names.AttrTags] = tftags.New(ctx, tags).IgnoreAWS().Map()
	}

	if v := apiObject.TaskCount; v != nil {
		m["task_count"] = int(aws.ToInt32(v))
	}

	if v := apiObject.TaskDefinitionArn; v != nil {
		m["task_definition_arn"] = aws.ToString(v)
	}

	return m
}
