package github.com/hashicorp/terraform-provider-aws/internal/service/guardduty
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	awstypes "github.com/aws/aws-sdk-go-v2/service/guardduty/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func expandOrganizationDataSourceConfigurations(tfMap map[string]any) *awstypes.OrganizationDataSourceConfigurations {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.OrganizationDataSourceConfigurations{}

	if v, ok := tfMap["kubernetes"].([]any); ok && len(v) > 0 {
		apiObject.Kubernetes = expandOrganizationKubernetesConfiguration(v[0].(map[string]any))
	}

	if v, ok := tfMap["malware_protection"].([]any); ok && len(v) > 0 {
		apiObject.MalwareProtection = expandOrganizationMalwareProtectionConfiguration(v[0].(map[string]any))
	}

	if v, ok := tfMap["s3_logs"].([]any); ok && len(v) > 0 {
		apiObject.S3Logs = expandOrganizationS3LogsConfiguration(v[0].(map[string]any))
	}

	return apiObject
}
