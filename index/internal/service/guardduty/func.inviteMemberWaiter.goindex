package github.com/hashicorp/terraform-provider-aws/internal/service/guardduty
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	awstypes "github.com/aws/aws-sdk-go-v2/service/guardduty/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func inviteMemberWaiter(ctx context.Context, accountID, detectorID string, timeout time.Duration, conn *guardduty.Client) error {
	input := guardduty.GetMembersInput{
		DetectorId: aws.String(detectorID),
		AccountIds: []string{accountID},
	}

	// wait until e-mail verification finishes
	var out *guardduty.GetMembersOutput
	err := tfresource.Retry(ctx, timeout, func(ctx context.Context) *tfresource.RetryError {
		log.Printf("[DEBUG] Reading GuardDuty Member: %+v", input)
		var err error
		out, err = conn.GetMembers(ctx, &input)

		if err != nil {
			return tfresource.NonRetryableError(fmt.Errorf("reading GuardDuty Member %q: %w", accountID, err))
		}

		retryable, err := memberInvited(out, accountID)
		if err != nil {
			if retryable {
				return tfresource.RetryableError(err)
			}
			return tfresource.NonRetryableError(err)
		}

		return nil
	})
	if err != nil {
		return fmt.Errorf("waiting for GuardDuty email verification: %w", err)
	}
	return nil
}
