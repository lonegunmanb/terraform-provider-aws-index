package github.com/hashicorp/terraform-provider-aws/internal/service/guardduty
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	awstypes "github.com/aws/aws-sdk-go-v2/service/guardduty/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *malwareProtectionPlanResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	conn := r.Meta().GuardDutyClient(ctx)
	var plan malwareProtectionPlanResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)

	input := &guardduty.CreateMalwareProtectionPlanInput{}
	resp.Diagnostics.Append(flex.Expand(ctx, plan, input)...)

	if resp.Diagnostics.HasError() {
		return
	}

	input.Tags = getTagsIn(ctx)

	var out *guardduty.CreateMalwareProtectionPlanOutput

	err := tfresource.Retry(ctx, iamPropagationTimeout, func(ctx context.Context) *tfresource.RetryError {
		var err error
		out, err = conn.CreateMalwareProtectionPlan(ctx, input)
		if err != nil {
			var nfe *awstypes.ResourceNotFoundException
			var bre *awstypes.BadRequestException // Error returned due to IAM eventual consistency
			if errors.As(err, &nfe) {
				return tfresource.RetryableError(err)
			} else if errors.As(err, &bre) {
				return tfresource.RetryableError(err)
			}
			return tfresource.NonRetryableError(err)
		}

		return nil
	})

	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.GuardDuty, create.ErrActionCreating, ResNameMalwareProtectionPlan, "malware protection", nil),
			err.Error(),
		)
		return
	}

	state := plan
	state.ID = flex.StringToFramework(ctx, out.MalwareProtectionPlanId)

	// Read after create to get computed attributes omitted from the create response
	readOut, err := findMalwareProtectionPlanByID(ctx, conn, state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.SSOAdmin, create.ErrActionCreating, ResNameMalwareProtectionPlan, plan.ID.String(), err),
			err.Error(),
		)
		return
	}
	resp.Diagnostics.Append(flex.Flatten(ctx, readOut, &state)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
