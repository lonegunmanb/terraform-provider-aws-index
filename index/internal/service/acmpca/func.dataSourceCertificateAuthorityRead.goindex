package github.com/hashicorp/terraform-provider-aws/internal/service/acmpca
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acmpca"
	"github.com/aws/aws-sdk-go-v2/service/acmpca/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCertificateAuthorityRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ACMPCAClient(ctx)

	certificateAuthorityARN := d.Get(names.AttrARN).(string)
	input := acmpca.DescribeCertificateAuthorityInput{
		CertificateAuthorityArn: aws.String(certificateAuthorityARN),
	}

	certificateAuthority, err := findCertificateAuthority(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading ACM PCA Certificate Authority (%s): %s", certificateAuthorityARN, err)
	}

	d.SetId(certificateAuthorityARN)
	d.Set(names.AttrARN, certificateAuthority.Arn)
	d.Set("key_storage_security_standard", certificateAuthority.KeyStorageSecurityStandard)
	d.Set("not_after", aws.ToTime(certificateAuthority.NotAfter).Format(time.RFC3339))
	d.Set("not_before", aws.ToTime(certificateAuthority.NotBefore).Format(time.RFC3339))
	if err := d.Set("revocation_configuration", flattenRevocationConfiguration(certificateAuthority.RevocationConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting revocation_configuration: %s", err)
	}
	d.Set("serial", certificateAuthority.Serial)
	d.Set(names.AttrStatus, certificateAuthority.Status)
	d.Set(names.AttrType, certificateAuthority.Type)
	d.Set("usage_mode", certificateAuthority.UsageMode)

	getCACertInput := acmpca.GetCertificateAuthorityCertificateInput{
		CertificateAuthorityArn: aws.String(certificateAuthorityARN),
	}
	outputGCACert, err := conn.GetCertificateAuthorityCertificate(ctx, &getCACertInput)

	// Returned when in PENDING_CERTIFICATE status
	// InvalidStateException: The certificate authority XXXXX is not in the correct state to have a certificate signing request.
	if err != nil && !errs.IsA[*types.InvalidStateException](err) {
		return sdkdiag.AppendErrorf(diags, "reading ACM PCA Certificate Authority (%s) Certificate: %s", d.Id(), err)
	}

	d.Set(names.AttrCertificate, "")
	d.Set(names.AttrCertificateChain, "")
	if outputGCACert != nil {
		d.Set(names.AttrCertificate, outputGCACert.Certificate)
		d.Set(names.AttrCertificateChain, outputGCACert.CertificateChain)
	}

	// Attempt to get the CSR (if permitted).
	getCACSRInput := acmpca.GetCertificateAuthorityCsrInput{
		CertificateAuthorityArn: aws.String(certificateAuthorityARN),
	}
	outputGCACsr, err := conn.GetCertificateAuthorityCsr(ctx, &getCACSRInput)

	switch {
	case tfawserr.ErrCodeEquals(err, "AccessDeniedException"):
		// Handle permission issues gracefully for Resource Access Manager shared CAs.
		// arn:aws:ram::aws:permission/AWSRAMDefaultPermissionCertificateAuthority does not include acm-pca:GetCertificateAuthorityCsr.
	case errs.IsA[*types.InvalidStateException](err):
		// Returned when in PENDING_CERTIFICATE status
		// InvalidStateException: The certificate authority XXXXX is not in the correct state to have a certificate signing request.
	case err != nil:
		return sdkdiag.AppendErrorf(diags, "reading ACM PCA Certificate Authority (%s) Certificate Signing Request: %s", d.Id(), err)
	}

	d.Set("certificate_signing_request", "")
	if outputGCACsr != nil {
		d.Set("certificate_signing_request", outputGCACsr.Csr)
	}

	return diags
}
