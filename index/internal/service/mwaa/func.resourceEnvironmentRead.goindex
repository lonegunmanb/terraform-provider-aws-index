package github.com/hashicorp/terraform-provider-aws/internal/service/mwaa
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mwaa"
	awstypes "github.com/aws/aws-sdk-go-v2/service/mwaa/types"
	gversion "github.com/hashicorp/go-version"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEnvironmentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MWAAClient(ctx)

	environment, err := findEnvironmentByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] MWAA Environment %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MWAA Environment (%s): %s", d.Id(), err)
	}

	d.Set("airflow_configuration_options", environment.AirflowConfigurationOptions)
	d.Set("airflow_version", environment.AirflowVersion)
	d.Set(names.AttrARN, environment.Arn)
	d.Set(names.AttrCreatedAt, aws.ToTime(environment.CreatedAt).String())
	d.Set("dag_s3_path", environment.DagS3Path)
	d.Set("database_vpc_endpoint_service", environment.DatabaseVpcEndpointService)
	d.Set("endpoint_management", environment.EndpointManagement)
	d.Set("environment_class", environment.EnvironmentClass)
	d.Set(names.AttrExecutionRoleARN, environment.ExecutionRoleArn)
	d.Set(names.AttrKMSKey, environment.KmsKey)
	if err := d.Set("last_updated", flattenLastUpdate(environment.LastUpdate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting last_updated: %s", err)
	}
	if err := d.Set(names.AttrLoggingConfiguration, flattenLoggingConfiguration(environment.LoggingConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting logging_configuration: %s", err)
	}
	d.Set("max_workers", environment.MaxWorkers)
	d.Set("min_workers", environment.MinWorkers)
	d.Set("max_webservers", environment.MaxWebservers)
	d.Set("min_webservers", environment.MinWebservers)
	d.Set(names.AttrName, environment.Name)
	if err := d.Set(names.AttrNetworkConfiguration, flattenNetworkConfiguration(environment.NetworkConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting network_configuration: %s", err)
	}
	d.Set("plugins_s3_object_version", environment.PluginsS3ObjectVersion)
	d.Set("plugins_s3_path", environment.PluginsS3Path)
	d.Set("requirements_s3_object_version", environment.RequirementsS3ObjectVersion)
	d.Set("requirements_s3_path", environment.RequirementsS3Path)
	d.Set("schedulers", environment.Schedulers)
	d.Set(names.AttrServiceRoleARN, environment.ServiceRoleArn)
	d.Set("source_bucket_arn", environment.SourceBucketArn)
	d.Set("startup_script_s3_object_version", environment.StartupScriptS3ObjectVersion)
	d.Set("startup_script_s3_path", environment.StartupScriptS3Path)
	d.Set(names.AttrStatus, environment.Status)
	d.Set("webserver_access_mode", environment.WebserverAccessMode)
	d.Set("webserver_url", environment.WebserverUrl)
	d.Set("webserver_vpc_endpoint_service", environment.WebserverVpcEndpointService)
	d.Set("weekly_maintenance_window_start", environment.WeeklyMaintenanceWindowStart)

	setTagsOut(ctx, environment.Tags)

	return diags
}
