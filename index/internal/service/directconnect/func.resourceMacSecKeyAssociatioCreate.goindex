package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMacSecKeyAssociatioCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DirectConnectClient(ctx)

	connectionID := d.Get(names.AttrConnectionID).(string)
	input := &directconnect.AssociateMacSecKeyInput{
		ConnectionId: aws.String(connectionID),
	}

	if v, ok := d.GetOk("ckn"); ok {
		input.Cak = aws.String(d.Get("cak").(string))
		input.Ckn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("secret_arn"); ok {
		input.SecretARN = aws.String(v.(string))
	}

	output, err := conn.AssociateMacSecKey(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating MACSec Key Association with Direct Connect Connection (%s): %s", connectionID, err)
	}

	var secretARN string
	for _, key := range output.MacSecKeys {
		secretARN = aws.ToString(key.SecretARN)
	}

	d.SetId(macSecKeyAssociationCreateResourceID(secretARN, connectionID))

	return append(diags, resourceMacSecKeyAssociationRead(ctx, d, meta)...)
}
