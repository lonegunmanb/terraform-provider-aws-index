package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func gatewayAssociationStateUpgradeV1(ctx context.Context, rawState map[string]any, meta any) (map[string]any, error) {
	conn := meta.(*conns.AWSClient).EC2Client(ctx)

	log.Println("[INFO] Found Direct Connect Gateway Association state v1; migrating to v2")

	// transit_gateway_attachment_id was introduced in v6.5.0, handle the case where it's not yet present.
	if rawState["associated_gateway_type"].(string) == string(awstypes.GatewayTypeTransitGateway) {
		if v, ok := rawState[names.AttrTransitGatewayAttachmentID]; !ok || v == nil {
			output, err := tfec2.FindTransitGatewayAttachmentByTransitGatewayIDAndDirectConnectGatewayID(ctx, conn, rawState["associated_gateway_id"].(string), rawState["dx_gateway_id"].(string))

			switch {
			case tfawserr.ErrCodeEquals(err, "UnauthorizedOperation"):
				rawState[names.AttrTransitGatewayAttachmentID] = nil
			case err != nil:
				return nil, err
			default:
				rawState[names.AttrTransitGatewayAttachmentID] = aws.ToString(output.TransitGatewayAttachmentId)
			}
		}
	}

	return rawState, nil
}
