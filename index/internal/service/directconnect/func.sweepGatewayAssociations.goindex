package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
)
func sweepGatewayAssociations(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	input := &directconnect.DescribeDirectConnectGatewaysInput{}
	conn := client.DirectConnectClient(ctx)
	sweepResources := make([]sweep.Sweepable, 0)

	err = describeDirectConnectGatewaysPages(ctx, conn, input, func(page *directconnect.DescribeDirectConnectGatewaysOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		for _, v := range page.DirectConnectGateways {
			directConnectGatewayID := aws.ToString(v.DirectConnectGatewayId)

			input := &directconnect.DescribeDirectConnectGatewayAssociationsInput{
				DirectConnectGatewayId: aws.String(directConnectGatewayID),
			}

			err := describeDirectConnectGatewayAssociationsPages(ctx, conn, input, func(page *directconnect.DescribeDirectConnectGatewayAssociationsOutput, lastPage bool) bool {
				if page == nil {
					return !lastPage
				}

				for _, v := range page.DirectConnectGatewayAssociations {
					if v.AssociatedGateway == nil {
						continue
					}

					gatewayID := aws.ToString(v.AssociatedGateway.Id)

					if gatewayRegion := aws.ToString(v.AssociatedGateway.Region); gatewayRegion != region {
						log.Printf("[INFO] Skipping Direct Connect Gateway (%s) Association (%s): AssociatedGateway.Region=%s", directConnectGatewayID, gatewayID, gatewayRegion)
						continue
					}

					if state := v.AssociationState; state != awstypes.DirectConnectGatewayAssociationStateAssociated {
						log.Printf("[INFO] Skipping Direct Connect Gateway (%s) Association (%s): AssociationState=%s", directConnectGatewayID, gatewayID, state)
						continue
					}

					r := resourceGatewayAssociation()
					d := r.Data(nil)
					d.SetId(gatewayAssociationCreateResourceID(directConnectGatewayID, gatewayID))
					d.Set("dx_gateway_association_id", v.AssociationId)

					sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
				}

				return !lastPage
			})

			if err != nil {
				continue
			}
		}

		return !lastPage
	})

	if awsv2.SkipSweepError(err) {
		log.Printf("[WARN] Skipping Direct Connect Gateway Association sweep for %s: %s", region, err)
		return nil
	}

	if err != nil {
		return fmt.Errorf("error listing Direct Connect Gateways (%s): %w", region, err)
	}

	// Handle cross-account EC2 Transit Gateway associations.
	// Direct Connect does not provide an easy lookup method for
	// these within the service itself so they can only be found
	// via AssociatedGatewayId of the EC2 Transit Gateway since the
	// DirectConnectGatewayId lives in the other account.
	ec2conn := client.EC2Client(ctx)

	pages := ec2.NewDescribeTransitGatewaysPaginator(ec2conn, &ec2.DescribeTransitGatewaysInput{})
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return fmt.Errorf("error listing EC2 Transit Gateways (%s): %w", region, err)
		}

		for _, v := range page.TransitGateways {
			if v.State == ec2types.TransitGatewayStateDeleted {
				continue
			}

			transitGatewayID := aws.ToString(v.TransitGatewayId)

			input := &directconnect.DescribeDirectConnectGatewayAssociationsInput{
				AssociatedGatewayId: aws.String(transitGatewayID),
			}

			err := describeDirectConnectGatewayAssociationsPages(ctx, conn, input, func(page *directconnect.DescribeDirectConnectGatewayAssociationsOutput, lastPage bool) bool {
				if page == nil {
					return !lastPage
				}

				for _, v := range page.DirectConnectGatewayAssociations {
					directConnectGatewayID := aws.ToString(v.DirectConnectGatewayId)

					if state := v.AssociationState; state != awstypes.DirectConnectGatewayAssociationStateAssociated {
						log.Printf("[INFO] Skipping Direct Connect Gateway (%s) Association (%s): %s", directConnectGatewayID, transitGatewayID, state)
						continue
					}

					r := resourceGatewayAssociation()
					d := r.Data(nil)
					d.SetId(gatewayAssociationCreateResourceID(directConnectGatewayID, transitGatewayID))
					d.Set("dx_gateway_association_id", v.AssociationId)

					sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
				}

				return !lastPage
			})

			if err != nil {
				continue
			}
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping Direct Connect Gateway Associations (%s): %w", region, err)
	}

	return nil
}
