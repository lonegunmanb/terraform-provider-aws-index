package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGatewayAssociationResourceV0() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"allowed_prefixes": {
				Type:     schema.TypeSet,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"associated_gateway_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"associated_gateway_owner_account_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"associated_gateway_type": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"dx_gateway_association_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"dx_gateway_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"dx_gateway_owner_account_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"proposal_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"vpn_gateway_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}
