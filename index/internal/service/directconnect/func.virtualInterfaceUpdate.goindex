package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func virtualInterfaceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DirectConnectClient(ctx)

	if d.HasChange("mtu") {
		input := &directconnect.UpdateVirtualInterfaceAttributesInput{
			Mtu:                aws.Int32(int32(d.Get("mtu").(int))),
			VirtualInterfaceId: aws.String(d.Id()),
		}

		_, err := conn.UpdateVirtualInterfaceAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Direct Connect Virtual Interface (%s) Mtu attribute: %s", d.Id(), err)
		}
	}

	if d.HasChange("sitelink_enabled") {
		input := &directconnect.UpdateVirtualInterfaceAttributesInput{
			EnableSiteLink:     aws.Bool(d.Get("sitelink_enabled").(bool)),
			VirtualInterfaceId: aws.String(d.Id()),
		}

		_, err := conn.UpdateVirtualInterfaceAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying Direct Connect Virtual Interface (%s) EnableSiteLink attribute: %s", d.Id(), err)
		}
	}

	return diags
}
