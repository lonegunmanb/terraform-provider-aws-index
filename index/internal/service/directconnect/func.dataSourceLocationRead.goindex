package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func dataSourceLocationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DirectConnectClient(ctx)

	input := &directconnect.DescribeLocationsInput{}
	locationCode := d.Get("location_code").(string)
	location, err := findLocation(ctx, conn, input, func(v *awstypes.Location) bool {
		return aws.ToString(v.LocationCode) == locationCode
	})

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("Direct Connect Location", err))
	}

	d.SetId(locationCode)
	d.Set("available_macsec_port_speeds", location.AvailableMacSecPortSpeeds)
	d.Set("available_port_speeds", location.AvailablePortSpeeds)
	d.Set("available_providers", location.AvailableProviders)
	d.Set("location_code", location.LocationCode)
	d.Set("location_name", location.LocationName)

	return diags
}
