package github.com/hashicorp/terraform-provider-aws/internal/service/directconnect
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func dataSourceRouterConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DirectConnectClient(ctx)

	routerTypeIdentifier := d.Get("router_type_identifier").(string)
	vifID := d.Get("virtual_interface_id").(string)
	id := fmt.Sprintf("%s:%s", vifID, routerTypeIdentifier)
	output, err := findRouterConfigurationByTwoPartKey(ctx, conn, routerTypeIdentifier, vifID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Direct Connect Router Configuration (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("customer_router_config", output.CustomerRouterConfig)
	if err := d.Set("router", flattenRouter(output.Router)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting router: %s", err)
	}
	d.Set("router_type_identifier", output.Router.RouterTypeIdentifier)
	d.Set("virtual_interface_id", output.VirtualInterfaceId)
	d.Set("virtual_interface_name", output.VirtualInterfaceName)

	return diags
}
