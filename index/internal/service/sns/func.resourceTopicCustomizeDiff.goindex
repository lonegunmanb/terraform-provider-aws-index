package github.com/hashicorp/terraform-provider-aws/internal/service/sns
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sns/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/attrmap"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfiam "github.com/hashicorp/terraform-provider-aws/internal/service/iam"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTopicCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, meta any) error {
	fifoTopic := diff.Get("fifo_topic").(bool)
	fifoTopicThroughputScope := diff.Get("fifo_throughput_scope").(string)
	archivePolicy := diff.Get("archive_policy").(string)
	contentBasedDeduplication := diff.Get("content_based_deduplication").(bool)

	if diff.Id() == "" {
		// Create.
		name := topicName(diff)
		var re *regexp.Regexp

		if fifoTopic {
			re = regexache.MustCompile(`^[0-9A-Za-z_-]{1,251}\.fifo$`)
		} else {
			re = regexache.MustCompile(`^[0-9A-Za-z_-]{1,256}$`)
		}

		if !re.MatchString(name) {
			return fmt.Errorf("invalid topic name: %s", name)
		}
	}

	if !fifoTopic {
		if archivePolicy != "" {
			return errors.New("message archive policy can only be set for FIFO topics")
		}
		if fifoTopicThroughputScope != "" {
			return errors.New("FIFO throughput scope can only be set for FIFO topics")
		}
		if contentBasedDeduplication {
			return errors.New("content-based deduplication can only be set for FIFO topics")
		}
	}

	return nil
}
