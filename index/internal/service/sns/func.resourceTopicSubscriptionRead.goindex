package github.com/hashicorp/terraform-provider-aws/internal/service/sns
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sns/types"
	"github.com/davecgh/go-spew/spew"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/attrmap"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTopicSubscriptionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SNSClient(ctx)

	// Do not remove.
	// Though seemingly redundant with the finder below, GetSubscriptionAttributes is
	// eventually consistent and may not reflect cases where the topic or subscription
	// was modified or deleted out of band.
	//
	// This check is skipped if topic_arn is unset (e.g. during import), or if the
	// subscription does not wait for confirmation during the create operation (to
	// avoid errant removals from state on subsequent applies).
	if v, ok := d.GetOk(names.AttrTopicARN); ok && waitForConfirmation(d.Get("endpoint_auto_confirms").(bool), d.Get(names.AttrProtocol).(string)) {
		_, err := findSubscriptionInTopic(ctx, conn, v.(string), d.Id())
		if !d.IsNewResource() && tfresource.NotFound(err) {
			log.Printf("[WARN] SNS Topic Subscription %s not found, removing from state", d.Id())
			d.SetId("")
			return diags
		}

		if err != nil {
			switch {
			// ListSubscriptionsByTopic requires IAM permissions which were not
			// required in minor versions prior to `v5.94.0`, so AuthorizationError
			// exceptions are not surfaced.
			case errs.IsAErrorMessageContains[*types.AuthorizationErrorException](err, "not authorized to perform"):
				break
			default:
				return sdkdiag.AppendErrorf(diags, "reading SNS Topic Subscription (%s): %s", d.Id(), err)
			}
		}
	}

	attributes, err := tfresource.RetryWhenNewResourceNotFound(ctx, subscriptionCreateTimeout, func(ctx context.Context) (map[string]string, error) {
		return findSubscriptionAttributesByARN(ctx, conn, d.Id())
	}, d.IsNewResource())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SNS Topic Subscription %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SNS Topic Subscription (%s): %s", d.Id(), err)
	}

	return sdkdiag.AppendFromErr(diags, subscriptionAttributeMap.APIAttributesToResourceData(attributes, d))
}
