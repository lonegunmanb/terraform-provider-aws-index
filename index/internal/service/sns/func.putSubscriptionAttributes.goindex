package github.com/hashicorp/terraform-provider-aws/internal/service/sns
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sns/types"
	"github.com/davecgh/go-spew/spew"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/attrmap"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func putSubscriptionAttributes(ctx context.Context, conn *sns.Client, arn string, attributes map[string]string) error {
	// Filter policy order matters
	filterPolicyScope, ok := attributes[subscriptionAttributeNameFilterPolicyScope]

	if ok {
		delete(attributes, subscriptionAttributeNameFilterPolicyScope)
	}

	// MessageBody is backwards-compatible so it should always be applied first
	if filterPolicyScope == subscriptionFilterPolicyScopeMessageBody {
		err := putSubscriptionAttribute(ctx, conn, arn, subscriptionAttributeNameFilterPolicyScope, filterPolicyScope)
		if err != nil {
			return err
		}
	}

	for name, value := range attributes {
		err := putSubscriptionAttribute(ctx, conn, arn, name, value)

		if err != nil {
			return err
		}
	}

	// MessageAttributes isn't compatible with nested policies, so it should always be last
	// in case the update also includes a change from a nested policy to a flat policy
	if filterPolicyScope == subscriptionFilterPolicyScopeMessageAttributes {
		err := putSubscriptionAttribute(ctx, conn, arn, subscriptionAttributeNameFilterPolicyScope, filterPolicyScope)

		if err != nil {
			return err
		}
	}

	return nil
}
