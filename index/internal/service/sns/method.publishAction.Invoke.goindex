package github.com/hashicorp/terraform-provider-aws/internal/service/sns
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/action"
	"github.com/hashicorp/terraform-plugin-framework/action/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (a *publishAction) Invoke(ctx context.Context, req action.InvokeRequest, resp *action.InvokeResponse) {
	var config publishActionModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	conn := a.Meta().SNSClient(ctx)

	topicArn := config.TopicArn.ValueString()
	message := config.Message.ValueString()

	tflog.Info(ctx, "Starting SNS publish message action", map[string]any{
		names.AttrTopicARN: topicArn,
		"message_length":   len(message),
		"has_subject":      !config.Subject.IsNull(),
	})

	resp.SendProgress(action.InvokeProgressEvent{
		Message: fmt.Sprintf("Publishing message to SNS topic %s...", topicArn),
	})

	input := &sns.PublishInput{}
	resp.Diagnostics.Append(fwflex.Expand(ctx, config, input)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Ensure required fields are set (AutoFlex should handle these, but being explicit)
	input.TopicArn = aws.String(topicArn)
	input.Message = aws.String(message)

	output, err := conn.Publish(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Publish SNS Message",
			fmt.Sprintf("Could not publish message to SNS topic %s: %s", topicArn, err),
		)
		return
	}

	messageId := aws.ToString(output.MessageId)
	resp.SendProgress(action.InvokeProgressEvent{
		Message: fmt.Sprintf("Message published successfully to SNS topic %s (Message ID: %s)", topicArn, messageId),
	})

	tflog.Info(ctx, "SNS publish message action completed successfully", map[string]any{
		names.AttrTopicARN: topicArn,
		"message_id":       messageId,
	})
}
