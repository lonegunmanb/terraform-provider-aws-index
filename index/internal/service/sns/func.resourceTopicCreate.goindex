package github.com/hashicorp/terraform-provider-aws/internal/service/sns
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sns/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/attrmap"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfiam "github.com/hashicorp/terraform-provider-aws/internal/service/iam"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTopicCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SNSClient(ctx)

	name := topicName(d)
	input := &sns.CreateTopicInput{
		Name: aws.String(name),
		Tags: getTagsIn(ctx),
	}

	attributes, err := topicAttributeMap.ResourceDataToAPIAttributesCreate(d)
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	// The FifoTopic attribute must be passed in the call to CreateTopic.
	if v, ok := attributes[topicAttributeNameFIFOTopic]; ok {
		input.Attributes = map[string]string{
			topicAttributeNameFIFOTopic: v,
		}
		if w, ok := attributes[topicAttributeNameFIFOThroughputScope]; ok && v == strconv.FormatBool(true) {
			input.Attributes[topicAttributeNameFIFOThroughputScope] = w
		}

		delete(attributes, topicAttributeNameFIFOTopic)
		delete(attributes, topicAttributeNameFIFOThroughputScope)
	}

	output, err := conn.CreateTopic(ctx, input)

	// Some partitions (e.g. ISO) may not support tag-on-create.
	if input.Tags != nil && errs.IsUnsupportedOperationInPartitionError(meta.(*conns.AWSClient).Partition(ctx), err) {
		input.Tags = nil

		output, err = conn.CreateTopic(ctx, input)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SNS Topic (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.TopicArn))

	// Retry for eventual consistency; if ABAC is in use, this takes some time
	// usually about 10s, presumably for tags really to be there, and we get a
	// permissions error.
	_, err = tfresource.RetryWhenIsAErrorMessageContains[*types.AuthorizationErrorException](ctx, propagationTimeout, func() (any, error) {
		return nil, putTopicAttributes(ctx, conn, d.Id(), attributes)
	}, "no identity-based policy allows")

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	// For partitions not supporting tag-on-create, attempt tag after create.
	if tags := getTagsIn(ctx); input.Tags == nil && len(tags) > 0 {
		err := createTags(ctx, conn, d.Id(), tags)

		// If default tags only, continue. Otherwise, error.
		if v, ok := d.GetOk(names.AttrTags); (!ok || len(v.(map[string]any)) == 0) && errs.IsUnsupportedOperationInPartitionError(meta.(*conns.AWSClient).Partition(ctx), err) {
			return append(diags, resourceTopicRead(ctx, d, meta)...)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting SNS Topic (%s) tags: %s", d.Id(), err)
		}
	}

	return append(diags, resourceTopicRead(ctx, d, meta)...)
}
