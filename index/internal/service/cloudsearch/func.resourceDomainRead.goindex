package github.com/hashicorp/terraform-provider-aws/internal/service/cloudsearch
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudsearch"
	"github.com/aws/aws-sdk-go-v2/service/cloudsearch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CloudSearchClient(ctx)

	domain, err := findDomainByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CloudSearch Domain (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, domain.ARN)
	if domain.DocService != nil {
		d.Set("document_service_endpoint", domain.DocService.Endpoint)
	} else {
		d.Set("document_service_endpoint", nil)
	}
	d.Set("domain_id", domain.DomainId)
	d.Set(names.AttrName, domain.DomainName)
	if domain.SearchService != nil {
		d.Set("search_service_endpoint", domain.SearchService.Endpoint)
	} else {
		d.Set("search_service_endpoint", nil)
	}

	availabilityOptionStatus, err := findAvailabilityOptionsStatusByName(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s) availability options: %s", d.Id(), err)
	}

	d.Set("multi_az", availabilityOptionStatus.Options)

	endpointOptions, err := findDomainEndpointOptionsByName(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s) endpoint options: %s", d.Id(), err)
	}

	if err := d.Set("endpoint_options", []any{flattenDomainEndpointOptions(endpointOptions)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting endpoint_options: %s", err)
	}

	scalingParameters, err := findScalingParametersByName(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s) scaling parameters: %s", d.Id(), err)
	}

	if err := d.Set("scaling_parameters", []any{flattenScalingParameters(scalingParameters)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting scaling_parameters: %s", err)
	}

	input := cloudsearch.DescribeIndexFieldsInput{
		DomainName: aws.String(d.Get(names.AttrName).(string)),
	}
	indexResults, err := conn.DescribeIndexFields(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s) index fields: %s", d.Id(), err)
	}

	if tfList, err := flattenIndexFieldStatuses(indexResults.IndexFields); err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudSearch Domain (%s): %s", d.Id(), err)
	} else if err := d.Set("index_field", tfList); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting index_field: %s", err)
	}

	return diags
}
