package github.com/hashicorp/terraform-provider-aws/internal/service/verifiedpermissions
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/verifiedpermissions"
	awstypes "github.com/aws/aws-sdk-go-v2/service/verifiedpermissions/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (m openIDConnectTokenSelection) expandToOpenIDConnectTokenSelection(ctx context.Context) (result awstypes.OpenIdConnectTokenSelection, diags diag.Diagnostics) {
	switch {
	case !m.AccessTokenOnly.IsNull():
		var result awstypes.OpenIdConnectTokenSelectionMemberAccessTokenOnly
		diags.Append(flex.Expand(ctx, m.AccessTokenOnly, &result.Value)...)
		if diags.HasError() {
			return nil, diags
		}
		return &result, diags

	case !m.IdentityTokenOnly.IsNull():
		var result awstypes.OpenIdConnectTokenSelectionMemberIdentityTokenOnly
		diags.Append(flex.Expand(ctx, m.IdentityTokenOnly, &result.Value)...)
		if diags.HasError() {
			return nil, diags
		}
		return &result, diags
	}

	return nil, diags
}
