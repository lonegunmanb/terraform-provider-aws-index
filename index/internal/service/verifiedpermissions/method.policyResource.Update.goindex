package github.com/hashicorp/terraform-provider-aws/internal/service/verifiedpermissions
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/verifiedpermissions"
	awstypes "github.com/aws/aws-sdk-go-v2/service/verifiedpermissions/types"
	cedar "github.com/cedar-policy/cedar-go/x/exp/parser"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	interflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *policyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().VerifiedPermissionsClient(ctx)

	var plan, state policyResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !plan.Definition.Equal(state.Definition) {
		in := &verifiedpermissions.UpdatePolicyInput{}
		in.PolicyId = fwflex.StringFromFramework(ctx, state.PolicyID)
		in.PolicyStoreId = fwflex.StringFromFramework(ctx, state.PolicyStoreID)

		defPlan, diagsPlan := plan.Definition.ToPtr(ctx)
		resp.Diagnostics.Append(diagsPlan...)
		if resp.Diagnostics.HasError() {
			return
		}

		defState, diagsState := state.Definition.ToPtr(ctx)
		resp.Diagnostics.Append(diagsState...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !defPlan.Static.Equal(defState.Static) {
			static, diags := defPlan.Static.ToPtr(ctx)
			resp.Diagnostics.Append(diags...)
			if diags.HasError() {
				return
			}

			in.Definition = &awstypes.UpdatePolicyDefinitionMemberStatic{
				Value: awstypes.UpdateStaticPolicyDefinition{
					Statement:   fwflex.StringFromFramework(ctx, static.Statement),
					Description: fwflex.StringFromFramework(ctx, static.Description),
				},
			}
		}

		_, err := conn.UpdatePolicy(ctx, in)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.VerifiedPermissions, create.ErrActionUpdating, ResNamePolicy, plan.ID.String(), err),
				err.Error(),
			)
			return
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}
