package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCanaryUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SyntheticsClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll, "start_canary") {
		input := &synthetics.UpdateCanaryInput{
			Name: aws.String(d.Id()),
		}

		if d.HasChange(names.AttrVPCConfig) {
			input.VpcConfig = expandCanaryVPCConfig(d.Get(names.AttrVPCConfig).([]any))
		}

		if d.HasChange("artifact_config") {
			input.ArtifactConfig = expandCanaryArtifactConfig(d.Get("artifact_config").([]any))
		}

		if d.HasChange("runtime_version") {
			input.RuntimeVersion = aws.String(d.Get("runtime_version").(string))
		}

		if d.HasChanges("handler", "zip_file", names.AttrS3Bucket, "s3_key", "s3_version") {
			conns.GlobalMutexKV.Lock(canaryMutex)
			defer conns.GlobalMutexKV.Unlock(canaryMutex)

			if code, err := expandCanaryCodeInput(d); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			} else {
				input.Code = code
			}
		}

		if d.HasChange("run_config") {
			input.RunConfig = expandCanaryRunConfig(d.Get("run_config").([]any))
		}

		if d.HasChange("artifact_s3_location") {
			input.ArtifactS3Location = aws.String(d.Get("artifact_s3_location").(string))
		}

		if d.HasChange(names.AttrSchedule) {
			input.Schedule = expandCanarySchedule(d.Get(names.AttrSchedule).([]any))
		}

		if d.HasChange("success_retention_period") {
			_, n := d.GetChange("success_retention_period")
			input.SuccessRetentionPeriodInDays = aws.Int32(int32(n.(int)))
		}

		if d.HasChange("failure_retention_period") {
			_, n := d.GetChange("failure_retention_period")
			input.FailureRetentionPeriodInDays = aws.Int32(int32(n.(int)))
		}

		if d.HasChange(names.AttrExecutionRoleARN) {
			_, n := d.GetChange(names.AttrExecutionRoleARN)
			input.ExecutionRoleArn = aws.String(n.(string))
		}

		status := d.Get(names.AttrStatus).(string)
		if status == string(awstypes.CanaryStateRunning) {
			if err := stopCanary(ctx, d.Id(), conn); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): %s", d.Id(), err)
			}
		}

		_, err := conn.UpdateCanary(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): %s", d.Id(), err)
		}

		if status != string(awstypes.CanaryStateReady) {
			if _, err := waitCanaryStopped(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): waiting for Canary to stop: %s", d.Id(), err)
			}
		} else {
			if _, err := waitCanaryReady(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): waiting for Canary to be ready: %s", d.Id(), err)
			}
		}

		if d.Get("start_canary").(bool) {
			if err := startCanary(ctx, d.Id(), conn); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): %s", d.Id(), err)
			}
		}
	}

	if d.HasChange("start_canary") {
		status := d.Get(names.AttrStatus).(string)
		if d.Get("start_canary").(bool) {
			if status != string(awstypes.CanaryStateRunning) {
				if err := startCanary(ctx, d.Id(), conn); err != nil {
					return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): %s", d.Id(), err)
				}
			}
		} else {
			if status == string(awstypes.CanaryStateRunning) {
				if err := stopCanary(ctx, d.Id(), conn); err != nil {
					return sdkdiag.AppendErrorf(diags, "updating Synthetics Canary (%s): %s", d.Id(), err)
				}
			}
		}
	}

	return append(diags, resourceCanaryRead(ctx, d, meta)...)
}
