package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func FindCanaryByName(ctx context.Context, conn *synthetics.Client, name string) (*awstypes.Canary, error) {
	input := &synthetics.GetCanaryInput{
		Name: aws.String(name),
	}

	output, err := conn.GetCanary(ctx, input)

	if err != nil {
		// error is not being asserted into type *awstypes.ResourceNotFoundException but has all the properties
		// of the error.
		if strings.Contains(err.Error(), errResourceNotFoundException.ErrorCode()) {
			return nil, &retry.NotFoundError{
				LastError:   err,
				LastRequest: input,
			}
		}

		return nil, err
	}

	if output == nil || output.Canary == nil || output.Canary.Status == nil {
		return nil, tfresource.NewEmptyResultError(input)
	}

	return output.Canary, nil
}
