package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGroupAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SyntheticsClient(ctx)

	canaryArn := d.Get("canary_arn").(string)
	groupName := d.Get(names.AttrGroupName).(string)

	in := &synthetics.AssociateResourceInput{
		ResourceArn:     aws.String(canaryArn),
		GroupIdentifier: aws.String(groupName),
	}

	out, err := conn.AssociateResource(ctx, in)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "associating canary (%s) with group (%s): %s", canaryArn, groupName, err)
	}

	if out == nil {
		return sdkdiag.AppendErrorf(diags, "associating canary (%s) with group (%s): Empty output", canaryArn, groupName)
	}

	d.SetId(GroupAssociationCreateResourceID(canaryArn, groupName))

	return append(diags, resourceGroupAssociationRead(ctx, d, meta)...)
}
