package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCanaryCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SyntheticsClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &synthetics.CreateCanaryInput{
		ArtifactS3Location: aws.String(d.Get("artifact_s3_location").(string)),
		ExecutionRoleArn:   aws.String(d.Get(names.AttrExecutionRoleARN).(string)),
		Name:               aws.String(name),
		RuntimeVersion:     aws.String(d.Get("runtime_version").(string)),
		Tags:               getTagsIn(ctx),
	}

	conns.GlobalMutexKV.Lock(canaryMutex)
	defer conns.GlobalMutexKV.Unlock(canaryMutex)

	if code, err := expandCanaryCodeInput(d); err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	} else {
		input.Code = code
	}

	if v, ok := d.GetOk("run_config"); ok {
		input.RunConfig = expandCanaryRunConfig(v.([]any))
	}

	if v, ok := d.GetOk("artifact_config"); ok {
		input.ArtifactConfig = expandCanaryArtifactConfig(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrSchedule); ok {
		input.Schedule = expandCanarySchedule(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrVPCConfig); ok {
		input.VpcConfig = expandCanaryVPCConfig(v.([]any))
	}

	if v, ok := d.GetOk("failure_retention_period"); ok {
		input.FailureRetentionPeriodInDays = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("success_retention_period"); ok {
		input.SuccessRetentionPeriodInDays = aws.Int32(int32(v.(int)))
	}

	output, err := conn.CreateCanary(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Synthetics Canary (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Canary.Name))

	// Underlying IAM eventual consistency errors can occur after the creation
	// operation. The goal is only retry these types of errors up to the IAM
	// timeout. Since the creation process is asynchronous and can take up to
	// its own timeout, we store a stop time upfront for checking.
	// Real-life experience shows that double the standard IAM propagation time is required.
	propagationTimeout := propagationTimeout * 2
	iamwaiterStopTime := time.Now().Add(propagationTimeout)

	_, err = tfresource.RetryWhen(ctx, propagationTimeout+canaryCreatedTimeout,
		func(ctx context.Context) (any, error) {
			return retryCreateCanary(ctx, conn, d, input)
		},
		func(err error) (bool, error) {
			// Only retry IAM eventual consistency errors up to that timeout.
			if err != nil && time.Now().Before(iamwaiterStopTime) {
				// This error synthesized from the Status object and not an AWS SDK Go error type.
				return strings.Contains(err.Error(), "The role defined for the function cannot be assumed by Lambda"), err
			}

			return false, err
		},
	)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Synthetics Canary (%s): waiting for completion: %s", name, err)
	}

	if d.Get("start_canary").(bool) {
		if err := startCanary(ctx, d.Id(), conn); err != nil {
			return sdkdiag.AppendErrorf(diags, "creating Synthetics Canary (%s): %s", name, err)
		}
	}

	return append(diags, resourceCanaryRead(ctx, d, meta)...)
}
