package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGroupAssociationDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SyntheticsClient(ctx)

	log.Printf("[DEBUG] Deleting Synthetics Group Association %s", d.Id())

	canaryArn, groupName, err := GroupAssociationParseResourceID(d.Id())

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	in := &synthetics.DisassociateResourceInput{
		ResourceArn:     aws.String(canaryArn),
		GroupIdentifier: aws.String(groupName),
	}

	_, err = conn.DisassociateResource(ctx, in)

	if errs.IsA[*awstypes.ResourceNotFoundException](err) {
		return diags
	}

	if errs.IsAErrorMessageContains[*awstypes.ValidationException](err, "does not exist in group") {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "disassociating Synthetics Group (%s) from canary (%s): %s", groupName, canaryArn, err)
	}

	return diags
}
