package github.com/hashicorp/terraform-provider-aws/internal/service/synthetics
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	awstypes "github.com/aws/aws-sdk-go-v2/service/synthetics/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SyntheticsClient(ctx)

	name := d.Get(names.AttrName).(string)
	in := &synthetics.CreateGroupInput{
		Name: aws.String(name),
		Tags: getTagsIn(ctx),
	}

	out, err := conn.CreateGroup(ctx, in)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Synthetics Group (%s): %s", name, err)
	}

	if out == nil || out.Group == nil {
		return sdkdiag.AppendErrorf(diags, "creating Synthetics Group (%s): Empty output", name)
	}

	d.SetId(aws.ToString(out.Group.Name))

	return append(diags, resourceGroupRead(ctx, d, meta)...)
}
