package github.com/hashicorp/terraform-provider-aws/internal/service/logs
import (
	"context"
	"iter"
	"slices"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceAccountPolicy,
			TypeName: "aws_cloudwatch_log_account_policy",
			Name:     "Account Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceDataProtectionPolicy,
			TypeName: "aws_cloudwatch_log_data_protection_policy",
			Name:     "Data Protection Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceDestination,
			TypeName: "aws_cloudwatch_log_destination",
			Name:     "Destination",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceDestinationPolicy,
			TypeName: "aws_cloudwatch_log_destination_policy",
			Name:     "Destination Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceGroup,
			TypeName: "aws_cloudwatch_log_group",
			Name:     "Log Group",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalSingleParameterIdentity(names.AttrName),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
			},
		},
		{
			Factory:  resourceMetricFilter,
			TypeName: "aws_cloudwatch_log_metric_filter",
			Name:     "Metric Filter",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceResourcePolicy,
			TypeName: "aws_cloudwatch_log_resource_policy",
			Name:     "Resource Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceStream,
			TypeName: "aws_cloudwatch_log_stream",
			Name:     "Log Stream",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceSubscriptionFilter,
			TypeName: "aws_cloudwatch_log_subscription_filter",
			Name:     "Subscription Filter",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceQueryDefinition,
			TypeName: "aws_cloudwatch_query_definition",
			Name:     "Query Definition",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
