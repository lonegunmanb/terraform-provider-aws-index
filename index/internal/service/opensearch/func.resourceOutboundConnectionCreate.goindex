package github.com/hashicorp/terraform-provider-aws/internal/service/opensearch
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/opensearch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceOutboundConnectionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OpenSearchClient(ctx)

	connectionAlias := d.Get("connection_alias").(string)
	input := &opensearch.CreateOutboundConnectionInput{
		ConnectionAlias:      aws.String(connectionAlias),
		ConnectionMode:       awstypes.ConnectionMode(d.Get("connection_mode").(string)),
		ConnectionProperties: expandOutboundConnectionConnectionProperties(d.Get("connection_properties").([]any)),
		LocalDomainInfo:      expandOutboundConnectionDomainInfo(d.Get("local_domain_info").([]any)),
		RemoteDomainInfo:     expandOutboundConnectionDomainInfo(d.Get("remote_domain_info").([]any)),
	}

	output, err := conn.CreateOutboundConnection(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating OpenSearch Outbound Connection (%s): %s", connectionAlias, err)
	}

	d.SetId(aws.ToString(output.ConnectionId))

	if _, err := waitOutboundConnectionCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for OpenSearch Outbound Connection (%s) create: %s", d.Id(), err)
	}

	if d.Get("accept_connection").(bool) {
		input := &opensearch.AcceptInboundConnectionInput{
			ConnectionId: aws.String(d.Id()),
		}

		_, err := conn.AcceptInboundConnection(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "accepting OpenSearch Inbound Connection (%s): %s", d.Id(), err)
		}

		if _, err := waitInboundConnectionAccepted(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for OpenSearch Inbound Connection (%s) accept: %s", d.Id(), err)
		}
	}

	return append(diags, resourceOutboundConnectionRead(ctx, d, meta)...)
}
