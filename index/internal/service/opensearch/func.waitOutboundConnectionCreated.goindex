package github.com/hashicorp/terraform-provider-aws/internal/service/opensearch
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/opensearch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitOutboundConnectionCreated(ctx context.Context, conn *opensearch.Client, id string, timeout time.Duration) (*awstypes.OutboundConnection, error) {
	stateConf := &retry.StateChangeConf{
		Pending: enum.Slice(awstypes.OutboundConnectionStatusCodeValidating, awstypes.OutboundConnectionStatusCodeProvisioning),
		Target: enum.Slice(
			awstypes.OutboundConnectionStatusCodePendingAcceptance,
			awstypes.OutboundConnectionStatusCodeActive,
			awstypes.OutboundConnectionStatusCodeApproved,
			awstypes.OutboundConnectionStatusCodeRejected,
			awstypes.OutboundConnectionStatusCodeValidationFailed,
		),
		Refresh: statusOutboundConnection(ctx, conn, id),
		Timeout: timeout,
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*awstypes.OutboundConnection); ok {
		tfresource.SetLastError(err, errors.New(aws.ToString(output.ConnectionStatus.Message)))

		return output, err
	}

	return nil, err
}
