package github.com/hashicorp/terraform-provider-aws/internal/service/opensearch
import (
	"context"
	"fmt"
	"log"
	"maps"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/opensearch/types"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OpenSearchClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		name := d.Get(names.AttrDomainName).(string)
		input := opensearch.UpdateDomainConfigInput{
			DomainName: aws.String(name),
		}

		if d.HasChange("access_policies") {
			o, n := d.GetChange("access_policies")

			if equivalent, err := awspolicy.PoliciesAreEquivalent(o.(string), n.(string)); err != nil || !equivalent {
				policy, err := structure.NormalizeJsonString(n.(string))
				if err != nil {
					return sdkdiag.AppendErrorf(diags, "policy (%s) is invalid JSON: %s", policy, err)
				}
				input.AccessPolicies = aws.String(policy)
			}
		}

		if d.HasChange("advanced_options") {
			input.AdvancedOptions = flex.ExpandStringValueMap(d.Get("advanced_options").(map[string]any))
		}

		if d.HasChange("advanced_security_options") {
			input.AdvancedSecurityOptions = expandAdvancedSecurityOptions(d.Get("advanced_security_options").([]any))
		}

		if d.HasChange("auto_tune_options") {
			input.AutoTuneOptions = expandAutoTuneOptions(d.Get("auto_tune_options").([]any)[0].(map[string]any))
		}

		if d.HasChange("cognito_options") {
			input.CognitoOptions = expandCognitoOptions(d.Get("cognito_options").([]any))
		}

		if d.HasChange("domain_endpoint_options") {
			input.DomainEndpointOptions = expandDomainEndpointOptions(d.Get("domain_endpoint_options").([]any))
		}

		if d.HasChanges("ebs_options", "cluster_config") {
			options := d.Get("ebs_options").([]any)

			if len(options) == 1 {
				s := options[0].(map[string]any)
				input.EBSOptions = expandEBSOptions(s)
			}

			if d.HasChange("cluster_config") {
				config := d.Get("cluster_config").([]any)

				if len(config) == 1 {
					m := config[0].(map[string]any)
					input.ClusterConfig = expandClusterConfig(m)

					// Work around "ValidationException: Your domain's Elasticsearch version does not support cold storage options. Upgrade to Elasticsearch 7.9 or later.".
					if engineType, version, err := parseEngineVersion(d.Get(names.AttrEngineVersion).(string)); err == nil {
						switch engineType {
						case string(awstypes.EngineTypeElasticsearch):
							if semver.LessThan(version, "7.9") {
								input.ClusterConfig.ColdStorageOptions = nil
							}
						case string(awstypes.EngineTypeOpenSearch):
							// All OpenSearch versions support cold storage options.
						default:
							log.Printf("[WARN] unknown engine type: %s", engineType)
						}
					} else {
						log.Printf("[WARN] %s", err)
					}
				}
			}
		}

		if d.HasChange("encrypt_at_rest") {
			input.EncryptionAtRestOptions = nil
			if v, ok := d.GetOk("encrypt_at_rest"); ok {
				options := v.([]any)
				if options[0] == nil {
					return sdkdiag.AppendErrorf(diags, "at least one field is expected inside encrypt_at_rest")
				}

				s := options[0].(map[string]any)
				input.EncryptionAtRestOptions = expandEncryptAtRestOptions(s)
			}
		}

		if d.HasChange(names.AttrIPAddressType) {
			input.IPAddressType = awstypes.IPAddressType(d.Get(names.AttrIPAddressType).(string))
		}

		if d.HasChange("log_publishing_options") {
			o, n := d.GetChange("log_publishing_options")
			os, ns := o.(*schema.Set), n.(*schema.Set)

			input.LogPublishingOptions = expandLogPublishingOptions(ns.List())

			// Explicitly disable removed log types.
			oldTypes := tfslices.ApplyToAll(os.List(), func(v any) string {
				return v.(map[string]any)["log_type"].(string)
			})
			newTypes := tfslices.ApplyToAll(ns.List(), func(v any) string {
				return v.(map[string]any)["log_type"].(string)
			})
			_, remove, _ := flex.DiffSlices(oldTypes, newTypes, func(s1, s2 string) bool { return s1 == s2 })
			for _, logType := range remove {
				input.LogPublishingOptions[logType] = awstypes.LogPublishingOption{
					Enabled: aws.Bool(false),
				}
			}
		}

		if d.HasChange("node_to_node_encryption") {
			input.NodeToNodeEncryptionOptions = nil
			if v, ok := d.GetOk("node_to_node_encryption"); ok {
				options := v.([]any)

				s := options[0].(map[string]any)
				input.NodeToNodeEncryptionOptions = expandNodeToNodeEncryptionOptions(s)
			}
		}

		if d.HasChange("off_peak_window_options") {
			input.OffPeakWindowOptions = expandOffPeakWindowOptions(d.Get("off_peak_window_options").([]any)[0].(map[string]any))
		}

		if d.HasChange("snapshot_options") {
			options := d.Get("snapshot_options").([]any)

			if len(options) == 1 {
				o := options[0].(map[string]any)

				snapshotOptions := awstypes.SnapshotOptions{
					AutomatedSnapshotStartHour: aws.Int32(int32(o["automated_snapshot_start_hour"].(int))),
				}

				input.SnapshotOptions = &snapshotOptions
			}
		}

		if d.HasChange("software_update_options") {
			input.SoftwareUpdateOptions = expandSoftwareUpdateOptions(d.Get("software_update_options").([]any))
		}

		if d.HasChange("vpc_options") {
			options := d.Get("vpc_options").([]any)
			s := options[0].(map[string]any)
			input.VPCOptions = expandVPCOptions(s)
		}

		_, err := tfresource.RetryWhen(ctx, propagationTimeout,
			func(ctx context.Context) (any, error) {
				return conn.UpdateDomainConfig(ctx, &input)
			},
			domainErrorRetryable,
		)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating OpenSearch Domain (%s) Config: %s", d.Id(), err)
		}

		if err := waitForDomainUpdate(ctx, conn, name, d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for OpenSearch Domain (%s) Config update: %s", d.Id(), err)
		}

		if d.HasChange(names.AttrEngineVersion) {
			input := opensearch.UpgradeDomainInput{
				DomainName:    aws.String(name),
				TargetVersion: aws.String(d.Get(names.AttrEngineVersion).(string)),
			}

			_, err := conn.UpgradeDomain(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "upgrading OpenSearch Domain (%s): %s", d.Id(), err)
			}

			if _, err := waitUpgradeSucceeded(ctx, conn, name, d.Timeout(schema.TimeoutUpdate)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for OpenSearch Domain (%s) upgrade: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceDomainRead(ctx, d, meta)...)
}
