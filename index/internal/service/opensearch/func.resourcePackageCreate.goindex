package github.com/hashicorp/terraform-provider-aws/internal/service/opensearch
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/opensearch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePackageCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).OpenSearchClient(ctx)

	name := d.Get("package_name").(string)
	input := &opensearch.CreatePackageInput{
		PackageDescription: aws.String(d.Get("package_description").(string)),
		PackageName:        aws.String(name),
		PackageType:        awstypes.PackageType(d.Get("package_type").(string)),
	}

	if v, ok := d.GetOk("package_source"); ok {
		input.PackageSource = expandPackageSource(v.([]any)[0].(map[string]any))
	}

	output, err := conn.CreatePackage(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating OpenSearch Package (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.PackageDetails.PackageID))

	return append(diags, resourcePackageRead(ctx, d, meta)...)
}
