package github.com/hashicorp/terraform-provider-aws/internal/service/appstream
import (
	"context"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appstream"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appstream/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *imageDataSource) Schema(ctx context.Context, request datasource.SchemaRequest, response *datasource.SchemaResponse) {
	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"applications": framework.DataSourceComputedListOfObjectAttribute[applicationModel](ctx),
			"appstream_agent_version": schema.StringAttribute{
				Computed: true,
			},
			names.AttrARN: schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Computed:   true,
				Optional:   true,
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.MatchRoot(names.AttrName), path.MatchRoot("name_regex")),
				},
			},
			"base_image_arn": schema.StringAttribute{
				Computed: true,
			},
			names.AttrCreatedTime: schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
			names.AttrDescription: schema.StringAttribute{
				Computed: true,
			},
			names.AttrDisplayName: schema.StringAttribute{
				Computed: true,
			},
			"image_builder_name": schema.StringAttribute{
				Computed: true,
			},
			"image_builder_supported": schema.BoolAttribute{
				Computed: true,
			},
			"image_permissions": framework.DataSourceComputedListOfObjectAttribute[imagePermissionsModel](ctx),
			names.AttrMostRecent: schema.BoolAttribute{
				Optional: true,
			},
			names.AttrName: schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.MatchRoot(names.AttrARN), path.MatchRoot("name_regex")),
				},
			},
			"name_regex": schema.StringAttribute{
				CustomType: fwtypes.RegexpType,
				Optional:   true,
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.MatchRoot(names.AttrARN), path.MatchRoot(names.AttrName)),
				},
			},
			"platform": schema.StringAttribute{
				Computed: true,
			},
			"public_base_image_released_date": schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
			names.AttrState: schema.StringAttribute{
				Computed: true,
			},
			"state_change_reason": schema.ListAttribute{
				CustomType: fwtypes.NewListNestedObjectTypeOf[imageStateChangeReasonModel](ctx),
				Computed:   true,
			},
			names.AttrType: schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.VisibilityType](),
				Optional:   true,
			},
		},
	}
}
