package github.com/hashicorp/terraform-provider-aws/internal/service/appstream
import (
	"context"
	"errors"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appstream"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appstream/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStackRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppStreamClient(ctx)

	stack, err := findStackByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] AppStream Stack (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppStream Stack (%s): %s", d.Id(), err)
	}

	if err = d.Set("access_endpoints", flattenAccessEndpoints(stack.AccessEndpoints)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting access_endpoints: %s", err)
	}
	if err = d.Set("application_settings", flattenApplicationSettings(stack.ApplicationSettings)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting application_settings: %s", err)
	}
	d.Set(names.AttrARN, stack.Arn)
	d.Set(names.AttrCreatedTime, aws.ToTime(stack.CreatedTime).Format(time.RFC3339))
	d.Set(names.AttrDescription, stack.Description)
	d.Set(names.AttrDisplayName, stack.DisplayName)
	d.Set("embed_host_domains", stack.EmbedHostDomains)
	d.Set("feedback_url", stack.FeedbackURL)
	d.Set(names.AttrName, stack.Name)
	d.Set("redirect_url", stack.RedirectURL)
	if err = d.Set("storage_connectors", flattenStorageConnectors(stack.StorageConnectors)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting storage_connectors: %s", err)
	}
	if err = d.Set("streaming_experience_settings", flattenStreamingExperienceSettings(stack.StreamingExperienceSettings)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting streaming_experience_settings: %s", err)
	}
	if err = d.Set("user_settings", flattenUserSettings(stack.UserSettings)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting user_settings: %s", err)
	}

	return diags
}
