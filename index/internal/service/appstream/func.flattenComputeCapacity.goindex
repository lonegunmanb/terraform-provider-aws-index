package github.com/hashicorp/terraform-provider-aws/internal/service/appstream
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appstream"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appstream/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenComputeCapacity(apiObject *awstypes.ComputeCapacityStatus) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.Available; v != nil {
		tfMap["available"] = aws.ToInt32(v)
	}

	if v := apiObject.DesiredUserSessions; v != nil {
		tfMap["desired_sessions"] = aws.ToInt32(v)
	}

	// desiredInstances is always returned by the API but cannot be used in conjunction with desiredSessions
	if v := apiObject.Desired; v != nil && tfMap["desired_sessions"] == nil {
		tfMap["desired_instances"] = aws.ToInt32(v)
	}

	if v := apiObject.InUse; v != nil {
		tfMap["in_use"] = aws.ToInt32(v)
	}

	if v := apiObject.Running; v != nil {
		tfMap["running"] = aws.ToInt32(v)
	}

	if len(tfMap) == 0 {
		return nil
	}

	return tfMap
}
