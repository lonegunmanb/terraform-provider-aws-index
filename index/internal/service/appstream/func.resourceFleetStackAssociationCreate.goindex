package github.com/hashicorp/terraform-provider-aws/internal/service/appstream
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appstream"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appstream/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceFleetStackAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppStreamClient(ctx)

	fleetName, stackName := d.Get("fleet_name").(string), d.Get("stack_name").(string)
	id := fleetStackAssociationCreateResourceID(fleetName, stackName)
	input := appstream.AssociateFleetInput{
		FleetName: aws.String(fleetName),
		StackName: aws.String(stackName),
	}

	const (
		timeout = 15 * time.Minute
	)
	_, err := tfresource.RetryWhenIsA[*awstypes.ResourceNotFoundException](ctx, timeout, func() (any, error) {
		return conn.AssociateFleet(ctx, &input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating AppStream Fleet Stack Association (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceFleetStackAssociationRead(ctx, d, meta)...)
}
