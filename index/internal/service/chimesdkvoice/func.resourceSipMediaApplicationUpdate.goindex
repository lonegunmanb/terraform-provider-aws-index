package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkvoice
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSipMediaApplicationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ChimeSDKVoiceClient(ctx)

	if d.HasChanges(names.AttrName, names.AttrEndpoints) {
		updateInput := &chimesdkvoice.UpdateSipMediaApplicationInput{
			SipMediaApplicationId: aws.String(d.Id()),
			Name:                  aws.String(d.Get(names.AttrName).(string)),
			Endpoints:             expandSipMediaApplicationEndpoints(d.Get(names.AttrEndpoints).([]any)),
		}

		if _, err := conn.UpdateSipMediaApplication(ctx, updateInput); err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Sip Media Application (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceSipMediaApplicationRead(ctx, d, meta)...)
}
