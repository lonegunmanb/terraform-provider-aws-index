package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkvoice
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSipRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ChimeSDKVoiceClient(ctx)

	input := &chimesdkvoice.CreateSipRuleInput{
		Name:               aws.String(d.Get(names.AttrName).(string)),
		TriggerType:        awstypes.SipRuleTriggerType(d.Get("trigger_type").(string)),
		TriggerValue:       aws.String(d.Get("trigger_value").(string)),
		TargetApplications: expandSipRuleTargetApplications(d.Get("target_applications").(*schema.Set).List()),
	}

	if v, ok := d.GetOk("disabled"); ok {
		input.Disabled = aws.Bool(v.(bool))
	}

	resp, err := conn.CreateSipRule(ctx, input)

	if err != nil || resp.SipRule == nil {
		return sdkdiag.AppendErrorf(diags, "creating ChimeSKVoice Sip Rule: %s", err)
	}

	d.SetId(aws.ToString(resp.SipRule.SipRuleId))

	return append(diags, resourceSipRuleRead(ctx, d, meta)...)
}
