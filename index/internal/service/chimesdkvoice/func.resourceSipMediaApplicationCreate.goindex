package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkvoice
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSipMediaApplicationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ChimeSDKVoiceClient(ctx)

	createInput := &chimesdkvoice.CreateSipMediaApplicationInput{
		AwsRegion: aws.String(d.Get("aws_region").(string)),
		Name:      aws.String(d.Get(names.AttrName).(string)),
		Endpoints: expandSipMediaApplicationEndpoints(d.Get(names.AttrEndpoints).([]any)),
		Tags:      getTagsIn(ctx),
	}

	resp, err := conn.CreateSipMediaApplication(ctx, createInput)
	if err != nil || resp.SipMediaApplication == nil {
		return sdkdiag.AppendErrorf(diags, "creating Chime Sip Media Application: %s", err)
	}

	d.SetId(aws.ToString(resp.SipMediaApplication.SipMediaApplicationId))
	return append(diags, resourceSipMediaApplicationRead(ctx, d, meta)...)
}
