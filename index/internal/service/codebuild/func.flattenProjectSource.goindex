package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"bytes"
	"context"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenProjectSource(apiObject *types.ProjectSource) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"buildspec":           aws.ToString(apiObject.Buildspec),
		names.AttrLocation:    aws.ToString(apiObject.Location),
		"git_clone_depth":     aws.ToInt32(apiObject.GitCloneDepth),
		"insecure_ssl":        aws.ToBool(apiObject.InsecureSsl),
		"report_build_status": aws.ToBool(apiObject.ReportBuildStatus),
		names.AttrType:        apiObject.Type,
	}

	tfMap["git_submodules_config"] = flattenProjectGitSubmodulesConfig(apiObject.GitSubmodulesConfig)

	tfMap["build_status_config"] = flattenProjectBuildStatusConfig(apiObject.BuildStatusConfig)

	if apiObject.SourceIdentifier != nil {
		tfMap["source_identifier"] = aws.ToString(apiObject.SourceIdentifier)
	}

	tfMap["auth"] = flattenSourceAuth(apiObject.Auth)

	return tfMap
}
