package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findSourceCredentials(ctx context.Context, conn *codebuild.Client, input *codebuild.ListSourceCredentialsInput, filter tfslices.Predicate[*types.SourceCredentialsInfo]) ([]types.SourceCredentialsInfo, error) {
	var sourceCredentials []types.SourceCredentialsInfo
	output, err := conn.ListSourceCredentials(ctx, input)

	if err != nil {
		return nil, err
	}

	if output == nil {
		return nil, tfresource.NewEmptyResultError(input)
	}

	for _, v := range output.SourceCredentialsInfos {
		if filter(&v) {
			sourceCredentials = append(sourceCredentials, v)
		}
	}

	return sourceCredentials, nil
}
