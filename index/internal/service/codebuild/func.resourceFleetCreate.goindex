package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFleetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CodeBuildClient(ctx)

	input := &codebuild.CreateFleetInput{
		BaseCapacity:    aws.Int32(int32(d.Get("base_capacity").(int))),
		ComputeType:     types.ComputeType(d.Get("compute_type").(string)),
		EnvironmentType: types.EnvironmentType(d.Get("environment_type").(string)),
		Name:            aws.String(d.Get(names.AttrName).(string)),
		Tags:            getTagsIn(ctx),
	}

	if v, ok := d.GetOk("compute_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ComputeConfiguration = expandComputeConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("fleet_service_role"); ok {
		input.FleetServiceRole = aws.String(v.(string))
	}

	if v, ok := d.GetOk("image_id"); ok {
		input.ImageId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("overflow_behavior"); ok {
		input.OverflowBehavior = types.FleetOverflowBehavior(v.(string))
	}

	if v, ok := d.GetOk("scaling_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ScalingConfiguration = expandScalingConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrVPCConfig); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.VpcConfig = expandVPCConfig(v.([]any)[0].(map[string]any))
	}

	// InvalidInputException: CodeBuild is not authorized to perform
	outputRaw, err := tfresource.RetryWhenIsAErrorMessageContains[*types.InvalidInputException](ctx, propagationTimeout, func() (any, error) {
		return conn.CreateFleet(ctx, input)
	}, "ot authorized to perform")

	if err != nil {
		return create.AppendDiagError(diags, names.CodeBuild, create.ErrActionCreating, resNameFleet, d.Get(names.AttrName).(string), err)
	}

	d.SetId(aws.ToString(outputRaw.(*codebuild.CreateFleetOutput).Fleet.Arn))

	const (
		timeout = 20 * time.Minute
	)
	if _, err := waitFleetCreated(ctx, conn, d.Id(), timeout); err != nil {
		return create.AppendDiagError(diags, names.CodeBuild, create.ErrActionWaitingForCreation, resNameFleet, d.Id(), err)
	}

	return append(diags, resourceFleetRead(ctx, d, meta)...)
}
