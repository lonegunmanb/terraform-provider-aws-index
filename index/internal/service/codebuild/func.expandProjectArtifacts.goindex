package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"bytes"
	"context"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandProjectArtifacts(tfMap map[string]any) *types.ProjectArtifacts {
	if tfMap == nil {
		return nil
	}

	artifactType := types.ArtifactsType(tfMap[names.AttrType].(string))
	apiObject := &types.ProjectArtifacts{
		Type: artifactType,
	}

	// Only valid for S3 and CODEPIPELINE artifacts types
	// InvalidInputException: Invalid artifacts: artifact type NO_ARTIFACTS should have null encryptionDisabled
	if artifactType == types.ArtifactsTypeS3 || artifactType == types.ArtifactsTypeCodepipeline {
		apiObject.EncryptionDisabled = aws.Bool(tfMap["encryption_disabled"].(bool))
	}

	if v, ok := tfMap["artifact_identifier"].(string); ok && v != "" {
		apiObject.ArtifactIdentifier = aws.String(v)
	}

	if v, ok := tfMap["bucket_owner_access"].(string); ok && v != "" {
		apiObject.BucketOwnerAccess = types.BucketOwnerAccess(v)
	}

	if v, ok := tfMap[names.AttrLocation].(string); ok && v != "" {
		apiObject.Location = aws.String(v)
	}

	if v, ok := tfMap[names.AttrName].(string); ok && v != "" {
		apiObject.Name = aws.String(v)
	}

	if v, ok := tfMap["namespace_type"].(string); ok && v != "" {
		apiObject.NamespaceType = types.ArtifactNamespace(v)
	}

	if v, ok := tfMap["override_artifact_name"]; ok {
		apiObject.OverrideArtifactName = aws.Bool(v.(bool))
	}

	if v, ok := tfMap["packaging"].(string); ok && v != "" {
		apiObject.Packaging = types.ArtifactPackaging(v)
	}

	if v, ok := tfMap[names.AttrPath].(string); ok && v != "" {
		apiObject.Path = aws.String(v)
	}

	return apiObject
}
