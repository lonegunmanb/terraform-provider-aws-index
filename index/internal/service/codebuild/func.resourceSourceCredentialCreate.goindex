package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSourceCredentialCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodeBuildClient(ctx)

	authType := types.AuthType(d.Get("auth_type").(string))
	input := &codebuild.ImportSourceCredentialsInput{
		AuthType:   authType,
		ServerType: types.ServerType(d.Get("server_type").(string)),
		Token:      aws.String(d.Get("token").(string)),
	}

	if attr, ok := d.GetOk(names.AttrUserName); ok && authType == types.AuthTypeBasicAuth {
		input.Username = aws.String(attr.(string))
	}

	output, err := conn.ImportSourceCredentials(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating CodeBuild Source Credential: %s", err)
	}

	d.SetId(aws.ToString(output.Arn))

	return append(diags, resourceSourceCredentialRead(ctx, d, meta)...)
}
