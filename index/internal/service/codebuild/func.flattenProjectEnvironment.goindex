package github.com/hashicorp/terraform-provider-aws/internal/service/codebuild
import (
	"bytes"
	"context"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codebuild/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenProjectEnvironment(apiObject *types.ProjectEnvironment) []any {
	tfMap := map[string]any{
		"compute_type":                apiObject.ComputeType,
		"image_pull_credentials_type": apiObject.ImagePullCredentialsType,
		names.AttrType:                apiObject.Type,
	}

	tfMap["docker_server"] = flattenDockerServer(apiObject.DockerServer)
	tfMap["fleet"] = flattenFleet(apiObject.Fleet)
	tfMap["image"] = aws.ToString(apiObject.Image)
	tfMap[names.AttrCertificate] = aws.ToString(apiObject.Certificate)
	tfMap["privileged_mode"] = aws.ToBool(apiObject.PrivilegedMode)
	tfMap["registry_credential"] = flattenRegistryCredential(apiObject.RegistryCredential)

	if apiObject.EnvironmentVariables != nil {
		tfMap["environment_variable"] = flattenEnvironmentVariables(apiObject.EnvironmentVariables)
	}

	return []any{tfMap}
}
