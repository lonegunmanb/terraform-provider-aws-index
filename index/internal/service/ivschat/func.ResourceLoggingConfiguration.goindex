package github.com/hashicorp/terraform-provider-aws/internal/service/ivschat
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ivschat"
	"github.com/aws/aws-sdk-go-v2/service/ivschat/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ResourceLoggingConfiguration() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceLoggingConfigurationCreate,
		ReadWithoutTimeout:   resourceLoggingConfigurationRead,
		UpdateWithoutTimeout: resourceLoggingConfigurationUpdate,
		DeleteWithoutTimeout: resourceLoggingConfigurationDelete,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			names.AttrARN: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"destination_configuration": {
				Type:     schema.TypeList,
				MaxItems: 1,
				MinItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrCloudWatchLogs: {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							ExactlyOneOf: []string{
								"destination_configuration.0.cloudwatch_logs",
								"destination_configuration.0.firehose",
								"destination_configuration.0.s3",
							},
							ConflictsWith: []string{
								"destination_configuration.0.firehose",
								"destination_configuration.0.s3",
							},
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrLogGroupName: {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z_./#-]{1,512}$`), "must contain only lowercase alphanumeric characters, hyphen, dot, underscore, forward slash, or hash sign, and between 1 and 512 characters"),
									},
								},
							},
						},
						"firehose": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							ExactlyOneOf: []string{
								"destination_configuration.0.cloudwatch_logs",
								"destination_configuration.0.firehose",
								"destination_configuration.0.s3",
							},
							ConflictsWith: []string{
								"destination_configuration.0.cloudwatch_logs",
								"destination_configuration.0.s3",
							},
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"delivery_stream_name": {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z_.-]{1,64}$`), "must contain only lowercase alphanumeric characters, hyphen, dot, or underscore, and between 1 and 64 characters"),
									},
								},
							},
						},
						"s3": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							ExactlyOneOf: []string{
								"destination_configuration.0.cloudwatch_logs",
								"destination_configuration.0.firehose",
								"destination_configuration.0.s3",
							},
							ConflictsWith: []string{
								"destination_configuration.0.cloudwatch_logs",
								"destination_configuration.0.firehose",
							},
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrBucketName: {
										Type:         schema.TypeString,
										Required:     true,
										ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[0-9a-z.-]{3,63}$`), "must contain only lowercase alphanumeric characters, hyphen, or dot, and between 3 and 63 characters"),
									},
								},
							},
						},
					},
				},
			},
			names.AttrState: {
				Type:     schema.TypeString,
				Computed: true,
			},
			names.AttrName: {
				Type:     schema.TypeString,
				Optional: true,
			},
			names.AttrTags:    tftags.TagsSchema(),
			names.AttrTagsAll: tftags.TagsSchemaComputed(),
		},
	}
}
