package github.com/hashicorp/terraform-provider-aws/internal/service/ivschat
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ivschat"
	"github.com/aws/aws-sdk-go-v2/service/ivschat/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRoomUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).IVSChatClient(ctx)

	update := false

	in := &ivschat.UpdateRoomInput{
		Identifier: aws.String(d.Id()),
	}

	if d.HasChanges("logging_configuration_identifiers") {
		in.LoggingConfigurationIdentifiers = flex.ExpandStringValueList(d.Get("logging_configuration_identifiers").([]any))
		update = true
	}

	if d.HasChanges("maximum_message_length") {
		in.MaximumMessageLength = aws.Int32(int32(d.Get("maximum_message_length").(int)))
		update = true
	}

	if d.HasChanges("maximum_message_rate_per_second") {
		in.MaximumMessageRatePerSecond = aws.Int32(int32(d.Get("maximum_message_rate_per_second").(int)))
		update = true
	}

	if d.HasChanges("message_review_handler") {
		in.MessageReviewHandler = expandMessageReviewHandler(d.Get("message_review_handler").([]any))
		update = true
	}

	if d.HasChanges(names.AttrName) {
		in.Name = aws.String(d.Get(names.AttrName).(string))
		update = true
	}

	if !update {
		return diags
	}

	log.Printf("[DEBUG] Updating IVSChat Room (%s): %#v", d.Id(), in)
	out, err := conn.UpdateRoom(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.IVSChat, create.ErrActionUpdating, ResNameRoom, d.Id(), err)
	}

	if _, err := waitRoomUpdated(ctx, conn, aws.ToString(out.Arn), d.Timeout(schema.TimeoutUpdate), in); err != nil {
		return create.AppendDiagError(diags, names.IVSChat, create.ErrActionWaitingForUpdate, ResNameRoom, d.Id(), err)
	}

	return append(diags, resourceRoomRead(ctx, d, meta)...)
}
