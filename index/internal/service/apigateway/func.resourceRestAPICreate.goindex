package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRestAPICreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := apigateway.CreateRestApiInput{
		Name: aws.String(name),
		Tags: getTagsIn(ctx),
	}

	if v, ok := d.GetOk("api_key_source"); ok {
		input.ApiKeySource = types.ApiKeySourceType(v.(string))
	}

	if v, ok := d.GetOk("binary_media_types"); ok {
		input.BinaryMediaTypes = flex.ExpandStringValueList(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("disable_execute_api_endpoint"); ok {
		input.DisableExecuteApiEndpoint = v.(bool)
	}

	if v, ok := d.GetOk("endpoint_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.EndpointConfiguration = expandEndpointConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("minimum_compression_size"); ok {
		if v, null, _ := nullable.Int(v.(string)).ValueInt32(); !null && v != -1 {
			input.MinimumCompressionSize = aws.Int32(v)
		}
	}

	if v, ok := d.GetOk(names.AttrPolicy); ok {
		v, err := structure.NormalizeJsonString(v.(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input.Policy = aws.String(v)
	}

	output, err := conn.CreateRestApi(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating API Gateway REST API (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Id))

	if body, ok := d.GetOk("body"); ok {
		// Terraform implementation uses the `overwrite` mode by default.
		// Overwrite mode will delete existing literal properties if they are not explicitly set in the OpenAPI definition.
		// The VPC endpoints deletion and immediate recreation can cause a race condition.
		// 		Impacted properties: ApiKeySourceType, BinaryMediaTypes, Description, EndpointConfiguration, MinimumCompressionSize, Name, Policy
		// The `merge` mode will not delete literal properties of a RestApi if theyâ€™re not explicitly set in the OAS definition.
		input := apigateway.PutRestApiInput{
			Body:      []byte(body.(string)),
			Mode:      types.PutMode(modeConfigOrDefault(d)),
			RestApiId: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("fail_on_warnings"); ok {
			input.FailOnWarnings = v.(bool)
		}

		if v, ok := d.GetOk(names.AttrParameters); ok && len(v.(map[string]any)) > 0 {
			input.Parameters = flex.ExpandStringValueMap(v.(map[string]any))
		}

		api, err := conn.PutRestApi(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating API Gateway REST API (%s) specification: %s", d.Id(), err)
		}

		// Using PutRestApi with mode overwrite will remove any configuration
		// that was done with CreateRestApi. Reconcile these changes by having
		// any Terraform configured values overwrite imported configuration.
		if operations := resourceRestAPIWithBodyUpdateOperations(d, api); len(operations) > 0 {
			input := apigateway.UpdateRestApiInput{
				PatchOperations: operations,
				RestApiId:       aws.String(d.Id()),
			}

			_, err := conn.UpdateRestApi(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating API Gateway REST API (%s) after OpenAPI import: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceRestAPIRead(ctx, d, meta)...)
}
