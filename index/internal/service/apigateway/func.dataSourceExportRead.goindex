package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceExportRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	apiID := d.Get("rest_api_id").(string)
	stageName := d.Get("stage_name").(string)
	input := apigateway.GetExportInput{
		RestApiId:  aws.String(apiID),
		StageName:  aws.String(stageName),
		ExportType: aws.String(d.Get("export_type").(string)),
	}

	if v, ok := d.GetOk("accepts"); ok {
		input.Accepts = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrParameters); ok && len(v.(map[string]any)) > 0 {
		input.Parameters = flex.ExpandStringValueMap(v.(map[string]any))
	}

	id := apiID + ":" + stageName

	export, err := conn.GetExport(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading API Gateway Export (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("body", string(export.Body))
	d.Set("content_disposition", export.ContentDisposition)
	d.Set(names.AttrContentType, export.ContentType)

	return diags
}
