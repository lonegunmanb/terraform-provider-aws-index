package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"maps"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIntegrationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	operations := make([]types.PatchOperation, 0)

	// https://docs.aws.amazon.com/apigateway/api-reference/link-relation/integration-update/#remarks
	// According to the above documentation, only a few parts are addable / removable.
	if d.HasChange("request_templates") {
		o, n := d.GetChange("request_templates")

		os := o.(map[string]any)
		ns := n.(map[string]any)

		// Handle Removal
		for k := range os {
			if _, ok := ns[k]; !ok {
				operations = append(operations, types.PatchOperation{
					Op:   types.OpRemove,
					Path: aws.String(parameterizeParameter(k, requestTemplatesType)),
				})
			}
		}

		for k, v := range ns {
			// Handle replaces
			if _, ok := os[k]; ok {
				operations = append(operations, types.PatchOperation{
					Op:    types.OpReplace,
					Path:  aws.String(parameterizeParameter(k, requestTemplatesType)),
					Value: aws.String(v.(string)),
				})
			}

			// Handle additions
			if _, ok := os[k]; !ok {
				operations = append(operations, types.PatchOperation{
					Op:    types.OpAdd,
					Path:  aws.String(parameterizeParameter(k, requestTemplatesType)),
					Value: aws.String(v.(string)),
				})
			}
		}
	}

	if d.HasChange("request_parameters") {
		o, n := d.GetChange("request_parameters")

		os := o.(map[string]any)
		ns := n.(map[string]any)

		// Handle Removal
		for k, v := range os {
			if _, ok := ns[k]; !ok {
				operations = append(operations, types.PatchOperation{
					Op:    types.OpRemove,
					Path:  aws.String(parameterizeParameter(k, requestParameterType)),
					Value: aws.String(v.(string)),
				})
			}
		}

		for k, v := range ns {
			// Handle replaces
			// Replaces only if values are different
			if _, ok := os[k]; ok && os[k].(string) != v.(string) {
				operations = append(operations, types.PatchOperation{
					Op:    types.OpReplace,
					Path:  aws.String(parameterizeParameter(k, requestParameterType)),
					Value: aws.String(v.(string)),
				})
			}

			// Handle additions
			if _, ok := os[k]; !ok {
				operations = append(operations, types.PatchOperation{
					Op:    types.OpAdd,
					Path:  aws.String(parameterizeParameter(k, requestParameterType)),
					Value: aws.String(v.(string)),
				})
			}
		}
	}

	ckpOperations := make([]types.PatchOperation, 0) // separating from the other operations

	if d.HasChange("cache_key_parameters") {
		o, n := d.GetChange("cache_key_parameters")

		os := o.(*schema.Set)
		ns := n.(*schema.Set)

		removalList := os.Difference(ns)
		for _, v := range removalList.List() {
			ckpOperations = append(ckpOperations, types.PatchOperation{
				Op:    types.OpRemove,
				Path:  aws.String(parameterizeParameter(v.(string), cacheKeyParameterType)),
				Value: aws.String(""),
			})
		}

		// "Replace" for cache key parameter isn't actually a thing but provides a way to mark the
		// parameter for further evaluation during update processing. For example, sometimes, according to
		// Terraform, it's a replace, but the parameter doesn't exist. In that case, it should be an add.
		for _, v := range ns.Intersection(os).List() {
			ckpOperations = append(ckpOperations, types.PatchOperation{
				Op:    types.OpReplace,
				Path:  aws.String(parameterizeParameter(v.(string), cacheKeyParameterType)),
				Value: aws.String(""),
			})
		}

		for _, v := range ns.Difference(os).List() {
			ckpOperations = append(ckpOperations, types.PatchOperation{
				Op:    types.OpAdd,
				Path:  aws.String(parameterizeParameter(v.(string), cacheKeyParameterType)),
				Value: aws.String(""),
			})
		}
	}

	if d.HasChange("cache_namespace") {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/cacheNamespace"),
			Value: aws.String(d.Get("cache_namespace").(string)),
		})
	}

	// The documentation https://docs.aws.amazon.com/apigateway/api-reference/link-relation/integration-update/ says
	// that uri changes are only supported for non-mock types. Because the uri value is not used in mock
	// resources, it means that the uri can always be updated
	if d.HasChange(names.AttrURI) {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/uri"),
			Value: aws.String(d.Get(names.AttrURI).(string)),
		})
	}

	if d.HasChange("content_handling") {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/contentHandling"),
			Value: aws.String(d.Get("content_handling").(string)),
		})
	}

	if d.HasChange("connection_type") {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/connectionType"),
			Value: aws.String(d.Get("connection_type").(string)),
		})
	}

	if d.HasChange(names.AttrConnectionID) {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/connectionId"),
			Value: aws.String(d.Get(names.AttrConnectionID).(string)),
		})
	}

	if d.HasChange("timeout_milliseconds") {
		operations = append(operations, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String("/timeoutInMillis"),
			Value: aws.String(strconv.Itoa(d.Get("timeout_milliseconds").(int))),
		})
	}

	if d.HasChange("tls_config") {
		if v, ok := d.GetOk("tls_config"); ok && len(v.([]any)) > 0 {
			m := v.([]any)[0].(map[string]any)

			operations = append(operations, types.PatchOperation{
				Op:    types.OpReplace,
				Path:  aws.String("/tlsConfig/insecureSkipVerification"),
				Value: aws.String(strconv.FormatBool(m["insecure_skip_verification"].(bool))),
			})
		}
	}

	// Updating, Stage 1: Everything except cache key parameters

	// Updating is handled in two stages because of the challenges of keeping AWS and state in sync in
	// these, and probably other, situations:
	//  - Cache key parameters are updated by request parameter updates.
	//  - One cache key parameter can disappear when another is added.
	//  - Cache key parameters can be updated independently of request parameters.
	//
	// These challenges are not documented in the API Gateway documentation, but they are observed in
	// practice resulting in these errors:
	//  - BadRequestException: Invalid mapping expression specified: Validation Result: warnings : [], errors : [Invalid mapping expression parameter specified: method.request.querystring.X-Some-Header-2]
	//  - NotFoundException: Invalid parameter name specified
	//
	// Using two stages is necessary because making these updates simultaneously can cause unpredictable
	// "not found" errors: the first operation succeeds, but the second fails if it attempts to modify a
	// non-existent parameter. To prevent this, we initially perform only the request parameter updates.
	// In a second stage, we examine the results and adjust the cache key parameter operations as needed
	// based on those results.

	if len(operations) > 0 {
		input := apigateway.UpdateIntegrationInput{
			HttpMethod:      aws.String(d.Get("http_method").(string)),
			PatchOperations: operations,
			ResourceId:      aws.String(d.Get(names.AttrResourceID).(string)),
			RestApiId:       aws.String(d.Get("rest_api_id").(string)),
		}

		_, err := conn.UpdateIntegration(ctx, &input)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating API Gateway Integration, initial (%s): %s", d.Id(), err)
		}
	}

	// Updating, Stage 2: Cache key parameters

	// As described above, in the second stage, we look at the results of the first stage and adjust the
	// cache key parameter operations as needed.

	// NOTE: The changes in #29991 seem like an attempt to fix this same problem in the *method* resource.
	// However, in debugging, the approach there always calls Update with an empty set of operations and
	// that sometimes causes errors. To avoid the risk of breaking some remote edge case, we're leaving
	// the #29991 attempt in *method* but it can likely be removed.

	// No reasonable way to determine the first stage has fully propagated, so we wait a bit.
	time.Sleep(pauseBetweenUpdateStages)

	integration, err := findIntegrationByThreePartKey(ctx, conn, d.Get("http_method").(string), d.Get(names.AttrResourceID).(string), d.Get("rest_api_id").(string))
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating API Gateway Integration (%s): %s", d.Id(), err)
	}

	// Go through the cache key parameters, one by one, and include or exclude them based on the existing
	// cache key parameters.
	if len(ckpOperations) > 0 {
		lackingOperations := make([]types.PatchOperation, 0)

	outer:
		for _, ckp := range ckpOperations {
			if ckp.Op == types.OpReplace {
				// Search for the cache key parameter in the existing cache key parameters
				for _, p := range integration.CacheKeyParameters {
					if aws.ToString(ckp.Path) == parameterizeParameter(p, cacheKeyParameterType) {
						// Op is excluded--for a cache key parameter, a replace doesn't do anything if the parameter already exists.
						// Testing against the API, this is reached.
						continue outer
					}
				}

				// Op is included--since it's not found, it changes "replace" to "add".
				// Testing against the API, this is reached.
				lackingOperations = append(lackingOperations, types.PatchOperation{
					Op:    types.OpAdd,
					Path:  ckp.Path,
					Value: ckp.Value,
				})
				continue
			}

			if ckp.Op == types.OpRemove {
				// Search for the cache key parameter in the existing cache key parameters
				for _, p := range integration.CacheKeyParameters {
					if aws.ToString(ckp.Path) == parameterizeParameter(p, cacheKeyParameterType) {
						// Op is included--since it's found, it's removed.
						// Testing against the API, this is NOT reached but included for completeness or just in case.
						lackingOperations = append(lackingOperations, ckp)
						continue outer
					}
				}
				// Op is excluded--since it's not found, it's not removed.
				// Testing against the API, this is reached.
				continue
			}

			if ckp.Op == types.OpAdd {
				// Search for the cache key parameter in the existing cache key parameters
				for _, p := range integration.CacheKeyParameters {
					if aws.ToString(ckp.Path) == parameterizeParameter(p, cacheKeyParameterType) {
						// Op is excluded--since it's found, it doesn't need to be added.
						// Testing against the API, this is NOT reached but included for completeness or just in case.
						continue outer
					}
				}

				// Op is included--since it's not found, it's added.
				// Testing against the API, this is reached.
				lackingOperations = append(lackingOperations, ckp)
				continue outer
			}
		}

		if len(lackingOperations) > 0 {
			input := apigateway.UpdateIntegrationInput{
				HttpMethod:      aws.String(d.Get("http_method").(string)),
				PatchOperations: lackingOperations,
				ResourceId:      aws.String(d.Get(names.AttrResourceID).(string)),
				RestApiId:       aws.String(d.Get("rest_api_id").(string)),
			}
			_, err = conn.UpdateIntegration(ctx, &input)
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating API Gateway Integration, secondary (%s): %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceIntegrationRead(ctx, d, meta)...)
}
