package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceMethodSettingsUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	methodPath := d.Get("method_path").(string)
	prefix := fmt.Sprintf("/%s/", methodPath)

	ops := make([]types.PatchOperation, 0)
	if d.HasChange("settings.0.metrics_enabled") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "metrics/enabled"),
			Value: aws.String(strconv.FormatBool(d.Get("settings.0.metrics_enabled").(bool))),
		})
	}
	if d.HasChange("settings.0.logging_level") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "logging/loglevel"),
			Value: aws.String(d.Get("settings.0.logging_level").(string)),
		})
	}
	if d.HasChange("settings.0.data_trace_enabled") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "logging/dataTrace"),
			Value: aws.String(strconv.FormatBool(d.Get("settings.0.data_trace_enabled").(bool))),
		})
	}
	if d.HasChange("settings.0.throttling_burst_limit") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "throttling/burstLimit"),
			Value: aws.String(strconv.Itoa(d.Get("settings.0.throttling_burst_limit").(int))),
		})
	}
	if d.HasChange("settings.0.throttling_rate_limit") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "throttling/rateLimit"),
			Value: aws.String(fmt.Sprintf("%f", d.Get("settings.0.throttling_rate_limit").(float64))),
		})
	}
	if d.HasChange("settings.0.caching_enabled") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "caching/enabled"),
			Value: aws.String(strconv.FormatBool(d.Get("settings.0.caching_enabled").(bool))),
		})
	}
	if v, ok := d.GetOkExists("settings.0.cache_ttl_in_seconds"); ok {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "caching/ttlInSeconds"),
			Value: aws.String(strconv.Itoa(v.(int))),
		})
	}
	if d.HasChange("settings.0.cache_data_encrypted") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "caching/dataEncrypted"),
			Value: aws.String(strconv.FormatBool(d.Get("settings.0.cache_data_encrypted").(bool))),
		})
	}
	if d.HasChange("settings.0.require_authorization_for_cache_control") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "caching/requireAuthorizationForCacheControl"),
			Value: aws.String(strconv.FormatBool(d.Get("settings.0.require_authorization_for_cache_control").(bool))),
		})
	}
	if d.HasChange("settings.0.unauthorized_cache_control_header_strategy") {
		ops = append(ops, types.PatchOperation{
			Op:    types.OpReplace,
			Path:  aws.String(prefix + "caching/unauthorizedCacheControlHeaderStrategy"),
			Value: aws.String(d.Get("settings.0.unauthorized_cache_control_header_strategy").(string)),
		})
	}

	apiID := d.Get("rest_api_id").(string)
	stageName := d.Get("stage_name").(string)
	id := apiID + "-" + stageName + "-" + methodPath
	input := apigateway.UpdateStageInput{
		PatchOperations: ops,
		RestApiId:       aws.String(apiID),
		StageName:       aws.String(stageName),
	}

	_, err := conn.UpdateStage(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating API Gateway Stage (%s): %s", id, err)
	}

	if d.IsNewResource() {
		d.SetId(id)
	}

	return append(diags, resourceMethodSettingsRead(ctx, d, meta)...)
}
