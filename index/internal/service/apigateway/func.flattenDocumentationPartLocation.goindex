package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenDocumentationPartLocation(l *types.DocumentationPartLocation) []any {
	if l == nil {
		return []any{}
	}

	m := make(map[string]any)

	if v := l.Method; v != nil {
		m["method"] = aws.ToString(v)
	}

	if v := l.Name; v != nil {
		m[names.AttrName] = aws.ToString(v)
	}

	if v := l.Path; v != nil {
		m[names.AttrPath] = aws.ToString(v)
	}

	if v := l.StatusCode; v != nil {
		m[names.AttrStatusCode] = aws.ToString(v)
	}

	m[names.AttrType] = string(l.Type)

	return []any{m}
}
