package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUsagePlanCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := apigateway.CreateUsagePlanInput{
		Name: aws.String(name),
		Tags: getTagsIn(ctx),
	}

	if v, ok := d.GetOk("api_stages"); ok && v.(*schema.Set).Len() > 0 {
		input.ApiStages = expandAPIStages(v.(*schema.Set))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("quota_settings"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		settings := v.([]any)
		q, ok := settings[0].(map[string]any)

		if errs := validUsagePlanQuotaSettings(q); len(errs) > 0 {
			return sdkdiag.AppendErrorf(diags, "validating the quota settings: %v", errs)
		}

		if !ok {
			return sdkdiag.AppendErrorf(diags, "At least one field is expected inside quota_settings")
		}

		input.Quota = expandQuotaSettings(v.([]any))
	}

	if v, ok := d.GetOk("throttle_settings"); ok {
		input.Throttle = expandThrottleSettings(v.([]any))
	}

	output, err := conn.CreateUsagePlan(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating API Gateway Usage Plan (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Id))

	// Handle case of adding the product code since not addable when
	// creating the Usage Plan initially.
	if v, ok := d.GetOk("product_code"); ok {
		input := apigateway.UpdateUsagePlanInput{
			PatchOperations: []types.PatchOperation{
				{
					Op:    types.OpAdd,
					Path:  aws.String("/productCode"),
					Value: aws.String(v.(string)),
				},
			},
			UsagePlanId: aws.String(d.Id()),
		}

		_, err = conn.UpdateUsagePlan(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "adding API Gateway Usage Plan (%s) product code: %s", d.Id(), err)
		}
	}

	return append(diags, resourceUsagePlanRead(ctx, d, meta)...)
}
