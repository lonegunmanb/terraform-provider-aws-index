package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAPIKeyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := apigateway.CreateApiKeyInput{
		Description: aws.String(d.Get(names.AttrDescription).(string)),
		Enabled:     d.Get(names.AttrEnabled).(bool),
		Name:        aws.String(name),
		Tags:        getTagsIn(ctx),
		Value:       aws.String(d.Get(names.AttrValue).(string)),
	}

	if v, ok := d.GetOk("customer_id"); ok {
		input.CustomerId = aws.String(v.(string))
	}

	apiKey, err := conn.CreateApiKey(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating API Gateway API Key (%s): %s", name, err)
	}

	d.SetId(aws.ToString(apiKey.Id))

	return append(diags, resourceAPIKeyRead(ctx, d, meta)...)
}
