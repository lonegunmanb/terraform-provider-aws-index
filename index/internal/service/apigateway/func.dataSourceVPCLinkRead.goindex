package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceVPCLinkRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	name := d.Get(names.AttrName)
	input := apigateway.GetVpcLinksInput{}

	match, err := findVPCLink(ctx, conn, &input, func(v *types.VpcLink) bool {
		return aws.ToString(v.Name) == name
	})

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("API Gateway VPC Link", err))
	}

	d.SetId(aws.ToString(match.Id))
	d.Set(names.AttrARN, vpcLinkARN(ctx, meta.(*conns.AWSClient), d.Id()))
	d.Set(names.AttrDescription, match.Description)
	d.Set(names.AttrName, match.Name)
	d.Set(names.AttrStatus, match.Status)
	d.Set(names.AttrStatusMessage, match.StatusMessage)
	d.Set("target_arns", match.TargetArns)

	setTagsOut(ctx, match.Tags)

	return diags
}
