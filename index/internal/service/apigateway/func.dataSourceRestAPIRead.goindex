package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceRestAPIRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	name := d.Get(names.AttrName)

	inputGRAs := apigateway.GetRestApisInput{}
	match, err := findRestAPI(ctx, conn, &inputGRAs, func(v *types.RestApi) bool {
		return aws.ToString(v.Name) == name
	})

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("API Gateway REST API", err))
	}

	d.SetId(aws.ToString(match.Id))
	d.Set("api_key_source", match.ApiKeySource)
	d.Set(names.AttrARN, apiARN(ctx, meta.(*conns.AWSClient), d.Id()))
	d.Set("binary_media_types", match.BinaryMediaTypes)
	d.Set(names.AttrDescription, match.Description)
	if err := d.Set("endpoint_configuration", flattenEndpointConfiguration(match.EndpointConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting endpoint_configuration: %s", err)
	}
	d.Set("execution_arn", apiInvokeARN(ctx, meta.(*conns.AWSClient), d.Id()))
	if match.MinimumCompressionSize == nil {
		d.Set("minimum_compression_size", nil)
	} else {
		d.Set("minimum_compression_size", strconv.FormatInt(int64(aws.ToInt32(match.MinimumCompressionSize)), 10))
	}
	d.Set(names.AttrPolicy, match.Policy)

	inputGRs := apigateway.GetResourcesInput{
		RestApiId: aws.String(d.Id()),
	}
	rootResource, err := findResource(ctx, conn, &inputGRs, func(v *types.Resource) bool {
		return aws.ToString(v.Path) == "/"
	})

	switch {
	case err == nil:
		d.Set("root_resource_id", rootResource.Id)
	case tfresource.NotFound(err):
		d.Set("root_resource_id", nil)
	default:
		return sdkdiag.AppendErrorf(diags, "reading API Gateway REST API (%s) root resource: %s", d.Id(), err)
	}

	setTagsOut(ctx, match.Tags)

	return diags
}
