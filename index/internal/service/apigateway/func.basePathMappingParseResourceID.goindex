package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func basePathMappingParseResourceID(id string) (string, string, string, error) {
	switch parts := strings.SplitN(id, basePathMappingResourceIDSeparator, 3); len(parts) {
	case 2:
		if domainName, basePath := parts[0], parts[1]; domainName != "" {
			if basePath == "" {
				basePath = emptyBasePathMappingValue
			}
			return domainName, basePath, "", nil
		}
	case 3:
		if domainName, basePath, domainNameID := parts[0], parts[1], parts[2]; domainName != "" && domainNameID != "" {
			if basePath == "" {
				basePath = emptyBasePathMappingValue
			}
			return domainName, basePath, domainNameID, nil
		}
	}

	return "", "", "", fmt.Errorf("unexpected format of ID (%[1]s), expected DOMAIN-NAME%[2]sBASEPATH or DOMAIN-NAME%[2]sBASEPATH%[2]sDOMAIN-NAME-ID", id, basePathMappingResourceIDSeparator)
}
