package github.com/hashicorp/terraform-provider-aws/internal/service/apigateway
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSDKRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayClient(ctx)

	apiID := d.Get("rest_api_id").(string)
	stageName := d.Get("stage_name").(string)
	sdkType := d.Get("sdk_type").(string)
	input := apigateway.GetSdkInput{
		RestApiId: aws.String(apiID),
		SdkType:   aws.String(sdkType),
		StageName: aws.String(stageName),
	}

	if v, ok := d.GetOk(names.AttrParameters); ok && len(v.(map[string]any)) > 0 {
		input.Parameters = flex.ExpandStringValueMap(v.(map[string]any))
	}

	id := apiID + ":" + stageName + ":" + sdkType

	sdk, err := conn.GetSdk(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading API Gateway SDK (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("body", string(sdk.Body))
	d.Set("content_disposition", sdk.ContentDisposition)
	d.Set(names.AttrContentType, sdk.ContentType)

	return diags
}
