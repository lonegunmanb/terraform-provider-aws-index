package github.com/hashicorp/terraform-provider-aws/internal/service/ecrpublic
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecrpublic/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryUpdateCatalogData(ctx context.Context, conn *ecrpublic.Client, d *schema.ResourceData) error {
	if d.HasChange("catalog_data") {
		if v, ok := d.GetOk("catalog_data"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input := ecrpublic.PutRepositoryCatalogDataInput{
				RepositoryName: aws.String(d.Id()),
				RegistryId:     aws.String(d.Get("registry_id").(string)),
				CatalogData:    expandRepositoryCatalogData(v.([]any)[0].(map[string]any)),
			}

			_, err := conn.PutRepositoryCatalogData(ctx, &input)

			if err != nil {
				return fmt.Errorf("updating catalog data for repository (%s): %w", d.Id(), err)
			}
		}
	}

	return nil
}
