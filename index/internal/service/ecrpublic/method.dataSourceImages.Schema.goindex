package github.com/hashicorp/terraform-provider-aws/internal/service/ecrpublic
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecrpublic/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/smerr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *dataSourceImages) Schema(ctx context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Provides details about AWS ECR Public Images in a public repository.",
		Attributes: map[string]schema.Attribute{
			names.AttrRepositoryName: schema.StringAttribute{
				Description: "Name of the public repository.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(2, 205),
				},
			},
			"registry_id": schema.StringAttribute{
				Description: "AWS account ID associated with the public registry that contains the repository. If not specified, the default public registry is assumed.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexache.MustCompile(`^[0-9]{12}$`), "must be a 12-digit AWS account ID"),
				},
			},
			"images": framework.DataSourceComputedListOfObjectAttribute[imageItemModel](ctx),
		},
		Blocks: map[string]schema.Block{
			"image_ids": schema.ListNestedBlock{
				Description: "List of image IDs to filter. Each image ID can use either a tag or digest.",
				CustomType:  fwtypes.NewListNestedObjectTypeOf[imagesIDsModel](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"image_tag": schema.StringAttribute{
							Description: "Image tag.",
							Optional:    true,
						},
						"image_digest": schema.StringAttribute{
							Description: "Image digest.",
							Optional:    true,
						},
					},
				},
			},
		},
	}
}
