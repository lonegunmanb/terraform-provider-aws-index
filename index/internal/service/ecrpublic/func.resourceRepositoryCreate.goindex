package github.com/hashicorp/terraform-provider-aws/internal/service/ecrpublic
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecrpublic/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ECRPublicClient(ctx)

	input := ecrpublic.CreateRepositoryInput{
		RepositoryName: aws.String(d.Get(names.AttrRepositoryName).(string)),
		Tags:           getTagsIn(ctx),
	}

	if v, ok := d.GetOk("catalog_data"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.CatalogData = expandRepositoryCatalogData(v.([]any)[0].(map[string]any))
	}

	out, err := conn.CreateRepository(ctx, &input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ECR Public repository: %s", err)
	}

	if out == nil {
		return sdkdiag.AppendErrorf(diags, "creating ECR Public Repository: empty response")
	}

	repository := out.Repository

	log.Printf("[DEBUG] ECR Public repository created: %q", aws.ToString(repository.RepositoryArn))

	d.SetId(aws.ToString(repository.RepositoryName))

	return append(diags, resourceRepositoryRead(ctx, d, meta)...)
}
