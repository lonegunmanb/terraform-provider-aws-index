package github.com/hashicorp/terraform-provider-aws/internal/service/mq
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
	"github.com/mitchellh/copystructure"
)
func resourceBrokerCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MQClient(ctx)

	name := d.Get("broker_name").(string)
	engineType := d.Get("engine_type").(string)
	input := &mq.CreateBrokerInput{
		AutoMinorVersionUpgrade: aws.Bool(d.Get(names.AttrAutoMinorVersionUpgrade).(bool)),
		BrokerName:              aws.String(name),
		CreatorRequestId:        aws.String(id.PrefixedUniqueId(fmt.Sprintf("tf-%s", name))),
		EngineType:              types.EngineType(engineType),
		EngineVersion:           aws.String(d.Get(names.AttrEngineVersion).(string)),
		HostInstanceType:        aws.String(d.Get("host_instance_type").(string)),
		PubliclyAccessible:      aws.Bool(d.Get(names.AttrPubliclyAccessible).(bool)),
		Tags:                    getTagsIn(ctx),
		Users:                   expandUsers(d.Get("user").(*schema.Set).List()),
	}

	if v, ok := d.GetOk("authentication_strategy"); ok {
		input.AuthenticationStrategy = types.AuthenticationStrategy(v.(string))
	}
	if v, ok := d.GetOk(names.AttrConfiguration); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Configuration = expandConfigurationId(v.([]any))
	}
	if v, ok := d.GetOk("deployment_mode"); ok {
		input.DeploymentMode = types.DeploymentMode(v.(string))
	}
	if v, ok := d.GetOk("data_replication_mode"); ok {
		input.DataReplicationMode = types.DataReplicationMode(v.(string))
	}
	if v, ok := d.GetOk("data_replication_primary_broker_arn"); ok {
		input.DataReplicationPrimaryBrokerArn = aws.String(v.(string))
	}
	if v, ok := d.GetOk("encryption_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.EncryptionOptions = expandEncryptionOptions(d.Get("encryption_options").([]any))
	}
	if v, ok := d.GetOk("ldap_server_metadata"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.LdapServerMetadata = expandLDAPServerMetadata(v.([]any))
	}
	if v, ok := d.GetOk("logs"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Logs = expandLogs(engineType, v.([]any))
	}
	if v, ok := d.GetOk("maintenance_window_start_time"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.MaintenanceWindowStartTime = expandWeeklyStartTime(v.([]any))
	}
	if v, ok := d.GetOk(names.AttrSecurityGroups); ok && v.(*schema.Set).Len() > 0 {
		input.SecurityGroups = flex.ExpandStringValueSet(v.(*schema.Set))
	}
	if v, ok := d.GetOk(names.AttrStorageType); ok {
		input.StorageType = types.BrokerStorageType(v.(string))
	}
	if v, ok := d.GetOk(names.AttrSubnetIDs); ok {
		input.SubnetIds = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	output, err := conn.CreateBroker(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating MQ Broker (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.BrokerId))
	d.Set(names.AttrARN, output.BrokerArn)

	if _, err := waitBrokerCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for MQ Broker (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceBrokerRead(ctx, d, meta)...)
}
