package github.com/hashicorp/terraform-provider-aws/internal/service/mq
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
	"github.com/mitchellh/copystructure"
)
func resourceBrokerUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MQClient(ctx)

	requiresReboot := false

	if d.HasChange(names.AttrSecurityGroups) {
		input := &mq.UpdateBrokerInput{
			BrokerId:       aws.String(d.Id()),
			SecurityGroups: flex.ExpandStringValueSet(d.Get(names.AttrSecurityGroups).(*schema.Set)),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) security groups: %s", d.Id(), err)
		}
	}

	if d.HasChanges(names.AttrConfiguration, "logs", names.AttrEngineVersion) {
		engineType := d.Get("engine_type").(string)
		engineVersion := d.Get(names.AttrEngineVersion).(string)
		autoMinorVersionUpgrade := d.Get(names.AttrAutoMinorVersionUpgrade).(bool)

		input := &mq.UpdateBrokerInput{
			BrokerId:      aws.String(d.Id()),
			Configuration: expandConfigurationId(d.Get(names.AttrConfiguration).([]any)),
			EngineVersion: aws.String(normalizeEngineVersion(engineType, engineVersion, autoMinorVersionUpgrade)),
			Logs:          expandLogs(engineType, d.Get("logs").([]any)),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) configuration: %s", d.Id(), err)
		}

		requiresReboot = true
	}

	if d.HasChange("user") {
		o, n := d.GetChange("user")
		var err error
		// d.HasChange("user") always reports a change when running resourceBrokerUpdate
		// updateBrokerUsers needs to be called to know if changes to user are actually made
		var usersUpdated bool
		usersUpdated, err = updateBrokerUsers(ctx, conn, d.Id(), o.(*schema.Set).List(), n.(*schema.Set).List())

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) users: %s", d.Id(), err)
		}

		if usersUpdated {
			requiresReboot = true
		}
	}

	if d.HasChange("host_instance_type") {
		input := &mq.UpdateBrokerInput{
			BrokerId:         aws.String(d.Id()),
			HostInstanceType: aws.String(d.Get("host_instance_type").(string)),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) host instance type: %s", d.Id(), err)
		}

		requiresReboot = true
	}

	if d.HasChange(names.AttrAutoMinorVersionUpgrade) {
		input := &mq.UpdateBrokerInput{
			AutoMinorVersionUpgrade: aws.Bool(d.Get(names.AttrAutoMinorVersionUpgrade).(bool)),
			BrokerId:                aws.String(d.Id()),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) auto minor version upgrade: %s", d.Id(), err)
		}
	}

	if d.HasChange("maintenance_window_start_time") {
		input := &mq.UpdateBrokerInput{
			BrokerId:                   aws.String(d.Id()),
			MaintenanceWindowStartTime: expandWeeklyStartTime(d.Get("maintenance_window_start_time").([]any)),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) maintenance window start time: %s", d.Id(), err)
		}
	}

	if d.HasChange("data_replication_mode") {
		input := &mq.UpdateBrokerInput{
			BrokerId:            aws.String(d.Id()),
			DataReplicationMode: types.DataReplicationMode(d.Get("data_replication_mode").(string)),
		}

		_, err := conn.UpdateBroker(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MQ Broker (%s) data replication mode: %s", d.Id(), err)
		}

		requiresReboot = true
	}

	if d.Get(names.AttrApplyImmediately).(bool) && requiresReboot {
		_, err := conn.RebootBroker(ctx, &mq.RebootBrokerInput{
			BrokerId: aws.String(d.Id()),
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "rebooting MQ Broker (%s): %s", d.Id(), err)
		}

		if _, err := waitBrokerRebooted(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for MQ Broker (%s) reboot: %s", d.Id(), err)
		}
	}

	return diags
}
