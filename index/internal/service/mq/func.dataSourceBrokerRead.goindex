package github.com/hashicorp/terraform-provider-aws/internal/service/mq
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceBrokerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MQClient(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	input := &mq.ListBrokersInput{}
	broker, err := findBroker(ctx, conn, input, func(b *types.BrokerSummary) bool {
		if v, ok := d.GetOk("broker_id"); ok && v.(string) != aws.ToString(b.BrokerId) {
			return false
		}

		if v, ok := d.GetOk("broker_name"); ok && v.(string) != aws.ToString(b.BrokerName) {
			return false
		}

		return true
	})

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("MQ Broker", err))
	}

	brokerID := aws.ToString(broker.BrokerId)
	output, err := findBrokerByID(ctx, conn, brokerID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MQ Broker (%s): %s", brokerID, err)
	}

	d.SetId(brokerID)
	d.Set(names.AttrARN, output.BrokerArn)
	d.Set("authentication_strategy", output.AuthenticationStrategy)
	d.Set(names.AttrAutoMinorVersionUpgrade, output.AutoMinorVersionUpgrade)
	d.Set("broker_id", brokerID)
	d.Set("broker_name", output.BrokerName)
	d.Set("deployment_mode", output.DeploymentMode)
	d.Set("engine_type", output.EngineType)
	d.Set(names.AttrEngineVersion, output.EngineVersion)
	d.Set("host_instance_type", output.HostInstanceType)
	d.Set("instances", flattenBrokerInstances(output.BrokerInstances))
	d.Set(names.AttrPubliclyAccessible, output.PubliclyAccessible)
	d.Set(names.AttrSecurityGroups, output.SecurityGroups)
	d.Set(names.AttrStorageType, output.StorageType)
	d.Set(names.AttrSubnetIDs, output.SubnetIds)

	if err := d.Set(names.AttrConfiguration, flattenConfiguration(output.Configurations)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting configuration: %s", err)
	}

	if err := d.Set("encryption_options", flattenEncryptionOptions(output.EncryptionOptions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting encryption_options: %s", err)
	}

	var password string
	if v, ok := d.GetOk("ldap_server_metadata.0.service_account_password"); ok {
		password = v.(string)
	}

	if err := d.Set("ldap_server_metadata", flattenLDAPServerMetadata(output.LdapServerMetadata, password)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ldap_server_metadata: %s", err)
	}

	if err := d.Set("logs", flattenLogs(output.Logs)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting logs: %s", err)
	}

	if err := d.Set("maintenance_window_start_time", flattenWeeklyStartTime(output.MaintenanceWindowStartTime)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting maintenance_window_start_time: %s", err)
	}

	rawUsers, err := expandUsersForBroker(ctx, conn, brokerID, output.Users)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MQ Broker (%s) users: %s", brokerID, err)
	}

	if err := d.Set("user", flattenUsers(rawUsers, d.Get("user").(*schema.Set).List())); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting user: %s", err)
	}

	if err := d.Set(names.AttrTags, KeyValueTags(ctx, output.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map()); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
	}

	return diags
}
