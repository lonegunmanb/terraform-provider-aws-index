package github.com/hashicorp/terraform-provider-aws/internal/service/mq
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceBrokerInstanceTypeOfferingsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MQClient(ctx)

	input := &mq.DescribeBrokerInstanceOptionsInput{}

	if v, ok := d.GetOk("engine_type"); ok {
		input.EngineType = aws.String(v.(string))
	}

	if v, ok := d.GetOk("host_instance_type"); ok {
		input.HostInstanceType = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrStorageType); ok {
		input.StorageType = aws.String(v.(string))
	}

	var output []types.BrokerInstanceOption

	err := describeBrokerInstanceOptionsPages(ctx, conn, input, func(page *mq.DescribeBrokerInstanceOptionsOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		output = append(output, page.BrokerInstanceOptions...)

		return !lastPage
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MQ Broker Instance Options: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))

	if err := d.Set("broker_instance_options", flattenBrokerInstanceOptions(output)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting broker_instance_options: %s", err)
	}

	return diags
}
