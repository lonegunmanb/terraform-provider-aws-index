package github.com/hashicorp/terraform-provider-aws/internal/service/mq
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mq/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
	"github.com/mitchellh/copystructure"
)
func flattenUsers(users []*types.User, cfgUsers []any) *schema.Set {
	existingPairs := make(map[string]string)
	for _, u := range cfgUsers {
		user := u.(map[string]any)
		username := user[names.AttrUsername].(string)
		existingPairs[username] = user[names.AttrPassword].(string)
	}

	out := make([]any, 0)
	for _, u := range users {
		m := map[string]any{
			names.AttrUsername: aws.ToString(u.Username),
		}
		password := ""
		if p, ok := existingPairs[aws.ToString(u.Username)]; ok {
			password = p
		}
		if password != "" {
			m[names.AttrPassword] = password
		}
		if u.ConsoleAccess != nil {
			m["console_access"] = aws.ToBool(u.ConsoleAccess)
		}
		if u.ReplicationUser != nil {
			m["replication_user"] = aws.ToBool(u.ReplicationUser)
		}
		if len(u.Groups) > 0 {
			m["groups"] = flex.FlattenStringValueSet(u.Groups)
		}
		out = append(out, m)
	}
	return schema.NewSet(resourceUserHash, out)
}
