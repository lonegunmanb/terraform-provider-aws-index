package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRuleGroup(tfMap map[string]any) *awstypes.RuleGroup {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.RuleGroup{}

	if v, ok := tfMap["reference_sets"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			referenceSets := &awstypes.ReferenceSets{}

			if v, ok := tfMap["ip_set_references"].(*schema.Set); ok && v.Len() > 0 {
				referenceSets.IPSetReferences = expandIPSetReferences(v.List())
			}

			apiObject.ReferenceSets = referenceSets
		}
	}

	if v, ok := tfMap["rule_variables"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			ruleVariables := &awstypes.RuleVariables{}

			if v, ok := tfMap["ip_sets"].(*schema.Set); ok && v.Len() > 0 {
				ruleVariables.IPSets = expandIPSets(v.List())
			}
			if v, ok := tfMap["port_sets"].(*schema.Set); ok && v.Len() > 0 {
				ruleVariables.PortSets = expandPortSets(v.List())
			}

			apiObject.RuleVariables = ruleVariables
		}
	}

	if v, ok := tfMap["rules_source"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			rulesSource := &awstypes.RulesSource{}

			if v, ok := tfMap["rules_source_list"].([]any); ok && len(v) > 0 && v[0] != nil {
				rulesSource.RulesSourceList = expandRulesSourceList(v)
			}
			if v, ok := tfMap["rules_string"].(string); ok && v != "" {
				rulesSource.RulesString = aws.String(v)
			}
			if v, ok := tfMap["stateful_rule"].([]any); ok && len(v) > 0 {
				rulesSource.StatefulRules = expandStatefulRules(v)
			}
			if v, ok := tfMap["stateless_rules_and_custom_actions"].([]any); ok && len(v) > 0 && v[0] != nil {
				rulesSource.StatelessRulesAndCustomActions = expandStatelessRulesAndCustomActions(v)
			}

			apiObject.RulesSource = rulesSource
		}
	}

	if v, ok := tfMap["stateful_rule_options"].([]any); ok && len(v) > 0 && v[0] != nil {
		if tfMap, ok := v[0].(map[string]any); ok {
			statefulRuleOptions := &awstypes.StatefulRuleOptions{}

			if v, ok := tfMap["rule_order"].(string); ok && v != "" {
				statefulRuleOptions.RuleOrder = awstypes.RuleOrder(v)
			}

			apiObject.StatefulRuleOptions = statefulRuleOptions
		}
	}

	return apiObject
}
