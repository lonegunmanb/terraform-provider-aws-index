package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceFirewallPolicyRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).NetworkFirewallClient(ctx)

	input := &networkfirewall.DescribeFirewallPolicyInput{}
	if v := d.Get(names.AttrARN).(string); v != "" {
		input.FirewallPolicyArn = aws.String(v)
	}
	if v := d.Get(names.AttrName).(string); v != "" {
		input.FirewallPolicyName = aws.String(v)
	}

	output, err := findFirewallPolicy(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading NetworkFirewall Firewall Policy: %s", err)
	}

	resp := output.FirewallPolicyResponse

	d.SetId(aws.ToString(resp.FirewallPolicyArn))
	d.Set(names.AttrARN, resp.FirewallPolicyArn)
	d.Set(names.AttrDescription, resp.Description)
	if err := d.Set("firewall_policy", flattenFirewallPolicy(output.FirewallPolicy)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting firewall_policy: %s", err)
	}
	d.Set(names.AttrName, resp.FirewallPolicyName)
	d.Set("update_token", output.UpdateToken)

	setTagsOut(ctx, resp.Tags)

	return diags
}
