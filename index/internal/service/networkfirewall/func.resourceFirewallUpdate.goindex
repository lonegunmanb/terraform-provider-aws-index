package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFirewallUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).NetworkFirewallClient(ctx)

	updateToken := d.Get("update_token").(string)

	if d.HasChange("delete_protection") {
		input := networkfirewall.UpdateFirewallDeleteProtectionInput{
			DeleteProtection: d.Get("delete_protection").(bool),
			FirewallArn:      aws.String(d.Id()),
			UpdateToken:      aws.String(updateToken),
		}

		output, err := conn.UpdateFirewallDeleteProtection(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) delete protection: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange(names.AttrDescription) {
		input := networkfirewall.UpdateFirewallDescriptionInput{
			Description: aws.String(d.Get(names.AttrDescription).(string)),
			FirewallArn: aws.String(d.Id()),
			UpdateToken: aws.String(updateToken),
		}

		output, err := conn.UpdateFirewallDescription(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) description: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange("enabled_analysis_types") {
		input := networkfirewall.UpdateFirewallAnalysisSettingsInput{
			EnabledAnalysisTypes: flex.ExpandStringyValueSet[awstypes.EnabledAnalysisType](d.Get("enabled_analysis_types").(*schema.Set)),
			FirewallArn:          aws.String(d.Id()),
			UpdateToken:          aws.String(updateToken),
		}

		output, err := conn.UpdateFirewallAnalysisSettings(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) enabled analysis types: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange(names.AttrEncryptionConfiguration) {
		input := networkfirewall.UpdateFirewallEncryptionConfigurationInput{
			EncryptionConfiguration: expandEncryptionConfiguration(d.Get(names.AttrEncryptionConfiguration).([]any)),
			FirewallArn:             aws.String(d.Id()),
			UpdateToken:             aws.String(updateToken),
		}

		output, err := conn.UpdateFirewallEncryptionConfiguration(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) encryption configuration: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	// Note: The *_change_protection fields below are handled before their respective fields
	// to account for disabling and subsequent changes.

	if d.HasChange("availability_zone_change_protection") {
		input := networkfirewall.UpdateAvailabilityZoneChangeProtectionInput{
			AvailabilityZoneChangeProtection: d.Get("availability_zone_change_protection").(bool),
			FirewallArn:                      aws.String(d.Id()),
			UpdateToken:                      aws.String(updateToken),
		}
		output, err := conn.UpdateAvailabilityZoneChangeProtection(ctx, &input)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) availability zone change protection: %s", d.Id(), err)
		}
		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange("availability_zone_mapping") {
		o, n := d.GetChange("availability_zone_mapping")
		availabilityZoneToRemove, availabilityZoneToAdd := availabilityZoneMappingsDiff(o.(*schema.Set), n.(*schema.Set))

		if len(availabilityZoneToAdd) > 0 {
			input := networkfirewall.AssociateAvailabilityZonesInput{
				FirewallArn:              aws.String(d.Id()),
				AvailabilityZoneMappings: availabilityZoneToAdd,
				UpdateToken:              aws.String(updateToken),
			}

			_, err := conn.AssociateAvailabilityZones(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "associating NetworkFirewall Firewall (%s) availability zones: %s", d.Id(), err)
			}

			output, err := waitFirewallUpdated(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id())

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for NetworkFirewall Firewall (%s) update: %s", d.Id(), err)
			}

			updateToken = aws.ToString(output.UpdateToken)
		}

		if len(availabilityZoneToRemove) > 0 {
			input := networkfirewall.DisassociateAvailabilityZonesInput{
				FirewallArn:              aws.String(d.Id()),
				AvailabilityZoneMappings: availabilityZoneToRemove,
				UpdateToken:              aws.String(updateToken),
			}

			_, err := conn.DisassociateAvailabilityZones(ctx, &input)

			if err == nil {
				output, err := waitFirewallUpdated(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id())

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for NetworkFirewall Firewall (%s) update: %s", d.Id(), err)
				}

				updateToken = aws.ToString(output.UpdateToken)
			} else if !errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "inaccessible") {
				return sdkdiag.AppendErrorf(diags, "disassociating NetworkFirewall Firewall (%s) availability zones: %s", d.Id(), err)
			}
		}
	}

	if d.HasChange("firewall_policy_change_protection") {
		input := networkfirewall.UpdateFirewallPolicyChangeProtectionInput{
			FirewallArn:                    aws.String(d.Id()),
			FirewallPolicyChangeProtection: d.Get("firewall_policy_change_protection").(bool),
			UpdateToken:                    aws.String(updateToken),
		}

		output, err := conn.UpdateFirewallPolicyChangeProtection(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) policy change protection: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange("firewall_policy_arn") {
		input := networkfirewall.AssociateFirewallPolicyInput{
			FirewallArn:       aws.String(d.Id()),
			FirewallPolicyArn: aws.String(d.Get("firewall_policy_arn").(string)),
			UpdateToken:       aws.String(updateToken),
		}

		output, err := conn.AssociateFirewallPolicy(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) firewall policy ARN: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange("subnet_change_protection") {
		input := networkfirewall.UpdateSubnetChangeProtectionInput{
			FirewallArn:            aws.String(d.Id()),
			SubnetChangeProtection: d.Get("subnet_change_protection").(bool),
			UpdateToken:            aws.String(updateToken),
		}

		output, err := conn.UpdateSubnetChangeProtection(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating NetworkFirewall Firewall (%s) subnet change protection: %s", d.Id(), err)
		}

		updateToken = aws.ToString(output.UpdateToken)
	}

	if d.HasChange("subnet_mapping") {
		o, n := d.GetChange("subnet_mapping")
		subnetsToRemove, subnetsToAdd := subnetMappingsDiff(o.(*schema.Set), n.(*schema.Set))

		if len(subnetsToAdd) > 0 {
			input := networkfirewall.AssociateSubnetsInput{
				FirewallArn:    aws.String(d.Id()),
				SubnetMappings: subnetsToAdd,
				UpdateToken:    aws.String(updateToken),
			}

			_, err := conn.AssociateSubnets(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "associating NetworkFirewall Firewall (%s) subnets: %s", d.Id(), err)
			}

			output, err := waitFirewallUpdated(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id())

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for NetworkFirewall Firewall (%s) update: %s", d.Id(), err)
			}

			updateToken = aws.ToString(output.UpdateToken)
		}

		if len(subnetsToRemove) > 0 {
			input := networkfirewall.DisassociateSubnetsInput{
				FirewallArn: aws.String(d.Id()),
				SubnetIds:   subnetsToRemove,
				UpdateToken: aws.String(updateToken),
			}

			_, err := conn.DisassociateSubnets(ctx, &input)

			if err == nil {
				/*output*/ _, err := waitFirewallUpdated(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id())

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for NetworkFirewall Firewall (%s) update: %s", d.Id(), err)
				}

				// updateToken = aws.ToString(output.UpdateToken)
			} else if !errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "inaccessible") {
				return sdkdiag.AppendErrorf(diags, "disassociating NetworkFirewall Firewall (%s) subnets: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceFirewallRead(ctx, d, meta)...)
}
