package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenFirewallPolicy(apiObject *awstypes.FirewallPolicy) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{}

	if apiObject.PolicyVariables != nil {
		tfMap["policy_variables"] = flattenPolicyVariables(apiObject.PolicyVariables)
	}
	if apiObject.StatefulDefaultActions != nil {
		tfMap["stateful_default_actions"] = apiObject.StatefulDefaultActions
	}
	if apiObject.StatefulEngineOptions != nil {
		tfMap["stateful_engine_options"] = flattenStatefulEngineOptions(apiObject.StatefulEngineOptions)
	}
	if apiObject.StatefulRuleGroupReferences != nil {
		tfMap["stateful_rule_group_reference"] = flattenPolicyStatefulRuleGroupReferences(apiObject.StatefulRuleGroupReferences)
	}
	if apiObject.StatelessCustomActions != nil {
		tfMap["stateless_custom_action"] = flattenCustomActions(apiObject.StatelessCustomActions)
	}
	if apiObject.StatelessDefaultActions != nil {
		tfMap["stateless_default_actions"] = apiObject.StatelessDefaultActions
	}
	if apiObject.StatelessFragmentDefaultActions != nil {
		tfMap["stateless_fragment_default_actions"] = apiObject.StatelessFragmentDefaultActions
	}
	if apiObject.StatelessRuleGroupReferences != nil {
		tfMap["stateless_rule_group_reference"] = flattenPolicyStatelessRuleGroupReferences(apiObject.StatelessRuleGroupReferences)
	}
	if apiObject.TLSInspectionConfigurationArn != nil {
		tfMap["tls_inspection_configuration_arn"] = aws.ToString(apiObject.TLSInspectionConfigurationArn)
	}

	return []any{tfMap}
}
