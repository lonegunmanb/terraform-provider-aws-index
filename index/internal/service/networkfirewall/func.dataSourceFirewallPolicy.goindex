package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceFirewallPolicy() *schema.Resource {
	return &schema.Resource{
		ReadWithoutTimeout: dataSourceFirewallPolicyRead,

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:         schema.TypeString,
					AtLeastOneOf: []string{names.AttrARN, names.AttrName},
					Optional:     true,
					ValidateFunc: verify.ValidARN,
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"firewall_policy": {
					Type:     schema.TypeList,
					Computed: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"policy_variables": {
								Type:     schema.TypeList,
								Computed: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"rule_variables": {
											Type:     schema.TypeSet,
											Computed: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"ip_set": {
														Type:     schema.TypeList,
														Computed: true,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"definition": {
																	Type:     schema.TypeSet,
																	Computed: true,
																	Elem:     &schema.Schema{Type: schema.TypeString},
																},
															},
														},
													},
													names.AttrKey: {
														Type:     schema.TypeString,
														Computed: true,
													},
												},
											},
										},
									},
								},
							},
							"stateful_default_actions": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"stateful_engine_options": {
								Type:     schema.TypeList,
								Computed: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"flow_timeouts": {
											Type:     schema.TypeList,
											Computed: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"tcp_idle_timeout_seconds": {
														Type:     schema.TypeInt,
														Computed: true,
													},
												},
											},
										},
										"rule_order": {
											Type:     schema.TypeString,
											Computed: true,
										},
										"stream_exception_policy": {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
							"stateful_rule_group_reference": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"deep_threat_inspection": {
											Type:     nullable.TypeNullableBool,
											Computed: true,
										},
										"override": {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrAction: {
														Type:     schema.TypeString,
														Optional: true,
													},
												},
											},
										},
										names.AttrPriority: {
											Type:     schema.TypeInt,
											Computed: true,
										},
										names.AttrResourceARN: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
							"stateless_custom_action": sdkv2.ComputedOnlyFromSchema(customActionSchema()),
							"stateless_default_actions": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"stateless_fragment_default_actions": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"stateless_rule_group_reference": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrPriority: {
											Type:     schema.TypeInt,
											Computed: true,
										},
										names.AttrResourceARN: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
							"tls_inspection_configuration_arn": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				names.AttrName: {
					Type:         schema.TypeString,
					Optional:     true,
					AtLeastOneOf: []string{names.AttrARN, names.AttrName},
					ValidateFunc: validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z-]{1,128}$`), "Must have 1-128 valid characters: a-z, A-Z, 0-9 and -(hyphen)"),
				},
				names.AttrTags: tftags.TagsSchemaComputed(),
				"update_token": {
					Type:     schema.TypeString,
					Computed: true,
				},
			}
		},
	}
}
