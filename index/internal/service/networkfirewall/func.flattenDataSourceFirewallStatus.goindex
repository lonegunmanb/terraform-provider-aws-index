package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenDataSourceFirewallStatus(apiObject *awstypes.FirewallStatus) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"configuration_sync_state_summary": apiObject.ConfigurationSyncStateSummary,
		names.AttrStatus:                   apiObject.Status,
	}

	if apiObject.CapacityUsageSummary != nil {
		tfMap["capacity_usage_summary"] = flattenDataSourceCapacityUsageSummary(apiObject.CapacityUsageSummary)
	}
	if apiObject.SyncStates != nil {
		tfMap["sync_states"] = flattenDataSourceSyncStates(apiObject.SyncStates)
	}
	if apiObject.TransitGatewayAttachmentSyncState != nil {
		tfMap["transit_gateway_attachment_sync_states"] = flattenDataSourceTransitGatewayAttachmentSyncState(apiObject.TransitGatewayAttachmentSyncState)
	}

	return []any{tfMap}
}
