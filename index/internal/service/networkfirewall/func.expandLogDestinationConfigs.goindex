package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLogDestinationConfigs(tfList []any) []awstypes.LogDestinationConfig {
	if len(tfList) == 0 {
		return nil
	}

	var apiObjects []awstypes.LogDestinationConfig

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := awstypes.LogDestinationConfig{}

		if v, ok := tfMap["log_destination"].(map[string]any); ok && len(v) > 0 {
			apiObject.LogDestination = flex.ExpandStringValueMap(v)
		}

		if v, ok := tfMap["log_destination_type"].(string); ok && v != "" {
			apiObject.LogDestinationType = awstypes.LogDestinationType(v)
		}

		if v, ok := tfMap["log_type"].(string); ok && v != "" {
			apiObject.LogType = awstypes.LogType(v)
		} else {
			continue
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
