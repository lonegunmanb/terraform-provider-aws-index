package github.com/hashicorp/terraform-provider-aws/internal/service/networkfirewall
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLoggingConfiguration() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceLoggingConfigurationCreate,
		ReadWithoutTimeout:   resourceLoggingConfigurationRead,
		UpdateWithoutTimeout: resourceLoggingConfigurationUpdate,
		DeleteWithoutTimeout: resourceLoggingConfigurationDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"enable_monitoring_dashboard": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"firewall_arn": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: verify.ValidARN,
			},
			names.AttrLoggingConfiguration: {
				Type:     schema.TypeList,
				Required: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"log_destination_config": {
							Type:     schema.TypeSet,
							Required: true,
							MaxItems: len(enum.Values[awstypes.LogType]()),
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"log_destination": {
										Type:     schema.TypeMap,
										Required: true,
										Elem:     &schema.Schema{Type: schema.TypeString},
									},
									"log_destination_type": {
										Type:             schema.TypeString,
										Required:         true,
										ValidateDiagFunc: enum.Validate[awstypes.LogDestinationType](),
									},
									"log_type": {
										Type:             schema.TypeString,
										Required:         true,
										ValidateDiagFunc: enum.Validate[awstypes.LogType](),
									},
								},
							},
						},
					},
				},
			},
		},

		CustomizeDiff: func(ctx context.Context, d *schema.ResourceDiff, meta any) error {
			// Ensure distinct logging_configuration.log_destination_config.log_type values.
			if v, ok := d.GetOk(names.AttrLoggingConfiguration); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				tfMap := v.([]any)[0].(map[string]any)

				if v, ok := tfMap["log_destination_config"].(*schema.Set); ok && v.Len() > 0 {
					logTypes := make(map[string]struct{})

					for _, tfMapRaw := range v.List() {
						tfMap, ok := tfMapRaw.(map[string]any)
						if !ok {
							continue
						}

						if v, ok := tfMap["log_type"].(string); ok && v != "" {
							if _, ok := logTypes[v]; ok {
								return fmt.Errorf("duplicate logging_configuration.log_destination_config.log_type value: %s", v)
							}
							logTypes[v] = struct{}{}
						}
					}
				}
			}

			return nil
		},
	}
}
