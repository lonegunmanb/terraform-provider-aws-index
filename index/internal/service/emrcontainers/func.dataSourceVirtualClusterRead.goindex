package github.com/hashicorp/terraform-provider-aws/internal/service/emrcontainers
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceVirtualClusterRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EMRContainersClient(ctx)

	id := d.Get("virtual_cluster_id").(string)
	vc, err := findVirtualClusterByID(ctx, conn, id)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading EMR Containers Virtual Cluster (%s): %s", id, err)
	}

	d.SetId(aws.ToString(vc.Id))
	d.Set(names.AttrARN, vc.Arn)
	if vc.ContainerProvider != nil {
		if err := d.Set("container_provider", []any{flattenContainerProvider(vc.ContainerProvider)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting container_provider: %s", err)
		}
	} else {
		d.Set("container_provider", nil)
	}
	d.Set(names.AttrCreatedAt, aws.ToTime(vc.CreatedAt).String())
	d.Set(names.AttrName, vc.Name)
	d.Set(names.AttrState, vc.State)
	d.Set("virtual_cluster_id", vc.Id)

	setTagsOut(ctx, vc.Tags)

	return diags
}
