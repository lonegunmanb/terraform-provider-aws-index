package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func disassociateTransitGatewayConnectPeers(ctx context.Context, conn *networkmanager.Client, globalNetworkID string, timeout time.Duration) diag.Diagnostics {
	var diags diag.Diagnostics

	output, err := findTransitGatewayConnectPeerAssociations(ctx, conn, &networkmanager.GetTransitGatewayConnectPeerAssociationsInput{
		GlobalNetworkId: aws.String(globalNetworkID),
	})

	if tfresource.NotFound(err) {
		err = nil
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "listing Network Manager Transit Gateway Connect Peer Associations (%s): %s", globalNetworkID, err)
	}

	for _, v := range output {
		err := disassociateTransitGatewayConnectPeer(ctx, conn, globalNetworkID, aws.ToString(v.TransitGatewayConnectPeerArn), timeout)

		if err != nil {
			diags = sdkdiag.AppendFromErr(diags, err)
		}
	}

	if diags.HasError() {
		return diags
	}

	return diags
}
