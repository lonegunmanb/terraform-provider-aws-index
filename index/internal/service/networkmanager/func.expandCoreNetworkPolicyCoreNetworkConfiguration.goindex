package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCoreNetworkPolicyCoreNetworkConfiguration(tfList []any) (*coreNetworkPolicyCoreNetworkConfiguration, error) {
	tfMap := tfList[0].(map[string]any)
	apiObject := &coreNetworkPolicyCoreNetworkConfiguration{}

	apiObject.AsnRanges = coreNetworkPolicyExpandStringList(tfMap["asn_ranges"].(*schema.Set).List())

	if v := tfMap["inside_cidr_blocks"].(*schema.Set).List(); len(v) > 0 {
		apiObject.InsideCidrBlocks = coreNetworkPolicyExpandStringList(v)
	}

	apiObject.VpnEcmpSupport = tfMap["vpn_ecmp_support"].(bool)

	el, err := expandDataCoreNetworkPolicyNetworkConfigurationEdgeLocations(tfMap["edge_locations"].([]any))
	if err != nil {
		return nil, err
	}
	apiObject.EdgeLocations = el

	return apiObject, nil
}
