package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPeerConfiguration(apiObject *awstypes.ConnectPeerConfiguration) map[string]any {
	if apiObject == nil {
		return nil
	}

	confMap := map[string]any{}

	for _, v := range apiObject.BgpConfigurations {
		bgpConfMap := map[string]any{}

		if a := v.CoreNetworkAddress; a != nil {
			bgpConfMap["core_network_address"] = aws.ToString(a)
		}
		if a := v.CoreNetworkAsn; a != nil {
			bgpConfMap["core_network_asn"] = aws.ToInt64(a)
		}
		if a := v.PeerAddress; a != nil {
			bgpConfMap["peer_address"] = aws.ToString(a)
		}
		if a := v.PeerAsn; a != nil {
			bgpConfMap["peer_asn"] = aws.ToInt64(a)
		}
		var existing []any
		if c, ok := confMap["bgp_configurations"]; ok {
			existing = c.([]any)
		}
		confMap["bgp_configurations"] = append(existing, bgpConfMap)
	}
	if v := apiObject.CoreNetworkAddress; v != nil {
		confMap["core_network_address"] = aws.ToString(v)
	}
	if v := apiObject.InsideCidrBlocks; v != nil {
		confMap["inside_cidr_blocks"] = v
	}
	if v := apiObject.PeerAddress; v != nil {
		confMap["peer_address"] = aws.ToString(v)
	}

	confMap[names.AttrProtocol] = apiObject.Protocol

	return confMap
}
