package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDeviceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).NetworkManagerClient(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	globalNetworkID := d.Get("global_network_id").(string)
	deviceID := d.Get("device_id").(string)
	device, err := findDeviceByTwoPartKey(ctx, conn, globalNetworkID, deviceID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Network Manager Device (%s): %s", deviceID, err)
	}

	d.SetId(deviceID)
	d.Set(names.AttrARN, device.DeviceArn)
	if device.AWSLocation != nil {
		if err := d.Set("aws_location", []any{flattenAWSLocation(device.AWSLocation)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting aws_location: %s", err)
		}
	} else {
		d.Set("aws_location", nil)
	}
	d.Set(names.AttrDescription, device.Description)
	d.Set("device_id", device.DeviceId)
	if device.Location != nil {
		if err := d.Set(names.AttrLocation, []any{flattenLocation(device.Location)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting location: %s", err)
		}
	} else {
		d.Set(names.AttrLocation, nil)
	}
	d.Set("model", device.Model)
	d.Set("serial_number", device.SerialNumber)
	d.Set("site_id", device.SiteId)
	d.Set(names.AttrType, device.Type)
	d.Set("vendor", device.Vendor)

	if err := d.Set(names.AttrTags, keyValueTags(ctx, device.Tags).IgnoreAWS().IgnoreConfig(ignoreTagsConfig).Map()); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tags: %s", err)
	}

	return diags
}
