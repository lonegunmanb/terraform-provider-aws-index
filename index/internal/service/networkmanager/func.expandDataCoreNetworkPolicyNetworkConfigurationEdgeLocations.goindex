package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDataCoreNetworkPolicyNetworkConfigurationEdgeLocations(tfList []any) ([]*coreNetworkPolicyCoreNetworkEdgeLocation, error) {
	apiObjects := make([]*coreNetworkPolicyCoreNetworkEdgeLocation, 0)
	locationMap := make(map[string]struct{})

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := &coreNetworkPolicyCoreNetworkEdgeLocation{}

		if v, ok := tfMap[names.AttrLocation].(string); ok {
			if _, ok := locationMap[v]; ok {
				return nil, fmt.Errorf("duplicate Location (%s). Remove the Location or ensure the Location is unique", v)
			}
			apiObject.Location = v
			if len(apiObject.Location) > 0 {
				locationMap[apiObject.Location] = struct{}{}
			}
		}

		if v, ok := tfMap["asn"].(string); ok && v != "" {
			v, err := strconv.ParseInt(v, 10, 64)
			if err != nil {
				return nil, err
			}
			apiObject.Asn = v
		}

		if v := tfMap["inside_cidr_blocks"].([]any); len(v) > 0 {
			apiObject.InsideCidrBlocks = coreNetworkPolicyExpandStringList(v)
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects, nil
}
