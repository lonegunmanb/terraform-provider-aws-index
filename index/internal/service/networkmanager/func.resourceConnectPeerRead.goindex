package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConnectPeerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).NetworkManagerClient(ctx)

	connectPeer, err := findConnectPeerByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Network Manager Connect Peer %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Network Manager Connect Peer (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, connectPeerARN(ctx, meta.(*conns.AWSClient), d.Id()))
	d.Set("bgp_options", []any{map[string]any{
		"peer_asn": connectPeer.Configuration.BgpConfigurations[0].PeerAsn,
	}})
	d.Set(names.AttrConfiguration, []any{flattenPeerConfiguration(connectPeer.Configuration)})
	d.Set("connect_peer_id", connectPeer.ConnectPeerId)
	d.Set("core_network_id", connectPeer.CoreNetworkId)
	if connectPeer.CreatedAt != nil {
		d.Set(names.AttrCreatedAt, aws.ToTime(connectPeer.CreatedAt).Format(time.RFC3339))
	} else {
		d.Set(names.AttrCreatedAt, nil)
	}
	d.Set("edge_location", connectPeer.EdgeLocation)
	d.Set("connect_attachment_id", connectPeer.ConnectAttachmentId)
	d.Set("inside_cidr_blocks", connectPeer.Configuration.InsideCidrBlocks)
	d.Set("peer_address", connectPeer.Configuration.PeerAddress)
	d.Set("subnet_arn", connectPeer.SubnetArn)
	d.Set(names.AttrState, connectPeer.State)

	setTagsOut(ctx, connectPeer.Tags)

	return diags
}
