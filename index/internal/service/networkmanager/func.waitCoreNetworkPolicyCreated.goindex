package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitCoreNetworkPolicyCreated(ctx context.Context, conn *networkmanager.Client, coreNetworkId string, policyVersionId *int32, timeout time.Duration) (*awstypes.CoreNetworkPolicy, error) {
	stateConf := &retry.StateChangeConf{
		Pending: enum.Slice(awstypes.ChangeSetStatePendingGeneration),
		Target:  enum.Slice(awstypes.ChangeSetStateReadyToExecute),
		Timeout: timeout,
		Refresh: statusCoreNetworkPolicyState(ctx, conn, coreNetworkId, policyVersionId),
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*awstypes.CoreNetworkPolicy); ok {
		return output, err
	}

	if output, ok := outputRaw.(*awstypes.CoreNetworkPolicy); ok {
		if state, v := output.ChangeSetState, output.PolicyErrors; state == awstypes.ChangeSetStateFailedGeneration && len(v) > 0 {
			var errs []error

			for _, err := range v {
				errs = append(errs, fmt.Errorf("%s: %s", aws.ToString(err.ErrorCode), aws.ToString(err.Message)))
			}

			tfresource.SetLastError(err, errors.Join(errs...))
		}

		return output, err
	}

	return nil, err
}
