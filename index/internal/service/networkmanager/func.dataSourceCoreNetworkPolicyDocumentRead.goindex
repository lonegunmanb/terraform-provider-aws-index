package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCoreNetworkPolicyDocumentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	mergedDoc := &coreNetworkPolicyDocument{
		Version: d.Get(names.AttrVersion).(string),
	}

	// CoreNetworkConfiguration
	networkConfiguration, err := expandCoreNetworkPolicyCoreNetworkConfiguration(d.Get("core_network_configuration").([]any))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	mergedDoc.CoreNetworkConfiguration = networkConfiguration

	// Segments
	segments, err := expandCoreNetworkPolicySegments(d.Get("segments").([]any))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	mergedDoc.Segments = segments

	// NetworkFunctionGroups
	networkFunctionGroups, err := expandCoreNetworkPolicyNetworkFunctionGroups(d.Get("network_function_groups").([]any))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	mergedDoc.NetworkFunctionGroups = networkFunctionGroups

	// SegmentActions
	segment_actions, err := expandCoreNetworkPolicySegmentActions(d.Get("segment_actions").([]any))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	mergedDoc.SegmentActions = segment_actions

	// AttachmentPolicies
	attachmentPolicies, err := expandCoreNetworkPolicyAttachmentPolicies(d.Get("attachment_policies").([]any))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	mergedDoc.AttachmentPolicies = attachmentPolicies

	jsonDoc, err := json.MarshalIndent(mergedDoc, "", "  ")
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	jsonString := string(jsonDoc)

	d.Set(names.AttrJSON, jsonString)
	d.SetId(strconv.Itoa(create.StringHashcode(jsonString)))

	return diags
}
