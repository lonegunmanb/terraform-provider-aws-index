package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCoreNetworkPolicyNetworkFunctionGroups(tfList []any) ([]*coreNetworkPolicyNetworkFunctionGroup, error) {
	apiObjects := make([]*coreNetworkPolicyNetworkFunctionGroup, 0)
	nameMap := make(map[string]struct{})

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := &coreNetworkPolicyNetworkFunctionGroup{}

		if v, ok := tfMap[names.AttrName].(string); ok {
			if _, ok := nameMap[v]; ok {
				return nil, fmt.Errorf("duplicate Name (%s). Remove the Name or ensure the Name is unique", v)
			}
			apiObject.Name = v
			if len(apiObject.Name) > 0 {
				nameMap[apiObject.Name] = struct{}{}
			}
		}

		if v, ok := tfMap[names.AttrDescription].(string); ok && v != "" {
			apiObject.Description = v
		}

		if v, ok := tfMap["require_attachment_acceptance"].(bool); ok {
			apiObject.RequireAttachmentAcceptance = v
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects, nil
}
