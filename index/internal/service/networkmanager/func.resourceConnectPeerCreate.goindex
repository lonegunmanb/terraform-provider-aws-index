package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/networkmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConnectPeerCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).NetworkManagerClient(ctx)

	connectAttachmentID := d.Get("connect_attachment_id").(string)
	peerAddress := d.Get("peer_address").(string)
	input := &networkmanager.CreateConnectPeerInput{
		ConnectAttachmentId: aws.String(connectAttachmentID),
		PeerAddress:         aws.String(peerAddress),
		Tags:                getTagsIn(ctx),
	}

	if v, ok := d.GetOk("bgp_options"); ok && len(v.([]any)) > 0 {
		input.BgpOptions = expandPeerOptions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("core_network_address"); ok {
		input.CoreNetworkAddress = aws.String(v.(string))
	}

	if v, ok := d.GetOk("inside_cidr_blocks"); ok {
		input.InsideCidrBlocks = flex.ExpandStringValueList(v.([]any))
	}

	if v, ok := d.GetOk("subnet_arn"); ok {
		input.SubnetArn = aws.String(v.(string))
	}

	outputRaw, err := tfresource.RetryWhen(ctx, d.Timeout(schema.TimeoutCreate),
		func() (any, error) {
			return conn.CreateConnectPeer(ctx, input)
		},
		func(err error) (bool, error) {
			// Connect Peer doesn't have direct dependency to Connect attachment state when using Attachment Accepter.
			// Waiting for Create Timeout period for Connect Attachment to come available state.
			// Only needed if depends_on statement is not used in Connect Peer.
			//
			// ValidationException: Connect attachment state is invalid.
			// Error: creating Connect Peer: ValidationException: Connect attachment state is invalid. attachment id: attachment-06cb63ed3fe0008df
			// {
			//   RespMetadata: {
			// 	StatusCode: 400,
			// 	RequestID: "c5f0f9de-ad7f-411a-ba2e-7c37ea397255"
			//   },
			//   Message_: "Connect attachment state is invalid. attachment id: attachment-06cb63ed3fe0008df",
			//   Reason: "Other"
			// }
			if validationExceptionMessageContains(err, awstypes.ValidationExceptionReasonOther, "Connect attachment state is invalid") {
				return true, err
			}

			return false, err
		})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Connect Peer: %s", err)
	}

	d.SetId(aws.ToString(outputRaw.(*networkmanager.CreateConnectPeerOutput).ConnectPeer.ConnectPeerId))

	if _, err := waitConnectPeerCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Network Manager Connect Peer (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceConnectPeerRead(ctx, d, meta)...)
}
