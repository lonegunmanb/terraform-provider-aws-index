package github.com/hashicorp/terraform-provider-aws/internal/service/networkmanager
import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCoreNetworkPolicyAttachmentPolicies(tfList []any) ([]*coreNetworkPolicyAttachmentPolicy, error) {
	apiObjects := make([]*coreNetworkPolicyAttachmentPolicy, 0)
	ruleMap := make(map[int]struct{})

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := &coreNetworkPolicyAttachmentPolicy{}

		if v, ok := tfMap["rule_number"].(int); ok {
			if _, ok := ruleMap[v]; ok {
				return nil, fmt.Errorf("duplicate Rule Number (%d). Remove the Rule Number or ensure the Rule Number is unique", v)
			}
			apiObject.RuleNumber = v
			ruleMap[apiObject.RuleNumber] = struct{}{}
		}

		if v, ok := tfMap[names.AttrDescription].(string); ok && v != "" {
			apiObject.Description = v
		}

		if v, ok := tfMap["condition_logic"].(string); ok && v != "" {
			apiObject.ConditionLogic = v
		}

		action, err := expandDataCoreNetworkPolicyAttachmentPoliciesAction(tfMap[names.AttrAction].([]any))
		if err != nil {
			return nil, err
		}
		apiObject.Action = action

		conditions, err := expandDataCoreNetworkPolicyAttachmentPoliciesConditions(tfMap["conditions"].([]any))
		if err != nil {
			return nil, err
		}
		apiObject.Conditions = conditions

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects, nil
}
