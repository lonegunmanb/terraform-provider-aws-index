package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenNotificationConfigurationFilter(filter *types.NotificationConfigurationFilter) map[string]any {
	filterRules := map[string]any{}
	if filter.Key == nil || filter.Key.FilterRules == nil {
		return filterRules
	}

	for _, f := range filter.Key.FilterRules {
		name := strings.ToLower(string(f.Name))
		if name == string(types.FilterRuleNamePrefix) {
			filterRules["filter_prefix"] = aws.ToString(f.Value)
		} else if name == string(types.FilterRuleNameSuffix) {
			filterRules["filter_suffix"] = aws.ToString(f.Value)
		}
	}
	return filterRules
}
