package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIntelligentTieringFilter(ctx context.Context, tfMap map[string]any) *types.IntelligentTieringFilter {
	if tfMap == nil {
		return nil
	}

	var prefix string

	if v, ok := tfMap[names.AttrPrefix].(string); ok {
		prefix = v
	}

	var tags []types.Tag

	if v, ok := tfMap[names.AttrTags].(map[string]any); ok {
		tags = svcTags(tftags.New(ctx, v))
	}

	apiObject := &types.IntelligentTieringFilter{}

	if prefix == "" {
		switch len(tags) {
		case 0:
			return nil
		case 1:
			apiObject.Tag = &tags[0]
		default:
			apiObject.And = &types.IntelligentTieringAndOperator{
				Tags: tags,
			}
		}
	} else {
		switch len(tags) {
		case 0:
			apiObject.Prefix = aws.String(prefix)
		default:
			apiObject.And = &types.IntelligentTieringAndOperator{
				Prefix: aws.String(prefix),
				Tags:   tags,
			}
		}
	}

	return apiObject
}
