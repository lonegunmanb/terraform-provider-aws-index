package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"net/http"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
)
func (p *servicePackage) UpdateTags(ctx context.Context, meta any, identifier, resourceType string, oldTags, newTags any) error {
	conn := meta.(*conns.AWSClient).S3Client(ctx)

	switch resourceType {
	case "Bucket":
		if isDirectoryBucket(identifier) {
			conn = meta.(*conns.AWSClient).S3ExpressClient(ctx)
		}
		return bucketUpdateTags(ctx, conn, identifier, oldTags, newTags)

	case "Object", "ObjectCopy", "BucketObject":
		objectARN, err := parseObjectARN(identifier)
		if err != nil {
			return err
		}

		if isDirectoryBucket(objectARN.Bucket) {
			conn = meta.(*conns.AWSClient).S3ExpressClient(ctx)
		}

		var optFns []func(*s3.Options)
		// Via S3 access point: "Invalid configuration: region from ARN `us-east-1` does not match client region `aws-global` and UseArnRegion is `false`".
		if arn.IsARN(objectARN.Bucket) && conn.Options().Region == endpoints.AwsGlobalRegionID {
			optFns = append(optFns, func(o *s3.Options) { o.UseARNRegion = true })
		}

		return objectUpdateTags(ctx, conn, objectARN.Bucket, objectARN.Key, oldTags, newTags, optFns...)

	default:
		return nil
	}
}
