package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBucketDestination(apiObject *types.Destination) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{
		names.AttrStorageClass: apiObject.StorageClass,
	}

	if apiObject := apiObject.AccessControlTranslation; apiObject != nil {
		m := map[string]any{
			names.AttrOwner: apiObject.Owner,
		}

		tfMap["access_control_translation"] = []any{m}
	}

	if apiObject.Account != nil {
		tfMap[names.AttrAccountID] = aws.ToString(apiObject.Account)
	}

	if apiObject.Bucket != nil {
		tfMap[names.AttrBucket] = aws.ToString(apiObject.Bucket)
	}

	if apiObject := apiObject.EncryptionConfiguration; apiObject != nil {
		if apiObject.ReplicaKmsKeyID != nil {
			tfMap["replica_kms_key_id"] = aws.ToString(apiObject.ReplicaKmsKeyID)
		}
	}

	if apiObject := apiObject.Metrics; apiObject != nil {
		m := map[string]any{
			names.AttrStatus: apiObject.Status,
		}

		if apiObject.EventThreshold != nil {
			m["minutes"] = aws.ToInt32(apiObject.EventThreshold.Minutes)
		}

		tfMap["metrics"] = []any{m}
	}

	if apiObject := apiObject.ReplicationTime; apiObject != nil {
		m := map[string]any{
			"minutes":        aws.ToInt32(apiObject.Time.Minutes),
			names.AttrStatus: apiObject.Status,
		}

		tfMap["replication_time"] = []any{m}
	}

	return []any{tfMap}
}
