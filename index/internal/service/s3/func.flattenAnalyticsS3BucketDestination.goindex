package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenAnalyticsS3BucketDestination(bucketDestination *types.AnalyticsS3BucketDestination) []any { // nosemgrep:ci.s3-in-func-name
	if bucketDestination == nil {
		return nil
	}

	result := map[string]any{
		"bucket_arn":     aws.ToString(bucketDestination.Bucket),
		names.AttrFormat: bucketDestination.Format,
	}
	if bucketDestination.BucketAccountId != nil {
		result["bucket_account_id"] = aws.ToString(bucketDestination.BucketAccountId)
	}
	if bucketDestination.Prefix != nil {
		result[names.AttrPrefix] = aws.ToString(bucketDestination.Prefix)
	}

	return []any{result}
}
