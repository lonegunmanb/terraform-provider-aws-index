package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandMetricsFilter(ctx context.Context, m map[string]any) types.MetricsFilter {
	var accessPoint string
	if v, ok := m["access_point"]; ok {
		accessPoint = v.(string)
	}

	var prefix string
	if v, ok := m[names.AttrPrefix]; ok {
		prefix = v.(string)
	}

	var tags []types.Tag
	if v, ok := m[names.AttrTags]; ok {
		tags = svcTags(tftags.New(ctx, v).IgnoreAWS())
	}

	var metricsFilter types.MetricsFilter

	if accessPoint != "" && prefix != "" && len(tags) > 0 {
		metricsFilter = &types.MetricsFilterMemberAnd{
			Value: types.MetricsAndOperator{
				AccessPointArn: aws.String(accessPoint),
				Prefix:         aws.String(prefix),
				Tags:           tags,
			},
		}
	} else if accessPoint != "" && prefix != "" {
		metricsFilter = &types.MetricsFilterMemberAnd{
			Value: types.MetricsAndOperator{
				AccessPointArn: aws.String(accessPoint),
				Prefix:         aws.String(prefix),
			},
		}
	} else if accessPoint != "" && len(tags) > 0 {
		metricsFilter = &types.MetricsFilterMemberAnd{
			Value: types.MetricsAndOperator{
				AccessPointArn: aws.String(accessPoint),
				Tags:           tags,
			},
		}
	} else if prefix != "" && len(tags) > 0 {
		metricsFilter = &types.MetricsFilterMemberAnd{
			Value: types.MetricsAndOperator{
				Prefix: aws.String(prefix),
				Tags:   tags,
			},
		}
	} else if len(tags) > 1 {
		metricsFilter = &types.MetricsFilterMemberAnd{
			Value: types.MetricsAndOperator{
				Tags: tags,
			},
		}
	} else if len(tags) == 1 {
		metricsFilter = &types.MetricsFilterMemberTag{
			Value: tags[0],
		}
	} else if accessPoint != "" {
		metricsFilter = &types.MetricsFilterMemberAccessPointArn{
			Value: accessPoint,
		}
	} else {
		metricsFilter = &types.MetricsFilterMemberPrefix{
			Value: prefix,
		}
	}
	return metricsFilter
}
