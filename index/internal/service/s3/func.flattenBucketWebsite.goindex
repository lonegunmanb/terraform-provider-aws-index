package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBucketWebsite(apiObject *s3.GetBucketWebsiteOutput) ([]any, error) {
	if apiObject == nil {
		return []any{}, nil
	}

	m := make(map[string]any)

	if v := apiObject.IndexDocument; v != nil {
		m["index_document"] = aws.ToString(v.Suffix)
	}

	if v := apiObject.ErrorDocument; v != nil {
		m["error_document"] = aws.ToString(v.Key)
	}

	if apiObject := apiObject.RedirectAllRequestsTo; apiObject != nil {
		hostName := aws.ToString(apiObject.HostName)

		if apiObject.Protocol == "" {
			m["redirect_all_requests_to"] = hostName
		} else {
			var host string
			var path string
			var query string

			parsedHostName, err := url.Parse(hostName)
			if err == nil {
				host = parsedHostName.Host
				path = parsedHostName.Path
				query = parsedHostName.RawQuery
			} else {
				host = hostName
			}

			m["redirect_all_requests_to"] = (&url.URL{
				Scheme:   string(apiObject.Protocol),
				Host:     host,
				Path:     path,
				RawQuery: query,
			}).String()
		}
	}

	if apiObject := apiObject.RoutingRules; apiObject != nil {
		rr, err := normalizeRoutingRules(apiObject)
		if err != nil {
			return nil, err
		}
		m["routing_rules"] = rr
	}

	// We have special handling for the website configuration,
	// so only return the configuration if there is one.
	if len(m) == 0 {
		return []any{}, nil
	}

	return []any{m}, nil
}
