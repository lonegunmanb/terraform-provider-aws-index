package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceBucket,
			TypeName: "aws_s3_bucket",
			Name:     "Bucket",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrBucket,
				ResourceType:        "Bucket",
			}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalSingleParameterIdentity(names.AttrBucket),
		},
		{
			Factory:  resourceBucketAccelerateConfiguration,
			TypeName: "aws_s3_bucket_accelerate_configuration",
			Name:     "Bucket Accelerate Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketACL,
			TypeName: "aws_s3_bucket_acl",
			Name:     "Bucket ACL",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketAnalyticsConfiguration,
			TypeName: "aws_s3_bucket_analytics_configuration",
			Name:     "Bucket Analytics Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketCorsConfiguration,
			TypeName: "aws_s3_bucket_cors_configuration",
			Name:     "Bucket CORS Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketIntelligentTieringConfiguration,
			TypeName: "aws_s3_bucket_intelligent_tiering_configuration",
			Name:     "Bucket Intelligent-Tiering Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketInventory,
			TypeName: "aws_s3_bucket_inventory",
			Name:     "Bucket Inventory",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketLogging,
			TypeName: "aws_s3_bucket_logging",
			Name:     "Bucket Logging",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketMetric,
			TypeName: "aws_s3_bucket_metric",
			Name:     "Bucket Metric",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketNotification,
			TypeName: "aws_s3_bucket_notification",
			Name:     "Bucket Notification",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketObject,
			TypeName: "aws_s3_bucket_object",
			Name:     "Bucket Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "BucketObject",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketObjectLockConfiguration,
			TypeName: "aws_s3_bucket_object_lock_configuration",
			Name:     "Bucket Object Lock Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketOwnershipControls,
			TypeName: "aws_s3_bucket_ownership_controls",
			Name:     "Bucket Ownership Controls",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPolicy,
			TypeName: "aws_s3_bucket_policy",
			Name:     "Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPublicAccessBlock,
			TypeName: "aws_s3_bucket_public_access_block",
			Name:     "Bucket Public Access Block",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketReplicationConfiguration,
			TypeName: "aws_s3_bucket_replication_configuration",
			Name:     "Bucket Replication Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketRequestPaymentConfiguration,
			TypeName: "aws_s3_bucket_request_payment_configuration",
			Name:     "Bucket Request Payment Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketServerSideEncryptionConfiguration,
			TypeName: "aws_s3_bucket_server_side_encryption_configuration",
			Name:     "Bucket Server-side Encryption Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketVersioning,
			TypeName: "aws_s3_bucket_versioning",
			Name:     "Bucket Versioning",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketWebsiteConfiguration,
			TypeName: "aws_s3_bucket_website_configuration",
			Name:     "Bucket Website Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObject,
			TypeName: "aws_s3_object",
			Name:     "Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "Object",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObjectCopy,
			TypeName: "aws_s3_object_copy",
			Name:     "Object Copy",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "ObjectCopy",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
