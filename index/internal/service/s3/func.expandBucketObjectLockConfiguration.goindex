package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandBucketObjectLockConfiguration(l []any) *types.ObjectLockConfiguration {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	tfMap, ok := l[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &types.ObjectLockConfiguration{}

	if v, ok := tfMap["object_lock_enabled"].(string); ok && v != "" {
		apiObject.ObjectLockEnabled = types.ObjectLockEnabled(v)
	}

	if v, ok := tfMap[names.AttrRule].([]any); ok && len(v) > 0 {
		tfMap := v[0].(map[string]any)

		if v, ok := tfMap["default_retention"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)

			apiObject.Rule = &types.ObjectLockRule{
				DefaultRetention: &types.DefaultRetention{},
			}

			if v, ok := tfMap["days"].(int); ok && v > 0 {
				apiObject.Rule.DefaultRetention.Days = aws.Int32(int32(v))
			}
			if v, ok := tfMap[names.AttrMode].(string); ok && v != "" {
				apiObject.Rule.DefaultRetention.Mode = types.ObjectLockRetentionMode(v)
			}
			if v, ok := tfMap["years"].(int); ok && v > 0 {
				apiObject.Rule.DefaultRetention.Years = aws.Int32(int32(v))
			}
		}
	}

	return apiObject
}
