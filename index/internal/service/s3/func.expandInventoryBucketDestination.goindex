package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandInventoryBucketDestination(m map[string]any) *types.InventoryS3BucketDestination {
	destination := &types.InventoryS3BucketDestination{
		Format: types.InventoryFormat(m[names.AttrFormat].(string)),
		Bucket: aws.String(m["bucket_arn"].(string)),
	}

	if v, ok := m[names.AttrAccountID]; ok && v.(string) != "" {
		destination.AccountId = aws.String(v.(string))
	}

	if v, ok := m[names.AttrPrefix]; ok && v.(string) != "" {
		destination.Prefix = aws.String(v.(string))
	}

	if v, ok := m["encryption"].([]any); ok && len(v) > 0 {
		encryptionMap := v[0].(map[string]any)

		encryption := &types.InventoryEncryption{}

		for k, v := range encryptionMap {
			data := v.([]any)

			if len(data) == 0 {
				continue
			}

			switch k {
			case "sse_kms":
				m := data[0].(map[string]any)
				encryption.SSEKMS = &types.SSEKMS{
					KeyId: aws.String(m[names.AttrKeyID].(string)),
				}
			case "sse_s3":
				encryption.SSES3 = &types.SSES3{}
			}
		}

		destination.Encryption = encryption
	}

	return destination
}
