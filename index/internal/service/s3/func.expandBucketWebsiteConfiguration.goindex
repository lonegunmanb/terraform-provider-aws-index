package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandBucketWebsiteConfiguration(l []any) (*types.WebsiteConfiguration, error) {
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}

	tfMap, ok := l[0].(map[string]any)
	if !ok {
		return nil, nil
	}

	websiteConfig := &types.WebsiteConfiguration{}

	if v, ok := tfMap["index_document"].(string); ok && v != "" {
		websiteConfig.IndexDocument = &types.IndexDocument{
			Suffix: aws.String(v),
		}
	}

	if v, ok := tfMap["error_document"].(string); ok && v != "" {
		websiteConfig.ErrorDocument = &types.ErrorDocument{
			Key: aws.String(v),
		}
	}

	if v, ok := tfMap["redirect_all_requests_to"].(string); ok && v != "" {
		redirect, err := url.Parse(v)
		if err == nil && redirect.Scheme != "" {
			var buf bytes.Buffer

			buf.WriteString(redirect.Host)
			if redirect.Path != "" {
				buf.WriteString(redirect.Path)
			}
			if redirect.RawQuery != "" {
				buf.WriteString("?")
				buf.WriteString(redirect.RawQuery)
			}
			websiteConfig.RedirectAllRequestsTo = &types.RedirectAllRequestsTo{
				HostName: aws.String(buf.String()),
				Protocol: types.Protocol(redirect.Scheme),
			}
		} else {
			websiteConfig.RedirectAllRequestsTo = &types.RedirectAllRequestsTo{
				HostName: aws.String(v),
			}
		}
	}

	if v, ok := tfMap["routing_rules"].(string); ok && v != "" {
		var routingRules []types.RoutingRule
		if err := json.Unmarshal([]byte(v), &routingRules); err != nil {
			return nil, err
		}
		websiteConfig.RoutingRules = routingRules
	}

	return websiteConfig, nil
}
