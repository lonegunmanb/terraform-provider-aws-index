package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"strconv"

	awstypes "github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeLifecycleRuleFilterModelStateFromV0(ctx context.Context, old fwtypes.ListNestedObjectValueOf[lifecycleRuleFilterModelV0], diags *diag.Diagnostics) (result fwtypes.ListNestedObjectValueOf[lifecycleRuleFilterModel]) {
	oldFilters, d := old.ToSlice(ctx)
	diags.Append(d...)
	if diags.HasError() {
		return result
	}

	newFilters := make([]lifecycleRuleFilterModel, len(oldFilters))
	for i, oldFilter := range oldFilters {
		newFilter := lifecycleRuleFilterModel{
			And:                   upgradeLifecycleRuleAndOperatorModelStateFromV0(ctx, oldFilter.And, diags),
			ObjectSizeGreaterThan: stringToInt64Legacy(ctx, oldFilter.ObjectSizeGreaterThan, diags),
			ObjectSizeLessThan:    stringToInt64Legacy(ctx, oldFilter.ObjectSizeLessThan, diags),
			Prefix:                oldFilter.Prefix,
			Tag:                   oldFilter.Tag,
		}
		if diags.HasError() {
			return result
		}

		newFilters[i] = newFilter
	}

	result, d = fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newFilters)
	diags.Append(d...)
	if diags.HasError() {
		return result
	}

	return result
}
