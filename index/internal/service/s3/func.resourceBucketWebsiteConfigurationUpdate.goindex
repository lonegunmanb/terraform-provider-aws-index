package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"encoding/json"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBucketWebsiteConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).S3Client(ctx)

	bucket, expectedBucketOwner, err := parseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if isDirectoryBucket(bucket) {
		conn = meta.(*conns.AWSClient).S3ExpressClient(ctx)
	}

	websiteConfig := &types.WebsiteConfiguration{}

	if v, ok := d.GetOk("error_document"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		websiteConfig.ErrorDocument = expandErrorDocument(v.([]any))
	}

	if v, ok := d.GetOk("index_document"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		websiteConfig.IndexDocument = expandIndexDocument(v.([]any))
	}

	if v, ok := d.GetOk("redirect_all_requests_to"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		websiteConfig.RedirectAllRequestsTo = expandRedirectAllRequestsTo(v.([]any))
	}

	if d.HasChanges("routing_rule", "routing_rules") {
		if d.HasChange("routing_rule") {
			websiteConfig.RoutingRules = expandRoutingRules(d.Get("routing_rule").([]any))
		} else {
			var unmarshalledRules []types.RoutingRule
			if err := json.Unmarshal([]byte(d.Get("routing_rules").(string)), &unmarshalledRules); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
			websiteConfig.RoutingRules = unmarshalledRules
		}
	} else {
		// Still send the current RoutingRules configuration
		if v, ok := d.GetOk("routing_rule"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			websiteConfig.RoutingRules = expandRoutingRules(v.([]any))
		}

		if v, ok := d.GetOk("routing_rules"); ok {
			var unmarshalledRules []types.RoutingRule
			if err := json.Unmarshal([]byte(v.(string)), &unmarshalledRules); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
			websiteConfig.RoutingRules = unmarshalledRules
		}
	}

	input := &s3.PutBucketWebsiteInput{
		Bucket:               aws.String(bucket),
		WebsiteConfiguration: websiteConfig,
	}
	if expectedBucketOwner != "" {
		input.ExpectedBucketOwner = aws.String(expectedBucketOwner)
	}

	_, err = conn.PutBucketWebsite(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating S3 Bucket Website Configuration (%s): %s", d.Id(), err)
	}

	return append(diags, resourceBucketWebsiteConfigurationRead(ctx, d, meta)...)
}
