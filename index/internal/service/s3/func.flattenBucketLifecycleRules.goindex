package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBucketLifecycleRules(ctx context.Context, apiObjects []types.LifecycleRule) []any {
	if len(apiObjects) == 0 {
		return []any{}
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := make(map[string]any)

		if apiObject := apiObject.AbortIncompleteMultipartUpload; apiObject != nil {
			if v := apiObject.DaysAfterInitiation; v != nil {
				tfMap["abort_incomplete_multipart_upload_days"] = aws.ToInt32(v)
			}
		}

		if v := apiObject.Expiration; v != nil {
			tfMap["expiration"] = flattenBucketLifecycleExpiration(v)
		}

		if apiObject := apiObject.Filter; apiObject != nil {
			if v := apiObject.And; v != nil {
				if v := v.Prefix; v != nil {
					tfMap[names.AttrPrefix] = aws.ToString(v)
				}

				if v := v.Tags; v != nil {
					tfMap[names.AttrTags] = keyValueTags(ctx, v).IgnoreAWS().Map()
				}
			}

			if v := apiObject.Prefix; v != nil {
				tfMap[names.AttrPrefix] = aws.ToString(v)
			}

			if v := apiObject.Tag; v != nil {
				tfMap[names.AttrTags] = keyValueTags(ctx, []types.Tag{*v}).IgnoreAWS().Map()
			}
		}

		if v := apiObject.ID; v != nil {
			tfMap[names.AttrID] = aws.ToString(v)
		}

		if v := apiObject.Prefix; v != nil {
			tfMap[names.AttrPrefix] = aws.ToString(v)
		}

		tfMap[names.AttrEnabled] = apiObject.Status == types.ExpirationStatusEnabled

		if apiObject := apiObject.NoncurrentVersionExpiration; apiObject != nil {
			m := make(map[string]any)

			if v := apiObject.NoncurrentDays; v != nil {
				m["days"] = aws.ToInt32(v)
			}

			tfMap["noncurrent_version_expiration"] = []any{m}
		}

		if v := apiObject.NoncurrentVersionTransitions; v != nil {
			tfMap["noncurrent_version_transition"] = flattenBucketNoncurrentVersionTransitions(v)
		}

		if v := apiObject.Transitions; v != nil {
			tfMap["transition"] = flattenBucketTransitions(v)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
