package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBucketNotificationPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	const (
		filterRulesSliceStartLen = 2
	)
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).S3Client(ctx)

	bucket := d.Get(names.AttrBucket).(string)
	if isDirectoryBucket(bucket) {
		conn = meta.(*conns.AWSClient).S3ExpressClient(ctx)
	}

	var eventbridgeConfig *types.EventBridgeConfiguration
	if d.Get("eventbridge").(bool) {
		eventbridgeConfig = &types.EventBridgeConfiguration{}
	}

	lambdaFunctionNotifications := d.Get("lambda_function").([]any)
	lambdaConfigs := make([]types.LambdaFunctionConfiguration, 0, len(lambdaFunctionNotifications))
	for i, c := range lambdaFunctionNotifications {
		lc := types.LambdaFunctionConfiguration{}

		c := c.(map[string]any)

		if val, ok := c[names.AttrID].(string); ok && val != "" {
			lc.Id = aws.String(val)
		} else {
			lc.Id = aws.String(id.PrefixedUniqueId("tf-s3-lambda-"))
		}

		if val, ok := c["lambda_function_arn"].(string); ok {
			lc.LambdaFunctionArn = aws.String(val)
		}

		lc.Events = flex.ExpandStringyValueSet[types.Event](d.Get(fmt.Sprintf("lambda_function.%d.events", i)).(*schema.Set))

		filterRules := make([]types.FilterRule, 0, filterRulesSliceStartLen)
		if val, ok := c["filter_prefix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNamePrefix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if val, ok := c["filter_suffix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNameSuffix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if len(filterRules) > 0 {
			lc.Filter = &types.NotificationConfigurationFilter{
				Key: &types.S3KeyFilter{
					FilterRules: filterRules,
				},
			}
		}
		lambdaConfigs = append(lambdaConfigs, lc)
	}

	queueNotifications := d.Get("queue").([]any)
	queueConfigs := make([]types.QueueConfiguration, 0, len(queueNotifications))
	for i, c := range queueNotifications {
		qc := types.QueueConfiguration{}

		c := c.(map[string]any)

		if val, ok := c[names.AttrID].(string); ok && val != "" {
			qc.Id = aws.String(val)
		} else {
			qc.Id = aws.String(id.PrefixedUniqueId("tf-s3-queue-"))
		}

		if val, ok := c["queue_arn"].(string); ok {
			qc.QueueArn = aws.String(val)
		}

		qc.Events = flex.ExpandStringyValueSet[types.Event](d.Get(fmt.Sprintf("queue.%d.events", i)).(*schema.Set))

		filterRules := make([]types.FilterRule, 0, filterRulesSliceStartLen)
		if val, ok := c["filter_prefix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNamePrefix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if val, ok := c["filter_suffix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNameSuffix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if len(filterRules) > 0 {
			qc.Filter = &types.NotificationConfigurationFilter{
				Key: &types.S3KeyFilter{
					FilterRules: filterRules,
				},
			}
		}
		queueConfigs = append(queueConfigs, qc)
	}

	topicNotifications := d.Get("topic").([]any)
	topicConfigs := make([]types.TopicConfiguration, 0, len(topicNotifications))
	for i, c := range topicNotifications {
		tc := types.TopicConfiguration{}

		c := c.(map[string]any)

		if val, ok := c[names.AttrID].(string); ok && val != "" {
			tc.Id = aws.String(val)
		} else {
			tc.Id = aws.String(id.PrefixedUniqueId("tf-s3-topic-"))
		}

		if val, ok := c[names.AttrTopicARN].(string); ok {
			tc.TopicArn = aws.String(val)
		}

		tc.Events = flex.ExpandStringyValueSet[types.Event](d.Get(fmt.Sprintf("topic.%d.events", i)).(*schema.Set))

		filterRules := make([]types.FilterRule, 0, filterRulesSliceStartLen)
		if val, ok := c["filter_prefix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNamePrefix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if val, ok := c["filter_suffix"].(string); ok && val != "" {
			filterRule := types.FilterRule{
				Name:  types.FilterRuleNameSuffix,
				Value: aws.String(val),
			}
			filterRules = append(filterRules, filterRule)
		}
		if len(filterRules) > 0 {
			tc.Filter = &types.NotificationConfigurationFilter{
				Key: &types.S3KeyFilter{
					FilterRules: filterRules,
				},
			}
		}
		topicConfigs = append(topicConfigs, tc)
	}

	notificationConfiguration := &types.NotificationConfiguration{}
	if eventbridgeConfig != nil {
		notificationConfiguration.EventBridgeConfiguration = eventbridgeConfig
	}
	if len(lambdaConfigs) > 0 {
		notificationConfiguration.LambdaFunctionConfigurations = lambdaConfigs
	}
	if len(queueConfigs) > 0 {
		notificationConfiguration.QueueConfigurations = queueConfigs
	}
	if len(topicConfigs) > 0 {
		notificationConfiguration.TopicConfigurations = topicConfigs
	}
	input := &s3.PutBucketNotificationConfigurationInput{
		Bucket:                    aws.String(bucket),
		NotificationConfiguration: notificationConfiguration,
	}

	_, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, bucketPropagationTimeout, func(ctx context.Context) (any, error) {
		return conn.PutBucketNotificationConfiguration(ctx, input)
	}, errCodeNoSuchBucket)

	if tfawserr.ErrMessageContains(err, errCodeInvalidArgument, "NotificationConfiguration is not valid, expected CreateBucketConfiguration") {
		err = errDirectoryBucket(err)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating S3 Bucket (%s) Notification: %s", bucket, err)
	}

	if d.IsNewResource() {
		d.SetId(bucket)

		_, err = tfresource.RetryWhenNotFound(ctx, bucketPropagationTimeout, func(ctx context.Context) (any, error) {
			return findBucketNotificationConfiguration(ctx, conn, bucket, "")
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for S3 Bucket Notification (%s) create: %s", d.Id(), err)
		}
	}

	return append(diags, resourceBucketNotificationRead(ctx, d, meta)...)
}
