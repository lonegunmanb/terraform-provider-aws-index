package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBucketReplicationRules(ctx context.Context, apiObjects []types.ReplicationRule) []any {
	if len(apiObjects) == 0 {
		return []any{}
	}

	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{
			names.AttrStatus: apiObject.Status,
		}

		if apiObject := apiObject.DeleteMarkerReplication; apiObject != nil {
			if apiObject.Status == types.DeleteMarkerReplicationStatusEnabled {
				tfMap["delete_marker_replication_status"] = apiObject.Status
			}
		}

		if apiObject.Destination != nil {
			tfMap[names.AttrDestination] = flattenBucketDestination(apiObject.Destination)
		}

		if apiObject.Filter != nil {
			tfMap[names.AttrFilter] = flattenBucketReplicationRuleFilter(ctx, apiObject.Filter)
		}

		if apiObject.ID != nil {
			tfMap[names.AttrID] = aws.ToString(apiObject.ID)
		}

		if apiObject.Prefix != nil {
			tfMap[names.AttrPrefix] = aws.ToString(apiObject.Prefix)
		}

		if apiObject.Priority != nil {
			tfMap[names.AttrPriority] = aws.ToInt32(apiObject.Priority)
		}

		if apiObject.SourceSelectionCriteria != nil {
			tfMap["source_selection_criteria"] = flattenBucketSourceSelectionCriteria(apiObject.SourceSelectionCriteria)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
