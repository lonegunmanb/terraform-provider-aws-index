package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenMetricsFilter(ctx context.Context, metricsFilter types.MetricsFilter) map[string]any {
	m := make(map[string]any)

	switch v := metricsFilter.(type) {
	case *types.MetricsFilterMemberAnd:
		if v := v.Value.AccessPointArn; v != nil {
			m["access_point"] = aws.ToString(v)
		}
		if v := v.Value.Prefix; v != nil {
			m[names.AttrPrefix] = aws.ToString(v)
		}
		if v := v.Value.Tags; v != nil {
			m[names.AttrTags] = keyValueTags(ctx, v).IgnoreAWS().Map()
		}
	case *types.MetricsFilterMemberAccessPointArn:
		m["access_point"] = v.Value
	case *types.MetricsFilterMemberPrefix:
		m[names.AttrPrefix] = v.Value
	case *types.MetricsFilterMemberTag:
		tags := []types.Tag{
			v.Value,
		}
		m[names.AttrTags] = keyValueTags(ctx, tags).IgnoreAWS().Map()
	default:
		return nil
	}
	return m
}
