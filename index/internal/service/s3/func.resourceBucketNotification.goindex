package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBucketNotification() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceBucketNotificationPut,
		ReadWithoutTimeout:   resourceBucketNotificationRead,
		UpdateWithoutTimeout: resourceBucketNotificationPut,
		DeleteWithoutTimeout: resourceBucketNotificationDelete,

		Schema: map[string]*schema.Schema{
			names.AttrBucket: {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"eventbridge": {
				Type:     schema.TypeBool,
				Optional: true,
				Default:  false,
			},
			"lambda_function": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"events": {
							Type:     schema.TypeSet,
							Required: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
						"filter_prefix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"filter_suffix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						names.AttrID: {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"lambda_function_arn": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
			"queue": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"events": {
							Type:     schema.TypeSet,
							Required: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
						"filter_prefix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"filter_suffix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						names.AttrID: {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						"queue_arn": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
			"topic": {
				Type:     schema.TypeList,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"events": {
							Type:     schema.TypeSet,
							Required: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
						"filter_prefix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"filter_suffix": {
							Type:     schema.TypeString,
							Optional: true,
						},
						names.AttrID: {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
						},
						names.AttrTopicARN: {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
			},
		},
	}
}
