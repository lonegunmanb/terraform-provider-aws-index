package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceObjectCopyUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	// if any of these exist, let the API decide whether to copy
	for _, key := range []string{
		"copy_if_match",
		"copy_if_modified_since",
		"copy_if_none_match",
		"copy_if_unmodified_since",
	} {
		if _, ok := d.GetOk(key); ok {
			return append(diags, resourceObjectCopyDoCopy(ctx, d, meta)...)
		}
	}

	args := []string{
		"acl",
		names.AttrBucket,
		"bucket_key_enabled",
		"cache_control",
		"checksum_algorithm",
		"content_disposition",
		"content_encoding",
		"content_language",
		names.AttrContentType,
		"customer_algorithm",
		"customer_key",
		"customer_key_md5",
		names.AttrExpectedBucketOwner,
		"expected_source_bucket_owner",
		"expires",
		"grant",
		names.AttrKey,
		"kms_encryption_context",
		names.AttrKMSKeyID,
		"metadata",
		"metadata_directive",
		"object_lock_legal_hold_status",
		"object_lock_mode",
		"object_lock_retain_until_date",
		"request_payer",
		"server_side_encryption",
		names.AttrSource,
		"source_customer_algorithm",
		"source_customer_key",
		"source_customer_key_md5",
		names.AttrStorageClass,
		"tagging_directive",
		"website_redirect",
	}
	if d.HasChanges(args...) {
		return append(diags, resourceObjectCopyDoCopy(ctx, d, meta)...)
	}

	return diags
}
