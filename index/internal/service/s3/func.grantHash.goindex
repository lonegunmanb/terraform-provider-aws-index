package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func grantHash(v any) int {
	var buf bytes.Buffer
	m, ok := v.(map[string]any)

	if !ok {
		return 0
	}

	if v, ok := m[names.AttrID]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}
	if v, ok := m[names.AttrType]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}
	if v, ok := m[names.AttrURI]; ok {
		fmt.Fprintf(&buf, "%s-", v.(string))
	}
	if p, ok := m[names.AttrPermissions]; ok {
		fmt.Fprintf(&buf, "%v-", p.(*schema.Set).List())
	}
	return create.StringHashcode(buf.String())
}
