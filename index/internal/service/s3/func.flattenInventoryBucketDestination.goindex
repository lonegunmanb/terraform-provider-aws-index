package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenInventoryBucketDestination(destination *types.InventoryS3BucketDestination) []map[string]any {
	result := make([]map[string]any, 0, 1)

	m := map[string]any{
		names.AttrFormat: destination.Format,
		"bucket_arn":     aws.ToString(destination.Bucket),
	}

	if destination.AccountId != nil {
		m[names.AttrAccountID] = aws.ToString(destination.AccountId)
	}
	if destination.Prefix != nil {
		m[names.AttrPrefix] = aws.ToString(destination.Prefix)
	}

	if destination.Encryption != nil {
		encryption := make(map[string]any, 1)
		if destination.Encryption.SSES3 != nil {
			encryption["sse_s3"] = []map[string]any{{}}
		} else if destination.Encryption.SSEKMS != nil {
			encryption["sse_kms"] = []map[string]any{
				{
					names.AttrKeyID: aws.ToString(destination.Encryption.SSEKMS.KeyId),
				},
			}
		}
		m["encryption"] = []map[string]any{encryption}
	}

	result = append(result, m)

	return result
}
