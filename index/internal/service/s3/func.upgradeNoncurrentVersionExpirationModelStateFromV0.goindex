package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"strconv"

	awstypes "github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeNoncurrentVersionExpirationModelStateFromV0(ctx context.Context, old fwtypes.ListNestedObjectValueOf[noncurrentVersionExpirationModelV0], diags *diag.Diagnostics) (result fwtypes.ListNestedObjectValueOf[noncurrentVersionExpirationModel]) {
	oldThings, d := old.ToSlice(ctx)
	diags.Append(d...)
	if diags.HasError() {
		return result
	}

	newThings := make([]noncurrentVersionExpirationModel, len(oldThings))
	for i, oldThing := range oldThings {
		newThing := noncurrentVersionExpirationModel{
			NewerNoncurrentVersions: stringToInt32Legacy(ctx, oldThing.NewerNoncurrentVersions, diags),
			NoncurrentDays:          types.Int32Value(fwflex.Int32ValueFromFrameworkInt64(ctx, oldThing.NoncurrentDays)),
		}
		if diags.HasError() {
			return result
		}

		newThings[i] = newThing
	}

	result, d = fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newThings)
	diags.Append(d...)
	if diags.HasError() {
		return result
	}

	return result
}
