package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"regexp"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func isContentTypeAllowed(contentType *string) bool {
	if contentType == nil {
		return false
	}

	allowedContentTypes := []*regexp.Regexp{
		regexache.MustCompile(`^application/atom\+xml$`),
		regexache.MustCompile(`^application/json$`),
		regexache.MustCompile(`^application/ld\+json$`),
		regexache.MustCompile(`^application/x-csh$`),
		regexache.MustCompile(`^application/x-httpd-php$`),
		regexache.MustCompile(`^application/x-sh$`),
		regexache.MustCompile(`^application/xhtml\+xml$`),
		regexache.MustCompile(`^application/xml$`),
		regexache.MustCompile(`^application/x-sql$`),
		regexache.MustCompile(`^application/yaml$`),
		regexache.MustCompile(`^text/.+`),
	}
	for _, r := range allowedContentTypes {
		if r.MatchString(aws.ToString(contentType)) {
			return true
		}
	}

	return false
}
