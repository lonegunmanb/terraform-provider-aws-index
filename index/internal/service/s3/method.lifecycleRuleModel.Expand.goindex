package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"fmt"
	"reflect"
	"slices"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/helpers/validatordiag"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	tfboolplanmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers/boolplanmodifier"
	tfint32planmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers/int32planmodifier"
	tfint64planmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers/int64planmodifier"
	tfstringplanmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers/stringplanmodifier"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tfobjectvalidator "github.com/hashicorp/terraform-provider-aws/internal/framework/validators/objectvalidator"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (m lifecycleRuleModel) Expand(ctx context.Context) (result any, diags diag.Diagnostics) {
	var r awstypes.LifecycleRule

	d := fwflex.Expand(ctx, m.AbortIncompleteMultipartUpload, &r.AbortIncompleteMultipartUpload)
	diags.Append(d...)
	if d.HasError() {
		return nil, diags
	}

	d = fwflex.Expand(ctx, m.Expiration, &r.Expiration)
	diags.Append(d...)
	if d.HasError() {
		return nil, diags
	}

	// For legacy-mode reasons, `prefix` may be empty, but should be treated as `nil`
	prefix := fwflex.EmptyStringAsNull(m.Prefix)

	// The AWS API requires a value for `filter` unless `prefix` is set. If `filter` is set, only one of
	// `and`, `object_size_greater_than`, `object_size_less_than`, `prefix`, or `tags` can be set,
	// and an empty `filter` is valid. Setting `filter.prefix` to "" is equivalent to an empty `filter`.
	// However, the provider historically has allowed `filter` to be null, empty, or have one child value set.
	// (Setting multiple elements would result in a run-time error)
	// For null `filter`, send an empty LifecycleRuleFilter
	if m.Filter.IsUnknown() || m.Filter.IsNull() {
		if prefix.IsUnknown() || prefix.IsNull() {
			filter := awstypes.LifecycleRuleFilter{}
			r.Filter = &filter
		}
	} else {
		filter, d := m.Filter.ToPtr(ctx)
		diags.Append(d...)
		if diags.HasError() {
			return nil, diags
		}
		if filter == nil {
			diags.AddError(
				"Unexpected Error",
				"An unexpected error occurred while preparing request. "+
					"This is always an error in the provider. "+
					"Please report the following to the provider developer:\n\n"+
					`Expanding "lifecycleRuleModel": "Filter" has value, but returned nil`,
			)
			return nil, diags
		}
		if isFilterModelZero(filter) {
			filter := awstypes.LifecycleRuleFilter{
				Prefix: aws.String(""),
			}
			r.Filter = &filter
		} else {
			d = fwflex.Expand(ctx, m.Filter, &r.Filter)
			diags.Append(d...)
			if d.HasError() {
				return nil, diags
			}
		}
	}

	r.ID = fwflex.StringFromFramework(ctx, m.ID)

	d = fwflex.Expand(ctx, m.NoncurrentVersionExpirations, &r.NoncurrentVersionExpiration)
	diags.Append(d...)
	if d.HasError() {
		return nil, diags
	}

	d = fwflex.Expand(ctx, m.NoncurrentVersionTransitions, &r.NoncurrentVersionTransitions)
	diags.Append(d...)
	if d.HasError() {
		return nil, diags
	}

	r.Prefix = fwflex.StringFromFramework(ctx, prefix)

	r.Status = m.Status.ValueEnum()

	d = fwflex.Expand(ctx, m.Transitions, &r.Transitions)
	diags.Append(d...)
	if d.HasError() {
		return nil, diags
	}

	return &r, diags
}
