package github.com/hashicorp/terraform-provider-aws/internal/service/s3
import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/url"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	smithy "github.com/aws/smithy-go"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
)
func deleteAllObjectVersions(ctx context.Context, conn *s3.Client, bucket, key string, force, ignoreObjectErrors bool, optFns ...func(*s3.Options)) (int64, error) {
	if key == "" {
		return 0, errors.New("use `emptyBucket` to delete all versions of all objects in an S3 general purpose bucket")
	}

	input := &s3.ListObjectVersionsInput{
		Bucket: aws.String(bucket),
		Prefix: aws.String(key),
	}
	var lastErr error
	var nObjects int64

	pages := s3.NewListObjectVersionsPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx, optFns...)

		if tfawserr.ErrCodeEquals(err, errCodeNoSuchBucket) {
			break
		}

		if err != nil {
			return nObjects, err
		}

		for _, objectVersion := range page.Versions {
			objectKey := aws.ToString(objectVersion.Key)
			objectVersionID := aws.ToString(objectVersion.VersionId)

			if key != objectKey {
				continue
			}

			err := deleteObjectVersion(ctx, conn, bucket, objectKey, objectVersionID, force, optFns...)

			if err == nil {
				nObjects++
			}

			if tfawserr.ErrCodeEquals(err, errCodeAccessDenied) && force {
				// Remove any legal hold.
				input := &s3.HeadObjectInput{
					Bucket:    aws.String(bucket),
					Key:       aws.String(objectKey),
					VersionId: aws.String(objectVersionID),
				}

				output, err := conn.HeadObject(ctx, input, optFns...)

				if err != nil {
					log.Printf("[ERROR] Getting S3 Bucket (%s) Object (%s) Version (%s) metadata: %s", bucket, objectKey, objectVersionID, err)
					lastErr = err
					continue
				}

				if output.ObjectLockLegalHoldStatus == types.ObjectLockLegalHoldStatusOn {
					input := &s3.PutObjectLegalHoldInput{
						Bucket: aws.String(bucket),
						Key:    aws.String(objectKey),
						LegalHold: &types.ObjectLockLegalHold{
							Status: types.ObjectLockLegalHoldStatusOff,
						},
						VersionId: aws.String(objectVersionID),
					}

					_, err := conn.PutObjectLegalHold(ctx, input, optFns...)

					if err != nil {
						log.Printf("[ERROR] Putting S3 Bucket (%s) Object (%s) Version(%s) legal hold: %s", bucket, objectKey, objectVersionID, err)
						lastErr = err
						continue
					}

					// Attempt to delete again.
					err = deleteObjectVersion(ctx, conn, bucket, objectKey, objectVersionID, force, optFns...)

					if err != nil {
						lastErr = err
					} else {
						nObjects++
					}

					continue
				}

				// AccessDenied for another reason.
				lastErr = fmt.Errorf("deleting S3 Bucket (%s) Object (%s) Version (%s): %w", bucket, objectKey, objectVersionID, err)
				continue
			}

			if err != nil {
				lastErr = err
			}
		}
	}

	if lastErr != nil {
		if !ignoreObjectErrors {
			return nObjects, fmt.Errorf("deleting at least one S3 Object version, last error: %w", lastErr)
		}

		lastErr = nil
	}

	pages = s3.NewListObjectVersionsPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx, optFns...)

		if tfawserr.ErrCodeEquals(err, errCodeNoSuchBucket) {
			break
		}

		if err != nil {
			return nObjects, err
		}

		for _, deleteMarker := range page.DeleteMarkers {
			deleteMarkerKey := aws.ToString(deleteMarker.Key)
			deleteMarkerVersionID := aws.ToString(deleteMarker.VersionId)

			if key != deleteMarkerKey {
				continue
			}

			// Delete markers have no object lock protections.
			err := deleteObjectVersion(ctx, conn, bucket, deleteMarkerKey, deleteMarkerVersionID, false, optFns...)

			if err != nil {
				lastErr = err
			} else {
				nObjects++
			}
		}
	}

	if lastErr != nil {
		if !ignoreObjectErrors {
			return nObjects, fmt.Errorf("deleting at least one S3 Object delete marker, last error: %w", lastErr)
		}
	}

	return nObjects, nil
}
