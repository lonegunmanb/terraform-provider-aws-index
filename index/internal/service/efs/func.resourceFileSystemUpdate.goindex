package github.com/hashicorp/terraform-provider-aws/internal/service/efs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/efs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/efs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFileSystemUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EFSClient(ctx)

	if d.HasChanges("provisioned_throughput_in_mibps", "throughput_mode") {
		throughputMode := awstypes.ThroughputMode(d.Get("throughput_mode").(string))
		input := &efs.UpdateFileSystemInput{
			FileSystemId:   aws.String(d.Id()),
			ThroughputMode: throughputMode,
		}

		if throughputMode == awstypes.ThroughputModeProvisioned {
			input.ProvisionedThroughputInMibps = aws.Float64(d.Get("provisioned_throughput_in_mibps").(float64))
		}

		_, err := conn.UpdateFileSystem(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EFS File System (%s): %s", d.Id(), err)
		}

		if _, err := waitFileSystemAvailable(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for EFS File System (%s) update: %s", d.Id(), err)
		}
	}

	if d.HasChange("lifecycle_policy") {
		input := &efs.PutLifecycleConfigurationInput{
			FileSystemId:      aws.String(d.Id()),
			LifecyclePolicies: expandLifecyclePolicies(d.Get("lifecycle_policy").([]any)),
		}

		// Prevent the following error during removal:
		// InvalidParameter: 1 validation error(s) found.
		// - missing required field, PutLifecycleConfigurationInput.LifecyclePolicies.
		if input.LifecyclePolicies == nil {
			input.LifecyclePolicies = []awstypes.LifecyclePolicy{}
		}

		_, err := conn.PutLifecycleConfiguration(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting EFS File System (%s) lifecycle configuration: %s", d.Id(), err)
		}
	}

	if d.HasChanges("protection") {
		if v, ok := d.GetOk("protection"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input := expandUpdateFileSystemProtectionInput(d.Id(), v.([]any)[0].(map[string]any))

			_, err := conn.UpdateFileSystemProtection(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating EFS File System (%s) protection: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceFileSystemRead(ctx, d, meta)...)
}
