package github.com/hashicorp/terraform-provider-aws/internal/service/efs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/efs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/efs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFileSystemCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EFSClient(ctx)

	var creationToken string
	if v, ok := d.GetOk("creation_token"); ok {
		creationToken = v.(string)
	} else {
		creationToken = id.UniqueId()
	}
	throughputMode := awstypes.ThroughputMode(d.Get("throughput_mode").(string))
	input := &efs.CreateFileSystemInput{
		CreationToken:  aws.String(creationToken),
		Tags:           getTagsIn(ctx),
		ThroughputMode: throughputMode,
	}

	if v, ok := d.GetOk("availability_zone_name"); ok {
		input.AvailabilityZoneName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("performance_mode"); ok {
		input.PerformanceMode = awstypes.PerformanceMode(v.(string))
	}

	if throughputMode == awstypes.ThroughputModeProvisioned {
		input.ProvisionedThroughputInMibps = aws.Float64(d.Get("provisioned_throughput_in_mibps").(float64))
	}

	encrypted, hasEncrypted := d.GetOk(names.AttrEncrypted)
	if hasEncrypted {
		input.Encrypted = aws.Bool(encrypted.(bool))
	}

	kmsKeyID, hasKmsKeyID := d.GetOk(names.AttrKMSKeyID)
	if hasKmsKeyID {
		input.KmsKeyId = aws.String(kmsKeyID.(string))
	}

	if encrypted == false && hasKmsKeyID {
		return sdkdiag.AppendFromErr(diags, errors.New("encrypted must be set to true when kms_key_id is specified"))
	}

	output, err := conn.CreateFileSystem(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating EFS File System: %s", err)
	}

	d.SetId(aws.ToString(output.FileSystemId))

	if _, err := waitFileSystemAvailable(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for EFS File System (%s) create: %s", d.Id(), err)
	}

	if v, ok := d.GetOk("lifecycle_policy"); ok {
		input := &efs.PutLifecycleConfigurationInput{
			FileSystemId:      aws.String(d.Id()),
			LifecyclePolicies: expandLifecyclePolicies(v.([]any)),
		}

		_, err := conn.PutLifecycleConfiguration(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting EFS File System (%s) lifecycle configuration: %s", d.Id(), err)
		}
	}

	if v, ok := d.GetOk("protection"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input := expandUpdateFileSystemProtectionInput(d.Id(), v.([]any)[0].(map[string]any))

		_, err := conn.UpdateFileSystemProtection(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating EFS File System (%s) protection: %s", d.Id(), err)
		}
	}

	return append(diags, resourceFileSystemRead(ctx, d, meta)...)
}
