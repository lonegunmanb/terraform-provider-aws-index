package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRouteRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	output, err := findRouteByTwoPartKey(ctx, conn, d.Get("api_id").(string), d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] API Gateway v2 Route (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading API Gateway v2 Route (%s): %s", d.Id(), err)
	}

	d.Set("api_key_required", output.ApiKeyRequired)
	d.Set("authorization_scopes", output.AuthorizationScopes)
	d.Set("authorization_type", output.AuthorizationType)
	d.Set("authorizer_id", output.AuthorizerId)
	d.Set("model_selection_expression", output.ModelSelectionExpression)
	d.Set("operation_name", output.OperationName)
	d.Set("request_models", output.RequestModels)
	if err := d.Set("request_parameter", flattenRouteRequestParameters(output.RequestParameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting request_parameter: %s", err)
	}
	d.Set("route_key", output.RouteKey)
	d.Set("route_response_selection_expression", output.RouteResponseSelectionExpression)
	d.Set(names.AttrTarget, output.Target)

	return diags
}
