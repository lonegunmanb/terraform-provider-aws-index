package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"maps"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStageUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	if d.HasChanges("access_log_settings", "auto_deploy", "client_certificate_id",
		"default_route_settings", "deployment_id", names.AttrDescription,
		"route_settings", "stage_variables") {
		apiID := d.Get("api_id").(string)
		outputGA, err := findAPIByID(ctx, conn, apiID)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading API Gateway v2 API (%s): %s", apiID, err)
		}

		protocolType := outputGA.ProtocolType
		input := &apigatewayv2.UpdateStageInput{
			ApiId:     aws.String(apiID),
			StageName: aws.String(d.Id()),
		}

		if d.HasChange("access_log_settings") {
			input.AccessLogSettings = expandAccessLogSettings(d.Get("access_log_settings").([]any))
		}

		if d.HasChange("auto_deploy") {
			input.AutoDeploy = aws.Bool(d.Get("auto_deploy").(bool))
		}

		if d.HasChange("client_certificate_id") {
			input.ClientCertificateId = aws.String(d.Get("client_certificate_id").(string))
		}

		if d.HasChange("default_route_settings") {
			input.DefaultRouteSettings = expandDefaultRouteSettings(d.Get("default_route_settings").([]any), protocolType)
		}

		if d.HasChange("deployment_id") {
			input.DeploymentId = aws.String(d.Get("deployment_id").(string))
		}

		if d.HasChange(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange("route_settings") {
			o, n := d.GetChange("route_settings")
			os := o.(*schema.Set)
			ns := n.(*schema.Set)

			for _, vRouteSetting := range os.Difference(ns).List() {
				routeKey := vRouteSetting.(map[string]any)["route_key"].(string)
				input := &apigatewayv2.DeleteRouteSettingsInput{
					ApiId:     aws.String(d.Get("api_id").(string)),
					RouteKey:  aws.String(routeKey),
					StageName: aws.String(d.Id()),
				}

				_, err := conn.DeleteRouteSettings(ctx, input)

				if errs.IsA[*awstypes.NotFoundException](err) {
					continue
				}

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "deleting API Gateway v2 Stage (%s) route settings (%s): %s", d.Id(), routeKey, err)
				}
			}

			input.RouteSettings = expandRouteSettings(ns.List(), protocolType)
		}

		if d.HasChange("stage_variables") {
			o, n := d.GetChange("stage_variables")
			add, del, _ := flex.DiffStringValueMaps(o.(map[string]any), n.(map[string]any))
			// Variables are removed by setting the associated value to "".
			for k := range del {
				del[k] = ""
			}
			variables := del
			maps.Copy(variables, add)
			input.StageVariables = variables
		}

		_, err = conn.UpdateStage(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating API Gateway v2 Stage (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceStageRead(ctx, d, meta)...)
}
