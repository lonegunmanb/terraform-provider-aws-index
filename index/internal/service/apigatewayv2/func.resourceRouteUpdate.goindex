package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRouteUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	var requestParameters map[string]awstypes.ParameterConstraints

	if d.HasChange("request_parameter") {
		o, n := d.GetChange("request_parameter")
		os := o.(*schema.Set)
		ns := n.(*schema.Set)

		for _, tfMapRaw := range os.Difference(ns).List() {
			tfMap, ok := tfMapRaw.(map[string]any)

			if !ok {
				continue
			}

			if v, ok := tfMap["request_parameter_key"].(string); ok && v != "" {
				input := &apigatewayv2.DeleteRouteRequestParameterInput{
					ApiId:               aws.String(d.Get("api_id").(string)),
					RequestParameterKey: aws.String(v),
					RouteId:             aws.String(d.Id()),
				}

				_, err := conn.DeleteRouteRequestParameter(ctx, input)

				if errs.IsA[*awstypes.NotFoundException](err) {
					continue
				}

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "deleting API Gateway v2 Route (%s) request parameter (%s): %s", d.Id(), v, err)
				}
			}
		}

		requestParameters = expandRouteRequestParameters(ns.List())
	}

	if d.HasChangesExcept("request_parameter") || len(requestParameters) > 0 {
		input := &apigatewayv2.UpdateRouteInput{
			ApiId:   aws.String(d.Get("api_id").(string)),
			RouteId: aws.String(d.Id()),
		}

		if d.HasChange("api_key_required") {
			input.ApiKeyRequired = aws.Bool(d.Get("api_key_required").(bool))
		}

		if d.HasChange("authorization_scopes") {
			input.AuthorizationScopes = flex.ExpandStringValueSet(d.Get("authorization_scopes").(*schema.Set))
		}

		if d.HasChange("authorization_type") {
			input.AuthorizationType = awstypes.AuthorizationType(d.Get("authorization_type").(string))
		}

		if d.HasChange("authorizer_id") {
			input.AuthorizerId = aws.String(d.Get("authorizer_id").(string))
			input.AuthorizationType = awstypes.AuthorizationType(d.Get("authorization_type").(string))
		}

		if d.HasChange("model_selection_expression") {
			input.ModelSelectionExpression = aws.String(d.Get("model_selection_expression").(string))
		}

		if d.HasChange("operation_name") {
			input.OperationName = aws.String(d.Get("operation_name").(string))
		}

		if d.HasChange("request_models") {
			input.RequestModels = flex.ExpandStringValueMap(d.Get("request_models").(map[string]any))
		}

		if d.HasChange("request_parameter") {
			input.RequestParameters = requestParameters
		}

		if d.HasChange("route_key") {
			input.RouteKey = aws.String(d.Get("route_key").(string))
		}

		if d.HasChange("route_response_selection_expression") {
			input.RouteResponseSelectionExpression = aws.String(d.Get("route_response_selection_expression").(string))
		}

		if d.HasChange(names.AttrTarget) {
			input.Target = aws.String(d.Get(names.AttrTarget).(string))
		}

		_, err := conn.UpdateRoute(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating API Gateway v2 Route (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceRouteRead(ctx, d, meta)...)
}
