package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"maps"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIntegrationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	output, err := findIntegrationByTwoPartKey(ctx, conn, d.Get("api_id").(string), d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] API Gateway v2 integration (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading API Gateway v2 Integration (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrConnectionID, output.ConnectionId)
	d.Set("connection_type", output.ConnectionType)
	d.Set("content_handling_strategy", output.ContentHandlingStrategy)
	d.Set("credentials_arn", output.CredentialsArn)
	d.Set(names.AttrDescription, output.Description)
	d.Set("integration_method", output.IntegrationMethod)
	d.Set("integration_response_selection_expression", output.IntegrationResponseSelectionExpression)
	d.Set("integration_subtype", output.IntegrationSubtype)
	d.Set("integration_type", output.IntegrationType)
	d.Set("integration_uri", output.IntegrationUri)
	d.Set("passthrough_behavior", output.PassthroughBehavior)
	d.Set("payload_format_version", output.PayloadFormatVersion)
	d.Set("request_parameters", output.RequestParameters)
	d.Set("request_templates", output.RequestTemplates)
	if err := d.Set("response_parameters", flattenIntegrationResponseParameters(output.ResponseParameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting response_parameters: %s", err)
	}
	d.Set("template_selection_expression", output.TemplateSelectionExpression)
	d.Set("timeout_milliseconds", output.TimeoutInMillis)
	if err := d.Set("tls_config", flattenTLSConfig(output.TlsConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting tls_config: %s", err)
	}

	return diags
}
