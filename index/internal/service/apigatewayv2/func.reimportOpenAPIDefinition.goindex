package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"reflect"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/json"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/internal/yaml"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func reimportOpenAPIDefinition(ctx context.Context, d *schema.ResourceData, meta any) error {
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	if body, ok := d.GetOk("body"); ok {
		body := body.(string)
		configuredCORSConfiguration := d.Get("cors_configuration")
		configuredDescription := d.Get(names.AttrDescription).(string)
		configuredName := d.Get(names.AttrName).(string)
		configuredVersion := d.Get(names.AttrVersion).(string)

		inputRA := apigatewayv2.ReimportApiInput{
			ApiId: aws.String(d.Id()),
			Body:  aws.String(body),
		}

		if value, ok := d.GetOk("fail_on_warnings"); ok {
			inputRA.FailOnWarnings = aws.Bool(value.(bool))
		}

		_, err := conn.ReimportApi(ctx, &inputRA)

		if err != nil {
			return fmt.Errorf("reimporting API Gateway v2 API (%s) OpenAPI definition: %w", d.Id(), err)
		}

		if diags := resourceAPIRead(ctx, d, meta); diags.HasError() {
			return sdkdiag.DiagnosticsError(diags)
		}

		m, err := decodeOpenAPIDefinition(body)

		if err != nil {
			return fmt.Errorf("decoding API Gateway v2 API (%s) OpenAPI definition: %w", d.Id(), err)
		}

		// Don't ovewrite the configured values if they are not present in the OpenAPI definition.
		description := configuredDescription
		name := configuredName
		version := configuredVersion
		if m, ok := m["info"].(map[string]any); ok {
			if _, ok := m[names.AttrDescription]; ok {
				description = d.Get(names.AttrDescription).(string)
			}
			if _, ok := m["title"]; ok {
				name = d.Get(names.AttrName).(string)
			}
			if _, ok := m[names.AttrVersion]; ok {
				version = d.Get(names.AttrVersion).(string)
			}
		}

		inputUA := apigatewayv2.UpdateApiInput{
			ApiId:       aws.String(d.Id()),
			Description: aws.String(description),
			Name:        aws.String(name),
			Version:     aws.String(version),
		}

		if !reflect.DeepEqual(configuredCORSConfiguration, d.Get("cors_configuration")) {
			if len(configuredCORSConfiguration.([]any)) == 0 {
				input := apigatewayv2.DeleteCorsConfigurationInput{
					ApiId: aws.String(d.Id()),
				}

				_, err := conn.DeleteCorsConfiguration(ctx, &input)

				if err != nil {
					return fmt.Errorf("deleting API Gateway v2 API (%s) CORS configuration: %w", d.Id(), err)
				}
			} else {
				inputUA.CorsConfiguration = expandCORS(configuredCORSConfiguration.([]any))
			}
		}

		_, err = conn.UpdateApi(ctx, &inputUA)

		if err != nil {
			return fmt.Errorf("updating API Gateway v2 API (%s): %w", d.Id(), err)
		}
	}

	return nil
}
