package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAuthorizerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	output, err := findAuthorizerByTwoPartKey(ctx, conn, d.Get("api_id").(string), d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] API Gateway v2 Authorizer (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading API Gateway v2 Authorizer (%s): %s", d.Id(), err)
	}

	d.Set("authorizer_credentials_arn", output.AuthorizerCredentialsArn)
	d.Set("authorizer_payload_format_version", output.AuthorizerPayloadFormatVersion)
	d.Set("authorizer_result_ttl_in_seconds", output.AuthorizerResultTtlInSeconds)
	d.Set("authorizer_type", output.AuthorizerType)
	d.Set("authorizer_uri", output.AuthorizerUri)
	d.Set("enable_simple_responses", output.EnableSimpleResponses)
	d.Set("identity_sources", output.IdentitySource)
	if err := d.Set("jwt_configuration", flattenJWTConfiguration(output.JwtConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting jwt_configuration: %s", err)
	}
	d.Set(names.AttrName, output.Name)

	return diags
}
