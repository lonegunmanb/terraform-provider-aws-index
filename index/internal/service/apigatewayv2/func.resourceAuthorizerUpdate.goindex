package github.com/hashicorp/terraform-provider-aws/internal/service/apigatewayv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAuthorizerUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).APIGatewayV2Client(ctx)

	input := &apigatewayv2.UpdateAuthorizerInput{
		ApiId:        aws.String(d.Get("api_id").(string)),
		AuthorizerId: aws.String(d.Id()),
	}

	if d.HasChange("authorizer_credentials_arn") {
		input.AuthorizerCredentialsArn = aws.String(d.Get("authorizer_credentials_arn").(string))
	}

	if d.HasChange("authorizer_payload_format_version") {
		input.AuthorizerPayloadFormatVersion = aws.String(d.Get("authorizer_payload_format_version").(string))
	}

	if d.HasChange("authorizer_result_ttl_in_seconds") {
		input.AuthorizerResultTtlInSeconds = aws.Int32(int32(d.Get("authorizer_result_ttl_in_seconds").(int)))
	}

	if d.HasChange("authorizer_type") {
		input.AuthorizerType = awstypes.AuthorizerType(d.Get("authorizer_type").(string))
	}

	if d.HasChange("authorizer_uri") {
		input.AuthorizerUri = aws.String(d.Get("authorizer_uri").(string))
	}

	if d.HasChange("enable_simple_responses") {
		input.EnableSimpleResponses = aws.Bool(d.Get("enable_simple_responses").(bool))
	}

	if d.HasChange("identity_sources") {
		input.IdentitySource = flex.ExpandStringValueSet(d.Get("identity_sources").(*schema.Set))
	}

	if d.HasChange(names.AttrName) {
		input.Name = aws.String(d.Get(names.AttrName).(string))
	}

	if d.HasChange("jwt_configuration") {
		input.JwtConfiguration = expandJWTConfiguration(d.Get("jwt_configuration").([]any))
	}

	_, err := conn.UpdateAuthorizer(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating API Gateway v2 Authorizer (%s): %s", d.Id(), err)
	}

	return append(diags, resourceAuthorizerRead(ctx, d, meta)...)
}
