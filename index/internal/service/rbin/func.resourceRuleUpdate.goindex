package github.com/hashicorp/terraform-provider-aws/internal/service/rbin
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rbin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RBinClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := rbin.UpdateRuleInput{
			Identifier: aws.String(d.Id()),
		}

		if d.HasChanges(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChanges("exclude_resource_tags") {
			v := d.Get("exclude_resource_tags")
			if v == nil || v.(*schema.Set).Len() == 0 {
				input.ExcludeResourceTags = []types.ResourceTag{}
			} else {
				input.ExcludeResourceTags = expandResourceTags(v.(*schema.Set).List())
			}
		}

		if d.HasChanges(names.AttrResourceTags) {
			v := d.Get(names.AttrResourceTags)
			if v == nil || v.(*schema.Set).Len() == 0 {
				input.ResourceTags = []types.ResourceTag{}
			} else {
				input.ResourceTags = expandResourceTags(v.(*schema.Set).List())
			}
		}

		if d.HasChanges(names.AttrRetentionPeriod) {
			input.RetentionPeriod = expandRetentionPeriod(d.Get(names.AttrRetentionPeriod).([]any))
		}

		_, err := conn.UpdateRule(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating RBin Rule (%s): %s", d.Id(), err)
		}

		if _, err := waitRuleUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for RBin Rule (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceRuleRead(ctx, d, meta)...)
}
