package github.com/hashicorp/terraform-provider-aws/internal/service/rbin
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rbin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RBinClient(ctx)

	update := false

	in := &rbin.UpdateRuleInput{
		Identifier: aws.String(d.Id()),
	}

	if d.HasChanges(names.AttrDescription) {
		in.Description = aws.String(d.Get(names.AttrDescription).(string))
		update = true
	}

	if d.HasChanges(names.AttrResourceTags) {
		in.ResourceTags = expandResourceTags(d.Get(names.AttrResourceTags).(*schema.Set).List())
		update = true
	}

	if d.HasChanges(names.AttrRetentionPeriod) {
		in.RetentionPeriod = expandRetentionPeriod(d.Get(names.AttrRetentionPeriod).([]any))
		update = true
	}

	if !update {
		return diags
	}

	log.Printf("[DEBUG] Updating RBin Rule (%s): %#v", d.Id(), in)
	out, err := conn.UpdateRule(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.RBin, create.ErrActionUpdating, ResNameRule, d.Id(), err)
	}

	if _, err := waitRuleUpdated(ctx, conn, aws.ToString(out.Identifier), d.Timeout(schema.TimeoutUpdate)); err != nil {
		return create.AppendDiagError(diags, names.RBin, create.ErrActionWaitingForUpdate, ResNameRule, d.Id(), err)
	}

	return append(diags, resourceRuleRead(ctx, d, meta)...)
}
