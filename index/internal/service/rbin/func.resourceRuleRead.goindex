package github.com/hashicorp/terraform-provider-aws/internal/service/rbin
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rbin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	c := meta.(*conns.AWSClient)
	conn := c.RBinClient(ctx)

	output, err := findRuleByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] RBin Rule (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading RBin Rule (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, c.RegionalARN(ctx, "rbin", "rule/"+d.Id()))
	d.Set(names.AttrDescription, output.Description)
	if err := d.Set("exclude_resource_tags", flattenResourceTags(output.ExcludeResourceTags)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting exclude_resource_tags: %s", err)
	}
	if err := d.Set(names.AttrResourceTags, flattenResourceTags(output.ResourceTags)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting resource_tags: %s", err)
	}
	d.Set(names.AttrResourceType, output.ResourceType)
	if err := d.Set(names.AttrRetentionPeriod, flattenRetentionPeriod(output.RetentionPeriod)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting retention_period: %s", err)
	}
	d.Set(names.AttrStatus, output.Status)

	return diags
}
