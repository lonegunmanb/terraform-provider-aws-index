package github.com/hashicorp/terraform-provider-aws/internal/service/rbin
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rbin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RBinClient(ctx)

	in := &rbin.CreateRuleInput{
		ResourceType:    types.ResourceType(d.Get(names.AttrResourceType).(string)),
		RetentionPeriod: expandRetentionPeriod(d.Get(names.AttrRetentionPeriod).([]any)),
		Tags:            getTagsIn(ctx),
	}

	if _, ok := d.GetOk(names.AttrDescription); ok {
		in.Description = aws.String(d.Get(names.AttrDescription).(string))
	}

	if v, ok := d.GetOk(names.AttrResourceTags); ok && v.(*schema.Set).Len() > 0 {
		in.ResourceTags = expandResourceTags(v.(*schema.Set).List())
	}

	out, err := conn.CreateRule(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.RBin, create.ErrActionCreating, ResNameRule, d.Get(names.AttrResourceType).(string), err)
	}

	if out == nil || out.Identifier == nil {
		return create.AppendDiagError(diags, names.RBin, create.ErrActionCreating, ResNameRule, d.Get(names.AttrResourceType).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(out.Identifier))

	if _, err := waitRuleCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.RBin, create.ErrActionWaitingForCreation, ResNameRule, d.Id(), err)
	}

	return append(diags, resourceRuleRead(ctx, d, meta)...)
}
