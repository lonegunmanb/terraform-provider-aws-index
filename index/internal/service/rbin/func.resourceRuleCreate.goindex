package github.com/hashicorp/terraform-provider-aws/internal/service/rbin
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rbin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RBinClient(ctx)

	input := rbin.CreateRuleInput{
		ResourceType:    types.ResourceType(d.Get(names.AttrResourceType).(string)),
		RetentionPeriod: expandRetentionPeriod(d.Get(names.AttrRetentionPeriod).([]any)),
		Tags:            getTagsIn(ctx),
	}

	if _, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(d.Get(names.AttrDescription).(string))
	}

	if v, ok := d.GetOk("exclude_resource_tags"); ok && v.(*schema.Set).Len() > 0 {
		input.ExcludeResourceTags = expandResourceTags(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk(names.AttrResourceTags); ok && v.(*schema.Set).Len() > 0 {
		input.ResourceTags = expandResourceTags(v.(*schema.Set).List())
	}

	output, err := conn.CreateRule(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating RBin Rule: %s", err)
	}

	d.SetId(aws.ToString(output.Identifier))

	if _, err := waitRuleCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for RBin Rule (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceRuleRead(ctx, d, meta)...)
}
