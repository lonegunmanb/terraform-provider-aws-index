package github.com/hashicorp/terraform-provider-aws/internal/service/resiliencehub
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/resiliencehub/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resiliencePolicySchemaV0(ctx context.Context) schema.Schema {
	requiredObjAttrs := map[string]schema.Attribute{
		"rto": schema.StringAttribute{
			CustomType: timetypes.GoDurationType{},
			Required:   true,
		},
		"rpo": schema.StringAttribute{
			CustomType: timetypes.GoDurationType{},
			Required:   true,
		},
	}

	return schema.Schema{
		Version: 0,
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			"data_location_constraint": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.DataLocationConstraint](),
				Computed:   true,
				Optional:   true,
			},
			names.AttrDescription: schema.StringAttribute{
				Optional: true,
			},
			names.AttrName: schema.StringAttribute{
				Required: true,
			},
			"tier": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.ResiliencyPolicyTier](),
				Required:   true,
			},
			"estimated_cost_tier": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.EstimatedCostTier](),
				Computed:   true,
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			names.AttrPolicy: schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
				CustomType: fwtypes.NewObjectTypeOf[policyDataV0](ctx),
				Blocks: map[string]schema.Block{
					"az": schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
						CustomType: fwtypes.NewObjectTypeOf[resiliencyObjectiveData](ctx),
						Attributes: requiredObjAttrs,
					},
					"hardware": schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
						CustomType: fwtypes.NewObjectTypeOf[resiliencyObjectiveData](ctx),
						Attributes: requiredObjAttrs,
					},
					"software": schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
						CustomType: fwtypes.NewObjectTypeOf[resiliencyObjectiveData](ctx),
						Attributes: requiredObjAttrs,
					},
					names.AttrRegion: schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
						CustomType: fwtypes.NewObjectTypeOf[resiliencyObjectiveData](ctx),
						Attributes: map[string]schema.Attribute{
							"rto": schema.StringAttribute{
								CustomType: timetypes.GoDurationType{},
								Optional:   true,
							},
							"rpo": schema.StringAttribute{
								CustomType: timetypes.GoDurationType{},
								Optional:   true,
							},
						},
					},
				},
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}
