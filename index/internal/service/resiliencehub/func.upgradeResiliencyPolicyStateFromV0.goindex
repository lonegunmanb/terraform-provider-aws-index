package github.com/hashicorp/terraform-provider-aws/internal/service/resiliencehub
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/resiliencehub/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeResiliencyPolicyStateFromV0(ctx context.Context, request resource.UpgradeStateRequest, response *resource.UpgradeStateResponse) {
	var resiliencyPolicyDataV0 resourceResiliencyPolicyDataV0
	response.Diagnostics.Append(request.State.Get(ctx, &resiliencyPolicyDataV0)...)
	if response.Diagnostics.HasError() {
		return
	}

	resiliencyPolicyDataV1 := resiliencyPolicyResourceModel{
		DataLocationConstraint: resiliencyPolicyDataV0.DataLocationConstraint,
		EstimatedCostTier:      resiliencyPolicyDataV0.EstimatedCostTier,
		Policy:                 upgradePolicyStateFromV0(ctx, resiliencyPolicyDataV0.Policy, &response.Diagnostics),
		PolicyARN:              resiliencyPolicyDataV0.PolicyARN,
		PolicyDescription:      resiliencyPolicyDataV0.PolicyDescription,
		PolicyName:             resiliencyPolicyDataV0.PolicyName,
		Tier:                   resiliencyPolicyDataV0.Tier,
		Tags:                   resiliencyPolicyDataV0.Tags,
		TagsAll:                resiliencyPolicyDataV0.TagsAll,
		Timeouts:               resiliencyPolicyDataV0.Timeouts,
	}

	response.Diagnostics.Append(response.State.Set(ctx, resiliencyPolicyDataV1)...)
}
