package github.com/hashicorp/terraform-provider-aws/internal/service/resiliencehub
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	awstypes "github.com/aws/aws-sdk-go-v2/service/resiliencehub/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *resiliencyPolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	requiredObjAttrs := map[string]schema.Attribute{
		"rto": schema.StringAttribute{
			Description: "Recovery Time Objective (RTO) as a Go duration.",
			CustomType:  timetypes.GoDurationType{},
			Required:    true,
		},
		"rpo": schema.StringAttribute{
			Description: "Recovery Point Objective (RPO) as a Go duration.",
			CustomType:  timetypes.GoDurationType{},
			Required:    true,
		},
	}

	resp.Schema = schema.Schema{
		Version: 1,
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			"data_location_constraint": schema.StringAttribute{
				Description: "Specifies a high-level geographical location constraint for where resilience policy data can be stored.",
				CustomType:  fwtypes.StringEnumType[awstypes.DataLocationConstraint](),
				Computed:    true,
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrDescription: schema.StringAttribute{
				Description: "The description for the policy.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(500),
				},
			},
			names.AttrName: schema.StringAttribute{
				Description: "The name of the policy.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(2, 60),
					stringvalidator.RegexMatches(regexache.MustCompile(`^[A-Za-z0-9][A-Za-z0-9_-]+$`), "Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens"),
				},
			},
			"tier": schema.StringAttribute{
				Description: "The tier for the resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).",
				CustomType:  fwtypes.StringEnumType[awstypes.ResiliencyPolicyTier](),
				Required:    true,
			},
			"estimated_cost_tier": schema.StringAttribute{
				Description: "Specifies the estimated cost tier of the resiliency policy.",
				CustomType:  fwtypes.StringEnumType[awstypes.EstimatedCostTier](),
				Computed:    true,
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			names.AttrPolicy: schema.ListNestedBlock{
				Description: "The resiliency failure policy.",
				CustomType:  fwtypes.NewListNestedObjectTypeOf[policyData](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"az": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[resiliencyObjectiveData](ctx),
							Description: "The RTO and RPO target to measure resiliency for potential availability zone disruptions.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: requiredObjAttrs,
							},
						},
						"hardware": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[resiliencyObjectiveData](ctx),
							Description: "The RTO and RPO target to measure resiliency for potential infrastructure disruptions.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: requiredObjAttrs,
							},
						},
						"software": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[resiliencyObjectiveData](ctx),
							Description: "The RTO and RPO target to measure resiliency for potential application disruptions.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: requiredObjAttrs,
							},
						},
						names.AttrRegion: schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[resiliencyObjectiveData](ctx),
							Description: "The RTO and RPO target to measure resiliency for potential region disruptions.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"rto": schema.StringAttribute{
										Description: "Recovery Time Objective (RTO) as a Go duration.",
										CustomType:  timetypes.GoDurationType{},
										Optional:    true,
									},
									"rpo": schema.StringAttribute{
										Description: "Recovery Point Objective (RPO) as a Go duration.",
										CustomType:  timetypes.GoDurationType{},
										Optional:    true,
									},
								},
							},
						},
					},
				},
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}
