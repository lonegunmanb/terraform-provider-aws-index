package github.com/hashicorp/terraform-provider-aws/internal/service/resiliencehub
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	awstypes "github.com/aws/aws-sdk-go-v2/service/resiliencehub/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (m *resiliencyPolicyResourceModel) flattenPolicy(ctx context.Context, failurePolicy map[string]awstypes.FailurePolicy) {
	if len(failurePolicy) == 0 {
		m.Policy = fwtypes.NewListNestedObjectValueOfNull[policyData](ctx)
	}

	newResObjModel := func(policyType awstypes.TestType, failurePolicy map[string]awstypes.FailurePolicy) fwtypes.ListNestedObjectValueOf[resiliencyObjectiveData] {
		if pv, exists := failurePolicy[string(policyType)]; exists {
			return fwtypes.NewListNestedObjectValueOfSliceMust(ctx, []*resiliencyObjectiveData{
				{
					Rpo: timetypes.NewGoDurationValue(time.Duration(pv.RpoInSecs) * time.Second),
					Rto: timetypes.NewGoDurationValue(time.Duration(pv.RtoInSecs) * time.Second),
				},
			})
		} else {
			return fwtypes.NewListNestedObjectValueOfNull[resiliencyObjectiveData](ctx)
		}
	}

	m.Policy = fwtypes.NewListNestedObjectValueOfSliceMust(ctx, []*policyData{
		{
			newResObjModel(awstypes.TestTypeAz, failurePolicy),
			newResObjModel(awstypes.TestTypeHardware, failurePolicy),
			newResObjModel(awstypes.TestTypeSoftware, failurePolicy),
			newResObjModel(awstypes.TestTypeRegion, failurePolicy),
		},
	})
}
