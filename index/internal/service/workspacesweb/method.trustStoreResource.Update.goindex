package github.com/hashicorp/terraform-provider-aws/internal/service/workspacesweb
import (
	"context"
	"encoding/base64"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/workspacesweb/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *trustStoreResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var new, old trustStoreResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().WorkSpacesWebClient(ctx)

	if !new.Certificates.Equal(old.Certificates) {
		input := workspacesweb.UpdateTrustStoreInput{
			ClientToken:   aws.String(sdkid.UniqueId()),
			TrustStoreArn: new.TrustStoreARN.ValueStringPointer(),
		}

		// Handle certificate additions and deletions
		oldCerts := make(map[string]string) // cert content -> thumbprint
		for _, certificate := range old.Certificates.Elements() {
			var cert certificateModel
			response.Diagnostics.Append(tfsdk.ValueAs(ctx, certificate, &cert)...)
			if response.Diagnostics.HasError() {
				return
			}

			oldCerts[base64.StdEncoding.EncodeToString([]byte(cert.Body.ValueString()))] = cert.Thumbprint.ValueString()
		}

		newCertContents := make(map[string]bool)
		for _, certificate := range new.Certificates.Elements() {
			var cert certificateModel
			response.Diagnostics.Append(tfsdk.ValueAs(ctx, certificate, &cert)...)
			if response.Diagnostics.HasError() {
				return
			}

			formattedCert := strings.ReplaceAll(strings.Trim(cert.Body.ValueString(), "\""), `\n`, "\n")
			newCertContents[base64.StdEncoding.EncodeToString([]byte(formattedCert))] = true
		}

		// Find certificates to add
		for _, certificate := range new.Certificates.Elements() {
			var cert certificateModel
			response.Diagnostics.Append(tfsdk.ValueAs(ctx, certificate, &cert)...)
			if response.Diagnostics.HasError() {
				return
			}

			formattedCert := strings.ReplaceAll(strings.Trim(cert.Body.String(), "\""), `\n`, "\n")
			certEncoded := base64.StdEncoding.EncodeToString([]byte(formattedCert))
			if _, exists := oldCerts[certEncoded]; !exists {
				input.CertificatesToAdd = append(input.CertificatesToAdd, []byte(formattedCert))
			}
		}

		// Find certificates to delete (by thumbprint)
		for certEncoded, thumbprint := range oldCerts {
			if !newCertContents[certEncoded] {
				input.CertificatesToDelete = append(input.CertificatesToDelete, thumbprint)
			}
		}

		_, err := conn.UpdateTrustStore(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating WorkSpacesWeb Trust Store (%s)", new.TrustStoreARN.ValueString()), err.Error())
			return
		}
	}

	// Read the updated state to get computed values
	updatedTrustStore, err := findTrustStoreByARN(ctx, conn, new.TrustStoreARN.ValueString())
	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading WorkSpacesWeb Trust Store (%s) after update", new.TrustStoreARN.ValueString()), err.Error())
		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, updatedTrustStore, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Populate certificate details by merging planned data with computed values
	certificates, err := listTrustStoreCertificates(ctx, conn, new.TrustStoreARN.ValueString())
	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("listing WorkSpacesWeb Trust Store Certificates (%s) after update", new.TrustStoreARN.ValueString()), err.Error())
		return
	}

	var diags diag.Diagnostics
	new.Certificates, diags = fwtypes.NewSetNestedObjectValueOfValueSlice(ctx, certificates)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
