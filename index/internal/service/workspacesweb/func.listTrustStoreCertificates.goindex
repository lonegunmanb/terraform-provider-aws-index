package github.com/hashicorp/terraform-provider-aws/internal/service/workspacesweb
import (
	"context"
	"encoding/base64"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/workspacesweb/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func listTrustStoreCertificates(ctx context.Context, conn *workspacesweb.Client, arn string) ([]certificateModel, error) {
	input := workspacesweb.ListTrustStoreCertificatesInput{
		TrustStoreArn: aws.String(arn),
	}

	var certificates []certificateModel
	pages := workspacesweb.NewListTrustStoreCertificatesPaginator(conn, &input)
	for pages.HasMorePages() {
		output, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, certSummary := range output.CertificateList {
			// Get detailed certificate information
			input := workspacesweb.GetTrustStoreCertificateInput{
				Thumbprint:    certSummary.Thumbprint,
				TrustStoreArn: aws.String(arn),
			}

			output, err := conn.GetTrustStoreCertificate(ctx, &input)

			if err != nil {
				return nil, err
			}

			if output.Certificate != nil {
				cert := certificateModel{
					Body:           types.StringValue(string(output.Certificate.Body)),
					Issuer:         types.StringPointerValue(output.Certificate.Issuer),
					NotValidAfter:  types.StringValue(aws.ToTime(output.Certificate.NotValidAfter).Format(time.RFC3339)),
					NotValidBefore: types.StringValue(aws.ToTime(output.Certificate.NotValidBefore).Format(time.RFC3339)),
					Subject:        types.StringPointerValue(output.Certificate.Subject),
					Thumbprint:     types.StringPointerValue(output.Certificate.Thumbprint),
				}
				certificates = append(certificates, cert)
			}
		}
	}

	return certificates, nil
}
