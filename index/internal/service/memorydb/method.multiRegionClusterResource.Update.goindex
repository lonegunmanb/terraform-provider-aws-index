package github.com/hashicorp/terraform-provider-aws/internal/service/memorydb
import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/memorydb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/memorydb/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *multiRegionClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().MemoryDBClient(ctx)

	var plan, state multiRegionClusterResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	updateTimeout := r.UpdateTimeout(ctx, plan.Timeouts)

	// Only one of node type, shard configurations, or parameter group
	// can be updated in a single request. Construct a list of update
	// requests to execute serially to support cases where multiple attributes
	// are changed at once.
	updateRequests := []*memorydb.UpdateMultiRegionClusterInput{}

	// Standard updates
	if !plan.Description.Equal(state.Description) ||
		!plan.EngineVersion.Equal(state.EngineVersion) {
		input := &memorydb.UpdateMultiRegionClusterInput{
			MultiRegionClusterName: plan.MultiRegionClusterName.ValueStringPointer(),
		}
		if !plan.Description.IsNull() {
			input.Description = plan.Description.ValueStringPointer()
		}
		if !plan.EngineVersion.IsNull() {
			input.EngineVersion = plan.EngineVersion.ValueStringPointer()
		}
		if !plan.UpdateStrategy.IsNull() {
			input.UpdateStrategy = awstypes.UpdateStrategy(plan.UpdateStrategy.ValueString())
		}

		updateRequests = append(updateRequests, input)
	}

	// Node type
	if !plan.NodeType.Equal(state.NodeType) {
		input := &memorydb.UpdateMultiRegionClusterInput{
			MultiRegionClusterName: plan.MultiRegionClusterName.ValueStringPointer(),
			NodeType:               plan.NodeType.ValueStringPointer(),
		}
		if !plan.UpdateStrategy.IsNull() {
			input.UpdateStrategy = awstypes.UpdateStrategy(plan.UpdateStrategy.ValueString())
		}

		updateRequests = append(updateRequests, input)
	}

	// Shard configurations
	if !plan.NumShards.Equal(state.NumShards) {
		input := &memorydb.UpdateMultiRegionClusterInput{
			MultiRegionClusterName: plan.MultiRegionClusterName.ValueStringPointer(),
			ShardConfiguration: &awstypes.ShardConfigurationRequest{
				ShardCount: int32(plan.NumShards.ValueInt64()),
			},
		}
		if !plan.UpdateStrategy.IsNull() {
			input.UpdateStrategy = awstypes.UpdateStrategy(plan.UpdateStrategy.ValueString())
		}

		updateRequests = append(updateRequests, input)
	}

	// Parameter group name
	if !plan.MultiRegionParameterGroupName.Equal(state.MultiRegionParameterGroupName) {
		input := &memorydb.UpdateMultiRegionClusterInput{
			MultiRegionClusterName:        plan.MultiRegionClusterName.ValueStringPointer(),
			MultiRegionParameterGroupName: plan.MultiRegionParameterGroupName.ValueStringPointer(),
		}
		if !plan.UpdateStrategy.IsNull() {
			input.UpdateStrategy = awstypes.UpdateStrategy(plan.UpdateStrategy.ValueString())
		}

		updateRequests = append(updateRequests, input)
	}

	for _, input := range updateRequests {
		if err := updateMultiRegionClusterAndWaitAvailable(ctx, conn, input, updateTimeout); err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.MemoryDB, create.ErrActionUpdating, ResNameMultiRegionCluster, plan.MultiRegionClusterName.String(), err),
				err.Error(),
			)
			return
		}
	}

	// If update requests were made, make one last call to the update waiter to
	// retrieve and write the latest status to state
	if len(updateRequests) > 0 {
		statusOut, err := waitMultiRegionClusterAvailable(ctx, conn, plan.MultiRegionClusterName.ValueString(), updateTimeout)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.MemoryDB, create.ErrActionWaitingForUpdate, ResNameMultiRegionCluster, plan.MultiRegionClusterName.String(), err),
				err.Error(),
			)
			return
		}

		resp.Diagnostics.Append(flex.Flatten(ctx, statusOut, &plan)...)
		if resp.Diagnostics.HasError() {
			return
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}
