package github.com/hashicorp/terraform-provider-aws/internal/service/memorydb
import (
	"context"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/memorydb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCluster() *schema.Resource {
	return &schema.Resource{
		ReadWithoutTimeout: dataSourceClusterRead,

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"acl_name": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrAutoMinorVersionUpgrade: {
					Type:     schema.TypeBool,
					Computed: true,
				},
				"cluster_endpoint": endpointSchema(),
				"data_tiering": {
					Type:     schema.TypeBool,
					Computed: true,
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"engine_patch_version": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrEngine: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrEngineVersion: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"final_snapshot_name": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrKMSKeyARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"maintenance_window": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
				},
				"node_type": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"num_replicas_per_shard": {
					Type:     schema.TypeInt,
					Computed: true,
				},
				"num_shards": {
					Type:     schema.TypeInt,
					Computed: true,
				},
				names.AttrParameterGroupName: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrPort: {
					Type:     schema.TypeInt,
					Computed: true,
				},
				names.AttrSecurityGroupIDs: {
					Type:     schema.TypeSet,
					Computed: true,
					Elem: &schema.Schema{
						Type: schema.TypeString,
					},
				},
				"shards": {
					Type:     schema.TypeSet,
					Computed: true,
					Set:      clusterShardHash,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrName: {
								Type:     schema.TypeString,
								Computed: true,
							},
							"nodes": {
								Type:     schema.TypeSet,
								Computed: true,
								Set:      clusterShardNodeHash,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrAvailabilityZone: {
											Type:     schema.TypeString,
											Computed: true,
										},
										names.AttrCreateTime: {
											Type:     schema.TypeString,
											Computed: true,
										},
										names.AttrEndpoint: endpointSchema(),
										names.AttrName: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
							"num_nodes": {
								Type:     schema.TypeInt,
								Computed: true,
							},
							"slots": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				"snapshot_retention_limit": {
					Type:     schema.TypeInt,
					Computed: true,
				},
				"snapshot_window": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrSNSTopicARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"subnet_group_name": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrTags: tftags.TagsSchemaComputed(),
				"tls_enabled": {
					Type:     schema.TypeBool,
					Computed: true,
				},
			}
		},
	}
}
