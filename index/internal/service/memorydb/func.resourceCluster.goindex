package github.com/hashicorp/terraform-provider-aws/internal/service/memorydb
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/memorydb"
	awstypes "github.com/aws/aws-sdk-go-v2/service/memorydb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCluster() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceClusterCreate,
		ReadWithoutTimeout:   resourceClusterRead,
		UpdateWithoutTimeout: resourceClusterUpdate,
		DeleteWithoutTimeout: resourceClusterDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(120 * time.Minute),
			Update: schema.DefaultTimeout(120 * time.Minute),
			Delete: schema.DefaultTimeout(120 * time.Minute),
		},

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"acl_name": {
					Type:     schema.TypeString,
					Required: true,
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrAutoMinorVersionUpgrade: {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
					ForceNew: true,
				},
				"cluster_endpoint": endpointSchema(),
				"data_tiering": {
					Type:     schema.TypeBool,
					ForceNew: true,
					Optional: true,
					Default:  false,
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Optional: true,
					Default:  "Managed by Terraform",
				},
				"engine_patch_version": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"multi_region_cluster_name": {
					Type:     schema.TypeString,
					Optional: true,
					ForceNew: true,
				},
				names.AttrEngine: {
					Type:             schema.TypeString,
					Optional:         true,
					Computed:         true,
					ValidateDiagFunc: enum.Validate[clusterEngine](),
				},
				names.AttrEngineVersion: {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				"final_snapshot_name": {
					Type:         schema.TypeString,
					Optional:     true,
					ValidateFunc: validateResourceName(snapshotNameMaxLength),
				},
				names.AttrKMSKeyARN: {
					// The API will accept an ID, but return the ARN on every read.
					// For the sake of consistency, force everyone to use ARN-s.
					// To prevent confusion, the attribute is suffixed _arn rather
					// than the _id implied by the API.
					Type:         schema.TypeString,
					Optional:     true,
					ForceNew:     true,
					ValidateFunc: verify.ValidARN,
				},
				"maintenance_window": {
					Type:         schema.TypeString,
					Optional:     true,
					Computed:     true,
					ValidateFunc: verify.ValidOnceAWeekWindowFormat,
				},
				names.AttrName: {
					Type:          schema.TypeString,
					Optional:      true,
					Computed:      true,
					ForceNew:      true,
					ConflictsWith: []string{names.AttrNamePrefix},
					ValidateFunc:  validateResourceName(clusterNameMaxLength),
				},
				names.AttrNamePrefix: {
					Type:          schema.TypeString,
					Optional:      true,
					Computed:      true,
					ForceNew:      true,
					ConflictsWith: []string{names.AttrName},
					ValidateFunc:  validateResourceNamePrefix(clusterNameMaxLength - id.UniqueIDSuffixLength),
				},
				"node_type": {
					Type:     schema.TypeString,
					Required: true,
				},
				"num_replicas_per_shard": {
					Type:         schema.TypeInt,
					Optional:     true,
					Default:      1,
					ValidateFunc: validation.IntBetween(0, 5),
				},
				"num_shards": {
					Type:         schema.TypeInt,
					Optional:     true,
					Default:      1,
					ValidateFunc: validation.IntAtLeast(1),
				},
				names.AttrParameterGroupName: {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				names.AttrPort: {
					Type:     schema.TypeInt,
					Optional: true,
					Computed: true,
					ForceNew: true,
				},
				names.AttrSecurityGroupIDs: {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Schema{
						Type: schema.TypeString,
					},
				},
				"shards": {
					Type:     schema.TypeSet,
					Computed: true,
					Set:      clusterShardHash,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrName: {
								Type:     schema.TypeString,
								Computed: true,
							},
							"nodes": {
								Type:     schema.TypeSet,
								Computed: true,
								Set:      clusterShardNodeHash,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrAvailabilityZone: {
											Type:     schema.TypeString,
											Computed: true,
										},
										names.AttrCreateTime: {
											Type:     schema.TypeString,
											Computed: true,
										},
										names.AttrEndpoint: endpointSchema(),
										names.AttrName: {
											Type:     schema.TypeString,
											Computed: true,
										},
									},
								},
							},
							"num_nodes": {
								Type:     schema.TypeInt,
								Computed: true,
							},
							"slots": {
								Type:     schema.TypeString,
								Computed: true,
							},
						},
					},
				},
				"snapshot_arns": {
					Type:          schema.TypeList,
					Optional:      true,
					ForceNew:      true,
					ConflictsWith: []string{"snapshot_name"},
					Elem: &schema.Schema{
						Type: schema.TypeString,
						ValidateFunc: validation.All(
							verify.ValidARN,
							validation.StringDoesNotContainAny(","),
						),
					},
				},
				"snapshot_name": {
					Type:          schema.TypeString,
					Optional:      true,
					ForceNew:      true,
					ConflictsWith: []string{"snapshot_arns"},
				},
				"snapshot_retention_limit": {
					Type:         schema.TypeInt,
					Computed:     true,
					Optional:     true,
					ValidateFunc: validation.IntBetween(0, 35),
				},
				"snapshot_window": {
					Type:         schema.TypeString,
					Optional:     true,
					Computed:     true,
					ValidateFunc: verify.ValidOnceADayWindowFormat,
				},
				names.AttrSNSTopicARN: {
					Type:         schema.TypeString,
					Optional:     true,
					ValidateFunc: verify.ValidARN,
				},
				"subnet_group_name": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
					ForceNew: true,
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"tls_enabled": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
					ForceNew: true,
				},
			}
		},
	}
}
