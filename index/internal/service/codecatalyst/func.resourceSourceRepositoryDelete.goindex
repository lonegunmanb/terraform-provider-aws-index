package github.com/hashicorp/terraform-provider-aws/internal/service/codecatalyst
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codecatalyst"
	"github.com/aws/aws-sdk-go-v2/service/codecatalyst/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSourceRepositoryDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CodeCatalystClient(ctx)

	log.Printf("[INFO] Deleting CodeCatalyst SourceRepository %s", d.Id())

	input := codecatalyst.DeleteSourceRepositoryInput{
		Name:        aws.String(d.Id()),
		ProjectName: aws.String(d.Get("project_name").(string)),
		SpaceName:   aws.String(d.Get("space_name").(string)),
	}
	_, err := conn.DeleteSourceRepository(ctx, &input)

	if errs.IsA[*types.ResourceNotFoundException](err) {
		return diags
	}
	if err != nil {
		return create.AppendDiagError(diags, names.CodeCatalyst, create.ErrActionDeleting, ResNameSourceRepository, d.Id(), err)
	}

	return diags
}
