package github.com/hashicorp/terraform-provider-aws/internal/service/codecatalyst
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDevEnvironmentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CodeCatalystClient(ctx)

	spaceName := aws.String(d.Get("space_name").(string))
	projectName := aws.String(d.Get("project_name").(string))
	env_id := d.Get("env_id").(string)

	out, err := findDevEnvironmentByID(ctx, conn, env_id, spaceName, projectName)
	if err != nil {
		return create.AppendDiagError(diags, names.CodeCatalyst, create.ErrActionReading, DSNameDevEnvironment, d.Id(), err)
	}

	d.SetId(aws.ToString(out.Id))

	d.Set(names.AttrAlias, out.Alias)
	d.Set("creator_id", out.CreatorId)
	d.Set("project_name", out.ProjectName)
	d.Set("space_name", out.SpaceName)
	d.Set(names.AttrInstanceType, out.InstanceType)
	d.Set(names.AttrLastUpdatedTime, out.LastUpdatedTime.String())
	d.Set("inactivity_timeout_minutes", out.InactivityTimeoutMinutes)
	d.Set("persistent_storage", flattenPersistentStorage(out.PersistentStorage))
	d.Set(names.AttrStatus, out.Status)
	d.Set(names.AttrStatusReason, out.StatusReason)

	if err := d.Set("ides", flattenIdes(out.Ides)); err != nil {
		return create.AppendDiagError(diags, names.CodeCatalyst, create.ErrActionSetting, ResNameDevEnvironment, d.Id(), err)
	}

	if err := d.Set("repositories", flattenRepositories(out.Repositories)); err != nil {
		return create.AppendDiagError(diags, names.CodeCatalyst, create.ErrActionSetting, ResNameDevEnvironment, d.Id(), err)
	}

	return diags
}
