package github.com/hashicorp/terraform-provider-aws/internal/service/redshiftserverless
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshiftserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUsageLimitCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RedshiftServerlessClient(ctx)

	input := redshiftserverless.CreateUsageLimitInput{
		Amount:      aws.Int64(int64(d.Get("amount").(int))),
		ResourceArn: aws.String(d.Get(names.AttrResourceARN).(string)),
		UsageType:   awstypes.UsageLimitUsageType(d.Get("usage_type").(string)),
	}

	if v, ok := d.GetOk("period"); ok {
		input.Period = awstypes.UsageLimitPeriod(v.(string))
	}

	if v, ok := d.GetOk("breach_action"); ok {
		input.BreachAction = awstypes.UsageLimitBreachAction(v.(string))
	}

	out, err := conn.CreateUsageLimit(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Redshift Serverless Usage Limit : %s", err)
	}

	d.SetId(aws.ToString(out.UsageLimit.UsageLimitId))

	return append(diags, resourceUsageLimitRead(ctx, d, meta)...)
}
