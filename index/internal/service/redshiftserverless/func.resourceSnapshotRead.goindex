package github.com/hashicorp/terraform-provider-aws/internal/service/redshiftserverless
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	awstypes "github.com/aws/aws-sdk-go-v2/service/redshiftserverless/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSnapshotRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RedshiftServerlessClient(ctx)

	out, err := findSnapshotByName(ctx, conn, d.Id())
	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Redshift Serverless Snapshot (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Redshift Serverless Snapshot (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, out.SnapshotArn)
	d.Set("snapshot_name", out.SnapshotName)
	d.Set("namespace_name", out.NamespaceName)
	d.Set("namespace_arn", out.NamespaceArn)
	d.Set(names.AttrRetentionPeriod, out.SnapshotRetentionPeriod)
	d.Set("admin_username", out.AdminUsername)
	d.Set(names.AttrKMSKeyID, out.KmsKeyId)
	d.Set("owner_account", out.OwnerAccount)
	d.Set("accounts_with_provisioned_restore_access", flex.FlattenStringValueSet(out.AccountsWithRestoreAccess))
	d.Set("accounts_with_restore_access", flex.FlattenStringValueSet(out.AccountsWithRestoreAccess))

	return diags
}
