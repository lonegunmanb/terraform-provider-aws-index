package github.com/hashicorp/terraform-provider-aws/internal/service/redshiftserverless
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceWorkgroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RedshiftServerlessClient(ctx)

	workgroupName := d.Get("workgroup_name").(string)

	resource, err := findWorkgroupByName(ctx, conn, workgroupName)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Redshift Serverless Workgroup (%s): %s", workgroupName, err)
	}

	d.SetId(workgroupName)
	d.Set(names.AttrARN, resource.WorkgroupArn)
	if err := d.Set(names.AttrEndpoint, []any{flattenEndpoint(resource.Endpoint)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting endpoint: %s", err)
	}
	d.Set("enhanced_vpc_routing", resource.EnhancedVpcRouting)
	d.Set("namespace_name", resource.NamespaceName)
	d.Set(names.AttrPubliclyAccessible, resource.PubliclyAccessible)
	d.Set(names.AttrSecurityGroupIDs, resource.SecurityGroupIds)
	d.Set(names.AttrSubnetIDs, resource.SubnetIds)
	d.Set("track_name", resource.TrackName)
	d.Set("workgroup_id", resource.WorkgroupId)

	return diags
}
