package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"bytes"
	"context"
	"fmt"
	"reflect"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResourceLFTagsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LakeFormationClient(ctx)

	input := &lakeformation.GetResourceLFTagsInput{
		ShowAssignedLFTags: aws.Bool(true),
	}

	if v, ok := d.GetOk(names.AttrCatalogID); ok {
		input.CatalogId = aws.String(v.(string))
	}

	tagger, ds := lfTagsTagger(d)
	diags = append(diags, ds...)
	if diags.HasError() {
		return diags
	}

	input.Resource = tagger.ExpandResource(d)

	output, err := conn.GetResourceLFTags(ctx, input)

	if err != nil {
		return create.AppendDiagError(diags, names.LakeFormation, create.ErrActionReading, ResNameLFTags, d.Id(), err)
	}

	if err := d.Set("lf_tag", tagger.FlattenTags(output)); err != nil {
		return create.AppendDiagError(diags, names.LakeFormation, create.ErrActionSetting, ResNameLFTags, d.Id(), err)
	}

	return diags
}
