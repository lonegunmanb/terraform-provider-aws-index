package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepIdentityCenterConfigurations(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.LakeFormationClient(ctx)
	var sweepResources []sweep.Sweepable

	input := lakeformation.DescribeLakeFormationIdentityCenterConfigurationInput{}
	v, err := conn.DescribeLakeFormationIdentityCenterConfiguration(ctx, &input)
	if errs.IsA[*awstypes.EntityNotFoundException](err) {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}

	sweepResources = append(sweepResources, framework.NewSweepResource(newResourceIdentityCenterConfiguration, client,
		framework.NewAttribute(names.AttrCatalogID, aws.ToString(v.CatalogId)),
	))

	return sweepResources, nil
}
