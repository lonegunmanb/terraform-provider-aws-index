package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"slices"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func ExpandDataCellsFilter(in []any) *awstypes.DataCellsFilterResource {
	if len(in) == 0 {
		return nil
	}

	m := in[0].(map[string]any)
	var out awstypes.DataCellsFilterResource

	if v, ok := m[names.AttrDatabaseName].(string); ok && v != "" {
		out.DatabaseName = aws.String(v)
	}

	if v, ok := m[names.AttrName].(string); ok && v != "" {
		out.Name = aws.String(v)
	}

	if v, ok := m["table_catalog_id"].(string); ok && v != "" {
		out.TableCatalogId = aws.String(v)
	}

	if v, ok := m[names.AttrTableName].(string); ok && v != "" {
		out.TableName = aws.String(v)
	}

	return &out
}
