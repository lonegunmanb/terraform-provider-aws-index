package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"context"
	"fmt"
	"reflect"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *resourceLFTagResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	conn := r.Meta().LakeFormationClient(ctx)

	var state ResourceLFTagResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	in := &lakeformation.RemoveLFTagsFromResourceInput{}

	if !state.CatalogID.IsNull() {
		in.CatalogId = fwflex.StringFromFramework(ctx, state.CatalogID)
	}

	lftagger := newLFTagTagger(&state, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	in.Resource = lftagger.expandResource(ctx, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	lfTag, lfDiags := state.LFTag.ToPtr(ctx)
	resp.Diagnostics.Append(lfDiags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if lfTag != nil {
		in.LFTags = []awstypes.LFTagPair{
			{
				TagKey: fwflex.StringFromFramework(ctx, lfTag.Key),
				TagValues: []string{
					lfTag.Value.ValueString(),
				},
			},
		}
	}

	if in.Resource == nil || reflect.DeepEqual(in.Resource, &awstypes.Resource{}) || len(in.LFTags) == 0 {
		resp.Diagnostics.AddWarning(
			create.ProblemStandardMessage(names.LakeFormation, create.ErrActionDeleting, ResNameResourceLFTag, state.ID.String(), nil),
			"no LF-Tags to remove")
		return
	}

	deleteTimeout := r.DeleteTimeout(ctx, state.Timeouts)
	err := tfresource.Retry(ctx, deleteTimeout, func(ctx context.Context) *tfresource.RetryError {
		var err error
		_, err = conn.RemoveLFTagsFromResource(ctx, in)
		if err != nil {
			if errs.IsA[*awstypes.ConcurrentModificationException](err) {
				return tfresource.RetryableError(err)
			}

			if errs.IsAErrorMessageContains[*awstypes.AccessDeniedException](err, "is not authorized") {
				return tfresource.RetryableError(err)
			}

			return tfresource.NonRetryableError(fmt.Errorf("removing Lake Formation LF-Tags: %w", err))
		}
		return nil
	})

	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.LakeFormation, create.ErrActionWaitingForDeletion, ResNameResourceLFTag, state.ID.String(), err),
			err.Error(),
		)
		return
	}
}
