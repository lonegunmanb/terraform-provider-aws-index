package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"bytes"
	"context"
	"fmt"
	"reflect"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func lfTagsTagger(d *schema.ResourceData) (tagger, diag.Diagnostics) {
	var diags diag.Diagnostics
	if v, ok := d.GetOk(names.AttrDatabase); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		return &databaseTagger{}, diags
	} else if v, ok := d.GetOk("table"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		return &tableTagger{}, diags
	} else if v, ok := d.GetOk("table_with_columns"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		return &columnTagger{}, diags
	} else {
		diags = append(diags, errs.NewErrorDiagnostic(
			"Invalid Lake Formation Resource Type",
			"An unexpected error occurred while resolving the Lake Formation Resource type. "+
				"This is always an error in the provider. "+
				"Please report the following to the provider developer:\n\n"+
				"No Lake Formation Resource defined.",
		))
		return nil, diags
	}
}
