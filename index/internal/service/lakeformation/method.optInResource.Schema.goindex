package github.com/hashicorp/terraform-provider-aws/internal/service/lakeformation
import (
	"context"
	"errors"
	"reflect"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lakeformation/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *optInResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	catalogLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[catalogOptIn](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrID: schema.StringAttribute{
					Optional: true,
				},
			},
		},
	}

	dataCellsFilterLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[dataCellsFilterOptIn](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrDatabaseName: schema.StringAttribute{
					Optional: true,
				},
				names.AttrName: schema.StringAttribute{
					Optional: true,
				},
				"table_catalog_id": schema.StringAttribute{
					Optional: true,
				},
				names.AttrTableName: schema.StringAttribute{
					Optional: true,
				},
			},
		},
	}

	dataLocationLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[dataLocationOptIn](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrResourceARN: schema.StringAttribute{
					Required: true,
				},
				names.AttrCatalogID: schema.StringAttribute{
					Optional: true,
					Computed: true,
				},
			},
		},
	}

	databaseLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[databaseOptIn](ctx),
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		PlanModifiers: []planmodifier.List{
			listplanmodifier.RequiresReplace(),
		},
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrCatalogID: catalogIDSchemaOptional(),
				names.AttrName: schema.StringAttribute{
					Required: true,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
			},
		},
	}

	lfTagLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[lfTagOptIn](ctx),
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		PlanModifiers: []planmodifier.List{
			listplanmodifier.RequiresReplace(),
		},
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrCatalogID: catalogIDSchemaOptionalComputed(),
				names.AttrKey: schema.StringAttribute{
					Required: true,
					Validators: []validator.String{
						stringvalidator.LengthBetween(1, 128),
					},
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
				names.AttrValue: schema.StringAttribute{
					Required: true,
					Validators: []validator.String{
						stringvalidator.LengthBetween(1, 255),
						stringvalidator.RegexMatches(regexache.MustCompile(`^([\p{L}\p{Z}\p{N}_.:\*\/=+\-@%]*)$`), ""),
					},
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
			},
		},
	}

	lftagExpressionLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[lfTagExpressionOptIn](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrCatalogID: catalogIDSchemaOptional(),
				names.AttrName: schema.StringAttribute{
					Required: true,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
			},
		},
	}

	lfTagPolicyLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[lfTagPolicyOptIn](ctx),
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrResourceType: schema.StringAttribute{
					Required:   true,
					CustomType: fwtypes.StringEnumType[awstypes.ResourceType](),
				},
				names.AttrCatalogID: catalogIDSchemaOptionalComputed(),
				names.AttrExpression: schema.ListAttribute{
					CustomType:  fwtypes.ListOfStringType,
					ElementType: types.StringType,
					Optional:    true,
				},
				"expression_name": schema.StringAttribute{
					Optional: true,
				},
			},
		},
	}

	tableLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[tableOptIn](ctx),
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		PlanModifiers: []planmodifier.List{
			listplanmodifier.RequiresReplace(),
		},
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrCatalogID: catalogIDSchemaOptional(),
				names.AttrDatabaseName: schema.StringAttribute{
					Required: true,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
				names.AttrName: schema.StringAttribute{
					Optional: true,
					Validators: []validator.String{
						stringvalidator.AtLeastOneOf(
							path.MatchRelative().AtParent().AtName(names.AttrName),
							path.MatchRelative().AtParent().AtName("wildcard"),
						),
					},
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
				"wildcard": schema.BoolAttribute{
					Optional: true,
					Validators: []validator.Bool{
						boolvalidator.AtLeastOneOf(
							path.MatchRelative().AtParent().AtName(names.AttrName),
							path.MatchRelative().AtParent().AtName("wildcard"),
						),
					},
					PlanModifiers: []planmodifier.Bool{
						boolplanmodifier.RequiresReplace(),
					},
				},
			},
		},
	}

	tableWCLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[tableWithColumnsOptIn](ctx),
		Validators: []validator.List{
			listvalidator.SizeAtMost(1),
		},
		PlanModifiers: []planmodifier.List{
			listplanmodifier.RequiresReplace(),
		},
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrCatalogID: catalogIDSchemaOptional(),
				"column_names": schema.SetAttribute{
					CustomType: fwtypes.SetOfStringType,
					Optional:   true,
					Validators: []validator.Set{
						setvalidator.AtLeastOneOf(
							path.MatchRelative().AtParent().AtName("column_names"),
							path.MatchRelative().AtParent().AtName("column_wildcard"),
						),
					},
					PlanModifiers: []planmodifier.Set{
						setplanmodifier.RequiresReplace(),
					},
				},
				names.AttrDatabaseName: schema.StringAttribute{
					Required: true,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
					},
				},
				names.AttrName: schema.StringAttribute{
					Required: true,
					PlanModifiers: []planmodifier.String{
						stringplanmodifier.RequiresReplace(),
						stringplanmodifier.UseStateForUnknown(),
					},
				},
			},
			Blocks: map[string]schema.Block{
				"column_wildcard": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[columnWildcardDataOptIn](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
						listvalidator.AtLeastOneOf(
							path.MatchRelative().AtParent().AtName("column_names"),
							path.MatchRelative().AtParent().AtName("column_wildcard"),
						),
					},
					PlanModifiers: []planmodifier.List{
						listplanmodifier.RequiresReplace(),
					},
					NestedObject: schema.NestedBlockObject{
						Attributes: map[string]schema.Attribute{
							"excluded_column_names": schema.SetAttribute{
								CustomType: fwtypes.SetOfStringType,
								Optional:   true,
								PlanModifiers: []planmodifier.Set{
									setplanmodifier.RequiresReplace(),
								},
							},
						},
					},
				},
			},
		},
	}

	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"last_updated_by": schema.StringAttribute{
				Computed: true,
			},
			"last_modified": schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
			},
		},
		Blocks: map[string]schema.Block{
			names.AttrCondition: schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[conditionOptIn](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrExpression: schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			names.AttrPrincipal: schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[dataLakePrincipal](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"data_lake_principal_identifier": schema.StringAttribute{
							Required: true,
						},
					},
				},
			},
			"resource_data": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[resourceData](ctx),
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"catalog":            catalogLNB,
						names.AttrDatabase:   databaseLNB,
						"data_cells_filter":  dataCellsFilterLNB,
						"data_location":      dataLocationLNB,
						"lf_tag":             lfTagLNB,
						"lf_tag_expression":  lftagExpressionLNB,
						"lf_tag_policy":      lfTagPolicyLNB,
						"table":              tableLNB,
						"table_with_columns": tableWCLNB,
					},
				},
			},
		},
	}
}
