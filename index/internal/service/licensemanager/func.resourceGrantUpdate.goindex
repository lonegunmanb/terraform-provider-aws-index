package github.com/hashicorp/terraform-provider-aws/internal/service/licensemanager
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/licensemanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGrantUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LicenseManagerClient(ctx)

	input := &licensemanager.CreateGrantVersionInput{
		ClientToken: aws.String(id.UniqueId()),
		GrantArn:    aws.String(d.Id()),
	}

	if d.HasChange("allowed_operations") {
		input.AllowedOperations = flex.ExpandStringyValueSet[awstypes.AllowedOperation](d.Get("allowed_operations").(*schema.Set))
	}

	if d.HasChange(names.AttrName) {
		input.GrantName = aws.String(d.Get(names.AttrName).(string))
	}

	_, err := conn.CreateGrantVersion(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating License Manager Grant (%s): %s", d.Id(), err)
	}

	return append(diags, resourceGrantRead(ctx, d, meta)...)
}
