package github.com/hashicorp/terraform-provider-aws/internal/service/licensemanager
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/licensemanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGrantCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LicenseManagerClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &licensemanager.CreateGrantInput{
		AllowedOperations: flex.ExpandStringyValueSet[awstypes.AllowedOperation](d.Get("allowed_operations").(*schema.Set)),
		ClientToken:       aws.String(id.UniqueId()),
		GrantName:         aws.String(name),
		HomeRegion:        aws.String(meta.(*conns.AWSClient).Region(ctx)),
		LicenseArn:        aws.String(d.Get("license_arn").(string)),
		Principals:        []string{d.Get(names.AttrPrincipal).(string)},
	}

	output, err := conn.CreateGrant(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating License Manager Grant (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.GrantArn))

	return append(diags, resourceGrantRead(ctx, d, meta)...)
}
