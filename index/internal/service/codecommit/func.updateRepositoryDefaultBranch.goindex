package github.com/hashicorp/terraform-provider-aws/internal/service/codecommit
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codecommit"
	"github.com/aws/aws-sdk-go-v2/service/codecommit/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateRepositoryDefaultBranch(ctx context.Context, conn *codecommit.Client, name, defaultBranch string) error {
	inputL := &codecommit.ListBranchesInput{
		RepositoryName: aws.String(name),
	}

	output, err := conn.ListBranches(ctx, inputL)

	if err != nil {
		return fmt.Errorf("listing CodeCommit Repository (%s) branches: %s", name, err)
	}

	if len(output.Branches) == 0 {
		return nil
	}

	inputU := &codecommit.UpdateDefaultBranchInput{
		DefaultBranchName: aws.String(defaultBranch),
		RepositoryName:    aws.String(name),
	}

	_, err = conn.UpdateDefaultBranch(ctx, inputU)

	if err != nil {
		return fmt.Errorf("updating CodeCommit Repository (%s) default branch: %w", name, err)
	}

	return nil
}
