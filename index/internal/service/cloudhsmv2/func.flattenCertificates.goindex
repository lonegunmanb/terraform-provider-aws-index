package github.com/hashicorp/terraform-provider-aws/internal/service/cloudhsmv2
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudhsmv2"
	"github.com/aws/aws-sdk-go-v2/service/cloudhsmv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenCertificates(apiObject *types.Cluster) []map[string]any {
	tfMap := map[string]any{}

	if apiObject, clusterState := apiObject.Certificates, apiObject.State; apiObject != nil {
		switch clusterState {
		case types.ClusterStateUninitialized:
			tfMap["cluster_csr"] = aws.ToString(apiObject.ClusterCsr)
			tfMap["aws_hardware_certificate"] = aws.ToString(apiObject.AwsHardwareCertificate)
			tfMap["hsm_certificate"] = aws.ToString(apiObject.HsmCertificate)
			tfMap["manufacturer_hardware_certificate"] = aws.ToString(apiObject.ManufacturerHardwareCertificate)
		case types.ClusterStateActive:
			tfMap["cluster_certificate"] = aws.ToString(apiObject.ClusterCertificate)
		}
	}

	if len(tfMap) > 0 {
		return []map[string]any{tfMap}
	}

	return []map[string]any{}
}
