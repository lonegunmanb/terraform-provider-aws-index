package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	multierror "github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func sweepRemediationConfigurations(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("error getting client: %s", err)
	}
	conn := client.ConfigServiceClient(ctx)
	input := &configservice.DescribeConfigRulesInput{}
	var sweeperErrs *multierror.Error
	sweepResources := make([]sweep.Sweepable, 0)

	pages := configservice.NewDescribeConfigRulesPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if awsv2.SkipSweepError(err) {
			log.Printf("[WARN] Skipping ConfigService Remediation Configuration sweep for %s: %s", region, err)
			return nil
		}

		if err != nil {
			sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing ConfigService Config Rules (%s): %w", region, err))
			break
		}

		for _, v := range page.ConfigRules {
			name := aws.ToString(v.ConfigRuleName)

			if createdBy := aws.ToString(v.CreatedBy); createdBy != "" {
				log.Printf("[INFO] Skipping ConfigService Config Rule %s: CreatedBy=%s", name, createdBy)
				continue
			}

			input := &configservice.DescribeRemediationConfigurationsInput{
				ConfigRuleNames: []string{name},
			}
			output, err := conn.DescribeRemediationConfigurations(ctx, input)

			if awsv2.SkipSweepError(err) {
				break
			}

			if err != nil {
				sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error listing ConfigService Remediation Configurations (%s): %w", region, err))
				break
			}

			for _, v := range output.RemediationConfigurations {
				r := resourceRemediationConfiguration()
				d := r.Data(nil)
				d.SetId(aws.ToString(v.ConfigRuleName))

				sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
			}
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error sweeping ConfigService Remediation Configurations (%s): %w", region, err))
	}

	return sweeperErrs.ErrorOrNil()
}
