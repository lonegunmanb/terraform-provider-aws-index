package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigRulePut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConfigServiceClient(ctx)

	if d.IsNewResource() || d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		name := d.Get(names.AttrName).(string)
		configRule := &types.ConfigRule{
			ConfigRuleName: aws.String(name),
		}

		if v, ok := d.GetOk(names.AttrDescription); ok {
			configRule.Description = aws.String(v.(string))
		}

		if v, ok := d.Get("evaluation_mode").(*schema.Set); ok && v.Len() > 0 {
			configRule.EvaluationModes = expandEvaluationModeConfigurations(v.List())
		}

		if v, ok := d.GetOk("input_parameters"); ok {
			configRule.InputParameters = aws.String(v.(string))
		}

		if v, ok := d.GetOk("maximum_execution_frequency"); ok {
			configRule.MaximumExecutionFrequency = types.MaximumExecutionFrequency(v.(string))
		}

		if v, ok := d.GetOk(names.AttrScope); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			configRule.Scope = expandScope(v.([]any)[0].(map[string]any))
		}

		if v, ok := d.GetOk(names.AttrSource); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			configRule.Source = expandSource(v.([]any)[0].(map[string]any))
		}

		input := &configservice.PutConfigRuleInput{
			ConfigRule: configRule,
			Tags:       getTagsIn(ctx),
		}

		_, err := tfresource.RetryWhenIsA[*types.InsufficientPermissionsException](ctx, propagationTimeout, func() (any, error) {
			return conn.PutConfigRule(ctx, input)
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting ConfigService Config Rule (%s): %s", name, err)
		}

		if d.IsNewResource() {
			d.SetId(name)
		}
	}

	return append(diags, resourceConfigRuleRead(ctx, d, meta)...)
}
