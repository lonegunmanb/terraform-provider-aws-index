package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationRecorderRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConfigServiceClient(ctx)

	recorder, err := findConfigurationRecorderByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] ConfigService Configuration Recorder (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading ConfigService Configuration Recorder (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrName, recorder.Name)
	if recorder.RecordingGroup != nil {
		if err := d.Set("recording_group", flattenRecordingGroup(recorder.RecordingGroup)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting recording_group: %s", err)
		}
	}
	if recorder.RecordingMode != nil {
		if err := d.Set("recording_mode", flattenRecordingMode(recorder.RecordingMode)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting recording_mode: %s", err)
		}
	}
	d.Set(names.AttrRoleARN, recorder.RoleARN)

	return diags
}
