package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRemediationParameterValues(apiObjects map[string]types.RemediationParameterValue) []any {
	var tfList []any

	for key, value := range apiObjects {
		tfMap := map[string]any{
			names.AttrName: key,
		}

		if v := value.ResourceValue; v != nil {
			tfMap["resource_value"] = v.Value
		}

		if v := value.StaticValue; v != nil {
			if len(v.Values) == 1 {
				tfMap["static_value"] = v.Values[0]
			} else if len(v.Values) > 1 {
				tfMap["static_values"] = v.Values
			}
		} else {
			tfMap["static_values"] = make([]any, 0)
		}

		tfList = append(tfList, tfMap)
	}

	slices.SortFunc(tfList, func(a, b any) int {
		if a.(map[string]any)[names.AttrName].(string) < b.(map[string]any)[names.AttrName].(string) {
			return -1
		}

		if a.(map[string]any)[names.AttrName].(string) > b.(map[string]any)[names.AttrName].(string) {
			return 1
		}

		return 0
	})

	return tfList
}
