package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRecordingGroup(apiObject *types.RecordingGroup) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"all_supported":                 apiObject.AllSupported,
		"include_global_resource_types": apiObject.IncludeGlobalResourceTypes,
	}

	if apiObject.ExclusionByResourceTypes != nil {
		tfMap["exclusion_by_resource_types"] = flattenExclusionByResourceTypes(apiObject.ExclusionByResourceTypes)
	}

	if apiObject.RecordingStrategy != nil {
		tfMap["recording_strategy"] = flattenRecordingStrategy(apiObject.RecordingStrategy)
	}

	if apiObject.ResourceTypes != nil {
		tfMap["resource_types"] = apiObject.ResourceTypes
	}

	return []any{tfMap}
}
