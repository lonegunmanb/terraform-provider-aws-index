package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRecordingGroup(tfMap map[string]any) *types.RecordingGroup {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.RecordingGroup{}

	if v, ok := tfMap["all_supported"]; ok {
		apiObject.AllSupported = v.(bool)
	}

	if v, ok := tfMap["exclusion_by_resource_types"]; ok && len(v.([]any)) > 0 {
		apiObject.ExclusionByResourceTypes = expandExclusionByResourceTypes(v.([]any))
	}

	if v, ok := tfMap["include_global_resource_types"]; ok {
		apiObject.IncludeGlobalResourceTypes = v.(bool)
	}

	if v, ok := tfMap["recording_strategy"]; ok && len(v.([]any)) > 0 {
		apiObject.RecordingStrategy = expandRecordingStrategy(v.([]any))
	}

	if v, ok := tfMap["resource_types"]; ok && v.(*schema.Set).Len() > 0 {
		apiObject.ResourceTypes = flex.ExpandStringyValueSet[types.ResourceType](v.(*schema.Set))
	}

	return apiObject
}
