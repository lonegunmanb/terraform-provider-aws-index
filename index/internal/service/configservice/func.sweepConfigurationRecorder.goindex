package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	multierror "github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func sweepConfigurationRecorder(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.ConfigServiceClient(ctx)
	input := &configservice.DescribeConfigurationRecordersInput{}
	sweepResources := make([]sweep.Sweepable, 0)

	output, err := conn.DescribeConfigurationRecorders(ctx, input)

	if awsv2.SkipSweepError(err) {
		log.Printf("[WARN] Skipping ConfigService Configuration Recorder sweep for %s: %s", region, err)
		return nil
	}

	if err != nil {
		return fmt.Errorf("error listing ConfigService Configuration Recorders (%s): %w", region, err)
	}

	for _, v := range output.ConfigurationRecorders {
		sweepResources = append(sweepResources, &configurationRecorderSweeper{client: client, name: aws.ToString(v.Name)})
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping ConfigService Configuration Recorders (%s): %w", region, err)
	}

	return nil
}
