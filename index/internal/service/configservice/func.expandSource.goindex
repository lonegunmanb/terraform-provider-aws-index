package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSource(tfMap map[string]any) *types.Source {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.Source{
		Owner: types.Owner(tfMap[names.AttrOwner].(string)),
	}

	if v, ok := tfMap["custom_policy_details"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.CustomPolicyDetails = expandCustomPolicyDetails(v[0].(map[string]any))
	}

	if v, ok := tfMap["source_detail"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.SourceDetails = expandSourceDetails(v.List())
	}

	if v, ok := tfMap["source_identifier"].(string); ok && v != "" {
		apiObject.SourceIdentifier = aws.String(v)
	}

	return apiObject
}
