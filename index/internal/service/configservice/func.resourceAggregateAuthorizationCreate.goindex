package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAggregateAuthorizationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConfigServiceClient(ctx)

	accountID := d.Get(names.AttrAccountID).(string)
	var authorizedRegion string
	if v, ok := d.GetOk("authorized_aws_region"); ok {
		authorizedRegion = v.(string)
	} else if v, ok := d.GetOk(names.AttrRegion); ok {
		authorizedRegion = v.(string)
	}
	id := aggregateAuthorizationCreateResourceID(accountID, authorizedRegion)
	input := &configservice.PutAggregationAuthorizationInput{
		AuthorizedAccountId: aws.String(accountID),
		AuthorizedAwsRegion: aws.String(authorizedRegion),
		Tags:                getTagsIn(ctx),
	}

	_, err := conn.PutAggregationAuthorization(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "putting ConfigService Aggregate Authorization (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceAggregateAuthorizationRead(ctx, d, meta)...)
}
