package github.com/hashicorp/terraform-provider-aws/internal/service/configservice
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/configservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationRecorderStatusPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ConfigServiceClient(ctx)

	name := d.Get(names.AttrName).(string)

	if d.HasChange("is_enabled") {
		if d.Get("is_enabled").(bool) {
			input := &configservice.StartConfigurationRecorderInput{
				ConfigurationRecorderName: aws.String(name),
			}

			_, err := conn.StartConfigurationRecorder(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "starting ConfigService Configuration Recorder (%s): %s", name, err)
			}
		} else {
			input := &configservice.StopConfigurationRecorderInput{
				ConfigurationRecorderName: aws.String(name),
			}

			_, err := conn.StopConfigurationRecorder(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "stopping ConfigService Configuration Recorder (%s): %s", name, err)
			}
		}
	}

	d.SetId(name)

	return append(diags, resourceConfigurationRecorderStatusRead(ctx, d, meta)...)
}
