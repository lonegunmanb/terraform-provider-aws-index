package github.com/hashicorp/terraform-provider-aws/internal/service/qldb
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/qldb"
	"github.com/aws/aws-sdk-go-v2/service/qldb/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStreamRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).QLDBClient(ctx)

	ledgerName := d.Get("ledger_name").(string)
	stream, err := findStreamByTwoPartKey(ctx, conn, ledgerName, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] QLDB Stream %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading QLDB Stream (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, stream.Arn)
	if stream.ExclusiveEndTime != nil {
		d.Set("exclusive_end_time", aws.ToTime(stream.ExclusiveEndTime).Format(time.RFC3339))
	} else {
		d.Set("exclusive_end_time", nil)
	}
	if stream.InclusiveStartTime != nil {
		d.Set("inclusive_start_time", aws.ToTime(stream.InclusiveStartTime).Format(time.RFC3339))
	} else {
		d.Set("inclusive_start_time", nil)
	}
	if stream.KinesisConfiguration != nil {
		if err := d.Set("kinesis_configuration", []any{flattenKinesisConfiguration(stream.KinesisConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting kinesis_configuration: %s", err)
		}
	} else {
		d.Set("kinesis_configuration", nil)
	}
	d.Set("ledger_name", stream.LedgerName)
	d.Set(names.AttrRoleARN, stream.RoleArn)
	d.Set("stream_name", stream.StreamName)

	return diags
}
