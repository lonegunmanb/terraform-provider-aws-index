package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceCustomKeyStoreRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KMSClient(ctx)

	output, err := findCustomKeyStoreByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] KMS Custom Key Store (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading KMS Custom Key Store (%s): %s", d.Id(), err)
	}

	d.Set("custom_key_store_name", output.CustomKeyStoreName)
	d.Set("cloud_hsm_cluster_id", output.CloudHsmClusterId)
	d.Set("custom_key_store_type", output.CustomKeyStoreType)
	d.Set("key_store_password", d.Get("key_store_password"))
	d.Set("trust_anchor_certificate", output.TrustAnchorCertificate)

	if output.XksProxyConfiguration != nil {
		d.Set("xks_proxy_connectivity", output.XksProxyConfiguration.Connectivity)
		d.Set("xks_proxy_uri_endpoint", output.XksProxyConfiguration.UriEndpoint)
		d.Set("xks_proxy_uri_path", output.XksProxyConfiguration.UriPath)
		d.Set("xks_proxy_vpc_endpoint_service_name", output.XksProxyConfiguration.VpcEndpointServiceName)
	}

	return diags
}
