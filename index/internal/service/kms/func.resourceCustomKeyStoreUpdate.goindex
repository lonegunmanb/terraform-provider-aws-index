package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceCustomKeyStoreUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KMSClient(ctx)

	input := &kms.UpdateCustomKeyStoreInput{
		CustomKeyStoreId: aws.String(d.Id()),
	}

	if d.HasChange("cloud_hsm_cluster_id") {
		input.CloudHsmClusterId = aws.String(d.Get("cloud_hsm_cluster_id").(string))
	}

	if d.HasChange("custom_key_store_name") {
		input.NewCustomKeyStoreName = aws.String(d.Get("custom_key_store_name").(string))
	}

	if d.HasChange("key_store_password") {
		input.KeyStorePassword = aws.String(d.Get("key_store_password").(string))
	}

	if d.HasChange("xks_proxy_authentication_credential") {
		input.XksProxyAuthenticationCredential = expandXksProxyAuthenticationCredential(d.Get("xks_proxy_authentication_credential").(*schema.Set).List())
	}

	if d.HasChange("xks_proxy_connectivity") {
		input.XksProxyConnectivity = awstypes.XksProxyConnectivityType(d.Get("xks_proxy_connectivity").(string))
	}

	if d.HasChange("xks_proxy_uri_endpoint") {
		input.XksProxyUriEndpoint = aws.String(d.Get("xks_proxy_uri_endpoint").(string))
	}

	if d.HasChange("xks_proxy_uri_path") {
		input.XksProxyUriPath = aws.String(d.Get("xks_proxy_uri_path").(string))
	}

	if d.HasChange("xks_proxy_vpc_endpoint_service_name") {
		input.XksProxyVpcEndpointServiceName = aws.String(d.Get("xks_proxy_vpc_endpoint_service_name").(string))
	}

	_, err := conn.UpdateCustomKeyStore(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating KMS Custom Key Store (%s): %s", d.Id(), err)
	}

	return append(diags, resourceCustomKeyStoreRead(ctx, d, meta)...)
}
