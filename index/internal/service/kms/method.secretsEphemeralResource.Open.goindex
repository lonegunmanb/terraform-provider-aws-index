package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (e *secretsEphemeralResource) Open(ctx context.Context, request ephemeral.OpenRequest, response *ephemeral.OpenResponse) {
	var data secretsEphemeralResourceModel
	conn := e.Meta().KMSClient(ctx)

	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	secrets, diags := data.Secrets.ToSlice(ctx)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	plaintext := make(map[string]attr.Value)

	for _, v := range secrets {
		input := kms.DecryptInput{}
		response.Diagnostics.Append(fwflex.Expand(ctx, v, &input)...)
		if response.Diagnostics.HasError() {
			return
		}
		input.EncryptionContext = fwflex.ExpandFrameworkStringValueMap(ctx, v.Context)

		payload, err := itypes.Base64Decode(v.Payload.ValueString())
		if err != nil {
			response.Diagnostics.AddError(
				"invalid base64 value for secret",
				err.Error(),
			)
			return
		}

		input.CiphertextBlob = payload

		output, err := conn.Decrypt(ctx, &input)
		if err != nil {
			response.Diagnostics.AddError(
				"failed to decrypt secret",
				err.Error(),
			)
			return
		}

		plaintext[v.Name.ValueString()] = fwflex.StringValueToFramework(ctx, string(output.Plaintext))
	}

	data.Plaintext = fwtypes.NewMapValueOfMust[types.String](ctx, plaintext)

	response.Diagnostics.Append(response.Result.Set(ctx, &data)...)
}
