package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSecretsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KMSClient(ctx)

	tfList := d.Get("secret").(*schema.Set).List()
	plaintext := make(map[string]string, len(tfList))

	for _, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)
		name := tfMap[names.AttrName].(string)

		// base64 decode the payload
		payload, err := itypes.Base64Decode(tfMap["payload"].(string))
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "invalid base64 value for secret (%s): %s", name, err)
		}

		input := &kms.DecryptInput{
			CiphertextBlob: payload,
		}

		if v, ok := tfMap["context"].(map[string]any); ok && len(v) > 0 {
			input.EncryptionContext = flex.ExpandStringValueMap(v)
		}

		if v, ok := tfMap["encryption_algorithm"].(string); ok && v != "" {
			input.EncryptionAlgorithm = awstypes.EncryptionAlgorithmSpec(v)
		}

		if v, ok := tfMap["grant_tokens"].([]any); ok && len(v) > 0 {
			input.GrantTokens = flex.ExpandStringValueList(v)
		}

		if v, ok := tfMap[names.AttrKeyID].(string); ok && v != "" {
			input.KeyId = aws.String(v)
		}

		output, err := conn.Decrypt(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "decrypting KMS Secret (%s): %s", name, err)
		}

		// Set the secret via the name
		plaintext[name] = string(output.Plaintext)
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))
	d.Set("plaintext", plaintext)

	return diags
}
