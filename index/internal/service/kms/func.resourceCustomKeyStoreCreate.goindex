package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceCustomKeyStoreCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KMSClient(ctx)

	name := d.Get("custom_key_store_name").(string)
	input := &kms.CreateCustomKeyStoreInput{
		CustomKeyStoreName: aws.String(name),
	}

	if v, ok := d.GetOk("custom_key_store_type"); ok {
		input.CustomKeyStoreType = awstypes.CustomKeyStoreType(v.(string))
	}

	if v, ok := d.GetOk("cloud_hsm_cluster_id"); ok {
		input.CloudHsmClusterId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("key_store_password"); ok {
		input.KeyStorePassword = aws.String(v.(string))
	}

	if v, ok := d.GetOk("trust_anchor_certificate"); ok {
		input.TrustAnchorCertificate = aws.String(v.(string))
	}

	if v, ok := d.GetOk("xks_proxy_authentication_credential"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.XksProxyAuthenticationCredential = expandXksProxyAuthenticationCredential(v.([]any))
	}

	if v, ok := d.GetOk("xks_proxy_connectivity"); ok {
		input.XksProxyConnectivity = awstypes.XksProxyConnectivityType(v.(string))
	}

	if v, ok := d.GetOk("xks_proxy_uri_endpoint"); ok {
		input.XksProxyUriEndpoint = aws.String(v.(string))
	}

	if v, ok := d.GetOk("xks_proxy_uri_path"); ok {
		input.XksProxyUriPath = aws.String(v.(string))
	}

	if v, ok := d.GetOk("xks_proxy_vpc_endpoint_service_name"); ok {
		input.XksProxyVpcEndpointServiceName = aws.String(v.(string))
	}

	output, err := conn.CreateCustomKeyStore(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating KMS Custom Key Store (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.CustomKeyStoreId))

	return append(diags, resourceCustomKeyStoreRead(ctx, d, meta)...)
}
