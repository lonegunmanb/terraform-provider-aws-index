package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findKeyInfo(ctx context.Context, conn *kms.Client, keyID string, isNewResource bool) (*kmsKeyInfo, error) {
	// Wait for propagation since KMS is eventually consistent.
	return tfresource.RetryWhenNewResourceNotFound(ctx, propagationTimeout, func(ctx context.Context) (*kmsKeyInfo, error) {
		var err error
		var key kmsKeyInfo

		key.metadata, err = findKeyByID(ctx, conn, keyID)

		if err != nil {
			return nil, fmt.Errorf("reading KMS Key (%s): %w", keyID, err)
		}

		policy, err := findKeyPolicyByTwoPartKey(ctx, conn, keyID, policyNameDefault)

		if err != nil {
			return nil, fmt.Errorf("reading KMS Key (%s) policy: %w", keyID, err)
		}

		key.policy, err = structure.NormalizeJsonString(aws.ToString(policy))

		if err != nil {
			return nil, fmt.Errorf("policy contains invalid JSON: %w", err)
		}

		if key.metadata.Origin == awstypes.OriginTypeAwsKms {
			key.rotation, key.rotationPeriodInDays, err = findKeyRotationEnabledByKeyID(ctx, conn, keyID)

			if err != nil {
				return nil, fmt.Errorf("reading KMS Key (%s) rotation enabled: %w", keyID, err)
			}
		}

		tags, err := listTags(ctx, conn, keyID)

		if errs.IsA[*awstypes.NotFoundException](err) {
			return nil, &retry.NotFoundError{LastError: err}
		}

		if err != nil {
			return nil, fmt.Errorf("listing tags for KMS Key (%s): %w", keyID, err)
		}

		key.tags = svcTags(tags)

		return &key, nil
	}, isNewResource)
}
