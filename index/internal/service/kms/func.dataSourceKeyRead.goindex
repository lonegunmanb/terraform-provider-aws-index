package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceKeyRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KMSClient(ctx)

	keyID := d.Get(names.AttrKeyID).(string)
	input := &kms.DescribeKeyInput{
		KeyId: aws.String(keyID),
	}

	if v, ok := d.GetOk("grant_tokens"); ok && len(v.([]any)) > 0 {
		input.GrantTokens = flex.ExpandStringValueList(v.([]any))
	}

	output, err := findKey(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading KMS Key (%s): %s", keyID, err)
	}

	d.SetId(aws.ToString(output.KeyId))
	d.Set(names.AttrARN, output.Arn)
	d.Set(names.AttrAWSAccountID, output.AWSAccountId)
	d.Set("cloud_hsm_cluster_id", output.CloudHsmClusterId)
	d.Set(names.AttrCreationDate, aws.ToTime(output.CreationDate).Format(time.RFC3339))
	d.Set("customer_master_key_spec", output.CustomerMasterKeySpec)
	d.Set("custom_key_store_id", output.CustomKeyStoreId)
	if output.DeletionDate != nil {
		d.Set("deletion_date", aws.ToTime(output.DeletionDate).Format(time.RFC3339))
	}
	d.Set(names.AttrDescription, output.Description)
	d.Set(names.AttrEnabled, output.Enabled)
	d.Set("expiration_model", output.ExpirationModel)
	d.Set("key_manager", output.KeyManager)
	d.Set("key_spec", output.KeySpec)
	d.Set("key_state", output.KeyState)
	d.Set("key_usage", output.KeyUsage)
	d.Set("multi_region", output.MultiRegion)
	if output.MultiRegionConfiguration != nil {
		if err := d.Set("multi_region_configuration", []any{flattenMultiRegionConfiguration(output.MultiRegionConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting multi_region_configuration: %s", err)
		}
	} else {
		d.Set("multi_region_configuration", nil)
	}
	d.Set("origin", output.Origin)
	d.Set("pending_deletion_window_in_days", output.PendingDeletionWindowInDays)
	if output.ValidTo != nil {
		d.Set("valid_to", aws.ToTime(output.ValidTo).Format(time.RFC3339))
	}
	if output.XksKeyConfiguration != nil {
		if err := d.Set("xks_key_configuration", []any{flattenXksKeyConfigurationType(output.XksKeyConfiguration)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting xks_key_configuration: %s", err)
		}
	} else {
		d.Set("xks_key_configuration", nil)
	}

	return diags
}
