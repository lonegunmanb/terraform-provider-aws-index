package github.com/hashicorp/terraform-provider-aws/internal/service/kms
import (
	"context"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func importExternalKeyMaterial(ctx context.Context, conn *kms.Client, resourceTypeName, keyID, keyMaterialBase64, validTo string) error {
	inputGPFI := kms.GetParametersForImportInput{
		KeyId:             aws.String(keyID),
		WrappingAlgorithm: awstypes.AlgorithmSpecRsaesOaepSha256,
		WrappingKeySpec:   awstypes.WrappingKeySpecRsa2048,
	}

	// Wait for propagation since KMS is eventually consistent.
	outputRaw, err := tfresource.RetryWhenIsA[any, *awstypes.NotFoundException](ctx, propagationTimeout, func(ctx context.Context) (any, error) {
		return conn.GetParametersForImport(ctx, &inputGPFI)
	})

	if err != nil {
		return fmt.Errorf("reading %s (%s) parameters for import: %w", resourceTypeName, keyID, err)
	}

	keyMaterial, err := inttypes.Base64Decode(keyMaterialBase64)
	if err != nil {
		return err
	}

	output := outputRaw.(*kms.GetParametersForImportOutput)

	publicKey, err := x509.ParsePKIXPublicKey(output.PublicKey)
	if err != nil {
		return fmt.Errorf("parsing %s (%s) public key (PKIX): %w", resourceTypeName, keyID, err)
	}

	encryptedKeyMaterial, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, publicKey.(*rsa.PublicKey), keyMaterial, []byte{})
	if err != nil {
		return fmt.Errorf("encrypting %s (%s) key material (RSA-OAEP): %w", resourceTypeName, keyID, err)
	}

	inputIKM := kms.ImportKeyMaterialInput{
		EncryptedKeyMaterial: encryptedKeyMaterial,
		ExpirationModel:      awstypes.ExpirationModelTypeKeyMaterialDoesNotExpire,
		ImportToken:          output.ImportToken,
		KeyId:                aws.String(keyID),
	}

	if validTo != "" {
		t, err := time.Parse(time.RFC3339, validTo)
		if err != nil {
			return err
		}

		inputIKM.ExpirationModel = awstypes.ExpirationModelTypeKeyMaterialExpires
		inputIKM.ValidTo = aws.Time(t)
	}

	// Wait for propagation since KMS is eventually consistent.
	_, err = tfresource.RetryWhenIsA[any, *awstypes.NotFoundException](ctx, propagationTimeout, func(ctx context.Context) (any, error) {
		return conn.ImportKeyMaterial(ctx, &inputIKM)
	})

	if err != nil {
		return fmt.Errorf("importing %s (%s) key material: %w", resourceTypeName, keyID, err)
	}

	return nil
}
