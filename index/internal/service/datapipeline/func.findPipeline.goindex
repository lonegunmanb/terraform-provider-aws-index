package github.com/hashicorp/terraform-provider-aws/internal/service/datapipeline
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findPipeline(ctx context.Context, conn *datapipeline.Client, id string) (*awstypes.PipelineDescription, error) {
	opts := datapipeline.DescribePipelinesInput{
		PipelineIds: []string{id},
	}

	resp, err := conn.DescribePipelines(ctx, &opts)
	if err != nil {
		return nil, err
	}

	var pipeline awstypes.PipelineDescription

	for _, p := range resp.PipelineDescriptionList {
		if aws.ToString(p.PipelineId) == id {
			pipeline = p
			break
		}
	}

	return &pipeline, nil
}
