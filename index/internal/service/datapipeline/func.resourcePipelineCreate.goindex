package github.com/hashicorp/terraform-provider-aws/internal/service/datapipeline
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline"
	awstypes "github.com/aws/aws-sdk-go-v2/service/datapipeline/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePipelineCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DataPipelineClient(ctx)

	uniqueID := id.UniqueId()
	input := datapipeline.CreatePipelineInput{
		Name:     aws.String(d.Get(names.AttrName).(string)),
		UniqueId: aws.String(uniqueID),
		Tags:     getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	resp, err := conn.CreatePipeline(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating datapipeline: %s", err)
	}

	d.SetId(aws.ToString(resp.PipelineId))

	return append(diags, resourcePipelineRead(ctx, d, meta)...)
}
