package github.com/hashicorp/terraform-provider-aws/internal/service/acm
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/acm"
	"github.com/aws/aws-sdk-go-v2/service/acm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCertificateValidationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).ACMClient(ctx)

	arn := d.Get(names.AttrCertificateARN).(string)
	certificate, err := findCertificateByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading ACM Certificate (%s): %s", arn, err)
	}

	if v := certificate.Type; v != types.CertificateTypeAmazonIssued {
		return sdkdiag.AppendErrorf(diags, "ACM Certificate (%s) has type %s, no validation necessary", arn, v)
	}

	if v, ok := d.GetOk("validation_record_fqdns"); ok && v.(*schema.Set).Len() > 0 {
		fqdns := make(map[string]types.DomainValidation)

		for _, domainValidation := range certificate.DomainValidationOptions {
			if v := domainValidation.ValidationMethod; v != types.ValidationMethodDns {
				return sdkdiag.AppendErrorf(diags, "validation_record_fqdns is not valid for %s validation", v)
			}

			if v := domainValidation.ResourceRecord; v != nil {
				if v := aws.ToString(v.Name); v != "" {
					fqdns[strings.TrimSuffix(v, ".")] = domainValidation
				}
			}
		}

		for _, v := range v.(*schema.Set).List() {
			delete(fqdns, strings.TrimSuffix(v.(string), "."))
		}

		if len(fqdns) > 0 {
			var errs []error

			for fqdn, domainValidation := range fqdns {
				errs = append(errs, fmt.Errorf("missing %s DNS validation record: %s", aws.ToString(domainValidation.DomainName), fqdn))
			}

			return sdkdiag.AppendFromErr(diags, errors.Join(errs...))
		}
	}

	if _, err := waitCertificateIssued(ctx, conn, arn, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for ACM Certificate (%s) to be issued: %s", arn, err)
	}

	d.SetId(aws.ToTime(certificate.IssuedAt).String())

	return append(diags, resourceCertificateValidationRead(ctx, d, meta)...)
}
