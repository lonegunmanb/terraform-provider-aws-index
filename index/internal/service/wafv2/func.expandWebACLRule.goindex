package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"errors"
	"fmt"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandWebACLRule(m map[string]any) awstypes.Rule {
	rule := awstypes.Rule{
		Action:           expandRuleAction(m[names.AttrAction].([]any)),
		CaptchaConfig:    expandCaptchaConfig(m["captcha_config"].([]any)),
		ChallengeConfig:  expandChallengeConfig(m["challenge_config"].([]any)),
		Name:             aws.String(m[names.AttrName].(string)),
		OverrideAction:   expandOverrideAction(m["override_action"].([]any)),
		Priority:         int32(m[names.AttrPriority].(int)),
		Statement:        expandWebACLRootStatement(m["statement"].([]any)),
		VisibilityConfig: expandVisibilityConfig(m["visibility_config"].([]any)),
	}

	if v, ok := m["rule_label"].(*schema.Set); ok && v.Len() > 0 {
		rule.RuleLabels = expandRuleLabels(v.List())
	}

	return rule
}
