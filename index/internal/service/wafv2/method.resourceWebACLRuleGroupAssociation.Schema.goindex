package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *resourceWebACLRuleGroupAssociation) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	ruleActionOverrideLNB := schema.ListNestedBlock{
		CustomType: fwtypes.NewListNestedObjectTypeOf[ruleActionOverrideModel](ctx),
		Validators: []validator.List{
			listvalidator.SizeAtMost(100),
		},
		NestedObject: schema.NestedBlockObject{
			Attributes: map[string]schema.Attribute{
				names.AttrName: schema.StringAttribute{
					Required: true,
					Validators: []validator.String{
						stringvalidator.LengthBetween(1, 128),
					},
					Description: "Name of the rule to override.",
				},
			},
			Blocks: map[string]schema.Block{
				"action_to_use": schema.ListNestedBlock{
					CustomType: fwtypes.NewListNestedObjectTypeOf[actionToUseModel](ctx),
					Validators: []validator.List{
						listvalidator.SizeAtMost(1),
						listvalidator.SizeAtLeast(1),
					},
					NestedObject: schema.NestedBlockObject{
						Blocks: map[string]schema.Block{
							"allow": schema.ListNestedBlock{
								CustomType: fwtypes.NewListNestedObjectTypeOf[allowActionModel](ctx),
								Validators: []validator.List{
									listvalidator.SizeAtMost(1),
								},
								NestedObject: schema.NestedBlockObject{
									Blocks: map[string]schema.Block{
										"custom_request_handling": schema.ListNestedBlock{
											CustomType: fwtypes.NewListNestedObjectTypeOf[customRequestHandlingModel](ctx),
											Validators: []validator.List{
												listvalidator.SizeAtMost(1),
											},
											NestedObject: schema.NestedBlockObject{
												Blocks: map[string]schema.Block{
													"insert_header": schema.ListNestedBlock{
														CustomType: fwtypes.NewListNestedObjectTypeOf[insertHeaderModel](ctx),
														Validators: []validator.List{
															listvalidator.SizeAtLeast(1),
														},
														NestedObject: schema.NestedBlockObject{
															Attributes: map[string]schema.Attribute{
																names.AttrName: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 64),
																	},
																},
																names.AttrValue: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 255),
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"block": schema.ListNestedBlock{
								CustomType: fwtypes.NewListNestedObjectTypeOf[blockActionModel](ctx),
								Validators: []validator.List{
									listvalidator.SizeAtMost(1),
								},
								NestedObject: schema.NestedBlockObject{
									Blocks: map[string]schema.Block{
										"custom_response": schema.ListNestedBlock{
											CustomType: fwtypes.NewListNestedObjectTypeOf[customResponseModel](ctx),
											Validators: []validator.List{
												listvalidator.SizeAtMost(1),
											},
											NestedObject: schema.NestedBlockObject{
												Attributes: map[string]schema.Attribute{
													"custom_response_body_key": schema.StringAttribute{
														Optional: true,
														Validators: []validator.String{
															stringvalidator.LengthBetween(1, 128),
														},
													},
													"response_code": schema.Int32Attribute{
														Required: true,
														Validators: []validator.Int32{
															int32validator.Between(200, 600),
														},
													},
												},
												Blocks: map[string]schema.Block{
													"response_header": schema.ListNestedBlock{
														CustomType: fwtypes.NewListNestedObjectTypeOf[responseHeaderModel](ctx),
														NestedObject: schema.NestedBlockObject{
															Attributes: map[string]schema.Attribute{
																names.AttrName: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 64),
																	},
																},
																names.AttrValue: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 255),
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"captcha": schema.ListNestedBlock{
								CustomType: fwtypes.NewListNestedObjectTypeOf[captchaActionModel](ctx),
								Validators: []validator.List{
									listvalidator.SizeAtMost(1),
								},
								NestedObject: schema.NestedBlockObject{
									Blocks: map[string]schema.Block{
										"custom_request_handling": schema.ListNestedBlock{
											CustomType: fwtypes.NewListNestedObjectTypeOf[customRequestHandlingModel](ctx),
											Validators: []validator.List{
												listvalidator.SizeAtMost(1),
											},
											NestedObject: schema.NestedBlockObject{
												Blocks: map[string]schema.Block{
													"insert_header": schema.ListNestedBlock{
														CustomType: fwtypes.NewListNestedObjectTypeOf[insertHeaderModel](ctx),
														Validators: []validator.List{
															listvalidator.SizeAtLeast(1),
														},
														NestedObject: schema.NestedBlockObject{
															Attributes: map[string]schema.Attribute{
																names.AttrName: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 64),
																	},
																},
																names.AttrValue: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 255),
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"challenge": schema.ListNestedBlock{
								CustomType: fwtypes.NewListNestedObjectTypeOf[challengeActionModel](ctx),
								Validators: []validator.List{
									listvalidator.SizeAtMost(1),
								},
								NestedObject: schema.NestedBlockObject{
									Blocks: map[string]schema.Block{
										"custom_request_handling": schema.ListNestedBlock{
											CustomType: fwtypes.NewListNestedObjectTypeOf[customRequestHandlingModel](ctx),
											Validators: []validator.List{
												listvalidator.SizeAtMost(1),
											},
											NestedObject: schema.NestedBlockObject{
												Blocks: map[string]schema.Block{
													"insert_header": schema.ListNestedBlock{
														CustomType: fwtypes.NewListNestedObjectTypeOf[insertHeaderModel](ctx),
														Validators: []validator.List{
															listvalidator.SizeAtLeast(1),
														},
														NestedObject: schema.NestedBlockObject{
															Attributes: map[string]schema.Attribute{
																names.AttrName: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 64),
																	},
																},
																names.AttrValue: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 255),
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							"count": schema.ListNestedBlock{
								CustomType: fwtypes.NewListNestedObjectTypeOf[countActionModel](ctx),
								Validators: []validator.List{
									listvalidator.SizeAtMost(1),
								},
								NestedObject: schema.NestedBlockObject{
									Blocks: map[string]schema.Block{
										"custom_request_handling": schema.ListNestedBlock{
											CustomType: fwtypes.NewListNestedObjectTypeOf[customRequestHandlingModel](ctx),
											Validators: []validator.List{
												listvalidator.SizeAtMost(1),
											},
											NestedObject: schema.NestedBlockObject{
												Blocks: map[string]schema.Block{
													"insert_header": schema.ListNestedBlock{
														CustomType: fwtypes.NewListNestedObjectTypeOf[insertHeaderModel](ctx),
														Validators: []validator.List{
															listvalidator.SizeAtLeast(1),
														},
														NestedObject: schema.NestedBlockObject{
															Attributes: map[string]schema.Attribute{
																names.AttrName: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 64),
																	},
																},
																names.AttrValue: schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		stringvalidator.LengthBetween(1, 255),
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					Description: "Action to use in place of the rule action.",
				},
			},
		},
		Description: "Action settings to use in place of rule actions configured inside the rule group. You can specify up to 100 overrides.",
	}
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"rule_name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 128),
				},
				Description: "Name of the rule to create in the Web ACL that references the rule group.",
			},
			names.AttrPriority: schema.Int32Attribute{
				Required: true,
				Validators: []validator.Int32{
					int32validator.AtLeast(0),
				},
				Description: "Priority of the rule within the Web ACL.",
			},
			"web_acl_arn": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					fwvalidators.ARN(),
				},
				Description: "ARN of the Web ACL to associate the Rule Group with.",
			},
			"override_action": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(overrideActionNone, overrideActionCount),
				},
				Description: "Override action for the rule group. Valid values are 'none' and 'count'. Defaults to 'none'.",
			},
		},
		Blocks: map[string]schema.Block{
			"rule_group_reference": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[ruleGroupReferenceModel](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
					listvalidator.SizeAtLeast(0),
					listvalidator.ExactlyOneOf(path.MatchRelative().AtParent().AtName("managed_rule_group")),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrARN: schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							Validators: []validator.String{
								fwvalidators.ARN(),
							},
							Description: "ARN of the Rule Group to associate with the Web ACL.",
						},
					},
					Blocks: map[string]schema.Block{
						"rule_action_override": ruleActionOverrideLNB,
					},
				},
				Description: "Rule Group reference configuration.",
			},
			"managed_rule_group": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[managedRuleGroupModel](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
					listvalidator.SizeAtLeast(0),
					listvalidator.ExactlyOneOf(path.MatchRelative().AtParent().AtName("rule_group_reference")),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrName: schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 128),
							},
							Description: "Name of the managed rule group.",
						},
						"vendor_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 128),
							},
							Description: "Name of the managed rule group vendor.",
						},
						names.AttrVersion: schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 64),
							},
							Description: "Version of the managed rule group. Omit this to use the default version.",
						},
					},
					Blocks: map[string]schema.Block{
						"rule_action_override": ruleActionOverrideLNB,
					},
				},
				Description: "Managed rule group configuration.",
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
		Description: "Associates a WAFv2 Rule Group (custom or managed) with a Web ACL by adding a rule that references the Rule Group.",
	}
}
