package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"errors"
	"fmt"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandFieldToMatch(l []any) *awstypes.FieldToMatch {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	m := l[0].(map[string]any)
	f := &awstypes.FieldToMatch{}

	if v, ok := m["all_query_arguments"]; ok && len(v.([]any)) > 0 {
		f.AllQueryArguments = &awstypes.AllQueryArguments{}
	}

	if v, ok := m["body"]; ok && len(v.([]any)) > 0 {
		f.Body = expandBody(v.([]any))
	}

	if v, ok := m["cookies"]; ok && len(v.([]any)) > 0 {
		f.Cookies = expandCookies(m["cookies"].([]any))
	}

	if v, ok := m["header_order"]; ok && len(v.([]any)) > 0 {
		f.HeaderOrder = expandHeaderOrder(m["header_order"].([]any))
	}

	if v, ok := m["headers"]; ok && len(v.([]any)) > 0 {
		f.Headers = expandHeaders(m["headers"].([]any))
	}

	if v, ok := m["json_body"]; ok && len(v.([]any)) > 0 {
		f.JsonBody = expandJSONBody(v.([]any))
	}

	if v, ok := m["method"]; ok && len(v.([]any)) > 0 {
		f.Method = &awstypes.Method{}
	}

	if v, ok := m["query_string"]; ok && len(v.([]any)) > 0 {
		f.QueryString = &awstypes.QueryString{}
	}

	if v, ok := m["single_header"]; ok && len(v.([]any)) > 0 {
		f.SingleHeader = expandSingleHeader(m["single_header"].([]any))
	}

	if v, ok := m["ja3_fingerprint"]; ok && len(v.([]any)) > 0 {
		f.JA3Fingerprint = expandJA3Fingerprint(v.([]any))
	}

	if v, ok := m["ja4_fingerprint"]; ok && len(v.([]any)) > 0 {
		f.JA4Fingerprint = expandJA4Fingerprint(v.([]any))
	}

	if v, ok := m["single_query_argument"]; ok && len(v.([]any)) > 0 {
		f.SingleQueryArgument = expandSingleQueryArgument(m["single_query_argument"].([]any))
	}

	if v, ok := m["uri_fragment"]; ok && len(v.([]any)) > 0 {
		f.UriFragment = expandURIFragment(v.([]any))
	}

	if v, ok := m["uri_path"]; ok && len(v.([]any)) > 0 {
		f.UriPath = &awstypes.UriPath{}
	}

	return f
}
