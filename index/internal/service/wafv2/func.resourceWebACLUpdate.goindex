package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWebACLUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WAFV2Client(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		aclName := d.Get(names.AttrName).(string)
		aclScope := d.Get(names.AttrScope).(string)
		aclLockToken := d.Get("lock_token").(string)
		// Find the AWS managed ShieldMitigationRuleGroup group rule if existent and add it into the set of rules to update
		// so that the provider will not remove the Shield rule when changes are applied to the WebACL.
		var rules []awstypes.Rule

		rules = expandWebACLRules(d.Get(names.AttrRule).(*schema.Set).List())
		if sr := findShieldRule(rules); len(sr) == 0 {
			output, err := findWebACLByThreePartKey(ctx, conn, d.Id(), aclName, aclScope)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "reading WAFv2 WebACL (%s): %s", d.Id(), err)
			}

			rules = append(rules, findShieldRule(output.WebACL.Rules)...)
		}

		if v, ok := d.GetOk("rule_json"); ok {
			r, err := expandWebACLRulesJSON(v.(string))
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "expanding WAFv2 WebACL JSON rule (%s): %s", d.Id(), err)
			}
			if sr := findShieldRule(rules); len(sr) == 0 {
				output, err := findWebACLByThreePartKey(ctx, conn, d.Id(), aclName, aclScope)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "reading WAFv2 WebACL (%s): %s", d.Id(), err)
				}

				r = append(r, findShieldRule(output.WebACL.Rules)...)
			}
			rules = r
		}

		input := &wafv2.UpdateWebACLInput{
			AssociationConfig:    expandAssociationConfig(d.Get("association_config").([]any)),
			CaptchaConfig:        expandCaptchaConfig(d.Get("captcha_config").([]any)),
			ChallengeConfig:      expandChallengeConfig(d.Get("challenge_config").([]any)),
			DataProtectionConfig: expandDataProtectionConfig(d.Get("data_protection_config").([]any)),
			DefaultAction:        expandDefaultAction(d.Get(names.AttrDefaultAction).([]any)),
			Id:                   aws.String(d.Id()),
			LockToken:            aws.String(aclLockToken),
			Name:                 aws.String(aclName),
			Rules:                rules,
			Scope:                awstypes.Scope(aclScope),
			VisibilityConfig:     expandVisibilityConfig(d.Get("visibility_config").([]any)),
		}

		if v, ok := d.GetOk("custom_response_body"); ok && v.(*schema.Set).Len() > 0 {
			input.CustomResponseBodies = expandCustomResponseBodies(v.(*schema.Set).List())
		}

		if v, ok := d.GetOk(names.AttrDescription); ok {
			input.Description = aws.String(v.(string))
		}

		if v, ok := d.GetOk("token_domains"); ok {
			input.TokenDomains = flex.ExpandStringValueSet(v.(*schema.Set))
		}

		const (
			timeout = 5 * time.Minute
		)
		_, err := tfresource.RetryWhenIsA[*awstypes.WAFUnavailableEntityException](ctx, timeout, func() (any, error) {
			return conn.UpdateWebACL(ctx, input)
		})

		if errs.IsA[*awstypes.WAFOptimisticLockException](err) {
			var output *wafv2.GetWebACLOutput
			output, err = findWebACLByThreePartKey(ctx, conn, d.Id(), aclName, aclScope)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "reading WAFv2 WebACL (%s): %s", d.Id(), err)
			}

			if newLockToken := aws.ToString(output.LockToken); newLockToken != aclLockToken {
				// Retrieved a new lock token, retry due to other processes modifying the web acl out of band (See: https://docs.aws.amazon.com/sdk-for-go/api/service/shield/#Shield.EnableApplicationLayerAutomaticResponse)
				input.LockToken = aws.String(newLockToken)
				_, err = tfresource.RetryWhenIsOneOf2[*awstypes.WAFAssociatedItemException, *awstypes.WAFUnavailableEntityException](ctx, timeout, func() (any, error) {
					return conn.UpdateWebACL(ctx, input)
				})

				if errs.IsA[*awstypes.WAFOptimisticLockException](err) {
					return sdkdiag.AppendErrorf(diags, "updating WAFv2 WebACL (%s), resource has changed since last refresh please run a new plan before applying again: %s", d.Id(), err)
				}
			}
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WAFv2 WebACL (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceWebACLRead(ctx, d, meta)...)
}
