package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRegexPatternSetUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WAFV2Client(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &wafv2.UpdateRegexPatternSetInput{
			Id:                    aws.String(d.Id()),
			LockToken:             aws.String(d.Get("lock_token").(string)),
			Name:                  aws.String(d.Get(names.AttrName).(string)),
			RegularExpressionList: []awstypes.Regex{},
			Scope:                 awstypes.Scope(d.Get(names.AttrScope).(string)),
		}

		if v, ok := d.GetOk(names.AttrDescription); ok {
			input.Description = aws.String(v.(string))
		}

		if v, ok := d.GetOk("regular_expression"); ok && v.(*schema.Set).Len() > 0 {
			input.RegularExpressionList = expandRegexPatternSet(v.(*schema.Set).List())
		}

		log.Printf("[INFO] Updating WAFv2 RegexPatternSet: %s", d.Id())
		_, err := conn.UpdateRegexPatternSet(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WAFv2 RegexPatternSet (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceRegexPatternSetRead(ctx, d, meta)...)
}
