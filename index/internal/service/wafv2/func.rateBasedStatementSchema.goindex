package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"math"
	"sync"

	"github.com/YakDriver/regexache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func rateBasedStatementSchema(level int) *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeList,
		Optional: true,
		MaxItems: 1,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				"aggregate_key_type": {
					Type:             schema.TypeString,
					Optional:         true,
					Default:          awstypes.RateBasedStatementAggregateKeyTypeIp,
					ValidateDiagFunc: enum.Validate[awstypes.RateBasedStatementAggregateKeyType](),
				},
				"custom_key": {
					Type:     schema.TypeList,
					Optional: true,
					MinItems: 1,
					MaxItems: 5,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"asn": emptySchema(),
							"cookie": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.StringLenBetween(1, 64),
										},
										"text_transformation": textTransformationSchema(),
									},
								},
							},
							"forwarded_ip": emptySchema(),
							"http_method":  emptySchema(),
							names.AttrHeader: {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.StringLenBetween(1, 64),
										},
										"text_transformation": textTransformationSchema(),
									},
								},
							},
							"ip":              emptySchema(),
							"ja3_fingerprint": rateLimitJAFingerprintConfigSchema(),
							"ja4_fingerprint": rateLimitJAFingerprintConfigSchema(),
							"label_namespace": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrNamespace: {
											Type:     schema.TypeString,
											Required: true,
											ValidateFunc: validation.All(
												validation.StringLenBetween(1, 1024),
												validation.StringMatch(regexache.MustCompile(`^[0-9A-Za-z_\-:]+$`), "must contain only alphanumeric, underscore, hyphen, and colon characters"),
											),
										},
									},
								},
							},
							"query_argument": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrName: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.StringLenBetween(1, 64),
										},
										"text_transformation": textTransformationSchema(),
									},
								},
							},
							"query_string": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"text_transformation": textTransformationSchema(),
									},
								},
							},
							"uri_path": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"text_transformation": textTransformationSchema(),
									},
								},
							},
						},
					},
				},
				"evaluation_window_sec": {
					Type:         schema.TypeInt,
					Optional:     true,
					Default:      300,
					ValidateFunc: validation.IntInSlice([]int{60, 120, 300, 600}),
				},
				"forwarded_ip_config": forwardedIPConfigSchema(),
				"limit": {
					Type:         schema.TypeInt,
					Required:     true,
					ValidateFunc: validation.IntBetween(10, 2000000000),
				},
				"scope_down_statement": scopeDownStatementSchema(level - 1),
			},
		},
	}
}
