package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkretry "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tfcloudfront "github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findWebACLByCloudFrontDistributionARN(ctx context.Context, client *conns.AWSClient, distributionARN string) (*awstypes.WebACL, error) {
	// Extract distribution ID from ARN
	distributionID, err := cloudFrontDistributionIDFromARN(distributionARN)
	if err != nil {
		return nil, err
	}

	output, err := tfcloudfront.FindDistributionByID(ctx, client.CloudFrontClient(ctx), distributionID)

	if err != nil {
		return nil, fmt.Errorf("getting CloudFront distribution (%s): %w", distributionID, err)
	}

	webACLARN := aws.ToString(output.Distribution.DistributionConfig.WebACLId)
	if webACLARN == "" {
		return nil, &sdkretry.NotFoundError{
			Message: fmt.Sprintf("no WebACL associated with CloudFront distribution: %s", distributionID),
		}
	}

	// Now get the actual WebACL using WAFv2 API
	wafConn := client.WAFV2Client(ctx)

	if !strings.Contains(webACLARN, ":wafv2:") || !arn.IsARN(webACLARN) {
		// This would be a WAF Classic ID, not supported by this data source
		return nil, fmt.Errorf("CloudFront distribution (%s) is associated with WAF Classic WebACL (%s), which is not supported by this data source. Use aws_waf_web_acl data source instead", distributionID, webACLARN)
	}

	// Parse the ARN to extract name and ID
	// WAFv2 ARN format: arn:partition:wafv2:region:account:global/webacl/name/id
	parts := strings.Split(webACLARN, "/")
	if len(parts) < 4 {
		return nil, fmt.Errorf("invalid WAFv2 WebACL ARN format: %s", webACLARN)
	}

	webACLName := parts[len(parts)-2]
	webACLID := parts[len(parts)-1]

	var webACLOut *wafv2.GetWebACLOutput
	if webACLOut, err = findWebACLByThreePartKey(ctx, wafConn, webACLID, webACLName, string(awstypes.ScopeCloudfront)); err != nil {
		return nil, fmt.Errorf("finding WAFv2 WebACL (%s): %w", webACLARN, err)
	}
	if webACLOut == nil {
		return nil, &sdkretry.NotFoundError{
			Message: fmt.Sprintf("no WAFv2 WebACL found: %s", webACLARN),
		}
	}

	return webACLOut.WebACL, nil
}
