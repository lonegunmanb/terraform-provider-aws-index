package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"errors"
	"fmt"
	"reflect"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandManagedRuleGroupConfigs(tfList []any) []awstypes.ManagedRuleGroupConfig {
	if len(tfList) == 0 {
		return nil
	}

	var out []awstypes.ManagedRuleGroupConfig
	for _, item := range tfList {
		m, ok := item.(map[string]any)
		if !ok {
			continue
		}

		var r awstypes.ManagedRuleGroupConfig
		if v, ok := m["aws_managed_rules_bot_control_rule_set"].([]any); ok && len(v) > 0 {
			r.AWSManagedRulesBotControlRuleSet = expandManagedRulesBotControlRuleSet(v)
		}
		if v, ok := m["aws_managed_rules_acfp_rule_set"].([]any); ok && len(v) > 0 {
			r.AWSManagedRulesACFPRuleSet = expandManagedRulesACFPRuleSet(v)
		}
		if v, ok := m["aws_managed_rules_anti_ddos_rule_set"].([]any); ok && len(v) > 0 {
			r.AWSManagedRulesAntiDDoSRuleSet = expandManagedRulesAntiDDoSRuleSet(v)
		}
		if v, ok := m["aws_managed_rules_atp_rule_set"].([]any); ok && len(v) > 0 {
			r.AWSManagedRulesATPRuleSet = expandManagedRulesATPRuleSet(v)
		}
		if v, ok := m["login_path"].(string); ok && v != "" {
			r.LoginPath = aws.String(v)
		}
		if v, ok := m["payload_type"].(string); ok && v != "" {
			r.PayloadType = awstypes.PayloadType(v)
		}
		if v, ok := m["password_field"].([]any); ok && len(v) > 0 {
			r.PasswordField = expandPasswordField(v)
		}
		if v, ok := m["username_field"].([]any); ok && len(v) > 0 {
			r.UsernameField = expandUsernameField(v)
		}

		out = append(out, r)
	}

	return out
}
