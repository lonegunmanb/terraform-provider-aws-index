package github.com/hashicorp/terraform-provider-aws/internal/service/wafv2
import (
	"math"
	"sync"

	"github.com/YakDriver/regexache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (c *schemaCache) get(level int) *schema.Schema {
	c.once.Do(func() {
		// Initialize the first element
		c.values[0] = schema.Schema{
			Type:     schema.TypeList,
			Optional: true,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"statement": {
						Type:     schema.TypeList,
						Required: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"asn_match_statement":                   asnMatchStatementSchema(),
								"byte_match_statement":                  byteMatchStatementSchema(),
								"geo_match_statement":                   geoMatchStatementSchema(),
								"ip_set_reference_statement":            ipSetReferenceStatementSchema(),
								"label_match_statement":                 labelMatchStatementSchema(),
								"regex_match_statement":                 regexMatchStatementSchema(),
								"regex_pattern_set_reference_statement": regexPatternSetReferenceStatementSchema(),
								"size_constraint_statement":             sizeConstraintSchema(),
								"sqli_match_statement":                  sqliMatchStatementSchema(),
								"xss_match_statement":                   xssMatchStatementSchema(),
							},
						},
					},
				},
			},
		}

		// Initialize the rest of the elements
		previous := &c.values[0]
		for i := 1; i < statementSchemaCacheSize; i++ {
			c.values[i] = schema.Schema{
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"statement": {
							Type:     schema.TypeList,
							Required: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"and_statement":                         previous,
									"asn_match_statement":                   asnMatchStatementSchema(),
									"byte_match_statement":                  byteMatchStatementSchema(),
									"geo_match_statement":                   geoMatchStatementSchema(),
									"ip_set_reference_statement":            ipSetReferenceStatementSchema(),
									"label_match_statement":                 labelMatchStatementSchema(),
									"not_statement":                         previous,
									"or_statement":                          previous,
									"regex_match_statement":                 regexMatchStatementSchema(),
									"regex_pattern_set_reference_statement": regexPatternSetReferenceStatementSchema(),
									"size_constraint_statement":             sizeConstraintSchema(),
									"sqli_match_statement":                  sqliMatchStatementSchema(),
									"xss_match_statement":                   xssMatchStatementSchema(),
								},
							},
						},
					},
				},
			}
			previous = &c.values[i]
		}
	})

	return &c.values[level-1]
}
