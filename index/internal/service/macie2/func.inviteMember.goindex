package github.com/hashicorp/terraform-provider-aws/internal/service/macie2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/macie2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/macie2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func inviteMember(ctx context.Context, conn *macie2.Client, d *schema.ResourceData, timeout time.Duration) error {
	input := macie2.CreateInvitationsInput{
		AccountIds: []string{d.Id()},
	}

	if v, ok := d.GetOk("invitation_disable_email_notification"); ok {
		input.DisableEmailNotification = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk("invitation_message"); ok {
		input.Message = aws.String(v.(string))
	}

	outputRaw, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, timeout, func(ctx context.Context) (any, error) {
		return conn.CreateInvitations(ctx, &input)
	}, errCodeClientError)

	if err == nil {
		if output := outputRaw.(*macie2.CreateInvitationsOutput); output != nil {
			err = unprocessedAccountsError(output.UnprocessedAccounts)
		}
	}

	if err != nil {
		return fmt.Errorf("inviting Macie Member (%s): %w", d.Id(), err)
	}

	if _, err := waitMemberInvited(ctx, conn, d.Id()); err != nil {
		return fmt.Errorf("waiting for Macie Member (%s) invite: %s", d.Id(), err)
	}

	return nil
}
