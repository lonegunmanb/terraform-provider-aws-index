package github.com/hashicorp/terraform-provider-aws/internal/service/macie2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/macie2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/macie2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClassificationExportConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).Macie2Client(ctx)

	input := macie2.GetClassificationExportConfigurationInput{} // api does not have a getById() like endpoint.
	output, err := conn.GetClassificationExportConfiguration(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Macie classification export configuration failed: %s", err)
	}

	if (awstypes.ClassificationExportConfiguration{}) != *output.Configuration { // nosemgrep:ci.semgrep.aws.prefer-pointer-conversion-conditional
		if (awstypes.S3Destination{}) != *output.Configuration.S3Destination { // nosemgrep:ci.semgrep.aws.prefer-pointer-conversion-conditional
			var flattenedS3Destination = flattenClassificationExportConfigurationS3DestinationResult(output.Configuration.S3Destination)
			if err := d.Set("s3_destination", []any{flattenedS3Destination}); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting Macie classification export configuration s3_destination: %s", err)
			}
		}
	}

	return diags
}
