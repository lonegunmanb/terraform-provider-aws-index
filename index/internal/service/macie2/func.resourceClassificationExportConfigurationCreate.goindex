package github.com/hashicorp/terraform-provider-aws/internal/service/macie2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/macie2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/macie2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClassificationExportConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).Macie2Client(ctx)

	if d.IsNewResource() {
		output, err := conn.GetClassificationExportConfiguration(ctx, &macie2.GetClassificationExportConfigurationInput{})
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Macie classification export configuration failed: %s", err)
		}

		if (awstypes.ClassificationExportConfiguration{}) != *output.Configuration { // nosemgrep:ci.semgrep.aws.prefer-pointer-conversion-conditional
			return sdkdiag.AppendErrorf(diags, "creating Macie classification export configuration: a configuration already exists")
		}
	}

	input := macie2.PutClassificationExportConfigurationInput{
		Configuration: &awstypes.ClassificationExportConfiguration{
			S3Destination: expandClassificationExportConfiguration(d.Get("s3_destination").([]any)[0].(map[string]any)),
		},
	}

	_, err := conn.PutClassificationExportConfiguration(ctx, &input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Macie classification export configuration failed: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))

	return append(diags, resourceClassificationExportConfigurationRead(ctx, d, meta)...)
}
