package github.com/hashicorp/terraform-provider-aws/internal/service/macie2
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/macie2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/macie2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClassificationExportConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).Macie2Client(ctx)

	input := macie2.PutClassificationExportConfigurationInput{
		Configuration: &awstypes.ClassificationExportConfiguration{},
	}

	if v, ok := d.GetOk("s3_destination"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Configuration.S3Destination = expandClassificationExportConfiguration(v.([]any)[0].(map[string]any))
	} else {
		input.Configuration.S3Destination = nil
	}

	_, err := conn.PutClassificationExportConfiguration(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Macie classification export configuration failed: %s", err)
	}

	return append(diags, resourceClassificationExportConfigurationRead(ctx, d, meta)...)
}
