package github.com/hashicorp/terraform-provider-aws/internal/service/bcmdataexports
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeExportResourceStateFromV0(ctx context.Context, request resource.UpgradeStateRequest, response *resource.UpgradeStateResponse) {
	var exportDataV0 exportResourceModelV0
	response.Diagnostics.Append(request.State.Get(ctx, &exportDataV0)...)
	if response.Diagnostics.HasError() {
		return
	}

	exportData := exportResourceModel{
		ARN:      exportDataV0.ID,
		Export:   exportDataV0.Export,
		ID:       exportDataV0.ID,
		Tags:     exportDataV0.Tags,
		TagsAll:  exportDataV0.TagsAll,
		Timeouts: exportDataV0.Timeouts,
	}

	response.Diagnostics.Append(response.State.Set(ctx, exportData)...)
}
