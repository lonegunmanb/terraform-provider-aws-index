package github.com/hashicorp/terraform-provider-aws/internal/service/location
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/location"
	awstypes "github.com/aws/aws-sdk-go-v2/service/location/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func FindTrackerAssociationByTrackerNameAndConsumerARN(ctx context.Context, conn *location.Client, trackerName, consumerARN string) error {
	in := &location.ListTrackerConsumersInput{
		TrackerName: aws.String(trackerName),
	}

	found := false

	pages := location.NewListTrackerConsumersPaginator(conn, in)

	for pages.HasMorePages() && !found {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return err
		}

		if slices.Contains(page.ConsumerArns, consumerARN) {
			found = true
		}
	}

	if !found {
		return &retry.NotFoundError{}
	}

	return nil
}
