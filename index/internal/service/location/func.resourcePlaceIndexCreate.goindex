package github.com/hashicorp/terraform-provider-aws/internal/service/location
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/location"
	awstypes "github.com/aws/aws-sdk-go-v2/service/location/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePlaceIndexCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LocationClient(ctx)

	input := &location.CreatePlaceIndexInput{
		Tags: getTagsIn(ctx),
	}

	if v, ok := d.GetOk("data_source"); ok {
		input.DataSource = aws.String(v.(string))
	}

	if v, ok := d.GetOk("data_source_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DataSourceConfiguration = expandDataSourceConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("index_name"); ok {
		input.IndexName = aws.String(v.(string))
	}

	output, err := conn.CreatePlaceIndex(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating place index: %s", err)
	}

	if output == nil {
		return sdkdiag.AppendErrorf(diags, "creating place index: empty result")
	}

	d.SetId(aws.ToString(output.IndexName))

	return append(diags, resourcePlaceIndexRead(ctx, d, meta)...)
}
