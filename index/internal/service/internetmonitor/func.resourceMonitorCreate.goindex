package github.com/hashicorp/terraform-provider-aws/internal/service/internetmonitor
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMonitorCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).InternetMonitorClient(ctx)

	name := d.Get("monitor_name").(string)
	input := &internetmonitor.CreateMonitorInput{
		ClientToken: aws.String(id.UniqueId()),
		MonitorName: aws.String(name),
		Tags:        getTagsIn(ctx),
	}

	if v, ok := d.GetOk("health_events_config"); ok {
		input.HealthEventsConfig = expandHealthEventsConfig(v.([]any))
	}

	if v, ok := d.GetOk("internet_measurements_log_delivery"); ok {
		input.InternetMeasurementsLogDelivery = expandInternetMeasurementsLogDelivery(v.([]any))
	}

	if v, ok := d.GetOk("max_city_networks_to_monitor"); ok {
		input.MaxCityNetworksToMonitor = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk(names.AttrResources); ok && v.(*schema.Set).Len() > 0 {
		input.Resources = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("traffic_percentage_to_monitor"); ok {
		input.TrafficPercentageToMonitor = aws.Int32(int32(v.(int)))
	}

	_, err := conn.CreateMonitor(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Internet Monitor Monitor (%s): %s", name, err)
	}

	d.SetId(name)

	if err := waitMonitor(ctx, conn, d.Id(), types.MonitorConfigStateActive); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Internet Monitor Monitor (%s) create: %s", d.Id(), err)
	}

	if v, ok := d.GetOk(names.AttrStatus); ok {
		if v := types.MonitorConfigState(v.(string)); v != types.MonitorConfigStateActive {
			input := &internetmonitor.UpdateMonitorInput{
				ClientToken: aws.String(id.UniqueId()),
				MonitorName: aws.String(d.Id()),
				Status:      v,
			}

			_, err := conn.UpdateMonitor(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating Internet Monitor Monitor (%s): %s", d.Id(), err)
			}

			if err := waitMonitor(ctx, conn, d.Id(), v); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for Internet Monitor Monitor (%s) INACTIVE: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceMonitorRead(ctx, d, meta)...)
}
