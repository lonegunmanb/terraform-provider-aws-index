package github.com/hashicorp/terraform-provider-aws/internal/service/internetmonitor
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMonitorUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).InternetMonitorClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &internetmonitor.UpdateMonitorInput{
			ClientToken: aws.String(id.UniqueId()),
			MonitorName: aws.String(d.Id()),
		}

		if d.HasChange("health_events_config") {
			input.HealthEventsConfig = expandHealthEventsConfig(d.Get("health_events_config").([]any))
		}

		if d.HasChange("internet_measurements_log_delivery") {
			input.InternetMeasurementsLogDelivery = expandInternetMeasurementsLogDelivery(d.Get("internet_measurements_log_delivery").([]any))
		}

		if d.HasChange("max_city_networks_to_monitor") {
			input.MaxCityNetworksToMonitor = aws.Int32(int32(d.Get("max_city_networks_to_monitor").(int)))
		}

		if d.HasChange(names.AttrResources) {
			o, n := d.GetChange(names.AttrResources)
			os, ns := o.(*schema.Set), n.(*schema.Set)
			if add := flex.ExpandStringValueSet(ns.Difference(os)); len(add) > 0 {
				input.ResourcesToAdd = add
			}
			if remove := flex.ExpandStringValueSet(os.Difference(ns)); len(remove) > 0 {
				input.ResourcesToRemove = remove
			}
		}

		status := types.MonitorConfigState(d.Get(names.AttrStatus).(string))
		if d.HasChange(names.AttrStatus) {
			input.Status = status
		}

		if d.HasChange("traffic_percentage_to_monitor") {
			input.TrafficPercentageToMonitor = aws.Int32(int32(d.Get("traffic_percentage_to_monitor").(int)))
		}

		_, err := conn.UpdateMonitor(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Internet Monitor Monitor (%s): %s", d.Id(), err)
		}

		if err := waitMonitor(ctx, conn, d.Id(), status); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Internet Monitor Monitor (%s) %s: %s", d.Id(), status, err)
		}
	}

	return append(diags, resourceMonitorRead(ctx, d, meta)...)
}
