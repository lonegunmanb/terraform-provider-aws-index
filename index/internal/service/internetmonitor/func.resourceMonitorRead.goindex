package github.com/hashicorp/terraform-provider-aws/internal/service/internetmonitor
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMonitorRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).InternetMonitorClient(ctx)

	monitor, err := findMonitorByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Internet Monitor Monitor (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Internet Monitor Monitor (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, monitor.MonitorArn)
	if err := d.Set("health_events_config", flattenHealthEventsConfig(monitor.HealthEventsConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting health_events_config: %s", err)
	}
	if err := d.Set("internet_measurements_log_delivery", flattenInternetMeasurementsLogDelivery(monitor.InternetMeasurementsLogDelivery)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting internet_measurements_log_delivery: %s", err)
	}
	d.Set("monitor_name", monitor.MonitorName)
	d.Set("max_city_networks_to_monitor", monitor.MaxCityNetworksToMonitor)
	d.Set(names.AttrResources, flex.FlattenStringValueSet(monitor.Resources))
	d.Set(names.AttrStatus, monitor.Status)
	d.Set("traffic_percentage_to_monitor", monitor.TrafficPercentageToMonitor)

	setTagsOut(ctx, monitor.Tags)

	return diags
}
