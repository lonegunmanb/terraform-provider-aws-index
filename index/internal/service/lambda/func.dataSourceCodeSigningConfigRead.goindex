package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCodeSigningConfigRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)

	arn := d.Get(names.AttrARN).(string)
	output, err := findCodeSigningConfigByARN(ctx, conn, arn)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Lambda Code Signing Config (%s): %s", arn, err)
	}

	d.SetId(aws.ToString(output.CodeSigningConfigArn))
	if err := d.Set("allowed_publishers", flattenAllowedPublishers(output.AllowedPublishers)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting allowed_publishers: %s", err)
	}
	d.Set("config_id", output.CodeSigningConfigId)
	d.Set(names.AttrDescription, output.Description)
	d.Set("last_modified", output.LastModified)
	if err := d.Set("policies", []any{map[string]any{
		"untrusted_artifact_on_deployment": output.CodeSigningPolicies.UntrustedArtifactOnDeployment,
	}}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting policies: %s", err)
	}

	return diags
}
