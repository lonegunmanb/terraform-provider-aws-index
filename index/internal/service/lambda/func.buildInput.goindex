package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"crypto/md5"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func buildInput(d *schema.ResourceData, action invocationAction) ([]byte, error) {
	if isCreateOnlyScope(d) {
		jsonBytes := []byte(d.Get("input").(string))
		return jsonBytes, nil
	}
	oldInputMap, newInputMap, err := getInputChange(d)
	if err != nil {
		log.Printf("[DEBUG] input serialization %s", err)
		return nil, err
	}

	newInputMap[d.Get("terraform_key").(string)] = map[string]any{
		names.AttrAction: action,
		"prev_input":     oldInputMap,
	}
	return json.Marshal(&newInputMap)
}
