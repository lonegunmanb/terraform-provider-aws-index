package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFunctionEventInvokeConfigCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)

	functionName := d.Get("function_name").(string)
	qualifier := d.Get("qualifier").(string)
	id := functionName
	if qualifier != "" {
		id = fmt.Sprintf("%s:%s", functionName, qualifier)
	}
	input := &lambda.PutFunctionEventInvokeConfigInput{
		DestinationConfig:    expandFunctionEventInvokeConfigDestinationConfig(d.Get("destination_config").([]any)),
		FunctionName:         aws.String(functionName),
		MaximumRetryAttempts: aws.Int32(int32(d.Get("maximum_retry_attempts").(int))),
	}

	if qualifier != "" {
		input.Qualifier = aws.String(qualifier)
	}

	if v, ok := d.GetOk("maximum_event_age_in_seconds"); ok {
		input.MaximumEventAgeInSeconds = aws.Int32(int32(v.(int)))
	}

	// Retry for destination validation eventual consistency errors.
	_, err := tfresource.RetryWhen(ctx, iamPropagationTimeout,
		func(ctx context.Context) (any, error) {
			return conn.PutFunctionEventInvokeConfig(ctx, input)
		},
		func(err error) (bool, error) {
			// InvalidParameterValueException: The destination ARN arn:PARTITION:SERVICE:REGION:ACCOUNT:RESOURCE is invalid.
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "destination ARN") {
				return true, err
			}

			// InvalidParameterValueException: The function's execution role does not have permissions to call Publish on arn:...
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "does not have permissions") {
				return true, err
			}

			return false, err
		},
	)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Lambda Function Event Invoke Config (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceFunctionEventInvokeConfigRead(ctx, d, meta)...)
}
