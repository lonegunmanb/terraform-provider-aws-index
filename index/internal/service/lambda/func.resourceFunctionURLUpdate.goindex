package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFunctionURLUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)

	name, qualifier, err := functionURLParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	input := &lambda.UpdateFunctionUrlConfigInput{
		FunctionName: aws.String(name),
	}

	if qualifier != "" {
		input.Qualifier = aws.String(qualifier)
	}

	if d.HasChange("authorization_type") {
		input.AuthType = awstypes.FunctionUrlAuthType(d.Get("authorization_type").(string))
	}

	if d.HasChange("cors") {
		if v, ok := d.GetOk("cors"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.Cors = expandCors(v.([]any)[0].(map[string]any))
		} else {
			input.Cors = &awstypes.Cors{}
		}
	}

	if d.HasChange("invoke_mode") {
		input.InvokeMode = awstypes.InvokeMode(d.Get("invoke_mode").(string))
	}

	_, err = conn.UpdateFunctionUrlConfig(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Lambda Function URL (%s): %s", d.Id(), err)
	}

	return append(diags, resourceFunctionURLRead(ctx, d, meta)...)
}
