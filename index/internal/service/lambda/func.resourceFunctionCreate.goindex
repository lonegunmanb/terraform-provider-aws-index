package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFunctionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)

	functionName := d.Get("function_name").(string)
	packageType := awstypes.PackageType(d.Get("package_type").(string))
	input := &lambda.CreateFunctionInput{
		Code:         &awstypes.FunctionCode{},
		Description:  aws.String(d.Get(names.AttrDescription).(string)),
		FunctionName: aws.String(functionName),
		MemorySize:   aws.Int32(int32(d.Get("memory_size").(int))),
		PackageType:  packageType,
		Publish:      d.Get("publish").(bool),
		Role:         aws.String(d.Get(names.AttrRole).(string)),
		Tags:         getTagsIn(ctx),
		Timeout:      aws.Int32(int32(d.Get(names.AttrTimeout).(int))),
	}

	if v, ok := d.GetOk("filename"); ok {
		// Grab an exclusive lock so that we're only reading one function into memory at a time.
		// See https://github.com/hashicorp/terraform/issues/9364.
		conns.GlobalMutexKV.Lock(mutexKey)
		defer conns.GlobalMutexKV.Unlock(mutexKey)

		zipFile, err := tfio.ReadFileContents(v.(string))

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading ZIP file (%s): %s", v, err)
		}

		input.Code.ZipFile = zipFile
	} else if v, ok := d.GetOk("image_uri"); ok {
		input.Code.ImageUri = aws.String(v.(string))
	} else {
		input.Code.S3Bucket = aws.String(d.Get(names.AttrS3Bucket).(string))
		input.Code.S3Key = aws.String(d.Get("s3_key").(string))
		if v, ok := d.GetOk("s3_object_version"); ok {
			input.Code.S3ObjectVersion = aws.String(v.(string))
		}
	}

	if v, ok := d.GetOk("architectures"); ok && len(v.([]any)) > 0 {
		input.Architectures = flex.ExpandStringyValueList[awstypes.Architecture](v.([]any))
	}

	if v, ok := d.GetOk("code_signing_config_arn"); ok {
		input.CodeSigningConfigArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("dead_letter_config"); ok && len(v.([]any)) > 0 {
		if v.([]any)[0] == nil {
			return sdkdiag.AppendErrorf(diags, "nil dead_letter_config supplied for function: %s", functionName)
		}

		input.DeadLetterConfig = &awstypes.DeadLetterConfig{
			TargetArn: aws.String(v.([]any)[0].(map[string]any)[names.AttrTargetARN].(string)),
		}
	}

	if v, ok := d.GetOk(names.AttrEnvironment); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		if v, ok := v.([]any)[0].(map[string]any)["variables"].(map[string]any); ok && len(v) > 0 {
			input.Environment = &awstypes.Environment{
				Variables: flex.ExpandStringValueMap(v),
			}
		}
	}

	if v, ok := d.GetOk("ephemeral_storage"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.EphemeralStorage = &awstypes.EphemeralStorage{
			Size: aws.Int32(int32(v.([]any)[0].(map[string]any)[names.AttrSize].(int))),
		}
	}

	if v, ok := d.GetOk("file_system_config"); ok && len(v.([]any)) > 0 {
		input.FileSystemConfigs = expandFileSystemConfigs(v.([]any))
	}

	if packageType == awstypes.PackageTypeZip {
		input.Handler = aws.String(d.Get("handler").(string))
		input.Runtime = awstypes.Runtime(d.Get("runtime").(string))
	}

	if v, ok := d.GetOk("image_config"); ok && len(v.([]any)) > 0 {
		input.ImageConfig = expandImageConfigs(v.([]any))
	}

	if v, ok := d.GetOk("logging_config"); ok && len(v.([]any)) > 0 {
		input.LoggingConfig = expandLoggingConfig(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrKMSKeyARN); ok {
		input.KMSKeyArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("layers"); ok && len(v.([]any)) > 0 {
		input.Layers = flex.ExpandStringValueList(v.([]any))
	}

	if v, ok := d.GetOk("snap_start"); ok {
		input.SnapStart = expandSnapStart(v.([]any))
	}

	if v, ok := d.GetOk("tracing_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.TracingConfig = &awstypes.TracingConfig{
			Mode: awstypes.TracingMode(v.([]any)[0].(map[string]any)[names.AttrMode].(string)),
		}
	}

	if v, ok := d.GetOk(names.AttrVPCConfig); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)
		input.VpcConfig = &awstypes.VpcConfig{
			Ipv6AllowedForDualStack: aws.Bool(tfMap["ipv6_allowed_for_dual_stack"].(bool)),
			SecurityGroupIds:        flex.ExpandStringValueSet(tfMap[names.AttrSecurityGroupIDs].(*schema.Set)),
			SubnetIds:               flex.ExpandStringValueSet(tfMap[names.AttrSubnetIDs].(*schema.Set)),
		}
	}

	_, err := retryFunctionOp(ctx, func() (*lambda.CreateFunctionOutput, error) {
		return conn.CreateFunction(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Lambda Function (%s): %s", functionName, err)
	}

	d.SetId(functionName)

	_, err = tfresource.RetryWhenNotFound(ctx, lambdaPropagationTimeout, func() (any, error) {
		return findFunctionByName(ctx, conn, d.Id())
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Lambda Function (%s) create: %s", d.Id(), err)
	}

	if _, err := waitFunctionCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Lambda Function (%s) create: %s", d.Id(), err)
	}

	if v, ok := d.Get("reserved_concurrent_executions").(int); ok && v >= 0 {
		_, err := conn.PutFunctionConcurrency(ctx, &lambda.PutFunctionConcurrencyInput{
			FunctionName:                 aws.String(d.Id()),
			ReservedConcurrentExecutions: aws.Int32(int32(v)),
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting Lambda Function (%s) concurrency: %s", d.Id(), err)
		}
	}

	return append(diags, resourceFunctionRead(ctx, d, meta)...)
}
