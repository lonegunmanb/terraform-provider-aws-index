package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCors(tfMap map[string]any) *awstypes.Cors {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.Cors{}

	if v, ok := tfMap["allow_credentials"].(bool); ok {
		apiObject.AllowCredentials = aws.Bool(v)
	}

	if v, ok := tfMap["allow_headers"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.AllowHeaders = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["allow_methods"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.AllowMethods = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["allow_origins"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.AllowOrigins = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["expose_headers"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.ExposeHeaders = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["max_age"].(int); ok && v != 0 {
		apiObject.MaxAge = aws.Int32(int32(v))
	}

	return apiObject
}
