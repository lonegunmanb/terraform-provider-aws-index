package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func replaceSecurityGroupsOnDestroy(ctx context.Context, d *schema.ResourceData, meta any) error {
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)
	ec2Conn := meta.(*conns.AWSClient).EC2Client(ctx)

	var sgIDs []string
	var vpcID string
	if v, ok := d.GetOk(names.AttrVPCConfig); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)
		sgIDs = flex.ExpandStringValueSet(tfMap[names.AttrSecurityGroupIDs].(*schema.Set))
		vpcID = tfMap[names.AttrVPCID].(string)
	} else { // empty VPC config, nothing to do
		return nil
	}

	if len(sgIDs) == 0 { // no security groups, nothing to do
		return nil
	}

	var replacementSGIDs []string
	if v, ok := d.GetOk("replacement_security_group_ids"); ok {
		replacementSGIDs = flex.ExpandStringValueSet(v.(*schema.Set))
	} else {
		defaultSG, err := tfec2.FindSecurityGroupByNameAndVPCID(ctx, ec2Conn, "default", vpcID)
		if err != nil || defaultSG == nil {
			return fmt.Errorf("finding VPC (%s) default security group: %w", vpcID, err)
		}
		replacementSGIDs = []string{aws.ToString(defaultSG.GroupId)}
	}

	input := &lambda.UpdateFunctionConfigurationInput{
		FunctionName: aws.String(d.Id()),
		VpcConfig: &awstypes.VpcConfig{
			SecurityGroupIds: replacementSGIDs,
		},
	}

	if _, err := retryFunctionOp(ctx, func() (*lambda.UpdateFunctionConfigurationOutput, error) {
		return conn.UpdateFunctionConfiguration(ctx, input)
	}); err != nil {
		return fmt.Errorf("updating Lambda Function (%s) configuration: %w", d.Id(), err)
	}

	if _, err := waitFunctionUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutDelete)); err != nil {
		return fmt.Errorf("waiting for Lambda Function (%s) configuration update: %w", d.Id(), err)
	}

	return nil
}
