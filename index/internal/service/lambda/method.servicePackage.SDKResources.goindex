package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceAlias,
			TypeName: "aws_lambda_alias",
			Name:     "Alias",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceCodeSigningConfig,
			TypeName: "aws_lambda_code_signing_config",
			Name:     "Code Signing Config",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceEventSourceMapping,
			TypeName: "aws_lambda_event_source_mapping",
			Name:     "Event Source Mapping",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceFunction,
			TypeName: "aws_lambda_function",
			Name:     "Function",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalSingleParameterIdentity("function_name"),
			Import: inttypes.SDKv2Import{
				CustomImport: true,
			},
		},
		{
			Factory:  resourceFunctionEventInvokeConfig,
			TypeName: "aws_lambda_function_event_invoke_config",
			Name:     "Function Event Invoke Config",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceFunctionURL,
			TypeName: "aws_lambda_function_url",
			Name:     "Function URL",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceInvocation,
			TypeName: "aws_lambda_invocation",
			Name:     "Invocation",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceLayerVersion,
			TypeName: "aws_lambda_layer_version",
			Name:     "Layer Version",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceLayerVersionPermission,
			TypeName: "aws_lambda_layer_version_permission",
			Name:     "Layer Version Permission",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourcePermission,
			TypeName: "aws_lambda_permission",
			Name:     "Permission",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute("function_name", true),
				inttypes.StringIdentityAttribute("statement_id", true),
				inttypes.StringIdentityAttribute("qualifier", false),
			}),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
				ImportID:      permissionImportID{},
			},
		},
		{
			Factory:  resourceProvisionedConcurrencyConfig,
			TypeName: "aws_lambda_provisioned_concurrency_config",
			Name:     "Provisioned Concurrency Config",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
