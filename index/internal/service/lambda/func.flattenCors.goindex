package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenCors(apiObject *awstypes.Cors) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.AllowCredentials; v != nil {
		tfMap["allow_credentials"] = aws.ToBool(v)
	}

	if v := apiObject.AllowHeaders; v != nil {
		tfMap["allow_headers"] = v
	}

	if v := apiObject.AllowMethods; v != nil {
		tfMap["allow_methods"] = v
	}

	if v := apiObject.AllowOrigins; v != nil {
		tfMap["allow_origins"] = v
	}

	if v := apiObject.ExposeHeaders; v != nil {
		tfMap["expose_headers"] = v
	}

	if v := apiObject.MaxAge; v != nil {
		tfMap["max_age"] = aws.ToInt32(v)
	}

	return tfMap
}
