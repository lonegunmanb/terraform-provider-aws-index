package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceLayerVersionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).LambdaClient(ctx)

	layerName := d.Get("layer_name").(string)
	var versionNumber int64
	if v, ok := d.GetOk(names.AttrVersion); ok {
		versionNumber = int64(v.(int))
	} else {
		input := &lambda.ListLayerVersionsInput{
			LayerName: aws.String(layerName),
		}

		if v, ok := d.GetOk("compatible_architecture"); ok {
			input.CompatibleArchitecture = awstypes.Architecture(v.(string))
		}

		if v, ok := d.GetOk("compatible_runtime"); ok {
			input.CompatibleRuntime = awstypes.Runtime(v.(string))
		}

		output, err := conn.ListLayerVersions(ctx, input)

		if err == nil && len(output.LayerVersions) == 0 {
			err = tfresource.NewEmptyResultError(input)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "listing Lambda Layer Versions (%s): %s", layerName, err)
		}

		versionNumber = output.LayerVersions[0].Version
	}

	output, err := findLayerVersionByTwoPartKey(ctx, conn, layerName, versionNumber)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Lambda Layer (%s) Version (%d): %s", layerName, versionNumber, err)
	}

	d.SetId(aws.ToString(output.LayerVersionArn))
	d.Set(names.AttrARN, output.LayerVersionArn)
	d.Set("code_sha256", output.Content.CodeSha256)
	d.Set("compatible_architectures", output.CompatibleArchitectures)
	d.Set("compatible_runtimes", output.CompatibleRuntimes)
	d.Set(names.AttrCreatedDate, output.CreatedDate)
	d.Set(names.AttrDescription, output.Description)
	d.Set("layer_arn", output.LayerArn)
	d.Set("license_info", output.LicenseInfo)
	d.Set("signing_job_arn", output.Content.SigningJobArn)
	d.Set("signing_profile_version_arn", output.Content.SigningProfileVersionArn)
	d.Set("source_code_hash", output.Content.CodeSha256)
	d.Set("source_code_size", output.Content.CodeSize)
	d.Set(names.AttrVersion, output.Version)

	return diags
}
