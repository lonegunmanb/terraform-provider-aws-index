package github.com/hashicorp/terraform-provider-aws/internal/service/lambda
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	awstypes "github.com/aws/aws-sdk-go-v2/service/lambda/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func retryFunctionOp[T functionCU](ctx context.Context, f func() (*T, error)) (*T, error) {
	output, err := tfresource.RetryWhen(ctx, lambdaPropagationTimeout,
		func() (any, error) {
			return f()
		},
		func(err error) (bool, error) {
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "The role defined for the function cannot be assumed by Lambda") {
				return true, err
			}

			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "The provided execution role does not have permissions") {
				return true, err
			}
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "throttled by EC2") {
				return true, err
			}
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "Lambda was unable to configure access to your environment variables because the KMS key is invalid for CreateGrant") {
				return true, err
			}

			if errs.IsA[*awstypes.ResourceConflictException](err) {
				return true, err
			}

			return false, err
		},
	)

	// Additional retries when throttled.
	if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "throttled by EC2") {
		const (
			functionExtraThrottlingTimeout = 9 * time.Minute
		)
		output, err = tfresource.RetryWhen(ctx, functionExtraThrottlingTimeout,
			func() (any, error) {
				return f()
			},
			func(err error) (bool, error) {
				if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "throttled by EC2") {
					return true, err
				}

				return false, err
			},
		)
	}

	if err != nil {
		return nil, err
	}

	return output.(*T), err
}
