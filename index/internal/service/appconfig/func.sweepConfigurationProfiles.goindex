package github.com/hashicorp/terraform-provider-aws/internal/service/appconfig
import (
	"context"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appconfig"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepConfigurationProfiles(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.AppConfigClient(ctx)
	var input appconfig.ListApplicationsInput
	sweepResources := make([]sweep.Sweepable, 0)

	pages := appconfig.NewListApplicationsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.Items {
			applicationID := aws.ToString(v.Id)
			input := appconfig.ListConfigurationProfilesInput{
				ApplicationId: aws.String(applicationID),
			}

			pages := appconfig.NewListConfigurationProfilesPaginator(conn, &input)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)

				if err != nil {
					return nil, err
				}

				for _, v := range page.Items {
					r := resourceConfigurationProfile()
					d := r.Data(nil)
					d.SetId(configurationProfileCreateResourceID(aws.ToString(v.Id), applicationID))

					sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
				}
			}
		}
	}

	return sweepResources, nil
}
