package github.com/hashicorp/terraform-provider-aws/internal/service/appconfig
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceConfigurationProfileRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppConfigClient(ctx)

	applicationID := d.Get(names.AttrApplicationID).(string)
	configurationProfileID := d.Get("configuration_profile_id").(string)
	id := configurationProfileCreateResourceID(configurationProfileID, applicationID)

	output, err := findConfigurationProfileByTwoPartKey(ctx, conn, applicationID, configurationProfileID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppConfig Configuration Profile (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set(names.AttrApplicationID, output.ApplicationId)
	d.Set(names.AttrARN, configurationProfileARN(ctx, meta.(*conns.AWSClient), applicationID, configurationProfileID))
	d.Set("configuration_profile_id", output.Id)
	d.Set(names.AttrDescription, output.Description)
	d.Set("kms_key_identifier", output.KmsKeyIdentifier)
	d.Set("location_uri", output.LocationUri)
	d.Set(names.AttrName, output.Name)
	d.Set("retrieval_role_arn", output.RetrievalRoleArn)
	d.Set(names.AttrType, output.Type)
	if err := d.Set("validator", flattenValidators(output.Validators)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting validator: %s", err)
	}

	return diags
}
