package github.com/hashicorp/terraform-provider-aws/internal/service/appconfig
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appconfig/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceEnvironmentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppConfigClient(ctx)

	applicationID := d.Get(names.AttrApplicationID).(string)
	environmentID := d.Get("environment_id").(string)
	id := environmentCreateResourceID(environmentID, applicationID)

	out, err := findEnvironmentByTwoPartKey(ctx, conn, applicationID, environmentID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppConfig Environment (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set(names.AttrApplicationID, applicationID)
	d.Set(names.AttrARN, environmentARN(ctx, meta.(*conns.AWSClient), applicationID, environmentID))
	d.Set(names.AttrDescription, out.Description)
	d.Set("environment_id", environmentID)
	if err := d.Set("monitor", flattenEnvironmentMonitors(out.Monitors)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting monitor: %s", err)
	}
	d.Set(names.AttrName, out.Name)
	d.Set(names.AttrState, out.State)

	return diags
}
