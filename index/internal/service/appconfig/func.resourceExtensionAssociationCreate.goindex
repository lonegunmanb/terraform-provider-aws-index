package github.com/hashicorp/terraform-provider-aws/internal/service/appconfig
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appconfig"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appconfig/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceExtensionAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppConfigClient(ctx)

	input := appconfig.CreateExtensionAssociationInput{
		ExtensionIdentifier: aws.String(d.Get("extension_arn").(string)),
		ResourceIdentifier:  aws.String(d.Get(names.AttrResourceARN).(string)),
	}

	if v, ok := d.GetOk(names.AttrParameters); ok {
		input.Parameters = flex.ExpandStringValueMap(v.(map[string]any))
	}

	output, err := conn.CreateExtensionAssociation(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating AppConfig Extension Association: %s", err)
	}

	d.SetId(aws.ToString(output.Id))

	return append(diags, resourceExtensionAssociationRead(ctx, d, meta)...)
}
