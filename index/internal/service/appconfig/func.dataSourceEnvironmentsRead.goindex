package github.com/hashicorp/terraform-provider-aws/internal/service/appconfig
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appconfig"
	awstypes "github.com/aws/aws-sdk-go-v2/service/appconfig/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceEnvironmentsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AppConfigClient(ctx)

	applicationID := d.Get(names.AttrApplicationID).(string)
	input := appconfig.ListEnvironmentsInput{
		ApplicationId: aws.String(applicationID),
	}

	output, err := findEnvironments(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppConfig Environments: %s", err)
	}

	d.SetId(applicationID)
	d.Set("environment_ids", tfslices.ApplyToAll(output, func(v awstypes.Environment) string {
		return aws.ToString(v.Id)
	}))

	return diags
}
