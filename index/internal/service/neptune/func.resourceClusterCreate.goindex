package github.com/hashicorp/terraform-provider-aws/internal/service/neptune
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/neptune"
	awstypes "github.com/aws/aws-sdk-go-v2/service/neptune/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/backoff"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).NeptuneClient(ctx)

	clusterID := create.NewNameGenerator(
		create.WithConfiguredName(d.Get(names.AttrClusterIdentifier).(string)),
		create.WithConfiguredPrefix(d.Get("cluster_identifier_prefix").(string)),
		create.WithDefaultPrefix("tf-"),
	).Generate()

	// Check if any of the parameters that require a cluster modification after creation are set.
	// See https://docs.aws.amazon.com/neptune/latest/userguide/backup-restore-restore-snapshot.html#backup-restore-restore-snapshot-considerations.
	clusterUpdate := false
	restoreDBClusterFromSnapshot := false
	if _, ok := d.GetOk("snapshot_identifier"); ok {
		restoreDBClusterFromSnapshot = true
	}

	serverlessConfiguration := expandServerlessConfiguration(d.Get("serverless_v2_scaling_configuration").([]any))
	inputC := &neptune.CreateDBClusterInput{
		CopyTagsToSnapshot:               aws.Bool(d.Get("copy_tags_to_snapshot").(bool)),
		DBClusterIdentifier:              aws.String(clusterID),
		DeletionProtection:               aws.Bool(d.Get(names.AttrDeletionProtection).(bool)),
		Engine:                           aws.String(d.Get(names.AttrEngine).(string)),
		Port:                             aws.Int32(int32(d.Get(names.AttrPort).(int))),
		ServerlessV2ScalingConfiguration: serverlessConfiguration,
		StorageEncrypted:                 aws.Bool(d.Get(names.AttrStorageEncrypted).(bool)),
		Tags:                             getTagsIn(ctx),
	}
	inputR := &neptune.RestoreDBClusterFromSnapshotInput{
		CopyTagsToSnapshot:               aws.Bool(d.Get("copy_tags_to_snapshot").(bool)),
		DBClusterIdentifier:              aws.String(clusterID),
		DeletionProtection:               aws.Bool(d.Get(names.AttrDeletionProtection).(bool)),
		Engine:                           aws.String(d.Get(names.AttrEngine).(string)),
		Port:                             aws.Int32(int32(d.Get(names.AttrPort).(int))),
		ServerlessV2ScalingConfiguration: serverlessConfiguration,
		SnapshotIdentifier:               aws.String(d.Get("snapshot_identifier").(string)),
		Tags:                             getTagsIn(ctx),
	}
	inputM := &neptune.ModifyDBClusterInput{
		ApplyImmediately:    aws.Bool(true),
		DBClusterIdentifier: aws.String(clusterID),
	}

	if v, ok := d.GetOk(names.AttrAvailabilityZones); ok && v.(*schema.Set).Len() > 0 {
		v := v.(*schema.Set)

		inputC.AvailabilityZones = flex.ExpandStringValueSet(v)
		inputR.AvailabilityZones = flex.ExpandStringValueSet(v)
	}

	if v, ok := d.GetOk("backup_retention_period"); ok {
		v := int32(v.(int))

		inputC.BackupRetentionPeriod = aws.Int32(v)
		if restoreDBClusterFromSnapshot {
			clusterUpdate = true
			inputM.BackupRetentionPeriod = aws.Int32(v)
		}
	}

	if v, ok := d.GetOk("enable_cloudwatch_logs_exports"); ok && v.(*schema.Set).Len() > 0 {
		v := v.(*schema.Set)

		inputC.EnableCloudwatchLogsExports = flex.ExpandStringValueSet(v)
		inputR.EnableCloudwatchLogsExports = flex.ExpandStringValueSet(v)
	}

	if v, ok := d.GetOk(names.AttrEngineVersion); ok {
		v := v.(string)

		inputC.EngineVersion = aws.String(v)
		inputR.EngineVersion = aws.String(v)
	}

	if v, ok := d.GetOk("global_cluster_identifier"); ok {
		v := v.(string)

		inputC.GlobalClusterIdentifier = aws.String(v)
	}

	if v, ok := d.GetOk("iam_database_authentication_enabled"); ok {
		v := v.(bool)

		inputC.EnableIAMDatabaseAuthentication = aws.Bool(v)
		inputR.EnableIAMDatabaseAuthentication = aws.Bool(v)
	}

	if v, ok := d.GetOk(names.AttrKMSKeyARN); ok {
		v := v.(string)

		inputC.KmsKeyId = aws.String(v)
		inputR.KmsKeyId = aws.String(v)
	}

	if v, ok := d.GetOk("neptune_cluster_parameter_group_name"); ok {
		v := v.(string)

		inputC.DBClusterParameterGroupName = aws.String(v)
		if restoreDBClusterFromSnapshot {
			clusterUpdate = true
			inputM.DBClusterParameterGroupName = aws.String(v)
		}
	}

	if v, ok := d.GetOk("neptune_subnet_group_name"); ok {
		v := v.(string)

		inputC.DBSubnetGroupName = aws.String(v)
		inputR.DBSubnetGroupName = aws.String(v)
	}

	if v, ok := d.GetOk("preferred_backup_window"); ok {
		v := v.(string)

		inputC.PreferredBackupWindow = aws.String(v)
	}

	if v, ok := d.GetOk(names.AttrPreferredMaintenanceWindow); ok {
		v := v.(string)

		inputC.PreferredMaintenanceWindow = aws.String(v)
	}

	if v, ok := d.GetOk("replication_source_identifier"); ok {
		v := v.(string)

		inputC.ReplicationSourceIdentifier = aws.String(v)
	}

	if v, ok := d.GetOk(names.AttrStorageType); ok {
		v := v.(string)

		inputC.StorageType = aws.String(v)
		inputR.StorageType = aws.String(v)
	}

	if v, ok := d.GetOk(names.AttrVPCSecurityGroupIDs); ok && v.(*schema.Set).Len() > 0 {
		v := v.(*schema.Set)

		inputC.VpcSecurityGroupIds = flex.ExpandStringValueSet(v)
		inputR.VpcSecurityGroupIds = flex.ExpandStringValueSet(v)
		if restoreDBClusterFromSnapshot {
			clusterUpdate = true
			inputM.VpcSecurityGroupIds = flex.ExpandStringValueSet(v)
		}
	}

	var err error

	if restoreDBClusterFromSnapshot {
		for l := backoff.NewLoop(propagationTimeout); l.Continue(ctx); {
			_, err = conn.RestoreDBClusterFromSnapshot(ctx, inputR)

			if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "IAM role ARN value is invalid") {
				continue
			}

			break
		}
	}

	if !restoreDBClusterFromSnapshot {
		for l := backoff.NewLoop(d.Timeout(schema.TimeoutCreate)); l.Continue(ctx); {
			_, err = conn.CreateDBCluster(ctx, inputC)

			if tfawserr.ErrMessageContains(err, errCodeInvalidGlobalClusterStateFault, "in progress") {
				continue
			}

			if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "IAM role ARN value is invalid") {
				continue
			}

			break
		}
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Neptune Cluster (%s): %s", clusterID, err)
	}

	d.SetId(clusterID)

	if _, err = waitDBClusterAvailable(ctx, conn, d.Id(), false, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Neptune Cluster (%s) create: %s", d.Id(), err)
	}

	if v, ok := d.GetOk("iam_roles"); ok {
		for _, v := range v.(*schema.Set).List() {
			v := v.(string)

			if err := addIAMRoleToCluster(ctx, conn, d.Id(), v); err != nil {
				return sdkdiag.AppendErrorf(diags, "adding IAM Role (%s) to Neptune Cluster (%s): %s", v, d.Id(), err)
			}
		}
	}

	if clusterUpdate {
		_, err := conn.ModifyDBCluster(ctx, inputM)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying Neptune Cluster (%s): %s", d.Id(), err)
		}

		if _, err = waitDBClusterAvailable(ctx, conn, d.Id(), true, d.Timeout(schema.TimeoutCreate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Neptune Cluster (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceClusterRead(ctx, d, meta)...)
}
