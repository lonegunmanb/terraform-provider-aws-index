package github.com/hashicorp/terraform-provider-aws/internal/service/devopsguru
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *notificationChannelDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrID: schema.StringAttribute{
				Required: true,
			},
		},
		Blocks: map[string]schema.Block{
			"filters": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[filtersData](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"message_types": schema.ListAttribute{
							Computed:    true,
							CustomType:  fwtypes.ListOfStringType,
							ElementType: types.StringType,
						},
						"severities": schema.ListAttribute{
							Computed:    true,
							CustomType:  fwtypes.ListOfStringType,
							ElementType: types.StringType,
						},
					},
				},
			},
			"sns": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[snsData](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrTopicARN: schema.StringAttribute{
							Computed:   true,
							CustomType: fwtypes.ARNType,
						},
					},
				},
			},
		},
	}
}
