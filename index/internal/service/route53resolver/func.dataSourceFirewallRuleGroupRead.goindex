package github.com/hashicorp/terraform-provider-aws/internal/service/route53resolver
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceFirewallRuleGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53ResolverClient(ctx)

	id := d.Get("firewall_rule_group_id").(string)
	ruleGroup, err := findFirewallRuleGroupByID(ctx, conn, id)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Route53 Resolver Firewall Rule Group (%s): %s", id, err)
	}

	d.SetId(aws.ToString(ruleGroup.Id))
	d.Set(names.AttrARN, ruleGroup.Arn)
	d.Set(names.AttrCreationTime, ruleGroup.CreationTime)
	d.Set("creator_request_id", ruleGroup.CreatorRequestId)
	d.Set("firewall_rule_group_id", ruleGroup.Id)
	d.Set("modification_time", ruleGroup.ModificationTime)
	d.Set(names.AttrName, ruleGroup.Name)
	d.Set(names.AttrOwnerID, ruleGroup.OwnerId)
	d.Set("rule_count", ruleGroup.RuleCount)
	d.Set("share_status", ruleGroup.ShareStatus)
	d.Set(names.AttrStatus, ruleGroup.Status)
	d.Set(names.AttrStatusMessage, ruleGroup.StatusMessage)

	return diags
}
