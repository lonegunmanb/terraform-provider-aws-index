package github.com/hashicorp/terraform-provider-aws/internal/service/route53resolver
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRuleTargetIPs(targetAddresses []awstypes.TargetAddress) []any {
	if targetAddresses == nil {
		return []any{}
	}

	vTargetIps := []any{}

	for _, targetAddress := range targetAddresses {
		mTargetIp := map[string]any{
			"ip":               aws.ToString(targetAddress.Ip),
			"ipv6":             aws.ToString(targetAddress.Ipv6),
			names.AttrPort:     int(aws.ToInt32(targetAddress.Port)),
			names.AttrProtocol: targetAddress.Protocol,
		}

		vTargetIps = append(vTargetIps, mTargetIp)
	}

	return vTargetIps
}
