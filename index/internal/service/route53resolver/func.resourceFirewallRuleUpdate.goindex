package github.com/hashicorp/terraform-provider-aws/internal/service/route53resolver
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFirewallRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53ResolverClient(ctx)

	firewallRuleGroupID, firewallDomainListID, err := firewallRuleParseResourceID(d.Id())

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	input := &route53resolver.UpdateFirewallRuleInput{
		Action:               awstypes.Action(d.Get(names.AttrAction).(string)),
		FirewallDomainListId: aws.String(firewallDomainListID),
		FirewallRuleGroupId:  aws.String(firewallRuleGroupID),
		Name:                 aws.String(d.Get(names.AttrName).(string)),
		Priority:             aws.Int32(int32(d.Get(names.AttrPriority).(int))),
	}

	if v, ok := d.GetOk("block_override_dns_type"); ok {
		input.BlockOverrideDnsType = awstypes.BlockOverrideDnsType(v.(string))
	}

	if v, ok := d.GetOk("block_override_domain"); ok {
		input.BlockOverrideDomain = aws.String(v.(string))
	}

	if v, ok := d.GetOk("block_override_ttl"); ok {
		input.BlockOverrideTtl = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("block_response"); ok {
		input.BlockResponse = awstypes.BlockResponse(v.(string))
	}

	if v, ok := d.GetOk("firewall_domain_redirection_action"); ok {
		input.FirewallDomainRedirectionAction = awstypes.FirewallDomainRedirectionAction(v.(string))
	}

	if v, ok := d.GetOk("q_type"); ok {
		input.Qtype = aws.String(v.(string))
	}

	_, err = conn.UpdateFirewallRule(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Route53 Resolver Firewall Rule (%s): %s", d.Id(), err)
	}

	return append(diags, resourceFirewallRuleRead(ctx, d, meta)...)
}
