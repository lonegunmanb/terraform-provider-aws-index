package github.com/hashicorp/terraform-provider-aws/internal/service/route53resolver
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53resolver/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53ResolverClient(ctx)

	resolverConfig, err := findResolverConfigByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Route53 Resolver Config (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Route53 Resolver Config (%s): %s", d.Id(), err)
	}

	var autodefinedReverseFlag awstypes.AutodefinedReverseFlag
	if resolverConfig.AutodefinedReverse == awstypes.ResolverAutodefinedReverseStatusEnabled {
		autodefinedReverseFlag = awstypes.AutodefinedReverseFlagEnable
	} else {
		autodefinedReverseFlag = awstypes.AutodefinedReverseFlagDisable
	}
	d.Set("autodefined_reverse_flag", autodefinedReverseFlag)
	d.Set(names.AttrOwnerID, resolverConfig.OwnerId)
	d.Set(names.AttrResourceID, resolverConfig.ResourceId)

	return diags
}
