package github.com/hashicorp/terraform-provider-aws/internal/service/cleanrooms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCollaborationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CleanRoomsClient(ctx)

	creatorAbilities := d.Get("creator_member_abilities").([]any)

	input := &cleanrooms.CreateCollaborationInput{
		Name:                   aws.String(d.Get(names.AttrName).(string)),
		CreatorDisplayName:     aws.String(d.Get("creator_display_name").(string)),
		CreatorMemberAbilities: expandMemberAbilities(creatorAbilities),
		Members:                *expandMembers(d.Get("member").(*schema.Set).List()),
		Tags:                   getTagsIn(ctx),
	}

	if v, ok := d.GetOk("analytics_engine"); ok {
		input.AnalyticsEngine = types.AnalyticsEngine(v.(string))
	}

	queryLogStatus, err := expandQueryLogStatus(d.Get("query_log_status").(string))
	if err != nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionCreating, ResNameCollaboration, d.Get(names.AttrName).(string), err)
	}
	input.QueryLogStatus = queryLogStatus

	if v, ok := d.GetOk("data_encryption_metadata"); ok {
		input.DataEncryptionMetadata = expandDataEncryptionMetadata(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	out, err := conn.CreateCollaboration(ctx, input)
	if err != nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionCreating, ResNameCollaboration, d.Get(names.AttrName).(string), err)
	}

	if out == nil || out.Collaboration == nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionCreating, ResNameCollaboration, d.Get(names.AttrName).(string), errors.New("empty output"))
	}
	d.SetId(aws.ToString(out.Collaboration.Id))

	return append(diags, resourceCollaborationRead(ctx, d, meta)...)
}
