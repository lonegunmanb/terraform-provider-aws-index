package github.com/hashicorp/terraform-provider-aws/internal/service/cleanrooms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cleanrooms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfiguredTableRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CleanRoomsClient(ctx)

	out, err := findConfiguredTableByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Clean Rooms Configured Table (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionReading, ResNameConfiguredTable, d.Id(), err)
	}

	configuredTable := out.ConfiguredTable
	d.Set(names.AttrARN, configuredTable.Arn)
	d.Set(names.AttrName, configuredTable.Name)
	d.Set(names.AttrDescription, configuredTable.Description)
	d.Set("allowed_columns", configuredTable.AllowedColumns)
	d.Set("analysis_method", configuredTable.AnalysisMethod)
	d.Set(names.AttrCreateTime, configuredTable.CreateTime.String())
	d.Set("update_time", configuredTable.UpdateTime.String())

	if err := d.Set("table_reference", flattenTableReference(configuredTable.TableReference)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting table_reference: %s", err)
	}

	return diags
}
