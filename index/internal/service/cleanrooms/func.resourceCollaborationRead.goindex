package github.com/hashicorp/terraform-provider-aws/internal/service/cleanrooms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCollaborationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).CleanRoomsClient(ctx)

	out, err := findCollaborationByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CleanRooms Collaboration (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionReading, ResNameCollaboration, d.Id(), err)
	}

	collaboration := out.Collaboration
	d.Set(names.AttrARN, collaboration.Arn)
	d.Set(names.AttrName, collaboration.Name)
	d.Set(names.AttrDescription, collaboration.Description)
	d.Set("creator_display_name", collaboration.CreatorDisplayName)
	d.Set(names.AttrCreateTime, collaboration.CreateTime.String())
	d.Set("update_time", collaboration.UpdateTime.String())
	d.Set("query_log_status", collaboration.QueryLogStatus)
	if err := d.Set("data_encryption_metadata", flattenDataEncryptionMetadata(collaboration.DataEncryptionMetadata)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting data_encryption_metadata: %s", err)
	}

	membersOut, err := findMembersByCollaborationId(ctx, conn, d.Id())
	if err != nil {
		return create.AppendDiagError(diags, names.CleanRooms, create.ErrActionSetting, ResNameCollaboration, d.Id(), err)
	}

	if err := d.Set("member", flattenMembers(membersOut.MemberSummaries, collaboration.CreatorAccountId)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting member: %s", err)
	}
	if err := d.Set("creator_member_abilities", flattenCreatorAbilities(membersOut.MemberSummaries, collaboration.CreatorAccountId)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting creator_member_abilities: %s", err)
	}

	return diags
}
