package github.com/hashicorp/terraform-provider-aws/internal/service/backup
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/backup/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLifecycle(tfMap map[string]any) *awstypes.Lifecycle {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.Lifecycle{}

	if v, ok := tfMap["delete_after"].(int); ok && v != 0 {
		apiObject.DeleteAfterDays = aws.Int64(int64(v))
	}

	if v, ok := tfMap["cold_storage_after"].(int); ok && v != 0 {
		apiObject.MoveToColdStorageAfterDays = aws.Int64(int64(v))
	}

	if v, ok := tfMap["opt_in_to_archive_for_supported_resources"].(bool); ok && v {
		apiObject.OptInToArchiveForSupportedResources = aws.Bool(v)
	}

	return apiObject
}
