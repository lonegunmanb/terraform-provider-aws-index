package github.com/hashicorp/terraform-provider-aws/internal/service/backup
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/backup/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSelectionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BackupClient(ctx)

	name := d.Get(names.AttrName).(string)
	planID := d.Get("plan_id").(string)
	input := &backup.CreateBackupSelectionInput{
		BackupPlanId: aws.String(planID),
		BackupSelection: &awstypes.BackupSelection{
			Conditions:    expandConditions(d.Get(names.AttrCondition).(*schema.Set).List()),
			IamRoleArn:    aws.String(d.Get(names.AttrIAMRoleARN).(string)),
			ListOfTags:    expandConditionTags(d.Get("selection_tag").(*schema.Set).List()),
			NotResources:  flex.ExpandStringValueSet(d.Get("not_resources").(*schema.Set)),
			Resources:     flex.ExpandStringValueSet(d.Get(names.AttrResources).(*schema.Set)),
			SelectionName: aws.String(name),
		},
	}

	// Retry for IAM eventual consistency.
	outputRaw, err := tfresource.RetryWhen(ctx, propagationTimeout,
		func() (any, error) {
			return conn.CreateBackupSelection(ctx, input)
		},
		func(err error) (bool, error) {
			// InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX cannot be assumed by AWS Backup
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "cannot be assumed") {
				return true, err
			}

			// InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX is not authorized to call tag:GetResources
			if errs.IsAErrorMessageContains[*awstypes.InvalidParameterValueException](err, "is not authorized to call") {
				return true, err
			}

			return false, err
		},
	)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Backup Selection (%s): %s", name, err)
	}

	d.SetId(aws.ToString(outputRaw.(*backup.CreateBackupSelectionOutput).SelectionId))

	const (
		// Maximum amount of time to wait for Backup changes to propagate.
		timeout = 2 * time.Minute
	)
	_, err = tfresource.RetryWhenNotFound(ctx, timeout, func(ctx context.Context) (any, error) {
		return findSelectionByTwoPartKey(ctx, conn, planID, d.Id())
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Backup Selection (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceSelectionRead(ctx, d, meta)...)
}
