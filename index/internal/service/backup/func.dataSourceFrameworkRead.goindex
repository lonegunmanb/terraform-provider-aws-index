package github.com/hashicorp/terraform-provider-aws/internal/service/backup
import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceFrameworkRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BackupClient(ctx)

	name := d.Get(names.AttrName).(string)
	output, err := findFrameworkByName(ctx, conn, name)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Backup Framework (%s): %s", name, err)
	}

	d.SetId(name)
	d.Set(names.AttrARN, output.FrameworkArn)
	if err := d.Set("control", flattenFrameworkControls(ctx, output.FrameworkControls)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting control: %s", err)
	}
	d.Set(names.AttrCreationTime, output.CreationTime.Format(time.RFC3339))
	d.Set("deployment_status", output.DeploymentStatus)
	d.Set(names.AttrDescription, output.FrameworkDescription)
	d.Set(names.AttrName, output.FrameworkName)
	d.Set(names.AttrStatus, output.FrameworkStatus)

	return diags
}
