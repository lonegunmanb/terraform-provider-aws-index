package github.com/hashicorp/terraform-provider-aws/internal/service/backup
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/backup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/backup/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBackupRules(ctx context.Context, apiObjects []awstypes.BackupRule) []any { // nosemgrep:ci.backup-in-func-name
	tfList := []any{}

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{
			"completion_window":            aws.ToInt64(apiObject.CompletionWindowMinutes),
			"enable_continuous_backup":     aws.ToBool(apiObject.EnableContinuousBackup),
			"rule_name":                    aws.ToString(apiObject.RuleName),
			names.AttrSchedule:             aws.ToString(apiObject.ScheduleExpression),
			"schedule_expression_timezone": aws.ToString(apiObject.ScheduleExpressionTimezone),
			"start_window":                 aws.ToInt64(apiObject.StartWindowMinutes),
			"target_vault_name":            aws.ToString(apiObject.TargetBackupVaultName),
		}

		if v := apiObject.CopyActions; len(v) > 0 {
			tfMap["copy_action"] = flattenCopyActions(v)
		}

		if v := apiObject.Lifecycle; v != nil {
			tfMap["lifecycle"] = flattenLifecycle(v)
		}

		if v := keyValueTags(ctx, apiObject.RecoveryPointTags).IgnoreAWS().Map(); len(v) > 0 {
			tfMap["recovery_point_tags"] = v
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
