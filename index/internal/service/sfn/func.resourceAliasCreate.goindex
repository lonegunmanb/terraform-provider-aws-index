package github.com/hashicorp/terraform-provider-aws/internal/service/sfn
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sfn"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sfn/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAliasCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SFNClient(ctx)

	in := &sfn.CreateStateMachineAliasInput{
		Name:        aws.String(d.Get(names.AttrName).(string)),
		Description: aws.String(d.Get(names.AttrDescription).(string)),
	}

	if v, ok := d.GetOk("routing_configuration"); ok && len(v.([]any)) > 0 {
		in.RoutingConfiguration = expandAliasRoutingConfiguration(v.([]any))
	}

	out, err := conn.CreateStateMachineAlias(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.SFN, create.ErrActionCreating, ResNameAlias, d.Get(names.AttrName).(string), err)
	}

	if out == nil || out.StateMachineAliasArn == nil {
		return create.AppendDiagError(diags, names.SFN, create.ErrActionCreating, ResNameAlias, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(out.StateMachineAliasArn))

	return append(diags, resourceAliasRead(ctx, d, meta)...)
}
