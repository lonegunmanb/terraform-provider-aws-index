package github.com/hashicorp/terraform-provider-aws/internal/service/sfn
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sfn"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sfn/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceActivityRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SFNClient(ctx)

	if v, ok := d.GetOk(names.AttrName); ok {
		name := v.(string)

		output, err := findActivityByName(ctx, conn, name)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "listing Step Functions Activities: %s", err)
		}
		if n := len(output); n == 0 {
			return sdkdiag.AppendErrorf(diags, "no Step Functions Activities matched")
		} else if n > 1 {
			return sdkdiag.AppendErrorf(diags, "%d Step Functions Activities matched; use additional constraints to reduce matches to a single Activity", n)
		}

		activity := output[0]

		arn := aws.ToString(activity.ActivityArn)
		d.SetId(arn)
		d.Set(names.AttrARN, arn)
		d.Set(names.AttrCreationDate, activity.CreationDate.Format(time.RFC3339))
		d.Set(names.AttrName, activity.Name)
	} else if v, ok := d.GetOk(names.AttrARN); ok {
		arn := v.(string)
		activity, err := findActivityByARN(ctx, conn, arn)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Step Functions Activity (%s): %s", arn, err)
		}

		arn = aws.ToString(activity.ActivityArn)
		d.SetId(arn)
		d.Set(names.AttrARN, arn)
		d.Set(names.AttrCreationDate, activity.CreationDate.Format(time.RFC3339))
		d.Set(names.AttrName, activity.Name)
	}

	return diags
}
