package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTargetGroupHealthAttributes(apiObjects []awstypes.TargetGroupAttribute, protocol awstypes.ProtocolEnum) map[string]any {
	if len(apiObjects) == 0 {
		return nil
	}

	tfMap := map[string]any{}
	dnsFailoverMap := make(map[string]any)
	unhealthyStateRoutingMap := make(map[string]any)

	// Supported on Application Load Balancers and Network Load Balancers.
	switch protocol {
	case awstypes.ProtocolEnumGeneve:
	default:
		for _, apiObject := range apiObjects {
			switch k, v := aws.ToString(apiObject.Key), apiObject.Value; k {
			case targetGroupAttributeTargetGroupHealthDNSFailoverMinimumHealthyTargetsCount:
				dnsFailoverMap["minimum_healthy_targets_count"] = aws.ToString(v)
			case targetGroupAttributeTargetGroupHealthDNSFailoverMinimumHealthyTargetsPercentage:
				dnsFailoverMap["minimum_healthy_targets_percentage"] = aws.ToString(v)
			case targetGroupAttributeTargetGroupHealthUnhealthyStateRoutingMinimumHealthyTargetsCount:
				unhealthyStateRoutingMap["minimum_healthy_targets_count"] = flex.StringToIntValue(v)
			case targetGroupAttributeTargetGroupHealthUnhealthyStateRoutingMinimumHealthyTargetsPercentage:
				unhealthyStateRoutingMap["minimum_healthy_targets_percentage"] = aws.ToString(v)
			}
		}
	}

	tfMap["dns_failover"] = []any{dnsFailoverMap}
	tfMap["unhealthy_state_routing"] = []any{unhealthyStateRoutingMap}

	return tfMap
}
