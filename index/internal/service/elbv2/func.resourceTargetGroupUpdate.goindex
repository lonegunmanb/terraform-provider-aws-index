package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTargetGroupUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBV2Client(ctx)

	protocol := awstypes.ProtocolEnum(d.Get(names.AttrProtocol).(string))
	targetType := awstypes.TargetTypeEnum(d.Get("target_type").(string))

	if d.HasChange(names.AttrHealthCheck) {
		if v, ok := d.GetOk(names.AttrHealthCheck); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			input := &elasticloadbalancingv2.ModifyTargetGroupInput{
				TargetGroupArn: aws.String(d.Id()),
			}
			if v, ok := tfMap[names.AttrEnabled]; ok {
				input.HealthCheckEnabled = aws.Bool(v.(bool))
			}
			if v, ok := tfMap[names.AttrInterval]; ok {
				input.HealthCheckIntervalSeconds = aws.Int32(int32(v.(int)))
			}
			if v, ok := tfMap["healthy_threshold"]; ok {
				input.HealthyThresholdCount = aws.Int32(int32(v.(int)))
			}
			if v, ok := tfMap["unhealthy_threshold"]; ok {
				input.UnhealthyThresholdCount = aws.Int32(int32(v.(int)))
			}
			if v, ok := tfMap[names.AttrTimeout].(int); ok && v != 0 {
				input.HealthCheckTimeoutSeconds = aws.Int32(int32(v))
			}

			healthCheckProtocol := awstypes.ProtocolEnum(tfMap[names.AttrProtocol].(string))
			if healthCheckProtocol != awstypes.ProtocolEnumTcp {
				if v, ok := tfMap["matcher"].(string); ok {
					if protocolVersion := d.Get("protocol_version").(string); protocolVersion == protocolVersionGRPC {
						input.Matcher = &awstypes.Matcher{
							GrpcCode: aws.String(v),
						}
					} else {
						input.Matcher = &awstypes.Matcher{
							HttpCode: aws.String(v),
						}
					}
				}
				input.HealthCheckPath = aws.String(tfMap[names.AttrPath].(string))
			}

			if targetType != awstypes.TargetTypeEnumLambda {
				input.HealthCheckPort = aws.String(tfMap[names.AttrPort].(string))
				input.HealthCheckProtocol = healthCheckProtocol
			}

			_, err := conn.ModifyTargetGroup(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "modifying ELBv2 Target Group (%s): %s", d.Id(), err)
			}
		}
	}

	var attributes []awstypes.TargetGroupAttribute

	switch targetType {
	case awstypes.TargetTypeEnumInstance, awstypes.TargetTypeEnumIp:
		if d.HasChange("stickiness") {
			if v, ok := d.GetOk("stickiness"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				attributes = append(attributes, expandTargetGroupStickinessAttributes(v.([]any)[0].(map[string]any), protocol)...)
			} else {
				attributes = append(attributes, awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeStickinessEnabled),
					Value: flex.BoolValueToString(false),
				})
			}
		}

		if d.HasChange("target_failover") {
			if v, ok := d.GetOk("target_failover"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				attributes = append(attributes, expandTargetGroupTargetFailoverAttributes(v.([]any)[0].(map[string]any), protocol)...)
			}
		}

		if d.HasChange("target_group_health") {
			if v, ok := d.GetOk("target_group_health"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				attributes = append(attributes, expandTargetGroupHealthAttributes(v.([]any)[0].(map[string]any), protocol)...)
			}
		}

		if d.HasChange("target_health_state") {
			if v, ok := d.GetOk("target_health_state"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				attributes = append(attributes, expandTargetGroupTargetHealthStateAttributes(v.([]any)[0].(map[string]any), protocol)...)
			}
		}
	}

	attributes = append(attributes, targetGroupAttributes.expand(d, targetType, true)...)

	if len(attributes) > 0 {
		input := &elasticloadbalancingv2.ModifyTargetGroupAttributesInput{
			Attributes:     attributes,
			TargetGroupArn: aws.String(d.Id()),
		}

		_, err := conn.ModifyTargetGroupAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying ELBv2 Target Group (%s) attributes: %s", d.Id(), err)
		}
	}

	return append(diags, resourceTargetGroupRead(ctx, d, meta)...)
}
