package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"cmp"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func listenerActionPlantimeValidate(actionPath cty.Path, action cty.Value, diags *diag.Diagnostics) {
	actionType := action.GetAttr(names.AttrType)
	if !actionType.IsKnown() {
		return
	}
	if actionType.IsNull() {
		return
	}

	if action.IsKnown() && !action.IsNull() {
		tga := action.GetAttr("target_group_arn")
		f := action.GetAttr("forward")

		// If `ignore_changes` is set, even if there is no value in the configuration, the value in RawConfig is "" on refresh.

		tgKnown := tga.IsKnown() && !tga.IsNull() && tga.AsString() != ""
		fKnown := f.IsKnown() && !f.IsNull() && f.LengthInt() > 0

		var tgArn string
		if tgKnown && tga.AsString() != "" {
			tgArn = tga.AsString()
		}

		if fKnown && tgArn != "" {
			firstForward := f.Index(cty.NumberIntVal(0))
			tgSet := firstForward.GetAttr("target_group")
			if tgSet.IsKnown() && !tgSet.IsNull() && tgSet.LengthInt() > 0 {
				tgSetIt := tgSet.ElementIterator()
				for tgSetIt.Next() {
					_, ftg := tgSetIt.Element()
					ftgARN := ftg.GetAttr(names.AttrARN)
					if ftgARN.IsKnown() && !ftgARN.IsNull() && ftgARN.AsString() != "" && tgArn != ftgARN.AsString() {
						*diags = append(*diags, errs.NewAttributeErrorDiagnostic(actionPath,
							"Invalid Attribute Combination",
							fmt.Sprintf("You can specify both a top-level target group ARN (%q) and, with %q, a target group list with ARNs, only if the ARNs match.",
								errs.PathString(actionPath.GetAttr("target_group_arn")),
								errs.PathString(actionPath.GetAttr("forward")),
							),
						))
					}
				}
			}
		}

		switch actionType := awstypes.ActionTypeEnum(actionType.AsString()); actionType {
		case awstypes.ActionTypeEnumForward:
			if tga.IsNull() && (f.IsNull() || f.LengthInt() == 0) {
				typePath := actionPath.GetAttr(names.AttrType)
				*diags = append(*diags, errs.NewAttributeErrorDiagnostic(typePath,
					"Invalid Attribute Combination",
					fmt.Sprintf("Either %q or %q must be specified when %q is %q.",
						errs.PathString(actionPath.GetAttr("target_group_arn")), errs.PathString(actionPath.GetAttr("forward")),
						errs.PathString(typePath),
						actionType,
					),
				))
			}

		case awstypes.ActionTypeEnumRedirect:
			if r := action.GetAttr("redirect"); r.IsNull() || r.LengthInt() == 0 {
				*diags = append(*diags, errs.NewAttributeRequiredWhenError(
					actionPath.GetAttr("redirect"),
					actionPath.GetAttr(names.AttrType),
					string(actionType),
				))
			}

		case awstypes.ActionTypeEnumFixedResponse:
			if fr := action.GetAttr("fixed_response"); fr.IsNull() || fr.LengthInt() == 0 {
				*diags = append(*diags, errs.NewAttributeRequiredWhenError(
					actionPath.GetAttr("fixed_response"),
					actionPath.GetAttr(names.AttrType),
					string(actionType),
				))
			}

		case awstypes.ActionTypeEnumAuthenticateCognito:
			if ac := action.GetAttr("authenticate_cognito"); ac.IsNull() || ac.LengthInt() == 0 {
				*diags = append(*diags, errs.NewAttributeRequiredWhenError(
					actionPath.GetAttr("authenticate_cognito"),
					actionPath.GetAttr(names.AttrType),
					string(actionType),
				))
			}

		case awstypes.ActionTypeEnumAuthenticateOidc:
			if ao := action.GetAttr("authenticate_oidc"); ao.IsNull() || ao.LengthInt() == 0 {
				*diags = append(*diags, errs.NewAttributeRequiredWhenError(
					actionPath.GetAttr("authenticate_oidc"),
					actionPath.GetAttr(names.AttrType),
					string(actionType),
				))
			}
		}
	}
}
