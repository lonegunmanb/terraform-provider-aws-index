package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"cmp"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func mutualAuthPlantimeValidate(mutualAuthPath cty.Path, mutualAuth cty.Value, diags *diag.Diagnostics) {
	modePath := mutualAuthPath.GetAttr(names.AttrMode)
	mode := mutualAuth.GetAttr(names.AttrMode)
	if !mode.IsKnown() {
		return
	}
	if mode.IsNull() {
		return
	}

	trustStoreARNPath := mutualAuthPath.GetAttr("trust_store_arn")
	trustStoreARN := mutualAuth.GetAttr("trust_store_arn")

	switch mode := mode.AsString(); mode {
	case mutualAuthenticationVerify:
		if trustStoreARN.IsNull() {
			*diags = append(*diags, errs.NewAttributeRequiredWhenError(trustStoreARNPath, modePath, mode))
		}

	default:
		advertisePath := mutualAuthPath.GetAttr("advertise_trust_store_ca_names")
		advertise := mutualAuth.GetAttr("advertise_trust_store_ca_names")
		if !advertise.IsNull() {
			*diags = append(*diags, errs.NewAttributeConflictsWhenError(advertisePath, modePath, mode))
		}

		ignorePath := mutualAuthPath.GetAttr("ignore_client_certificate_expiry")
		ignore := mutualAuth.GetAttr("ignore_client_certificate_expiry")
		if !ignore.IsNull() {
			*diags = append(*diags, errs.NewAttributeConflictsWhenError(ignorePath, modePath, mode))
		}

		if !trustStoreARN.IsNull() {
			*diags = append(*diags, errs.NewAttributeConflictsWhenError(trustStoreARNPath, modePath, mode))
		}
	}
}
