package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func customizeDiffLoadBalancerNLB(_ context.Context, diff *schema.ResourceDiff, v any) error {
	// The current criteria for determining if the operation should be ForceNew:
	// - lb of type "network"
	// - existing resource (id is not "")
	// - there are subnet removals
	//   OR security groups are being added where none currently exist
	//   OR all security groups are being removed
	//
	// Any other combination should be treated as normal. At this time, subnet
	// handling is the only known difference between Network Load Balancers and
	// Application Load Balancers, so the logic below is simple individual checks.
	// If other differences arise we'll want to refactor to check other
	// conditions in combinations, but for now all we handle is subnets
	if lbType := awstypes.LoadBalancerTypeEnum(diff.Get("load_balancer_type").(string)); lbType != awstypes.LoadBalancerTypeEnumNetwork {
		return nil
	}

	if diff.Id() == "" {
		return nil
	}

	config := diff.GetRawConfig()

	// Subnet diffs.
	// Check for changes here -- SetNewComputed will modify HasChange.
	hasSubnetMappingChanges, hasSubnetsChanges := diff.HasChange("subnet_mapping"), diff.HasChange(names.AttrSubnets)
	if hasSubnetMappingChanges {
		if v := config.GetAttr("subnet_mapping"); v.IsWhollyKnown() {
			o, n := diff.GetChange("subnet_mapping")
			os, ns := o.(*schema.Set), n.(*schema.Set)

			deltaN := ns.Len() - os.Len()
			switch {
			case deltaN == 0:
				// No change in number of subnet mappings, but one of the mappings did change.
				fallthrough
			case deltaN < 0:
				// Subnet mappings removed.
				if err := diff.ForceNew("subnet_mapping"); err != nil {
					return err
				}
			case deltaN > 0:
				// Subnet mappings added. Ensure that the previous mappings didn't change.
				if ns.Intersection(os).Len() != os.Len() {
					if err := diff.ForceNew("subnet_mapping"); err != nil {
						return err
					}
				}
			}
		}

		if err := diff.SetNewComputed(names.AttrSubnets); err != nil {
			return err
		}
	}
	if hasSubnetsChanges {
		if v := config.GetAttr(names.AttrSubnets); v.IsWhollyKnown() {
			o, n := diff.GetChange(names.AttrSubnets)
			os, ns := o.(*schema.Set), n.(*schema.Set)

			// In-place increase in number of subnets only.
			if deltaN := ns.Len() - os.Len(); deltaN <= 0 {
				if err := diff.ForceNew(names.AttrSubnets); err != nil {
					return err
				}
			}
		}

		if err := diff.SetNewComputed("subnet_mapping"); err != nil {
			return err
		}
	}

	// Get diff for security groups.
	if diff.HasChange(names.AttrSecurityGroups) {
		if v := config.GetAttr(names.AttrSecurityGroups); v.IsWhollyKnown() {
			o, n := diff.GetChange(names.AttrSecurityGroups)
			os, ns := o.(*schema.Set), n.(*schema.Set)

			if (os.Len() == 0 && ns.Len() > 0) || (ns.Len() == 0 && os.Len() > 0) {
				if err := diff.ForceNew(names.AttrSecurityGroups); err != nil {
					return err
				}
			}
		}
	}

	return nil
}
