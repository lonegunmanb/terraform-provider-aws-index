package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"cmp"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenListenerActionRedirectConfig(apiObject *awstypes.RedirectActionConfig) []any {
	if apiObject == nil {
		return []any{}
	}

	tfMap := map[string]any{}
	if apiObject.Host != nil {
		tfMap["host"] = aws.ToString(apiObject.Host)
	}
	if apiObject.Path != nil {
		tfMap[names.AttrPath] = aws.ToString(apiObject.Path)
	}
	if apiObject.Port != nil {
		tfMap[names.AttrPort] = aws.ToString(apiObject.Port)
	}
	if apiObject.Protocol != nil {
		tfMap[names.AttrProtocol] = aws.ToString(apiObject.Protocol)
	}
	if apiObject.Query != nil {
		tfMap["query"] = aws.ToString(apiObject.Query)
	}
	if string(apiObject.StatusCode) != "" {
		tfMap[names.AttrStatusCode] = apiObject.StatusCode
	}

	return []any{tfMap}
}
