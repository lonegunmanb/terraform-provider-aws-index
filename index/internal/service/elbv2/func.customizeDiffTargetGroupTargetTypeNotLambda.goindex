package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func customizeDiffTargetGroupTargetTypeNotLambda(_ context.Context, diff *schema.ResourceDiff, meta any) error {
	targetType := diff.Get("target_type").(string)
	if awstypes.TargetTypeEnum(targetType) == awstypes.TargetTypeEnumLambda {
		return nil
	}

	config := diff.GetRawConfig()

	if v := config.GetAttr(names.AttrPort); v.IsKnown() && v.IsNull() {
		return sdkdiag.DiagnosticError(errs.NewAttributeRequiredWhenError(
			cty.GetAttrPath(names.AttrPort),
			cty.GetAttrPath("target_type"),
			targetType,
		))
	}

	if v := config.GetAttr(names.AttrProtocol); v.IsKnown() && v.IsNull() {
		return sdkdiag.DiagnosticError(errs.NewAttributeRequiredWhenError(
			cty.GetAttrPath(names.AttrProtocol),
			cty.GetAttrPath("target_type"),
			targetType,
		))
	}

	if v := config.GetAttr(names.AttrVPCID); v.IsKnown() && v.IsNull() {
		return sdkdiag.DiagnosticError(errs.NewAttributeRequiredWhenError(
			cty.GetAttrPath(names.AttrVPCID),
			cty.GetAttrPath("target_type"),
			targetType,
		))
	}

	return nil
}
