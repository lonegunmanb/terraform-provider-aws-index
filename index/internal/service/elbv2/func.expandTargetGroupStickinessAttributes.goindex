package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTargetGroupStickinessAttributes(tfMap map[string]any, protocol awstypes.ProtocolEnum) []awstypes.TargetGroupAttribute {
	if tfMap == nil {
		return nil
	}

	apiObjects := []awstypes.TargetGroupAttribute{
		{
			Key:   aws.String(targetGroupAttributeStickinessEnabled),
			Value: flex.BoolValueToString(tfMap[names.AttrEnabled].(bool)),
		},
		{
			Key:   aws.String(targetGroupAttributeStickinessType),
			Value: aws.String(tfMap[names.AttrType].(string)),
		},
	}

	switch protocol {
	case awstypes.ProtocolEnumHttp, awstypes.ProtocolEnumHttps:
		switch stickinessType := tfMap[names.AttrType].(string); stickinessType {
		case stickinessTypeLBCookie:
			apiObjects = append(apiObjects,
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeStickinessLBCookieDurationSeconds),
					Value: flex.IntValueToString(tfMap["cookie_duration"].(int)),
				})
		case stickinessTypeAppCookie:
			apiObjects = append(apiObjects,
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeStickinessAppCookieCookieName),
					Value: aws.String(tfMap["cookie_name"].(string)),
				},
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeStickinessAppCookieDurationSeconds),
					Value: flex.IntValueToString(tfMap["cookie_duration"].(int)),
				})
		}
	}

	return apiObjects
}
