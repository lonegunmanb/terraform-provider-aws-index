package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitForNoTrustStoreAssociations(ctx context.Context, conn *elasticloadbalancingv2.Client, arn string, timeout time.Duration) error {
	input := &elasticloadbalancingv2.DescribeTrustStoreAssociationsInput{
		TrustStoreArn: aws.String(arn),
	}

	_, err := tfresource.RetryUntilEqual(ctx, timeout, 0, func() (int, error) {
		associations, err := findTrustStoreAssociations(ctx, conn, input)

		if tfresource.NotFound(err) {
			return 0, nil
		}

		if err != nil {
			return 0, err
		}

		return len(associations), nil
	})

	return err
}
