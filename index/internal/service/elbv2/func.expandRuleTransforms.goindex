package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRuleTransforms(tfList []any) []awstypes.RuleTransform {
	var apiObjects []awstypes.RuleTransform

	for _, tfMapRaw := range tfList {
		if tfMapRaw == nil {
			continue
		}
		tfMap := tfMapRaw.(map[string]any)
		apiObject := awstypes.RuleTransform{}

		if v, ok := tfMap[names.AttrType]; ok && v.(string) != "" {
			apiObject.Type = awstypes.TransformTypeEnum(v.(string))
		}
		if v, ok := tfMap["host_header_rewrite_config"].([]any); ok && len(v) > 0 {
			apiObject.HostHeaderRewriteConfig = expandHostHeaderRewriteConfig(v[0].(map[string]any))
		}
		if v, ok := tfMap["url_rewrite_config"].([]any); ok && len(v) > 0 {
			apiObject.UrlRewriteConfig = expandURLRewriteConfig(v[0].(map[string]any))
		}
		apiObjects = append(apiObjects, apiObject)
	}
	return apiObjects
}
