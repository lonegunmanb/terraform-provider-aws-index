package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"log"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
)
func resourceTrustStoreRevocationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBV2Client(ctx)

	s3Bucket := d.Get("revocations_s3_bucket").(string)
	s3Key := d.Get("revocations_s3_key").(string)
	trustStoreARN := d.Get("trust_store_arn").(string)
	input := &elasticloadbalancingv2.AddTrustStoreRevocationsInput{
		RevocationContents: []awstypes.RevocationContent{{
			S3Bucket: aws.String(s3Bucket),
			S3Key:    aws.String(s3Key),
		}},
		TrustStoreArn: aws.String(trustStoreARN),
	}

	if v, ok := d.GetOk("revocations_s3_object_version"); ok {
		input.RevocationContents[0].S3ObjectVersion = aws.String(v.(string))
	}

	output, err := conn.AddTrustStoreRevocations(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ELBv2 Trust Store (%s) Revocation (s3://%s/%s): %s", trustStoreARN, s3Bucket, s3Key, err)
	}

	revocationID := aws.ToInt64(output.TrustStoreRevocations[0].RevocationId)
	id, err := flex.FlattenResourceId([]string{trustStoreARN, strconv.FormatInt(revocationID, 10)}, trustStoreRevocationResourceIDPartCount, false)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ELBv2 Trust Store (%s) Revocation (s3://%s/%s): %s", trustStoreARN, s3Bucket, s3Key, err)
	}

	d.SetId(id)

	_, err = tfresource.RetryWhenNotFound(ctx, d.Timeout(schema.TimeoutCreate), func() (any, error) {
		return findTrustStoreRevocationByTwoPartKey(ctx, conn, trustStoreARN, revocationID)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for ELBv2 Trust Store Revocation (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceTrustStoreRevocationRead(ctx, d, meta)...)
}
