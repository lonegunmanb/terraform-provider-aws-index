package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"cmp"
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func listenerActionRuntimeValidate(actionPath cty.Path, action map[string]any, diags *diag.Diagnostics) {
	actionType := awstypes.ActionTypeEnum(action[names.AttrType].(string))

	if v, ok := action["target_group_arn"].(string); ok && v != "" {
		if actionType != awstypes.ActionTypeEnumForward {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("target_group_arn"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}

	if v, ok := action["forward"].([]any); ok && len(v) > 0 {
		if actionType != awstypes.ActionTypeEnumForward {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("forward"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}

	if v, ok := action["authenticate_cognito"].([]any); ok && len(v) > 0 {
		if actionType != awstypes.ActionTypeEnumAuthenticateCognito {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("authenticate_cognito"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}

	if v, ok := action["authenticate_oidc"].([]any); ok && len(v) > 0 {
		if actionType != awstypes.ActionTypeEnumAuthenticateOidc {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("authenticate_oidc"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}

	if v, ok := action["fixed_response"].([]any); ok && len(v) > 0 {
		if actionType != awstypes.ActionTypeEnumFixedResponse {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("fixed_response"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}

	if v, ok := action["redirect"].([]any); ok && len(v) > 0 {
		if actionType != awstypes.ActionTypeEnumRedirect {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				actionPath.GetAttr("redirect"),
				actionPath.GetAttr(names.AttrType),
				string(actionType),
			))
		}
	}
}
