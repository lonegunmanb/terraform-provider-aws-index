package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceListenerRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBV2Client(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		if d.HasChange(names.AttrPriority) {
			input := &elasticloadbalancingv2.SetRulePrioritiesInput{
				RulePriorities: []awstypes.RulePriorityPair{
					{
						RuleArn:  aws.String(d.Id()),
						Priority: aws.Int32(int32(d.Get(names.AttrPriority).(int))),
					},
				},
			}

			_, err := conn.SetRulePriorities(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating ELB v2 Listener Rule (%s): setting priority: %s", d.Id(), err)
			}
		}

		requestUpdate := false
		input := &elasticloadbalancingv2.ModifyRuleInput{
			RuleArn: aws.String(d.Id()),
		}

		if d.HasChange(names.AttrAction) {
			input.Actions = expandListenerActions(cty.GetAttrPath(names.AttrAction), d.Get(names.AttrAction).([]any), &diags)
			if diags.HasError() {
				return diags
			}
			requestUpdate = true
		}

		if d.HasChange(names.AttrCondition) {
			var err error
			input.Conditions, err = expandRuleConditions(d.Get(names.AttrCondition).(*schema.Set).List())
			if err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
			requestUpdate = true
		}

		if requestUpdate {
			resp, err := conn.ModifyRule(ctx, input)
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "modifying LB Listener Rule: %s", err)
			}

			if len(resp.Rules) == 0 {
				return sdkdiag.AppendErrorf(diags, "modifying creating LB Listener Rule: no rules returned in response")
			}
		}
	}

	return append(diags, resourceListenerRuleRead(ctx, d, meta)...)
}
