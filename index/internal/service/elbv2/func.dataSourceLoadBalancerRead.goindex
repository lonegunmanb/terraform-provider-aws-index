package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceLoadBalancerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBV2Client(ctx)
	ignoreTagsConfig := meta.(*conns.AWSClient).IgnoreTagsConfig(ctx)

	tagsToMatch := tftags.New(ctx, d.Get(names.AttrTags).(map[string]any)).IgnoreAWS().IgnoreConfig(ignoreTagsConfig)

	input := &elasticloadbalancingv2.DescribeLoadBalancersInput{}

	if v, ok := d.GetOk(names.AttrARN); ok {
		input.LoadBalancerArns = []string{v.(string)}
	} else if v, ok := d.GetOk(names.AttrName); ok {
		input.Names = []string{v.(string)}
	}

	results, err := findLoadBalancers(ctx, conn, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading ELBv2 Load Balancers: %s", err)
	}

	if len(tagsToMatch) > 0 {
		var loadBalancers []awstypes.LoadBalancer

		for _, loadBalancer := range results {
			arn := aws.ToString(loadBalancer.LoadBalancerArn)
			tags, err := listTags(ctx, conn, arn)

			if errs.IsA[*awstypes.LoadBalancerNotFoundException](err) {
				continue
			}

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "listing tags for (%s): %s", arn, err)
			}

			if !tags.ContainsAll(tagsToMatch) {
				continue
			}

			loadBalancers = append(loadBalancers, loadBalancer)
		}

		results = loadBalancers
	}

	if len(results) != 1 {
		return sdkdiag.AppendErrorf(diags, "Search returned %d results, please revise so only one is returned", len(results))
	}

	lb := results[0]
	d.SetId(aws.ToString(lb.LoadBalancerArn))
	d.Set(names.AttrARN, lb.LoadBalancerArn)
	d.Set("arn_suffix", suffixFromARN(lb.LoadBalancerArn))
	d.Set("customer_owned_ipv4_pool", lb.CustomerOwnedIpv4Pool)
	d.Set(names.AttrDNSName, lb.DNSName)
	d.Set("enforce_security_group_inbound_rules_on_private_link_traffic", lb.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic)
	d.Set(names.AttrIPAddressType, lb.IpAddressType)
	if err := d.Set("ipam_pools", flattenIPAMPools(lb.IpamPools)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting ipam_pools: %s", err)
	}
	d.Set(names.AttrName, lb.LoadBalancerName)
	d.Set("internal", string(lb.Scheme) == "internal")
	d.Set("load_balancer_type", lb.Type)
	d.Set(names.AttrSecurityGroups, lb.SecurityGroups)
	if err := d.Set("subnet_mapping", flattenSubnetMappingsFromAvailabilityZones(lb.AvailabilityZones)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting subnet_mapping: %s", err)
	}
	if err := d.Set(names.AttrSubnets, flattenSubnetsFromAvailabilityZones(lb.AvailabilityZones)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting subnets: %s", err)
	}
	d.Set(names.AttrVPCID, lb.VpcId)
	d.Set("zone_id", lb.CanonicalHostedZoneId)

	attributes, err := findLoadBalancerAttributesByARN(ctx, conn, d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading ELBv2 Load Balancer (%s) attributes: %s", d.Id(), err)
	}

	if err := d.Set("access_logs", []any{flattenLoadBalancerAccessLogsAttributes(attributes)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting access_logs: %s", err)
	}

	if err := d.Set("connection_logs", []any{flattenLoadBalancerConnectionLogsAttributes(attributes)}); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting connection_logs: %s", err)
	}

	loadBalancerAttributes.flatten(d, attributes)

	return diags
}
