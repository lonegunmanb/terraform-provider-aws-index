package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func targetGroupRuntimeValidation(d *schema.ResourceData, diags *diag.Diagnostics) {
	if targetType := awstypes.TargetTypeEnum(d.Get("target_type").(string)); targetType == awstypes.TargetTypeEnumLambda {
		targetType := string(targetType)
		if _, ok := d.GetOk(names.AttrProtocol); ok {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				cty.GetAttrPath(names.AttrProtocol),
				cty.GetAttrPath("target_type"),
				targetType,
			))
		}

		if _, ok := d.GetOk("protocol_version"); ok {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				cty.GetAttrPath("protocol_version"),
				cty.GetAttrPath("target_type"),
				targetType,
			))
		}

		if _, ok := d.GetOk(names.AttrPort); ok {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				cty.GetAttrPath(names.AttrPort),
				cty.GetAttrPath("target_type"),
				targetType,
			))
		}

		if _, ok := d.GetOk(names.AttrVPCID); ok {
			*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
				cty.GetAttrPath(names.AttrPort),
				cty.GetAttrPath("target_type"),
				targetType,
			))
		}

		if healthChecks := d.Get(names.AttrHealthCheck).([]any); len(healthChecks) == 1 {
			healthCheck := healthChecks[0].(map[string]any)
			path := cty.GetAttrPath(names.AttrHealthCheck)

			if healthCheckProtocol := healthCheck[names.AttrProtocol].(string); healthCheckProtocol != "" {
				*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
					path.GetAttr(names.AttrProtocol),
					cty.GetAttrPath("target_type"),
					targetType,
				))
			}
		}
	} else {
		if _, ok := d.GetOk("protocol_version"); ok {
			protocol := awstypes.ProtocolEnum(d.Get(names.AttrProtocol).(string))
			switch protocol {
			case awstypes.ProtocolEnumHttp, awstypes.ProtocolEnumHttps:
				// Noop
			default:
				protocol := string(protocol)
				*diags = append(*diags, errs.NewAttributeConflictsWhenWillBeError(
					cty.GetAttrPath("protocol_version"),
					cty.GetAttrPath(names.AttrProtocol),
					protocol,
				))
			}
		}
	}
}
