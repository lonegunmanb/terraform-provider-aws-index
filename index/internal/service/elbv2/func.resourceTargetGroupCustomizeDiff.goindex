package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTargetGroupCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, meta any) error {
	healthCheck := make(map[string]any)
	if healthChecks := diff.Get(names.AttrHealthCheck).([]any); len(healthChecks) == 1 {
		healthCheck = healthChecks[0].(map[string]any)
	}

	healthCheckPath := cty.GetAttrPath(names.AttrHealthCheck).IndexInt(0)

	if p, ok := healthCheck[names.AttrProtocol].(string); ok && strings.ToUpper(p) == string(awstypes.ProtocolEnumTcp) {
		if m := healthCheck["matcher"].(string); m != "" {
			return sdkdiag.DiagnosticError(errs.NewAttributeConflictsWhenError(
				healthCheckPath.GetAttr("matcher"),
				healthCheckPath.GetAttr(names.AttrProtocol),
				p,
			))
		}

		if m := healthCheck[names.AttrPath].(string); m != "" {
			return sdkdiag.DiagnosticError(errs.NewAttributeConflictsWhenError(
				healthCheckPath.GetAttr(names.AttrPath),
				healthCheckPath.GetAttr(names.AttrProtocol),
				p,
			))
		}
	}

	protocol := awstypes.ProtocolEnum(diff.Get(names.AttrProtocol).(string))

	switch protocol {
	case awstypes.ProtocolEnumHttp, awstypes.ProtocolEnumHttps:
		if p, ok := healthCheck[names.AttrProtocol].(string); ok && strings.ToUpper(p) == string(awstypes.ProtocolEnumTcp) {
			return fmt.Errorf("Attribute %q cannot have value %q when %q is %q.",
				errs.PathString(healthCheckPath.GetAttr(names.AttrProtocol)),
				awstypes.ProtocolEnumTcp,
				errs.PathString(cty.GetAttrPath(names.AttrProtocol)),
				protocol,
			)
		}
	}

	if diff.Id() == "" {
		return nil
	}

	return nil
}
