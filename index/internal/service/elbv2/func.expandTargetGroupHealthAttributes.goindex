package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTargetGroupHealthAttributes(tfMap map[string]any, protocol awstypes.ProtocolEnum) []awstypes.TargetGroupAttribute {
	if tfMap == nil {
		return nil
	}

	var apiObjects []awstypes.TargetGroupAttribute

	// Supported on Application Load Balancers and Network Load Balancers.
	switch protocol {
	case awstypes.ProtocolEnumGeneve:
	default:
		if v, ok := tfMap["dns_failover"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)
			apiObjects = append(apiObjects,
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeTargetGroupHealthDNSFailoverMinimumHealthyTargetsCount),
					Value: aws.String(tfMap["minimum_healthy_targets_count"].(string)),
				},
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeTargetGroupHealthDNSFailoverMinimumHealthyTargetsPercentage),
					Value: aws.String(tfMap["minimum_healthy_targets_percentage"].(string)),
				},
			)
		}

		if v, ok := tfMap["unhealthy_state_routing"].([]any); ok && len(v) > 0 && v[0] != nil {
			tfMap := v[0].(map[string]any)
			apiObjects = append(apiObjects,
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeTargetGroupHealthUnhealthyStateRoutingMinimumHealthyTargetsCount),
					Value: flex.IntValueToString(tfMap["minimum_healthy_targets_count"].(int)),
				},
				awstypes.TargetGroupAttribute{
					Key:   aws.String(targetGroupAttributeTargetGroupHealthUnhealthyStateRoutingMinimumHealthyTargetsPercentage),
					Value: aws.String(tfMap["minimum_healthy_targets_percentage"].(string)),
				},
			)
		}
	}

	return apiObjects
}
