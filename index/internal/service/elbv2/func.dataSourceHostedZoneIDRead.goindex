package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
)
func dataSourceHostedZoneIDRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	lbType := awstypes.LoadBalancerTypeEnumApplication
	if v, ok := d.GetOk("load_balancer_type"); ok {
		lbType = awstypes.LoadBalancerTypeEnum(v.(string))
	}
	switch region := meta.(*conns.AWSClient).Region(ctx); lbType {
	case awstypes.LoadBalancerTypeEnumApplication:
		if v, ok := hostedZoneIDPerRegionALBMap[region]; ok {
			d.SetId(v)
		} else {
			return sdkdiag.AppendErrorf(diags, "unsupported ELBv2 Region (%s)", region)
		}
	case awstypes.LoadBalancerTypeEnumNetwork:
		if v, ok := hostedZoneIDPerRegionNLBMap[region]; ok {
			d.SetId(v)
		} else {
			return sdkdiag.AppendErrorf(diags, "unsupported ELBv2 Region (%s)", region)
		}
	}

	return diags
}
