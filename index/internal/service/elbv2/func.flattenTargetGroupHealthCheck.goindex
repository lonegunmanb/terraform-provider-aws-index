package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTargetGroupHealthCheck(apiObject *awstypes.TargetGroup) []any {
	tfMap := map[string]any{}
	if apiObject.HealthCheckEnabled != nil {
		tfMap[names.AttrEnabled] = aws.ToBool(apiObject.HealthCheckEnabled)
	}
	if apiObject.HealthyThresholdCount != nil {
		tfMap["healthy_threshold"] = aws.ToInt32(apiObject.HealthyThresholdCount)
	}
	if apiObject.HealthCheckIntervalSeconds != nil {
		tfMap[names.AttrInterval] = aws.ToInt32(apiObject.HealthCheckIntervalSeconds)
	}
	if apiObject.HealthCheckPort != nil {
		tfMap[names.AttrPort] = aws.ToString(apiObject.HealthCheckPort)
	}
	if apiObject.HealthCheckProtocol != "" {
		tfMap[names.AttrProtocol] = apiObject.HealthCheckProtocol
	}
	if apiObject.HealthCheckTimeoutSeconds != nil {
		tfMap[names.AttrTimeout] = aws.ToInt32(apiObject.HealthCheckTimeoutSeconds)
	}
	if apiObject.UnhealthyThresholdCount != nil {
		tfMap["unhealthy_threshold"] = aws.ToInt32(apiObject.UnhealthyThresholdCount)
	}
	if apiObject.HealthCheckPath != nil {
		tfMap[names.AttrPath] = aws.ToString(apiObject.HealthCheckPath)
	}

	if apiObject := apiObject.Matcher; apiObject != nil {
		if v := apiObject.HttpCode; v != nil {
			tfMap["matcher"] = aws.ToString(v)
		}
		if v := apiObject.GrpcCode; v != nil {
			tfMap["matcher"] = aws.ToString(v)
		}
	}

	return []any{tfMap}
}
