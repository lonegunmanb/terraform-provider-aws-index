package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTargetGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBV2Client(ctx)

	name := create.NewNameGenerator(
		create.WithConfiguredName(d.Get(names.AttrName).(string)),
		create.WithConfiguredPrefix(d.Get(names.AttrNamePrefix).(string)),
		create.WithDefaultPrefix("tf-"),
	).Generate()
	exist, err := findTargetGroupByName(ctx, conn, name)

	if err != nil && !tfresource.NotFound(err) {
		return sdkdiag.AppendErrorf(diags, "reading ELBv2 Target Group (%s): %s", name, err)
	}

	if exist != nil {
		return sdkdiag.AppendErrorf(diags, "ELBv2 Target Group (%s) already exists", name)
	}

	targetGroupRuntimeValidation(d, &diags)

	protocol := awstypes.ProtocolEnum(d.Get(names.AttrProtocol).(string))
	targetType := awstypes.TargetTypeEnum(d.Get("target_type").(string))
	input := &elasticloadbalancingv2.CreateTargetGroupInput{
		Name:       aws.String(name),
		Tags:       getTagsIn(ctx),
		TargetType: targetType,
	}

	if targetType != awstypes.TargetTypeEnumLambda {
		input.Port = aws.Int32(int32(d.Get(names.AttrPort).(int)))
		input.Protocol = protocol
		switch protocol {
		case awstypes.ProtocolEnumHttp, awstypes.ProtocolEnumHttps:
			input.ProtocolVersion = aws.String(d.Get("protocol_version").(string))
		}
		input.VpcId = aws.String(d.Get(names.AttrVPCID).(string))

		switch targetType {
		case awstypes.TargetTypeEnumInstance, awstypes.TargetTypeEnumIp:
			if v, ok := d.GetOk(names.AttrIPAddressType); ok {
				input.IpAddressType = awstypes.TargetGroupIpAddressTypeEnum(v.(string))
			}
		}
	}

	if v, ok := d.GetOk(names.AttrHealthCheck); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)

		input.HealthCheckEnabled = aws.Bool(tfMap[names.AttrEnabled].(bool))
		input.HealthCheckIntervalSeconds = aws.Int32(int32(tfMap[names.AttrInterval].(int)))
		input.HealthyThresholdCount = aws.Int32(int32(tfMap["healthy_threshold"].(int)))
		input.UnhealthyThresholdCount = aws.Int32(int32(tfMap["unhealthy_threshold"].(int)))

		if v, ok := tfMap[names.AttrTimeout].(int); ok && v != 0 {
			input.HealthCheckTimeoutSeconds = aws.Int32(int32(v))
		}

		healthCheckProtocol := awstypes.ProtocolEnum(tfMap[names.AttrProtocol].(string))
		if healthCheckProtocol != awstypes.ProtocolEnumTcp {
			if v, ok := tfMap[names.AttrPath].(string); ok && v != "" {
				input.HealthCheckPath = aws.String(v)
			}

			if v, ok := tfMap["matcher"].(string); ok && v != "" {
				if protocolVersion := d.Get("protocol_version").(string); protocolVersion == protocolVersionGRPC {
					input.Matcher = &awstypes.Matcher{
						GrpcCode: aws.String(v),
					}
				} else {
					input.Matcher = &awstypes.Matcher{
						HttpCode: aws.String(v),
					}
				}
			}
		}

		if targetType != awstypes.TargetTypeEnumLambda {
			input.HealthCheckPort = aws.String(tfMap[names.AttrPort].(string))
			input.HealthCheckProtocol = healthCheckProtocol
		}
	}

	output, err := conn.CreateTargetGroup(ctx, input)

	// Some partitions (e.g. ISO) may not support tag-on-create.
	partition := meta.(*conns.AWSClient).Partition(ctx)
	if input.Tags != nil && errs.IsUnsupportedOperationInPartitionError(partition, err) {
		input.Tags = nil

		output, err = conn.CreateTargetGroup(ctx, input)
	}

	// Tags are not supported on creation with some protocol types(i.e. GENEVE)
	// Retry creation without tags
	if input.Tags != nil && tfawserr.ErrMessageContains(err, errCodeValidationError, tagsOnCreationErrMessage) {
		input.Tags = nil

		output, err = conn.CreateTargetGroup(ctx, input)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ELBv2 Target Group (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.TargetGroups[0].TargetGroupArn))

	_, err = tfresource.RetryWhenNotFound(ctx, elbv2PropagationTimeout, func() (any, error) {
		return findTargetGroupByARN(ctx, conn, d.Id())
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for ELBv2 Target Group (%s) create: %s", d.Id(), err)
	}

	var attributes []awstypes.TargetGroupAttribute

	switch targetType {
	case awstypes.TargetTypeEnumInstance, awstypes.TargetTypeEnumIp:
		if v, ok := d.GetOk("stickiness"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			attributes = append(attributes, expandTargetGroupStickinessAttributes(v.([]any)[0].(map[string]any), protocol)...)
		}

		if v, ok := d.GetOk("target_failover"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			attributes = append(attributes, expandTargetGroupTargetFailoverAttributes(v.([]any)[0].(map[string]any), protocol)...)
		}

		if v, ok := d.GetOk("target_group_health"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			attributes = append(attributes, expandTargetGroupHealthAttributes(v.([]any)[0].(map[string]any), protocol)...)
		}

		if v, ok := d.GetOk("target_health_state"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			attributes = append(attributes, expandTargetGroupTargetHealthStateAttributes(v.([]any)[0].(map[string]any), protocol)...)
		}
	}

	attributes = append(attributes, targetGroupAttributes.expand(d, targetType, false)...)

	if len(attributes) > 0 {
		input := &elasticloadbalancingv2.ModifyTargetGroupAttributesInput{
			Attributes:     attributes,
			TargetGroupArn: aws.String(d.Id()),
		}

		_, err := conn.ModifyTargetGroupAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying ELBv2 Target Group (%s) attributes: %s", d.Id(), err)
		}
	}

	// For partitions not supporting tag-on-create, attempt tag after create.
	if tags := getTagsIn(ctx); input.Tags == nil && len(tags) > 0 {
		err := createTags(ctx, conn, d.Id(), tags)

		// If default tags only, continue. Otherwise, error.
		if v, ok := d.GetOk(names.AttrTags); (!ok || len(v.(map[string]any)) == 0) && errs.IsUnsupportedOperationInPartitionError(partition, err) {
			return append(diags, resourceTargetGroupRead(ctx, d, meta)...)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting ELBv2 Target Group (%s) tags: %s", d.Id(), err)
		}
	}

	return append(diags, resourceTargetGroupRead(ctx, d, meta)...)
}
