package github.com/hashicorp/terraform-provider-aws/internal/service/elbv2
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLoadBalancerAccessLogsAttributes(tfMap map[string]any, update bool) []awstypes.LoadBalancerAttribute {
	if tfMap == nil {
		return nil
	}

	var apiObjects []awstypes.LoadBalancerAttribute

	if v, ok := tfMap[names.AttrEnabled].(bool); ok {
		apiObjects = append(apiObjects, awstypes.LoadBalancerAttribute{
			Key:   aws.String(loadBalancerAttributeAccessLogsS3Enabled),
			Value: flex.BoolValueToString(v),
		})

		if v {
			if v, ok := tfMap[names.AttrBucket].(string); ok && (update || v != "") {
				apiObjects = append(apiObjects, awstypes.LoadBalancerAttribute{
					Key:   aws.String(loadBalancerAttributeAccessLogsS3Bucket),
					Value: aws.String(v),
				})
			}

			if v, ok := tfMap[names.AttrPrefix].(string); ok && (update || v != "") {
				apiObjects = append(apiObjects, awstypes.LoadBalancerAttribute{
					Key:   aws.String(loadBalancerAttributeAccessLogsS3Prefix),
					Value: aws.String(v),
				})
			}
		}
	}

	return apiObjects
}
