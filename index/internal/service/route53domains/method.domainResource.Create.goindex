package github.com/hashicorp/terraform-provider-aws/internal/service/route53domains
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53domains"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53domains/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwplanmodifiers "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfroute53 "github.com/hashicorp/terraform-provider-aws/internal/service/route53"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *domainResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data domainResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().Route53DomainsClient(ctx)

	domainName := fwflex.StringValueFromFramework(ctx, data.DomainName)
	input := &route53domains.RegisterDomainInput{}
	response.Diagnostics.Append(fwflex.Expand(ctx, data, input)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Additional fields.
	input.PrivacyProtectAdminContact = fwflex.BoolFromFramework(ctx, data.AdminPrivacy)
	input.PrivacyProtectBillingContact = fwflex.BoolFromFramework(ctx, data.BillingPrivacy)
	input.PrivacyProtectRegistrantContact = fwflex.BoolFromFramework(ctx, data.RegistrantPrivacy)
	input.PrivacyProtectTechContact = fwflex.BoolFromFramework(ctx, data.TechPrivacy)

	output, err := conn.RegisterDomain(ctx, input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating Route 53 Domains Domain (%s)", domainName), err.Error())

		return
	}

	response.State.SetAttribute(ctx, path.Root(names.AttrID), data.DomainName) // Set 'id' so as to taint the resource.

	if _, err := waitOperationSucceeded(ctx, conn, aws.ToString(output.OperationId), r.CreateTimeout(ctx, data.Timeouts)); err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("waiting for Route 53 Domains Domain (%s) create", domainName), err.Error())

		return
	}

	if err := createTags(ctx, conn, domainName, getTagsIn(ctx)); err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("setting Route 53 Domains Domain (%s) tags", domainName), err.Error())

		return
	}

	if !data.NameServers.IsUnknown() {
		var apiObjects []awstypes.Nameserver
		response.Diagnostics.Append(fwflex.Expand(ctx, &data.NameServers, &apiObjects)...)
		if response.Diagnostics.HasError() {
			return
		}

		if err := modifyDomainNameservers(ctx, conn, domainName, apiObjects, r.CreateTimeout(ctx, data.Timeouts)); err != nil {
			response.Diagnostics.AddError("post-registration", err.Error())

			return
		}
	}

	if transferLock := fwflex.BoolValueFromFramework(ctx, data.TransferLock); transferLock {
		if err := modifyDomainTransferLock(ctx, conn, domainName, transferLock, r.CreateTimeout(ctx, data.Timeouts)); err != nil {
			response.Diagnostics.AddError("post-registration", err.Error())

			return
		}
	}

	// Set values for unknowns.
	domainDetail, err := findDomainDetailByName(ctx, conn, domainName)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading Route 53 Domains Domain (%s)", domainName), err.Error())

		return
	}

	fixupDomainDetail(domainDetail)

	response.Diagnostics.Append(fwflex.Flatten(ctx, domainDetail, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Registering a domain creates a Route 53 hosted zone that has the same name as the domain.
	hostedZoneID, err := tfroute53.FindPublicHostedZoneIDByDomainName(ctx, r.Meta().Route53Client(ctx), domainName)

	switch {
	case tfresource.NotFound(err):
		data.HostedZoneID = types.StringNull()
	case err != nil:
		response.Diagnostics.AddError(fmt.Sprintf("reading Route 53 Hosted Zone (%s)", domainName), err.Error())

		return
	default:
		data.HostedZoneID = fwflex.StringToFramework(ctx, hostedZoneID)
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
