package github.com/hashicorp/terraform-provider-aws/internal/service/route53domains
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53domains"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53domains/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwplanmodifiers "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfroute53 "github.com/hashicorp/terraform-provider-aws/internal/service/route53"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *domainResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new domainResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().Route53DomainsClient(ctx)

	domainName := fwflex.StringValueFromFramework(ctx, new.DomainName)

	if !new.AdminContact.Equal(old.AdminContact) ||
		!new.BillingContact.Equal(old.BillingContact) ||
		!new.RegistrantContact.Equal(old.RegistrantContact) ||
		!new.TechContact.Equal(old.TechContact) {
		var adminContact, billingContact, registrantContact, techContact *awstypes.ContactDetail

		if !new.AdminContact.Equal(old.AdminContact) {
			var apiObject awstypes.ContactDetail
			response.Diagnostics.Append(fwflex.Expand(ctx, &new.AdminContact, &apiObject)...)
			if response.Diagnostics.HasError() {
				return
			}
			adminContact = &apiObject
		}

		if !new.BillingContact.Equal(old.BillingContact) {
			var apiObject awstypes.ContactDetail
			response.Diagnostics.Append(fwflex.Expand(ctx, &new.BillingContact, &apiObject)...)
			if response.Diagnostics.HasError() {
				return
			}
			billingContact = &apiObject
		}

		if !new.RegistrantContact.Equal(old.RegistrantContact) {
			var apiObject awstypes.ContactDetail
			response.Diagnostics.Append(fwflex.Expand(ctx, &new.RegistrantContact, &apiObject)...)
			if response.Diagnostics.HasError() {
				return
			}
			registrantContact = &apiObject
		}

		if !new.TechContact.Equal(old.TechContact) {
			var apiObject awstypes.ContactDetail
			response.Diagnostics.Append(fwflex.Expand(ctx, &new.TechContact, &apiObject)...)
			if response.Diagnostics.HasError() {
				return
			}
			techContact = &apiObject
		}

		if err := modifyDomainContact(ctx, conn, domainName, adminContact, billingContact, registrantContact, techContact, r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	if !new.AdminPrivacy.Equal(old.AdminPrivacy) ||
		!new.BillingPrivacy.Equal(old.BillingPrivacy) ||
		!new.RegistrantPrivacy.Equal(old.RegistrantPrivacy) ||
		!new.TechPrivacy.Equal(old.TechPrivacy) {
		if err := modifyDomainContactPrivacy(ctx, conn, domainName, fwflex.BoolValueFromFramework(ctx, new.AdminPrivacy), fwflex.BoolValueFromFramework(ctx, new.BillingPrivacy), fwflex.BoolValueFromFramework(ctx, new.RegistrantPrivacy), fwflex.BoolValueFromFramework(ctx, new.TechPrivacy), r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	if !new.AutoRenew.Equal(old.AutoRenew) {
		if err := modifyDomainAutoRenew(ctx, conn, domainName, fwflex.BoolValueFromFramework(ctx, new.AutoRenew)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	if !new.NameServers.Equal(old.NameServers) && !new.NameServers.IsUnknown() {
		var apiObjects []awstypes.Nameserver
		response.Diagnostics.Append(fwflex.Expand(ctx, &new.NameServers, &apiObjects)...)
		if response.Diagnostics.HasError() {
			return
		}

		if err := modifyDomainNameservers(ctx, conn, domainName, apiObjects, r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	if !new.TransferLock.Equal(old.TransferLock) {
		if err := modifyDomainTransferLock(ctx, conn, domainName, fwflex.BoolValueFromFramework(ctx, new.TransferLock), r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	if !new.DurationInYears.Equal(old.DurationInYears) {
		currentExpirationDate, diags := old.ExpirationDate.ValueRFC3339Time()
		response.Diagnostics.Append(diags...)
		if response.Diagnostics.HasError() {
			return
		}

		renewForYears := fwflex.Int32ValueFromFrameworkInt64(ctx, new.DurationInYears) - fwflex.Int32ValueFromFrameworkInt64(ctx, old.DurationInYears)

		if err := renewDomain(ctx, conn, domainName, currentExpirationDate, renewForYears, r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError("update", err.Error())

			return
		}
	}

	// Set values for unknowns.
	domainDetail, err := findDomainDetailByName(ctx, conn, domainName)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading Route 53 Domains Domain (%s)", domainName), err.Error())

		return
	}

	new.ExpirationDate = timetypes.NewRFC3339TimePointerValue(domainDetail.ExpirationDate)
	new.UpdatedDate = timetypes.NewRFC3339TimePointerValue(domainDetail.UpdatedDate)

	// If the associted public hosted zone was not found its plan value will be Unknown.
	if new.HostedZoneID.IsUnknown() {
		new.HostedZoneID = types.StringNull()
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
