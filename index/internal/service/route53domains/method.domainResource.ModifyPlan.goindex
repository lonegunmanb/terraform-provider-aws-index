package github.com/hashicorp/terraform-provider-aws/internal/service/route53domains
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53domains"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53domains/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwplanmodifiers "github.com/hashicorp/terraform-provider-aws/internal/framework/planmodifiers"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfroute53 "github.com/hashicorp/terraform-provider-aws/internal/service/route53"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *domainResource) ModifyPlan(ctx context.Context, request resource.ModifyPlanRequest, response *resource.ModifyPlanResponse) {
	if !request.State.Raw.IsNull() && !request.Plan.Raw.IsNull() {
		// duration_in_years can only be increased.
		var oldDurationInYears, newDurationInYears types.Int64
		response.Diagnostics.Append(request.State.GetAttribute(ctx, path.Root("duration_in_years"), &oldDurationInYears)...)
		if response.Diagnostics.HasError() {
			return
		}
		response.Diagnostics.Append(request.Plan.GetAttribute(ctx, path.Root("duration_in_years"), &newDurationInYears)...)
		if response.Diagnostics.HasError() {
			return
		}

		if newDurationInYears.ValueInt64() < oldDurationInYears.ValueInt64() {
			response.Diagnostics.AddAttributeError(path.Root("duration_in_years"), "value cannot be decreased", "")
		}

		// expiration_date is newly computed if duration_in_years is changed.
		if newDurationInYears.ValueInt64() != oldDurationInYears.ValueInt64() {
			response.Diagnostics.Append(response.Plan.SetAttribute(ctx, path.Root("expiration_date"), timetypes.NewRFC3339Unknown())...)
			if response.Diagnostics.HasError() {
				return
			}
		} else {
			var expirationDate timetypes.RFC3339
			response.Diagnostics.Append(request.State.GetAttribute(ctx, path.Root("expiration_date"), &expirationDate)...)
			if response.Diagnostics.HasError() {
				return
			}

			response.Diagnostics.Append(response.Plan.SetAttribute(ctx, path.Root("expiration_date"), expirationDate)...)
			if response.Diagnostics.HasError() {
				return
			}
		}
	}
}
