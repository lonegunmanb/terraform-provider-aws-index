package github.com/hashicorp/terraform-provider-aws/internal/service/route53domains
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53domains"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53domains/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRegisteredDomain() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceRegisteredDomainCreate,
		ReadWithoutTimeout:   resourceRegisteredDomainRead,
		UpdateWithoutTimeout: resourceRegisteredDomainUpdate,
		DeleteWithoutTimeout: schema.NoopContext,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
		},

		SchemaFunc: func() map[string]*schema.Schema {
			contactSchema := func() *schema.Schema {
				return &schema.Schema{
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"address_line_1": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"address_line_2": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"city": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"contact_type": {
								Type:             schema.TypeString,
								Optional:         true,
								Computed:         true,
								ValidateDiagFunc: enum.Validate[awstypes.ContactType](),
							},
							"country_code": {
								Type:             schema.TypeString,
								Optional:         true,
								Computed:         true,
								ValidateDiagFunc: enum.Validate[awstypes.CountryCode](),
							},
							names.AttrEmail: {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 254),
							},
							"extra_params": {
								Type:     schema.TypeMap,
								Optional: true,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"fax": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 30),
							},
							"first_name": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"last_name": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"organization_name": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"phone_number": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 30),
							},
							names.AttrState: {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
							"zip_code": {
								Type:         schema.TypeString,
								Optional:     true,
								Computed:     true,
								ValidateFunc: validation.StringLenBetween(0, 255),
							},
						},
					},
				}
			}

			return map[string]*schema.Schema{
				"abuse_contact_email": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"abuse_contact_phone": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"admin_contact": contactSchema(),
				"admin_privacy": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"auto_renew": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"billing_contact": contactSchema(),
				"billing_privacy": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				names.AttrCreationDate: {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrDomainName: {
					Type:     schema.TypeString,
					Required: true,
				},
				"expiration_date": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"name_server": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					MaxItems: 6,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"glue_ips": {
								Type:     schema.TypeSet,
								Optional: true,
								MaxItems: 2,
								Elem: &schema.Schema{
									Type:         schema.TypeString,
									ValidateFunc: validation.IsIPAddress,
								},
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Required: true,
								ValidateFunc: validation.All(
									validation.StringLenBetween(1, 255),
									validation.StringMatch(regexache.MustCompile(`[0-9A-Za-z_.-]*`), "can contain only alphabetical characters (A-Z or a-z), numeric characters (0-9), underscore (_), the minus sign (-), and the period (.)"),
								),
							},
						},
					},
				},
				"registrant_contact": contactSchema(),
				"registrant_privacy": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"registrar_name": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"registrar_url": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"reseller": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"status_list": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"tech_contact":    contactSchema(),
				"tech_privacy": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"transfer_lock": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
				"updated_date": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"whois_server": {
					Type:     schema.TypeString,
					Computed: true,
				},
			}
		},
	}
}
