package github.com/hashicorp/terraform-provider-aws/internal/service/cloudtrail
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTrailRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CloudTrailClient(ctx)

	outputRaw, err := tfresource.RetryWhenNewResourceNotFound(ctx, propagationTimeout, func() (any, error) {
		return findTrailByARN(ctx, conn, d.Id())
	}, d.IsNewResource())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CloudTrail Trail (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudTrail Trail (%s): %s", d.Id(), err)
	}

	trail := outputRaw.(*types.Trail)
	d.Set(names.AttrARN, trail.TrailARN)
	d.Set("cloud_watch_logs_group_arn", trail.CloudWatchLogsLogGroupArn)
	d.Set("cloud_watch_logs_role_arn", trail.CloudWatchLogsRoleArn)
	d.Set("enable_log_file_validation", trail.LogFileValidationEnabled)
	d.Set("home_region", trail.HomeRegion)
	d.Set("include_global_service_events", trail.IncludeGlobalServiceEvents)
	d.Set("is_multi_region_trail", trail.IsMultiRegionTrail)
	d.Set("is_organization_trail", trail.IsOrganizationTrail)
	d.Set(names.AttrKMSKeyID, trail.KmsKeyId)
	d.Set(names.AttrName, trail.Name)
	d.Set(names.AttrS3BucketName, trail.S3BucketName)
	d.Set(names.AttrS3KeyPrefix, trail.S3KeyPrefix)
	d.Set(names.AttrSNSTopicARN, trail.SnsTopicARN)
	if trail.SnsTopicARN != nil {
		parsedSNSTopicARN, err := arn.Parse(*trail.SnsTopicARN)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "parsing SNS Topic ARN (%s): %s", aws.ToString(trail.SnsTopicARN), err)
		}
		if parsedSNSTopicARN.Region != aws.ToString(trail.HomeRegion) || parsedSNSTopicARN.AccountID != meta.(*conns.AWSClient).AccountID(ctx) {
			d.Set("sns_topic_name", trail.SnsTopicARN)
		} else {
			d.Set("sns_topic_name", parsedSNSTopicARN.Resource)
		}
	} else {
		d.Set("sns_topic_name", nil)
	}

	input := cloudtrail.GetTrailStatusInput{
		Name: aws.String(d.Id()),
	}
	if output, err := conn.GetTrailStatus(ctx, &input); err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudTrail Trail (%s) status: %s", d.Id(), err)
	} else {
		d.Set("enable_logging", output.IsLogging)
	}

	if aws.ToBool(trail.HasCustomEventSelectors) {
		input := &cloudtrail.GetEventSelectorsInput{
			TrailName: aws.String(d.Id()),
		}

		output, err := conn.GetEventSelectors(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading CloudTrail Trail (%s) event selectors: %s", d.Id(), err)
		}

		if err := d.Set("event_selector", flattenEventSelector(output.EventSelectors)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting event_selector")
		}

		if err := d.Set("advanced_event_selector", flattenAdvancedEventSelector(output.AdvancedEventSelectors)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting advanced_event_selector")
		}
	}

	if aws.ToBool(trail.HasInsightSelectors) {
		input := &cloudtrail.GetInsightSelectorsInput{
			TrailName: aws.String(d.Id()),
		}

		output, err := conn.GetInsightSelectors(ctx, input)

		if err != nil {
			if !errs.IsA[*types.InsightNotEnabledException](err) {
				return sdkdiag.AppendErrorf(diags, "reading CloudTrail Trail (%s) insight selectors: %s", d.Id(), err)
			}
		} else if err := d.Set("insight_selector", flattenInsightSelector(output.InsightSelectors)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting insight_selector")
		}
	}

	return diags
}
