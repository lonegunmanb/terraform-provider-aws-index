package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenParametersInCacheKeyAndForwardedToOrigin(apiObject *awstypes.ParametersInCacheKeyAndForwardedToOrigin) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := flattenCachePolicyCookiesConfig(apiObject.CookiesConfig); len(v) > 0 {
		tfMap["cookies_config"] = []any{v}
	}

	if v := apiObject.EnableAcceptEncodingBrotli; v != nil {
		tfMap["enable_accept_encoding_brotli"] = aws.ToBool(v)
	}

	if v := apiObject.EnableAcceptEncodingGzip; v != nil {
		tfMap["enable_accept_encoding_gzip"] = aws.ToBool(v)
	}

	if v := flattenCachePolicyHeadersConfig(apiObject.HeadersConfig); len(v) > 0 {
		tfMap["headers_config"] = []any{v}
	}

	if v := flattenCachePolicyQueryStringsConfig(apiObject.QueryStringsConfig); len(v) > 0 {
		tfMap["query_strings_config"] = []any{v}
	}

	return tfMap
}
