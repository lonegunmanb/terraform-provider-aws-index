package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenViewerCertificate(apiObject *awstypes.ViewerCertificate) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := make(map[string]any)

	if apiObject.IAMCertificateId != nil {
		tfMap["iam_certificate_id"] = aws.ToString(apiObject.IAMCertificateId)
		tfMap["ssl_support_method"] = apiObject.SSLSupportMethod
	}

	if apiObject.ACMCertificateArn != nil {
		tfMap["acm_certificate_arn"] = aws.ToString(apiObject.ACMCertificateArn)
		tfMap["ssl_support_method"] = apiObject.SSLSupportMethod
	}

	if apiObject.CloudFrontDefaultCertificate != nil {
		tfMap["cloudfront_default_certificate"] = aws.ToBool(apiObject.CloudFrontDefaultCertificate)
	}

	tfMap["minimum_protocol_version"] = apiObject.MinimumProtocolVersion

	return []any{tfMap}
}
