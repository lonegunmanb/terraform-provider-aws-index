package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func disableDistribution(ctx context.Context, conn *cloudfront.Client, id string) error {
	output, err := findDistributionByID(ctx, conn, id)

	if err != nil {
		return fmt.Errorf("reading CloudFront Distribution (%s): %w", id, err)
	}

	if aws.ToString(output.Distribution.Status) == distributionStatusInProgress {
		output, err = waitDistributionDeployed(ctx, conn, id)

		if err != nil {
			return fmt.Errorf("waiting for CloudFront Distribution (%s) deploy: %w", id, err)
		}
	}

	if !aws.ToBool(output.Distribution.DistributionConfig.Enabled) {
		return nil
	}

	input := cloudfront.UpdateDistributionInput{
		DistributionConfig: output.Distribution.DistributionConfig,
		Id:                 aws.String(id),
		IfMatch:            output.ETag,
	}
	input.DistributionConfig.Enabled = aws.Bool(false)

	_, err = conn.UpdateDistribution(ctx, &input)

	// If the configured logging bucket no longer exists, disable logging and retry update
	if errs.IsAErrorMessageContains[*awstypes.InvalidArgument](err, "The S3 bucket that you specified for CloudFront logs doesn't exist") {
		input.DistributionConfig.Logging = &awstypes.LoggingConfig{Enabled: aws.Bool(false)}
		_, err = conn.UpdateDistribution(ctx, &input)
	}

	if err != nil {
		return fmt.Errorf("updating CloudFront Distribution (%s): %w", id, err)
	}

	if _, err := waitDistributionDeployed(ctx, conn, id); err != nil {
		return fmt.Errorf("waiting for CloudFront Distribution (%s) deploy: %w", id, err)
	}

	return nil
}
