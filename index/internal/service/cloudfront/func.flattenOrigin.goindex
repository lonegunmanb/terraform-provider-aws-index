package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenOrigin(apiObject *awstypes.Origin) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := make(map[string]any)
	tfMap[names.AttrDomainName] = aws.ToString(apiObject.DomainName)
	tfMap["origin_id"] = aws.ToString(apiObject.Id)

	if apiObject.ConnectionAttempts != nil {
		tfMap["connection_attempts"] = aws.ToInt32(apiObject.ConnectionAttempts)
	}

	if apiObject.ConnectionTimeout != nil {
		tfMap["connection_timeout"] = aws.ToInt32(apiObject.ConnectionTimeout)
	}

	if apiObject.CustomHeaders != nil {
		tfMap["custom_header"] = flattenCustomHeaders(apiObject.CustomHeaders)
	}

	if apiObject.CustomOriginConfig != nil {
		tfMap["custom_origin_config"] = []any{flattenCustomOriginConfig(apiObject.CustomOriginConfig)}
	}

	if apiObject.OriginAccessControlId != nil {
		tfMap["origin_access_control_id"] = aws.ToString(apiObject.OriginAccessControlId)
	}

	if apiObject.OriginPath != nil {
		tfMap["origin_path"] = aws.ToString(apiObject.OriginPath)
	}

	if apiObject.OriginShield != nil && aws.ToBool(apiObject.OriginShield.Enabled) {
		tfMap["origin_shield"] = []any{flattenOriginShield(apiObject.OriginShield)}
	}

	if apiObject.ResponseCompletionTimeout != nil {
		tfMap["response_completion_timeout"] = aws.ToInt32(apiObject.ResponseCompletionTimeout)
	} else {
		tfMap["response_completion_timeout"] = 0
	}

	if apiObject.S3OriginConfig != nil && aws.ToString(apiObject.S3OriginConfig.OriginAccessIdentity) != "" {
		tfMap["s3_origin_config"] = []any{flattenS3OriginConfig(apiObject.S3OriginConfig)}
	}

	if apiObject.VpcOriginConfig != nil && aws.ToString(apiObject.VpcOriginConfig.VpcOriginId) != "" {
		tfMap["vpc_origin_config"] = []any{flattenVPCOriginConfig(apiObject.VpcOriginConfig)}
	}

	return tfMap
}
