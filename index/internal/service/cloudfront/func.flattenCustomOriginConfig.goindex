package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenCustomOriginConfig(apiObject *awstypes.CustomOriginConfig) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"http_port":                aws.ToInt32(apiObject.HTTPPort),
		"https_port":               aws.ToInt32(apiObject.HTTPSPort),
		"origin_keepalive_timeout": aws.ToInt32(apiObject.OriginKeepaliveTimeout),
		"origin_protocol_policy":   apiObject.OriginProtocolPolicy,
		"origin_read_timeout":      aws.ToInt32(apiObject.OriginReadTimeout),
		"origin_ssl_protocols":     flattenCustomOriginConfigSSL(apiObject.OriginSslProtocols),
	}

	if apiObject.IpAddressType != "" {
		tfMap[names.AttrIPAddressType] = apiObject.IpAddressType
	}

	return tfMap
}
