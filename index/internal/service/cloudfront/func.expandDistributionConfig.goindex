package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDistributionConfig(d *schema.ResourceData) *awstypes.DistributionConfig {
	apiObject := &awstypes.DistributionConfig{
		CacheBehaviors:               expandCacheBehaviors(d.Get("ordered_cache_behavior").([]any)),
		CallerReference:              aws.String(id.UniqueId()),
		Comment:                      aws.String(d.Get(names.AttrComment).(string)),
		ContinuousDeploymentPolicyId: aws.String(d.Get("continuous_deployment_policy_id").(string)),
		CustomErrorResponses:         expandCustomErrorResponses(d.Get("custom_error_response").(*schema.Set).List()),
		DefaultCacheBehavior:         expandDefaultCacheBehavior(d.Get("default_cache_behavior").([]any)[0].(map[string]any)),
		DefaultRootObject:            aws.String(d.Get("default_root_object").(string)),
		Enabled:                      aws.Bool(d.Get(names.AttrEnabled).(bool)),
		IsIPV6Enabled:                aws.Bool(d.Get("is_ipv6_enabled").(bool)),
		HttpVersion:                  awstypes.HttpVersion(d.Get("http_version").(string)),
		Origins:                      expandOrigins(d.Get("origin").(*schema.Set).List()),
		PriceClass:                   awstypes.PriceClass(d.Get("price_class").(string)),
		Staging:                      aws.Bool(d.Get("staging").(bool)),
		WebACLId:                     aws.String(d.Get("web_acl_id").(string)),
	}

	if v, ok := d.GetOk("aliases"); ok {
		apiObject.Aliases = expandAliases(v.(*schema.Set).List())
	} else {
		apiObject.Aliases = expandAliases([]any{})
	}

	if v, ok := d.GetOk("caller_reference"); ok {
		apiObject.CallerReference = aws.String(v.(string))
	}

	if v, ok := d.GetOk("logging_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		apiObject.Logging = expandLoggingConfig(v.([]any)[0].(map[string]any))
	} else {
		apiObject.Logging = expandLoggingConfig(nil)
	}

	if v, ok := d.GetOk("origin_group"); ok {
		apiObject.OriginGroups = expandOriginGroups(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("restrictions"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		apiObject.Restrictions = expandRestrictions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("viewer_certificate"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		apiObject.ViewerCertificate = expandViewerCertificate(v.([]any)[0].(map[string]any))
	}

	return apiObject
}
