package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newContinuousDeploymentPolicyResource,
			TypeName: "aws_cloudfront_continuous_deployment_policy",
			Name:     "Continuous Deployment Policy",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  newKeyValueStoreResource,
			TypeName: "aws_cloudfront_key_value_store",
			Name:     "Key Value Store",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalSingleParameterIdentity(names.AttrName),
			Import: inttypes.Import{
				WrappedImport: true,
			},
		},
		{
			Factory:  newVPCOriginResource,
			TypeName: "aws_cloudfront_vpc_origin",
			Name:     "VPC Origin",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
	}
}
