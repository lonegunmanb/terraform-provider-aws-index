package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfront
import (
	"context"
	"fmt"
	"slices"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/action"
	"github.com/hashicorp/terraform-plugin-framework/action/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (a *createInvalidationAction) waitForInvalidationComplete(ctx context.Context, conn *cloudfront.Client, distributionID, invalidationID string, timeout time.Duration, resp *action.InvokeResponse) error {
	const (
		pollInterval     = 30 * time.Second
		progressInterval = 60 * time.Second
	)

	deadline := time.Now().Add(timeout)
	lastProgressUpdate := time.Now()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		// Check if we've exceeded the timeout
		if time.Now().After(deadline) {
			return fmt.Errorf("timeout after %s", timeout)
		}

		// Get current invalidation status
		input := &cloudfront.GetInvalidationInput{
			DistributionId: aws.String(distributionID),
			Id:             aws.String(invalidationID),
		}

		output, err := conn.GetInvalidation(ctx, input)
		if err != nil {
			return fmt.Errorf("getting invalidation status: %w", err)
		}

		currentStatus := aws.ToString(output.Invalidation.Status)

		// Send progress update every 60 seconds
		if time.Since(lastProgressUpdate) >= progressInterval {
			resp.SendProgress(action.InvokeProgressEvent{
				Message: fmt.Sprintf("Invalidation %s is currently '%s', continuing to wait for completion...", invalidationID, currentStatus),
			})
			lastProgressUpdate = time.Now()
		}

		// Check if we've reached completion
		if aws.ToString(output.Invalidation.Status) == "Completed" {
			return nil
		}

		// Check if we're in an unexpected state
		validStatuses := []string{
			"InProgress",
		}
		if !slices.Contains(validStatuses, currentStatus) && currentStatus != "Completed" {
			return fmt.Errorf("invalidation entered unexpected status: %s", currentStatus)
		}

		// Wait before next poll
		time.Sleep(pollInterval)
	}
}
