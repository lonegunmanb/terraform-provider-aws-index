package github.com/hashicorp/terraform-provider-aws/internal/service/emr
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emr"
	awstypes "github.com/aws/aws-sdk-go-v2/service/emr/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceManagedScalingPolicyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EMRClient(ctx)

	clusterID := d.Get("cluster_id").(string)
	if v := d.Get("compute_limits").(*schema.Set).List(); len(v) > 0 && v[0] != nil {
		tfMap := v[0].(map[string]any)
		computeLimits := &awstypes.ComputeLimits{
			UnitType:             awstypes.ComputeLimitsUnitType(tfMap["unit_type"].(string)),
			MinimumCapacityUnits: aws.Int32(int32(tfMap["minimum_capacity_units"].(int))),
			MaximumCapacityUnits: aws.Int32(int32(tfMap["maximum_capacity_units"].(int))),
		}
		if v, ok := tfMap["maximum_core_capacity_units"].(int); ok && v > 0 {
			computeLimits.MaximumCoreCapacityUnits = aws.Int32(int32(v))

			if v, ok := tfMap["maximum_ondemand_capacity_units"].(int); ok && v > 0 {
				computeLimits.MaximumOnDemandCapacityUnits = aws.Int32(int32(v))
			}
		} else if v, ok := tfMap["maximum_ondemand_capacity_units"].(int); ok && v >= 0 {
			computeLimits.MaximumOnDemandCapacityUnits = aws.Int32(int32(v))
		}
		input := &emr.PutManagedScalingPolicyInput{
			ClusterId: aws.String(clusterID),
			ManagedScalingPolicy: &awstypes.ManagedScalingPolicy{
				ComputeLimits: computeLimits,
			},
		}

		_, err := conn.PutManagedScalingPolicy(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting EMR Managed Scaling Policy: %s", err)
		}
	}

	d.SetId(clusterID)

	return diags
}
