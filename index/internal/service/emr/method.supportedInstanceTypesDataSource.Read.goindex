package github.com/hashicorp/terraform-provider-aws/internal/service/emr
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/emr"
	awstypes "github.com/aws/aws-sdk-go-v2/service/emr/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *supportedInstanceTypesDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data supportedInstanceTypesDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().EMRClient(ctx)

	input := emr.ListSupportedInstanceTypesInput{
		ReleaseLabel: fwflex.StringFromFramework(ctx, data.ReleaseLabel),
	}
	output, err := findSupportedInstanceTypes(ctx, conn, &input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading EMR Supported Instance Types (%s)", data.ReleaseLabel.ValueString()), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, output, &data.SupportedInstanceTypes)...)
	if response.Diagnostics.HasError() {
		return
	}

	data.ID = data.ReleaseLabel

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
