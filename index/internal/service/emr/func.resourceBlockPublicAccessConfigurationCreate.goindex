package github.com/hashicorp/terraform-provider-aws/internal/service/emr
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emr"
	awstypes "github.com/aws/aws-sdk-go-v2/service/emr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceBlockPublicAccessConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).EMRClient(ctx)

	blockPublicAccessConfiguration := &awstypes.BlockPublicAccessConfiguration{}

	blockPublicSecurityGroupRules := d.Get("block_public_security_group_rules")
	blockPublicAccessConfiguration.BlockPublicSecurityGroupRules = aws.Bool(blockPublicSecurityGroupRules.(bool))
	if v, ok := d.GetOk("permitted_public_security_group_rule_range"); ok {
		blockPublicAccessConfiguration.PermittedPublicSecurityGroupRuleRanges = expandPortRanges(v.([]any))
	}

	input := &emr.PutBlockPublicAccessConfigurationInput{
		BlockPublicAccessConfiguration: blockPublicAccessConfiguration,
	}

	_, err := conn.PutBlockPublicAccessConfiguration(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "setting EMR Block Public Access Configuration: %s", err)
	}

	d.SetId("emr-block-public-access-configuration")

	return append(diags, resourceBlockPublicAccessConfigurationRead(ctx, d, meta)...)
}
