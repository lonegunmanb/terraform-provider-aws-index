package github.com/hashicorp/terraform-provider-aws/internal/service/emr
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"slices"
	"strings"
	"time"
	_ "unsafe" // Required for go:linkname

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/emr"
	awstypes "github.com/aws/aws-sdk-go-v2/service/emr/types"
	smithyjson "github.com/aws/smithy-go/encoding/json"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCluster() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceClusterCreate,
		ReadWithoutTimeout:   resourceClusterRead,
		UpdateWithoutTimeout: resourceClusterUpdate,
		DeleteWithoutTimeout: resourceClusterDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		SchemaFunc: func() map[string]*schema.Schema {
			instanceFleetConfigSchema := func() *schema.Resource {
				return &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrID: {
							Type:     schema.TypeString,
							Computed: true,
						},
						"instance_type_configs": {
							Type:     schema.TypeSet,
							Optional: true,
							ForceNew: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"bid_price": {
										Type:     schema.TypeString,
										Optional: true,
										ForceNew: true,
									},
									"bid_price_as_percentage_of_on_demand_price": {
										Type:     schema.TypeFloat,
										Optional: true,
										ForceNew: true,
										Default:  100,
									},
									"configurations": {
										Type:     schema.TypeSet,
										Optional: true,
										ForceNew: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"classification": {
													Type:     schema.TypeString,
													Optional: true,
													ForceNew: true,
												},
												names.AttrProperties: {
													Type:     schema.TypeMap,
													Optional: true,
													ForceNew: true,
													Elem:     &schema.Schema{Type: schema.TypeString},
												},
											},
										},
									},
									"ebs_config": {
										Type:     schema.TypeSet,
										Optional: true,
										Computed: true,
										ForceNew: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												names.AttrIOPS: {
													Type:     schema.TypeInt,
													Optional: true,
													ForceNew: true,
												},
												names.AttrSize: {
													Type:     schema.TypeInt,
													Required: true,
													ForceNew: true,
												},
												names.AttrType: {
													Type:         schema.TypeString,
													Required:     true,
													ForceNew:     true,
													ValidateFunc: validEBSVolumeType(),
												},
												"volumes_per_instance": {
													Type:     schema.TypeInt,
													Optional: true,
													ForceNew: true,
													Default:  1,
												},
											},
										},
										Set: resourceClusterEBSHashConfig,
									},
									names.AttrInstanceType: {
										Type:     schema.TypeString,
										Required: true,
										ForceNew: true,
									},
									"weighted_capacity": {
										Type:     schema.TypeInt,
										Optional: true,
										ForceNew: true,
										Default:  1,
									},
								},
							},
							Set: resourceInstanceTypeHashConfig,
						},
						"launch_specifications": {
							Type:     schema.TypeList,
							Optional: true,
							ForceNew: true,
							MaxItems: 1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"on_demand_specification": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										MinItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"allocation_strategy": {
													Type:             schema.TypeString,
													Required:         true,
													ForceNew:         true,
													ValidateDiagFunc: enum.Validate[awstypes.OnDemandProvisioningAllocationStrategy](),
												},
											},
										},
									},
									"spot_specification": {
										Type:     schema.TypeList,
										Optional: true,
										ForceNew: true,
										MinItems: 1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"allocation_strategy": {
													Type:             schema.TypeString,
													ForceNew:         true,
													Required:         true,
													ValidateDiagFunc: enum.Validate[awstypes.SpotProvisioningAllocationStrategy](),
												},
												"block_duration_minutes": {
													Type:     schema.TypeInt,
													Optional: true,
													ForceNew: true,
													Default:  0,
												},
												"timeout_action": {
													Type:             schema.TypeString,
													Required:         true,
													ForceNew:         true,
													ValidateDiagFunc: enum.Validate[awstypes.SpotProvisioningTimeoutAction](),
												},
												"timeout_duration_minutes": {
													Type:     schema.TypeInt,
													ForceNew: true,
													Required: true,
												},
											},
										},
									},
								},
							},
						},
						names.AttrName: {
							Type:     schema.TypeString,
							Optional: true,
							ForceNew: true,
						},
						"provisioned_on_demand_capacity": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"provisioned_spot_capacity": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"target_on_demand_capacity": {
							Type:     schema.TypeInt,
							Optional: true,
							ForceNew: true,
							Default:  0,
						},
						"target_spot_capacity": {
							Type:     schema.TypeInt,
							Optional: true,
							ForceNew: true,
							Default:  0,
						},
					},
				}
			}

			return map[string]*schema.Schema{
				"additional_info": {
					Type:                  schema.TypeString,
					Optional:              true,
					ForceNew:              true,
					ValidateFunc:          validation.StringIsJSON,
					DiffSuppressFunc:      verify.SuppressEquivalentJSONDiffs,
					DiffSuppressOnRefresh: true,
					StateFunc: func(v any) string {
						json, _ := structure.NormalizeJsonString(v)
						return json
					},
				},
				"applications": {
					Type:     schema.TypeSet,
					Optional: true,
					ForceNew: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"auto_termination_policy": {
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"idle_timeout": {
								Type:         schema.TypeInt,
								Optional:     true,
								ValidateFunc: validation.IntBetween(60, 604800),
							},
						},
					},
				},
				"autoscaling_role": {
					Type:     schema.TypeString,
					ForceNew: true,
					Optional: true,
				},
				"bootstrap_action": {
					Type:     schema.TypeList,
					Optional: true,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"args": {
								Type:     schema.TypeList,
								Optional: true,
								ForceNew: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrPath: {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				"cluster_state": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"configurations": {
					Type:          schema.TypeString,
					ForceNew:      true,
					Optional:      true,
					ConflictsWith: []string{"configurations_json"},
				},
				"configurations_json": {
					Type:                  schema.TypeString,
					Optional:              true,
					ForceNew:              true,
					ValidateFunc:          validation.StringIsJSON,
					DiffSuppressFunc:      verify.SuppressEquivalentJSONDiffs,
					DiffSuppressOnRefresh: true,
					StateFunc: func(v any) string {
						json, _ := structure.NormalizeJsonString(v)
						return json
					},
					ConflictsWith: []string{"configurations"},
				},
				"core_instance_fleet": {
					Type:          schema.TypeList,
					Optional:      true,
					ForceNew:      true,
					Computed:      true,
					MaxItems:      1,
					Elem:          instanceFleetConfigSchema(),
					ConflictsWith: []string{"core_instance_group", "master_instance_group"},
				},
				"core_instance_group": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					ForceNew: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"autoscaling_policy": {
								Type:                  schema.TypeString,
								Optional:              true,
								ValidateFunc:          validation.StringIsJSON,
								DiffSuppressFunc:      verify.SuppressEquivalentJSONDiffs,
								DiffSuppressOnRefresh: true,
							},
							"bid_price": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"ebs_config": {
								Type:     schema.TypeSet,
								Optional: true,
								Computed: true,
								ForceNew: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrIOPS: {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
										},
										names.AttrSize: {
											Type:     schema.TypeInt,
											Required: true,
											ForceNew: true,
										},
										names.AttrThroughput: {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
										},
										names.AttrType: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: validEBSVolumeType(),
										},
										"volumes_per_instance": {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
											Default:  1,
										},
									},
								},
								Set: resourceClusterEBSHashConfig,
							},
							names.AttrID: {
								Type:     schema.TypeString,
								Computed: true,
							},
							names.AttrInstanceCount: {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      1,
								ValidateFunc: validation.IntAtLeast(1),
							},
							names.AttrInstanceType: {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
						},
					},
				},
				"custom_ami_id": {
					Type:         schema.TypeString,
					ForceNew:     true,
					Optional:     true,
					ValidateFunc: validCustomAMIID,
				},
				"ebs_root_volume_size": {
					Type:     schema.TypeInt,
					ForceNew: true,
					Optional: true,
				},
				"ec2_attributes": {
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"additional_master_security_groups": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"additional_slave_security_groups": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"emr_managed_master_security_group": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
								Computed: true,
							},
							"emr_managed_slave_security_group": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
								Computed: true,
							},
							"instance_profile": {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
							"key_name": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"service_access_security_group": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
								Computed: true,
							},
							names.AttrSubnetID: {
								Type:          schema.TypeString,
								Optional:      true,
								Computed:      true,
								ForceNew:      true,
								ConflictsWith: []string{"ec2_attributes.0.subnet_ids"},
							},
							names.AttrSubnetIDs: {
								Type:          schema.TypeSet,
								Optional:      true,
								Computed:      true,
								ForceNew:      true,
								Elem:          &schema.Schema{Type: schema.TypeString},
								ConflictsWith: []string{"ec2_attributes.0.subnet_id"},
							},
						},
					},
				},
				"keep_job_flow_alive_when_no_steps": {
					Type:     schema.TypeBool,
					ForceNew: true,
					Optional: true,
					Computed: true,
				},
				"kerberos_attributes": {
					Type:     schema.TypeList,
					MaxItems: 1,
					Optional: true,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"ad_domain_join_password": {
								Type:      schema.TypeString,
								Optional:  true,
								Sensitive: true,
								ForceNew:  true,
							},
							"ad_domain_join_user": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"cross_realm_trust_principal_password": {
								Type:      schema.TypeString,
								Optional:  true,
								Sensitive: true,
								ForceNew:  true,
							},
							"kdc_admin_password": {
								Type:      schema.TypeString,
								Required:  true,
								Sensitive: true,
								ForceNew:  true,
							},
							"realm": {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
						},
					},
				},
				"list_steps_states": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Schema{
						Type:             schema.TypeString,
						ValidateDiagFunc: enum.Validate[awstypes.StepState](),
					},
				},
				"log_encryption_kms_key_id": {
					Type:     schema.TypeString,
					ForceNew: true,
					Optional: true,
				},
				"log_uri": {
					Type:     schema.TypeString,
					ForceNew: true,
					Optional: true,
					DiffSuppressFunc: func(k, old, new string, d *schema.ResourceData) bool {
						// EMR uses a proprietary filesystem called EMRFS
						// and both s3n & s3 protocols are mapped to that FS
						// so they're equvivalent in this context (confirmed by AWS support)
						old = strings.Replace(old, "s3n://", "s3://", -1)
						return old == new
					},
				},
				"master_instance_fleet": {
					Type:          schema.TypeList,
					Optional:      true,
					ForceNew:      true,
					Computed:      true,
					MaxItems:      1,
					Elem:          instanceFleetConfigSchema(),
					ConflictsWith: []string{"core_instance_group", "master_instance_group"},
				},
				"master_instance_group": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					ForceNew: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"bid_price": {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
							"ebs_config": {
								Type:     schema.TypeSet,
								Optional: true,
								Computed: true,
								ForceNew: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrIOPS: {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
										},
										names.AttrSize: {
											Type:     schema.TypeInt,
											Required: true,
											ForceNew: true,
										},
										names.AttrThroughput: {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
										},
										names.AttrType: {
											Type:         schema.TypeString,
											Required:     true,
											ForceNew:     true,
											ValidateFunc: validEBSVolumeType(),
										},
										"volumes_per_instance": {
											Type:     schema.TypeInt,
											Optional: true,
											ForceNew: true,
											Default:  1,
										},
									},
								},
								Set: resourceClusterEBSHashConfig,
							},
							names.AttrID: {
								Type:     schema.TypeString,
								Computed: true,
							},
							names.AttrInstanceCount: {
								Type:         schema.TypeInt,
								Optional:     true,
								ForceNew:     true,
								Default:      1,
								ValidateFunc: validation.IntInSlice([]int{1, 3}),
							},
							names.AttrInstanceType: {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Optional: true,
								ForceNew: true,
							},
						},
					},
				},
				"master_public_dns": {
					Type:     schema.TypeString,
					Computed: true,
				},
				names.AttrName: {
					Type:     schema.TypeString,
					ForceNew: true,
					Required: true,
				},
				"os_release_label": {
					Type:     schema.TypeString,
					ForceNew: true,
					Optional: true,
				},
				"placement_group_config": {
					Type:       schema.TypeList,
					ForceNew:   true,
					Optional:   true,
					ConfigMode: schema.SchemaConfigModeAttr,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"instance_role": {
								Type:             schema.TypeString,
								ForceNew:         true,
								Required:         true,
								ValidateDiagFunc: enum.Validate[awstypes.InstanceRoleType](),
							},
							"placement_strategy": {
								Type:             schema.TypeString,
								ForceNew:         true,
								Optional:         true,
								Computed:         true,
								ValidateDiagFunc: enum.Validate[awstypes.PlacementGroupStrategy](),
							},
						},
					},
				},
				"release_label": {
					Type:     schema.TypeString,
					ForceNew: true,
					Required: true,
				},
				"scale_down_behavior": {
					Type:             schema.TypeString,
					ForceNew:         true,
					Optional:         true,
					Computed:         true,
					ValidateDiagFunc: enum.Validate[awstypes.ScaleDownBehavior](),
				},
				"security_configuration": {
					Type:     schema.TypeString,
					ForceNew: true,
					Optional: true,
				},
				names.AttrServiceRole: {
					Type:     schema.TypeString,
					ForceNew: true,
					Required: true,
				},
				"step": {
					Type:       schema.TypeList,
					Optional:   true,
					Computed:   true,
					ForceNew:   true,
					ConfigMode: schema.SchemaConfigModeAttr,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"action_on_failure": {
								Type:             schema.TypeString,
								Required:         true,
								ForceNew:         true,
								ValidateDiagFunc: enum.Validate[awstypes.ActionOnFailure](),
							},
							"hadoop_jar_step": {
								Type:       schema.TypeList,
								MaxItems:   1,
								Required:   true,
								ForceNew:   true,
								ConfigMode: schema.SchemaConfigModeAttr,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"args": {
											Type:     schema.TypeList,
											Optional: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										"jar": {
											Type:     schema.TypeString,
											Required: true,
											ForceNew: true,
										},
										"main_class": {
											Type:     schema.TypeString,
											Optional: true,
											ForceNew: true,
										},
										names.AttrProperties: {
											Type:     schema.TypeMap,
											Optional: true,
											ForceNew: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
									},
								},
							},
							names.AttrName: {
								Type:     schema.TypeString,
								Required: true,
								ForceNew: true,
							},
						},
					},
				},
				"step_concurrency_level": {
					Type:         schema.TypeInt,
					Optional:     true,
					Default:      1,
					ValidateFunc: validation.IntBetween(1, 256),
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"termination_protection": {
					Type:     schema.TypeBool,
					Optional: true,
					Computed: true,
				},
				"unhealthy_node_replacement": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  false,
				},
				"visible_to_all_users": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  true,
				},
			}
		},
	}
}
