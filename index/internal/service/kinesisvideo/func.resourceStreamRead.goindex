package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisvideo
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisvideo/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStreamRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KinesisVideoClient(ctx)

	stream, err := findStreamByARN(ctx, conn, d.Id())

	if !d.IsNewResource() && retry.NotFound(err) {
		log.Printf("[WARN] Kinesis Video Stream (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Kinesis Video Stream (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, stream.StreamARN)
	d.Set(names.AttrCreationTime, stream.CreationTime.Format(time.RFC3339))
	d.Set("data_retention_in_hours", stream.DataRetentionInHours)
	d.Set(names.AttrDeviceName, stream.DeviceName)
	d.Set(names.AttrKMSKeyID, stream.KmsKeyId)
	d.Set("media_type", stream.MediaType)
	d.Set(names.AttrName, stream.StreamName)
	d.Set(names.AttrVersion, stream.Version)

	return diags
}
