package github.com/hashicorp/terraform-provider-aws/internal/service/kinesisvideo
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesisvideo/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStreamUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KinesisVideoClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &kinesisvideo.UpdateStreamInput{
			CurrentVersion: aws.String(d.Get(names.AttrVersion).(string)),
			StreamARN:      aws.String(d.Id()),
		}

		if v, ok := d.GetOk(names.AttrDeviceName); ok {
			input.DeviceName = aws.String(v.(string))
		}

		if v, ok := d.GetOk("media_type"); ok {
			input.MediaType = aws.String(v.(string))
		}

		_, err := conn.UpdateStream(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Kinesis Video Stream (%s): %s", d.Id(), err)
		}

		if _, err := waitStreamUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Kinesis Video Stream (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceStreamRead(ctx, d, meta)...)
}
