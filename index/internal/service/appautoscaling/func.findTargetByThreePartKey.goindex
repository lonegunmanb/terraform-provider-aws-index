package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findTargetByThreePartKey(ctx context.Context, conn *applicationautoscaling.Client, resourceID, namespace, dimension string) (*awstypes.ScalableTarget, error) {
	input := applicationautoscaling.DescribeScalableTargetsInput{
		ResourceIds:       []string{resourceID},
		ScalableDimension: awstypes.ScalableDimension(dimension),
		ServiceNamespace:  awstypes.ServiceNamespace(namespace),
	}
	var output []awstypes.ScalableTarget

	pages := applicationautoscaling.NewDescribeScalableTargetsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		output = append(output, page.ScalableTargets...)
	}

	target, err := tfresource.AssertSingleValueResult(output)

	if err != nil {
		return nil, err
	}

	if aws.ToString(target.ResourceId) != resourceID || string(target.ScalableDimension) != dimension || string(target.ServiceNamespace) != namespace {
		return nil, &retry.NotFoundError{
			LastRequest: &input,
		}
	}

	return target, nil
}
