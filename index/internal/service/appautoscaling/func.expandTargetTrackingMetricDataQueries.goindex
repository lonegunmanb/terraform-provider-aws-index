package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandTargetTrackingMetricDataQueries(tfList []any) []awstypes.TargetTrackingMetricDataQuery {
	if len(tfList) < 1 {
		return nil
	}

	apiObjects := make([]awstypes.TargetTrackingMetricDataQuery, len(tfList))

	for i, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)
		apiObject := awstypes.TargetTrackingMetricDataQuery{
			Id: aws.String(tfMap[names.AttrID].(string)),
		}

		if v, ok := tfMap[names.AttrExpression]; ok && v.(string) != "" {
			apiObject.Expression = aws.String(v.(string))
		}

		if v, ok := tfMap["label"]; ok && v.(string) != "" {
			apiObject.Label = aws.String(v.(string))
		}

		if v, ok := tfMap["metric_stat"]; ok && len(v.([]any)) > 0 {
			apiObject.MetricStat = &awstypes.TargetTrackingMetricStat{}
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["metric"]; ok && len(v.([]any)) > 0 {
				tfMap := v.([]any)[0].(map[string]any)

				metric := &awstypes.TargetTrackingMetric{
					MetricName: aws.String(tfMap[names.AttrMetricName].(string)),
					Namespace:  aws.String(tfMap[names.AttrNamespace].(string)),
				}

				if v, ok := tfMap["dimensions"].(*schema.Set); ok && v.Len() > 0 {
					dimensions := make([]awstypes.TargetTrackingMetricDimension, v.Len())

					for i, tfMapRaw := range v.List() {
						tfMap := tfMapRaw.(map[string]any)
						dimensions[i] = awstypes.TargetTrackingMetricDimension{
							Name:  aws.String(tfMap[names.AttrName].(string)),
							Value: aws.String(tfMap[names.AttrValue].(string)),
						}
					}

					metric.Dimensions = dimensions
				}

				apiObject.MetricStat.Metric = metric
			}

			if v, ok := tfMap["stat"].(string); ok && v != "" {
				apiObject.MetricStat.Stat = aws.String(v)
			}

			if v, ok := tfMap[names.AttrUnit].(string); ok && v != "" {
				apiObject.MetricStat.Unit = aws.String(v)
			}
		}

		if v, ok := tfMap["return_data"]; ok {
			apiObject.ReturnData = aws.Bool(v.(bool))
		}

		apiObjects[i] = apiObject
	}

	return apiObjects
}
