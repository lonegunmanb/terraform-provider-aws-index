package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTargetTrackingMetricDataQueries(apiObjects []awstypes.TargetTrackingMetricDataQuery) []any {
	tfList := make([]any, len(apiObjects))

	for i, apiObject := range apiObjects {
		tfMap := map[string]any{
			names.AttrID: aws.ToString(apiObject.Id),
		}

		if apiObject.Expression != nil {
			tfMap[names.AttrExpression] = aws.ToString(apiObject.Expression)
		}

		if apiObject.Label != nil {
			tfMap["label"] = aws.ToString(apiObject.Label)
		}

		if apiObject := apiObject.MetricStat; apiObject != nil {
			tfMapMetricStat := map[string]any{
				"stat": aws.ToString(apiObject.Stat),
			}

			if apiObject := apiObject.Metric; apiObject != nil {
				tfMapMetric := map[string]any{
					names.AttrMetricName: aws.ToString(apiObject.MetricName),
					names.AttrNamespace:  aws.ToString(apiObject.Namespace),
				}

				tfList := make([]any, len(apiObject.Dimensions))
				for i, apiObject := range apiObject.Dimensions {
					tfList[i] = map[string]any{
						names.AttrName:  aws.ToString(apiObject.Name),
						names.AttrValue: aws.ToString(apiObject.Value),
					}
				}

				tfMapMetric["dimensions"] = tfList
				tfMapMetricStat["metric"] = []map[string]any{tfMapMetric}
			}

			if apiObject.Unit != nil {
				tfMapMetricStat[names.AttrUnit] = aws.ToString(apiObject.Unit)
			}

			tfMap["metric_stat"] = []map[string]any{tfMapMetricStat}
		}

		if apiObject.ReturnData != nil {
			tfMap["return_data"] = aws.ToBool(apiObject.ReturnData)
		}

		tfList[i] = tfMap
	}

	return tfList
}
