package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPutScalingPolicyInput(d *schema.ResourceData) applicationautoscaling.PutScalingPolicyInput {
	apiObject := applicationautoscaling.PutScalingPolicyInput{
		PolicyName: aws.String(d.Get(names.AttrName).(string)),
		ResourceId: aws.String(d.Get(names.AttrResourceID).(string)),
	}

	if v, ok := d.GetOk("policy_type"); ok {
		apiObject.PolicyType = awstypes.PolicyType(v.(string))
	}

	if v, ok := d.GetOk("scalable_dimension"); ok {
		apiObject.ScalableDimension = awstypes.ScalableDimension(v.(string))
	}

	if v, ok := d.GetOk("service_namespace"); ok {
		apiObject.ServiceNamespace = awstypes.ServiceNamespace(v.(string))
	}

	if v, ok := d.GetOk("step_scaling_policy_configuration"); ok {
		apiObject.StepScalingPolicyConfiguration = expandStepScalingPolicyConfiguration(v.([]any))
	}

	if l, ok := d.GetOk("target_tracking_scaling_policy_configuration"); ok {
		v := l.([]any)
		if len(v) == 1 {
			ttspCfg := v[0].(map[string]any)
			cfg := awstypes.TargetTrackingScalingPolicyConfiguration{
				TargetValue: aws.Float64(ttspCfg["target_value"].(float64)),
			}

			if v, ok := ttspCfg["scale_in_cooldown"]; ok {
				cfg.ScaleInCooldown = aws.Int32(int32(v.(int)))
			}

			if v, ok := ttspCfg["scale_out_cooldown"]; ok {
				cfg.ScaleOutCooldown = aws.Int32(int32(v.(int)))
			}

			if v, ok := ttspCfg["disable_scale_in"]; ok {
				cfg.DisableScaleIn = aws.Bool(v.(bool))
			}

			if v, ok := ttspCfg["customized_metric_specification"].([]any); ok && len(v) > 0 {
				cfg.CustomizedMetricSpecification = expandCustomizedMetricSpecification(v)
			}

			if v, ok := ttspCfg["predefined_metric_specification"].([]any); ok && len(v) > 0 {
				cfg.PredefinedMetricSpecification = expandPredefinedMetricSpecification(v)
			}

			apiObject.TargetTrackingScalingPolicyConfiguration = &cfg
		}
	}

	return apiObject
}
