package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPredictiveScalingPolicyConfiguration(tfMap map[string]any) *awstypes.PredictiveScalingPolicyConfiguration {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.PredictiveScalingPolicyConfiguration{}

	if v, ok := tfMap["max_capacity_breach_behavior"].(string); ok && v != "" {
		apiObject.MaxCapacityBreachBehavior = awstypes.PredictiveScalingMaxCapacityBreachBehavior(v)
	}

	if v, ok := tfMap["max_capacity_buffer"].(int); ok && v != 0 {
		apiObject.MaxCapacityBuffer = aws.Int32(int32(v))
	}

	if v, ok := tfMap["metric_specification"].([]any); ok && len(v) > 0 {
		apiObject.MetricSpecifications = expandPredictiveScalingMetricSpecifications(v)
	}

	if v, ok := tfMap[names.AttrMode].(string); ok && v != "" {
		apiObject.Mode = awstypes.PredictiveScalingMode(v)
	}

	if v, ok := tfMap["scheduling_buffer_time"].(int); ok && v != 0 {
		apiObject.SchedulingBufferTime = aws.Int32(int32(v))
	}

	return apiObject
}
