package github.com/hashicorp/terraform-provider-aws/internal/service/appautoscaling
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCustomizedMetricSpecification(tfList []any) *awstypes.CustomizedMetricSpecification {
	if len(tfList) < 1 || tfList[0] == nil {
		return nil
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.CustomizedMetricSpecification{}

	if v, ok := tfMap["metrics"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.Metrics = expandTargetTrackingMetricDataQueries(v.List())
	} else {
		if v, ok := tfMap["dimensions"].(*schema.Set); ok && v.Len() > 0 {
			dimensions := make([]awstypes.MetricDimension, v.Len())

			for i, tfMapRaw := range v.List() {
				tfMap := tfMapRaw.(map[string]any)
				dimensions[i] = awstypes.MetricDimension{
					Name:  aws.String(tfMap[names.AttrName].(string)),
					Value: aws.String(tfMap[names.AttrValue].(string)),
				}
			}

			apiObject.Dimensions = dimensions
		}

		if v, ok := tfMap[names.AttrMetricName]; ok {
			apiObject.MetricName = aws.String(v.(string))
		}

		if v, ok := tfMap[names.AttrNamespace]; ok {
			apiObject.Namespace = aws.String(v.(string))
		}

		if v, ok := tfMap["statistic"]; ok {
			apiObject.Statistic = awstypes.MetricStatistic(v.(string))
		}

		if v, ok := tfMap[names.AttrUnit].(string); ok && v != "" {
			apiObject.Unit = aws.String(v)
		}
	}

	return apiObject
}
