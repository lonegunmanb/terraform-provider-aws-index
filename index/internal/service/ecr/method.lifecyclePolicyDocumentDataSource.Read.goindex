package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *lifecyclePolicyDocumentDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data lifecyclePolicyDocumentDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	input := &lifecyclePolicy{}
	response.Diagnostics.Append(fwflex.Expand(ctx, data, input)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Default values.
	for _, v := range input.Rules {
		if v.Action == nil {
			v.Action = &lifecyclePolicyRuleAction{
				Type: aws.String("expire"),
			}
		}
	}

	bytes, err := json.MarshalIndent(input, "", "  ")

	if err != nil {
		response.Diagnostics.AddError("Marshalling lifecycle policy to JSON", err.Error())
	}

	data.JSON = types.StringValue(string(bytes))

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
