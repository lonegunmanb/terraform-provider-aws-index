package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
)
func resourcePullThroughCacheRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ECRClient(ctx)

	input := ecr.UpdatePullThroughCacheRuleInput{
		EcrRepositoryPrefix: aws.String(d.Id()),
	}

	if v, ok := d.GetOk("credential_arn"); ok && v != "" {
		input.CredentialArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("custom_role_arn"); ok && v != "" {
		input.CustomRoleArn = aws.String(v.(string))
	}

	_, err := conn.UpdatePullThroughCacheRule(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating ECR Pull Through Cache Rule (%s): %s", d.Id(), err)
	}

	return append(diags, resourcePullThroughCacheRuleRead(ctx, d, meta)...)
}
