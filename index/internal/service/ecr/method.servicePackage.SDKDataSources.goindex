package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceAuthorizationToken,
			TypeName: "aws_ecr_authorization_token",
			Name:     "Authorization Token",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceImage,
			TypeName: "aws_ecr_image",
			Name:     "Image",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourcePullThroughCacheRule,
			TypeName: "aws_ecr_pull_through_cache_rule",
			Name:     "Pull Through Cache Rule",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceRepository,
			TypeName: "aws_ecr_repository",
			Name:     "Repository",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceRepositoryCreationTemplate,
			TypeName: "aws_ecr_repository_creation_template",
			Name:     "Repository Creation Template",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
