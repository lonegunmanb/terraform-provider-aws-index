package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRegistryScanningConfigurationPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ECRClient(ctx)

	input := ecr.PutRegistryScanningConfigurationInput{
		ScanType: types.ScanType(d.Get("scan_type").(string)),
		Rules:    expandScanningRegistryRules(d.Get(names.AttrRule).(*schema.Set).List()),
	}

	_, err := conn.PutRegistryScanningConfiguration(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "putting ECR Registry Scanning Configuration: %s", err)
	}

	if d.IsNewResource() {
		d.SetId(meta.(*conns.AWSClient).AccountID(ctx))
	}

	return append(diags, resourceRegistryScanningConfigurationRead(ctx, d, meta)...)
}
