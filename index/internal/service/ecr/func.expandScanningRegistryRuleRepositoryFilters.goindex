package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandScanningRegistryRuleRepositoryFilters(l []any) []types.ScanningRepositoryFilter {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	filters := make([]types.ScanningRepositoryFilter, 0)

	for _, f := range l {
		if f == nil {
			continue
		}
		m := f.(map[string]any)
		filters = append(filters, types.ScanningRepositoryFilter{
			Filter:     aws.String(m[names.AttrFilter].(string)),
			FilterType: types.ScanningRepositoryFilterType((m["filter_type"].(string))),
		})
	}

	return filters
}
