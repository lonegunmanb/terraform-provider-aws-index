package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryCreationTemplateUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ECRClient(ctx)

	prefix := d.Get(names.AttrPrefix).(string)
	input := &ecr.UpdateRepositoryCreationTemplateInput{
		Prefix: aws.String(prefix),
	}

	if d.HasChange("applied_for") {
		if v, ok := d.GetOk("applied_for"); ok && v.(*schema.Set).Len() > 0 {
			input.AppliedFor = flex.ExpandStringyValueSet[types.RCTAppliedFor](v.(*schema.Set))
		}
	}

	if d.HasChange("custom_role_arn") {
		input.CustomRoleArn = aws.String(d.Get("custom_role_arn").(string))
	}

	if d.HasChange(names.AttrDescription) {
		input.Description = aws.String(d.Get(names.AttrDescription).(string))
	}

	if d.HasChange(names.AttrEncryptionConfiguration) {
		input.EncryptionConfiguration = expandRepositoryEncryptionConfigurationForRepositoryCreationTemplate(d.Get(names.AttrEncryptionConfiguration).([]any))
	}

	if d.HasChange("image_tag_mutability") {
		input.ImageTagMutability = types.ImageTagMutability((d.Get("image_tag_mutability").(string)))
	}

	if d.HasChange("lifecycle_policy") {
		policy, err := structure.NormalizeJsonString(d.Get("lifecycle_policy").(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input.LifecyclePolicy = aws.String(policy)
	}

	if d.HasChange("repository_policy") {
		policy, err := structure.NormalizeJsonString(d.Get("repository_policy").(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input.RepositoryPolicy = aws.String(policy)
	}

	if d.HasChange(names.AttrResourceTags) {
		input.ResourceTags = svcTags(tftags.New(ctx, d.Get(names.AttrResourceTags).(map[string]any)))
	}

	_, err := conn.UpdateRepositoryCreationTemplate(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating ECR Repository Creation Template (%s): %s", prefix, err)
	}

	return append(diags, resourceRepositoryCreationTemplateRead(ctx, d, meta)...)
}
