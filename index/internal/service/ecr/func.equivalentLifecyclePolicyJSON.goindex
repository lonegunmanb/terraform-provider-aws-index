package github.com/hashicorp/terraform-provider-aws/internal/service/ecr
import (
	"cmp"
	"context"
	"log"
	"slices"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecr/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func equivalentLifecyclePolicyJSON(str1, str2 string) (bool, error) {
	if strings.TrimSpace(str1) == "" {
		str1 = "{}"
	}

	if strings.TrimSpace(str2) == "" {
		str2 = "{}"
	}

	var lp1 lifecyclePolicy
	err := tfjson.DecodeFromString(str1, &lp1)
	if err != nil {
		return false, err
	}
	lp1.reduce()
	b1, err := tfjson.EncodeToBytes(lp1)
	if err != nil {
		return false, err
	}

	var lp2 lifecyclePolicy
	err = tfjson.DecodeFromString(str2, &lp2)
	if err != nil {
		return false, err
	}
	lp2.reduce()
	b2, err := tfjson.EncodeToBytes(lp2)
	if err != nil {
		return false, err
	}

	return tfjson.EqualBytes(b1, b2), nil
}
