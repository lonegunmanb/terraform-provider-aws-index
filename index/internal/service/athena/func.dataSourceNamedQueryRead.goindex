package github.com/hashicorp/terraform-provider-aws/internal/service/athena
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceNamedQueryRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AthenaClient(ctx)

	input := &athena.ListNamedQueriesInput{
		WorkGroup: aws.String(d.Get("workgroup").(string)),
	}
	var queryIDs []string
	pages := athena.NewListNamedQueriesPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "listing Athena Named Queries: %s", err)
		}

		queryIDs = append(queryIDs, page.NamedQueryIds...)
	}

	name := d.Get(names.AttrName).(string)
	query, err := findNamedQueryByName(ctx, conn, queryIDs, name)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Athena Named Query (%s): %s", name, err)
	}

	d.SetId(aws.ToString(query.NamedQueryId))
	d.Set(names.AttrDatabase, query.Database)
	d.Set(names.AttrDescription, query.Description)
	d.Set(names.AttrName, query.Name)
	d.Set("querystring", query.QueryString)
	d.Set("workgroup", query.WorkGroup)

	return diags
}
