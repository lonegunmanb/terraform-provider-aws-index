package github.com/hashicorp/terraform-provider-aws/internal/service/athena
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDatabaseCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AthenaClient(ctx)

	name := d.Get(names.AttrName).(string)
	createStmt := fmt.Sprintf("create database `%s`", name)
	var queryString bytes.Buffer
	queryString.WriteString(createStmt)

	if v, ok := d.GetOk(names.AttrComment); ok && v.(string) != "" {
		commentStmt := fmt.Sprintf(" comment '%s'", strings.Replace(v.(string), "'", "\\'", -1))
		queryString.WriteString(commentStmt)
	}

	if v, ok := d.GetOk(names.AttrProperties); ok && len(v.(map[string]any)) > 0 {
		var props []string
		for k, v := range v.(map[string]any) {
			prop := fmt.Sprintf(" '%[1]s' = '%[2]s' ", k, v.(string))
			props = append(props, prop)
		}

		propStmt := fmt.Sprintf(" WITH DBPROPERTIES(%s)", strings.Join(props, ","))
		queryString.WriteString(propStmt)
	}

	queryString.WriteString(";")

	input := athena.StartQueryExecutionInput{
		QueryString:         aws.String(queryString.String()),
		ResultConfiguration: expandResultConfiguration(d),
	}

	if v, ok := d.GetOk("workgroup"); ok {
		input.WorkGroup = aws.String(v.(string))
	}

	output, err := conn.StartQueryExecution(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Athena Database (%s): %s", name, err)
	}

	if err := executeAndExpectNoRows(ctx, conn, aws.ToString(output.QueryExecutionId)); err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Athena Database (%s): %s", name, err)
	}

	d.SetId(name)

	return append(diags, resourceDatabaseRead(ctx, d, meta)...)
}
