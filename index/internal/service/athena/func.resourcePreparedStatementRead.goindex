package github.com/hashicorp/terraform-provider-aws/internal/service/athena
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePreparedStatementRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AthenaClient(ctx)

	workGroupName, statementName, err := preparedStatementParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	preparedStatement, err := findPreparedStatementByTwoPartKey(ctx, conn, workGroupName, statementName)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Athena Prepared Statement (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Athena Prepared Statement (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrDescription, preparedStatement.Description)
	d.Set(names.AttrName, preparedStatement.StatementName)
	d.Set("query_statement", preparedStatement.QueryStatement)
	d.Set("workgroup", preparedStatement.WorkGroupName)

	return diags
}
