package github.com/hashicorp/terraform-provider-aws/internal/service/athena
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/athena/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandResultConfiguration(d *schema.ResourceData) *types.ResultConfiguration {
	resultConfig := &types.ResultConfiguration{
		OutputLocation:          aws.String("s3://" + d.Get(names.AttrBucket).(string)),
		EncryptionConfiguration: expandResultConfigurationEncryptionConfig(d.Get(names.AttrEncryptionConfiguration).([]any)),
	}

	if v, ok := d.GetOk(names.AttrExpectedBucketOwner); ok {
		resultConfig.ExpectedBucketOwner = aws.String(v.(string))
	}

	if v, ok := d.GetOk("acl_configuration"); ok && len(v.([]any)) > 0 {
		resultConfig.AclConfiguration = expandResultConfigurationACLConfig(v.([]any))
	}

	return resultConfig
}
