package github.com/hashicorp/terraform-provider-aws/internal/service/athena
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	awstypes "github.com/aws/aws-sdk-go-v2/service/athena/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *capacityReservationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	conn := r.Meta().AthenaClient(ctx)

	var state capacityReservationResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	cancelInput := athena.CancelCapacityReservationInput{
		Name: state.Name.ValueStringPointer(),
	}

	if _, err := conn.CancelCapacityReservation(ctx, &cancelInput); err != nil {
		if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "not found") {
			return
		}

		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Athena, create.ErrActionCancelling, ResNameCapacityReservation, state.Name.String(), err),
			err.Error(),
		)
		return
	}

	if _, err := waitCapacityReservationCancelled(ctx, conn, state.Name.ValueString(), r.DeleteTimeout(ctx, state.Timeouts)); err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Athena, create.ErrActionWaitingForCancellation, ResNameCapacityReservation, state.Name.String(), err),
			err.Error(),
		)
		return
	}

	input := athena.DeleteCapacityReservationInput{
		Name: state.Name.ValueStringPointer(),
	}

	if _, err := conn.DeleteCapacityReservation(ctx, &input); err != nil {
		if errs.IsAErrorMessageContains[*awstypes.InvalidRequestException](err, "not found") {
			return
		}

		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Athena, create.ErrActionDeleting, ResNameCapacityReservation, state.Name.String(), err),
			err.Error(),
		)
		return
	}
}
