package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *reservedCacheNodeOfferingDataSource) Schema(ctx context.Context, request datasource.SchemaRequest, response *datasource.SchemaResponse) {
	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cache_node_type": schema.StringAttribute{
				Required: true,
			},
			names.AttrDuration: schema.StringAttribute{
				CustomType: fwtypes.RFC3339DurationType,
				Required:   true,
				Validators: []validator.String{
					stringvalidator.OneOf("P1Y", "P3Y"),
				},
			},
			"fixed_price": schema.Float64Attribute{
				Computed: true,
			},
			"offering_id": schema.StringAttribute{
				Computed: true,
			},
			"offering_type": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"Light Utilization",
						"Medium Utilization",
						"Heavy Utilization",
						"Partial Upfront",
						"All Upfront",
						"No Upfront",
					),
				},
			},
			"product_description": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(engine_Values()...),
				},
			},
		},
	}
}
