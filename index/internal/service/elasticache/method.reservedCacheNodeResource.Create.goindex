package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *reservedCacheNodeResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data reservedCacheNodeResourceModel

	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().ElastiCacheClient(ctx)

	var input elasticache.PurchaseReservedCacheNodesOfferingInput
	response.Diagnostics.Append(flex.Expand(ctx, data, &input, r.flexOpts()...)...)

	input.Tags = getTagsIn(ctx)

	resp, err := conn.PurchaseReservedCacheNodesOffering(ctx, &input)
	if err != nil {
		response.Diagnostics.AddError(
			"Creating ElastiCache Reserved Cache Node",
			fmt.Sprintf("Could not create ElastiCache Reserved Cache Node with Offering ID %q\nError: %s", data.ReservedCacheNodesOfferingID.ValueString(), err.Error()),
		)
		return
	}

	createTimeout := r.CreateTimeout(ctx, data.Timeouts)
	if err := waitReservedCacheNodeCreated(ctx, conn, aws.ToString(resp.ReservedCacheNode.ReservedCacheNodeId), createTimeout); err != nil {
		response.Diagnostics.AddError(
			"Creating ElastiCache Reserved Cache Node",
			fmt.Sprintf("Creating ElastiCache Reserved Cache Node with Offering ID %q failed while waiting for completion.\nError: %s", data.ReservedCacheNodesOfferingID.ValueString(), err.Error()),
		)
		return
	}

	response.Diagnostics.Append(flex.Flatten(ctx, resp.ReservedCacheNode, &data, r.flexOpts()...)...)
	if response.Diagnostics.HasError() {
		return
	}

	duration := time.Duration(aws.ToInt32(resp.ReservedCacheNode.Duration)) * time.Second
	data.Duration = fwtypes.RFC3339DurationTimeDurationValue(duration)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
