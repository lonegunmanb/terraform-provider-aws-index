package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findReservedCacheNodeByID(ctx context.Context, conn *elasticache.Client, id string) (result awstypes.ReservedCacheNode, err error) {
	input := elasticache.DescribeReservedCacheNodesInput{
		ReservedCacheNodeId: aws.String(id),
	}

	output, err := conn.DescribeReservedCacheNodes(ctx, &input)

	if errs.IsA[*awstypes.ReservedCacheNodeNotFoundFault](err) {
		return result, &retry.NotFoundError{
			LastError: err,
		}
	}
	if err != nil {
		return result, err
	}

	if output == nil || len(output.ReservedCacheNodes) == 0 {
		return result, tfresource.NewEmptyResultError(input)
	}

	if count := len(output.ReservedCacheNodes); count > 1 {
		return result, tfresource.NewTooManyResultsError(count, input)
	}

	return output.ReservedCacheNodes[0], nil
}
