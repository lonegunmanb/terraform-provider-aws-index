package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *reservedCacheNodeOfferingDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data reservedCacheNodeOfferingDataSourceModel

	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().ElastiCacheClient(ctx)

	flexOpt := flex.WithFieldNamePrefix("ReservedCacheNodes")

	var input elasticache.DescribeReservedCacheNodesOfferingsInput
	response.Diagnostics.Append(flex.Expand(ctx, data, &input, flexOpt)...)
	if response.Diagnostics.HasError() {
		return
	}

	resp, err := conn.DescribeReservedCacheNodesOfferings(ctx, &input)
	if err != nil {
		response.Diagnostics.AddError("reading ElastiCache Reserved Cache Node Offering", err.Error())
		return
	}

	offering, err := tfresource.AssertSingleValueResult(resp.ReservedCacheNodesOfferings)
	if err != nil {
		response.Diagnostics.AddError("reading ElastiCache Reserved Cache Node Offering", err.Error())
		return
	}

	response.Diagnostics.Append(flex.Flatten(ctx, offering, &data, flexOpt)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
