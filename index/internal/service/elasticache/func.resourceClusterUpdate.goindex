package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"cmp"
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	sdkretry "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClusterUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ElastiCacheClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &elasticache.ModifyCacheClusterInput{
			CacheClusterId:   aws.String(d.Id()),
			ApplyImmediately: aws.Bool(d.Get(names.AttrApplyImmediately).(bool)),
		}

		requestUpdate := false
		if d.HasChange(names.AttrSecurityGroupIDs) {
			if attr := d.Get(names.AttrSecurityGroupIDs).(*schema.Set); attr.Len() > 0 {
				input.SecurityGroupIds = flex.ExpandStringValueSet(attr)
				requestUpdate = true
			}
		}

		if d.HasChange(names.AttrParameterGroupName) {
			input.CacheParameterGroupName = aws.String(d.Get(names.AttrParameterGroupName).(string))
			requestUpdate = true
		}

		if d.HasChange("ip_discovery") {
			input.IpDiscovery = awstypes.IpDiscovery(d.Get("ip_discovery").(string))
			requestUpdate = true
		}

		if d.HasChange("log_delivery_configuration") {
			oldLogDeliveryConfig, newLogDeliveryConfig := d.GetChange("log_delivery_configuration")

			input.LogDeliveryConfigurations = []awstypes.LogDeliveryConfigurationRequest{}
			logTypesToSubmit := make(map[string]bool)

			currentLogDeliveryConfig := newLogDeliveryConfig.(*schema.Set).List()
			for _, current := range currentLogDeliveryConfig {
				logDeliveryConfigurationRequest := expandLogDeliveryConfigurationRequests(current.(map[string]any))
				logTypesToSubmit[string(logDeliveryConfigurationRequest.LogType)] = true
				input.LogDeliveryConfigurations = append(input.LogDeliveryConfigurations, logDeliveryConfigurationRequest)
			}

			previousLogDeliveryConfig := oldLogDeliveryConfig.(*schema.Set).List()
			for _, previous := range previousLogDeliveryConfig {
				logDeliveryConfigurationRequest := expandEmptyLogDeliveryConfigurationRequest(previous.(map[string]any))
				// if something was removed, send an empty request
				if !logTypesToSubmit[string(logDeliveryConfigurationRequest.LogType)] {
					input.LogDeliveryConfigurations = append(input.LogDeliveryConfigurations, logDeliveryConfigurationRequest)
				}
			}

			requestUpdate = true
		}

		if d.HasChange("maintenance_window") {
			input.PreferredMaintenanceWindow = aws.String(d.Get("maintenance_window").(string))
			requestUpdate = true
		}

		if d.HasChange("notification_topic_arn") {
			v := d.Get("notification_topic_arn").(string)
			input.NotificationTopicArn = aws.String(v)
			if v == "" {
				inactive := "inactive"
				input.NotificationTopicStatus = &inactive
			}
			requestUpdate = true
		}

		if d.HasChange(names.AttrEngine) {
			input.Engine = aws.String(d.Get(names.AttrEngine).(string))
			requestUpdate = true
		}

		if d.HasChange(names.AttrEngineVersion) {
			input.EngineVersion = aws.String(d.Get(names.AttrEngineVersion).(string))
			requestUpdate = true
		}

		if d.HasChange(names.AttrAutoMinorVersionUpgrade) {
			v := d.Get(names.AttrAutoMinorVersionUpgrade)
			if v, null, _ := nullable.Bool(v.(string)).ValueBool(); !null {
				input.AutoMinorVersionUpgrade = aws.Bool(v)
			}
			requestUpdate = true
		}

		if d.HasChange("snapshot_window") {
			input.SnapshotWindow = aws.String(d.Get("snapshot_window").(string))
			requestUpdate = true
		}

		if d.HasChange("node_type") {
			input.CacheNodeType = aws.String(d.Get("node_type").(string))
			requestUpdate = true
		}

		if d.HasChange("snapshot_retention_limit") {
			input.SnapshotRetentionLimit = aws.Int32(int32(d.Get("snapshot_retention_limit").(int)))
			requestUpdate = true
		}

		if d.HasChange("az_mode") {
			input.AZMode = awstypes.AZMode(d.Get("az_mode").(string))
			requestUpdate = true
		}

		if d.HasChange("num_cache_nodes") {
			oraw, nraw := d.GetChange("num_cache_nodes")
			o := oraw.(int)
			n := nraw.(int)
			if n < o {
				log.Printf("[INFO] Cluster %s is marked for Decreasing cache nodes from %d to %d", d.Id(), o, n)
				nodesToRemove := getCacheNodesToRemove(o, o-n)
				input.CacheNodeIdsToRemove = nodesToRemove
			} else {
				log.Printf("[INFO] Cluster %s is marked for increasing cache nodes from %d to %d", d.Id(), o, n)
				// SDK documentation for NewAvailabilityZones states:
				// The list of Availability Zones where the new Memcached cache nodes are created.
				//
				// This parameter is only valid when NumCacheNodes in the request is greater
				// than the sum of the number of active cache nodes and the number of cache
				// nodes pending creation (which may be zero). The number of Availability Zones
				// supplied in this list must match the cache nodes being added in this request.
				if v, ok := d.GetOk("preferred_availability_zones"); ok && len(v.([]any)) > 0 {
					// Here we check the list length to prevent a potential panic :)
					if len(v.([]any)) != n {
						return sdkdiag.AppendErrorf(diags, "length of preferred_availability_zones (%d) must match num_cache_nodes (%d)", len(v.([]any)), n)
					}
					input.NewAvailabilityZones = flex.ExpandStringValueList(v.([]any)[o:])
				}
			}

			input.NumCacheNodes = aws.Int32(int32(d.Get("num_cache_nodes").(int)))
			requestUpdate = true
		}

		if requestUpdate {
			_, err := conn.ModifyCacheCluster(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating ElastiCache Cache Cluster (%s): %s", d.Id(), err)
			}

			if _, err := waitCacheClusterAvailable(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for ElastiCache Cache Cluster (%s) update: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceClusterRead(ctx, d, meta)...)
}
