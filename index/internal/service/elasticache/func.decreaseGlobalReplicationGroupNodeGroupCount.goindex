package github.com/hashicorp/terraform-provider-aws/internal/service/elasticache
import (
	"context"
	"errors"
	"fmt"
	"log"
	"regexp"
	"slices"
	"strconv"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	gversion "github.com/hashicorp/go-version"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func decreaseGlobalReplicationGroupNodeGroupCount(ctx context.Context, conn *elasticache.Client, id string, newNodeGroupCount int, nodeGroupIDs []string, timeout time.Duration) error {
	slices.SortFunc(nodeGroupIDs, func(a, b string) int {
		if globalReplicationGroupNodeNumber(a) < globalReplicationGroupNodeNumber(b) {
			return -1
		}
		if globalReplicationGroupNodeNumber(a) > globalReplicationGroupNodeNumber(b) {
			return 1
		}
		return 0
	})
	nodeGroupIDs = nodeGroupIDs[:newNodeGroupCount]

	input := &elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput{
		ApplyImmediately:         aws.Bool(true),
		GlobalNodeGroupsToRetain: nodeGroupIDs,
		GlobalReplicationGroupId: aws.String(id),
		NodeGroupCount:           aws.Int32(int32(newNodeGroupCount)),
	}

	_, err := conn.DecreaseNodeGroupsInGlobalReplicationGroup(ctx, input)

	if err != nil {
		return fmt.Errorf("decreasing ElastiCache Global Replication Group (%s) node group count (%d): %w", id, newNodeGroupCount, err)
	}

	if _, err := waitGlobalReplicationGroupAvailable(ctx, conn, id, timeout); err != nil {
		return fmt.Errorf("waiting for ElastiCache Global Replication Group (%s) update: %w", id, err)
	}

	return nil
}
