package github.com/hashicorp/terraform-provider-aws/internal/service/resourceexplorer2
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resourceexplorer2"
	awstypes "github.com/aws/aws-sdk-go-v2/service/resourceexplorer2/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *indexResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data indexResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().ResourceExplorer2Client(ctx)

	input := &resourceexplorer2.CreateIndexInput{
		ClientToken: aws.String(sdkid.UniqueId()),
		Tags:        getTagsIn(ctx),
	}

	output, err := conn.CreateIndex(ctx, input)

	if err != nil {
		response.Diagnostics.AddError("creating Resource Explorer Index", err.Error())

		return
	}

	arn := aws.ToString(output.Arn)
	data.ID = types.StringValue(arn)

	createTimeout := r.CreateTimeout(ctx, data.Timeouts)
	if _, err := waitIndexCreated(ctx, conn, createTimeout); err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("waiting for Resource Explorer Index (%s) create", data.ID.ValueString()), err.Error())

		return
	}

	if data.Type.ValueEnum() == awstypes.IndexTypeAggregator {
		input := &resourceexplorer2.UpdateIndexTypeInput{
			Arn:  fwflex.StringFromFramework(ctx, data.ID),
			Type: awstypes.IndexTypeAggregator,
		}

		_, err := conn.UpdateIndexType(ctx, input)

		if err != nil {
			response.State.SetAttribute(ctx, path.Root(names.AttrID), data.ID) // Set 'id' so as to taint the resource.
			response.Diagnostics.AddError(fmt.Sprintf("updating Resource Explorer Index (%s)", data.ID.ValueString()), err.Error())
			return
		}

		if _, err := waitIndexUpdated(ctx, conn, createTimeout); err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for Resource Explorer Index (%s) update", data.ID.ValueString()), err.Error())

			return
		}
	}

	// Set values for unknowns.
	data.ARN = types.StringValue(arn)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
