package github.com/hashicorp/terraform-provider-aws/internal/service/rolesanywhere
import (
	"context"
	"fmt"
	"log"
	"reflect"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rolesanywhere/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSource(tfList []any) *awstypes.Source {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	result := &awstypes.Source{}

	if v, ok := tfMap[names.AttrSourceType].(string); ok && v != "" {
		result.SourceType = awstypes.TrustAnchorType(v)
	}

	if v, ok := tfMap["source_data"].([]any); ok && len(v) > 0 && v[0] != nil {
		switch result.SourceType {
		case awstypes.TrustAnchorTypeAwsAcmPca:
			result.SourceData = expandSourceDataACMPCA(v[0].(map[string]any))
		case awstypes.TrustAnchorTypeCertificateBundle:
			result.SourceData = expandSourceDataCertificateBundle(v[0].(map[string]any))
		}
	}

	return result
}
