package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCACertificateUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &iot.UpdateCACertificateInput{
			CertificateId: aws.String(d.Id()),
		}

		if d.Get("active").(bool) {
			input.NewStatus = awstypes.CACertificateStatusActive
		} else {
			input.NewStatus = awstypes.CACertificateStatusInactive
		}

		if d.Get("allow_auto_registration").(bool) {
			input.NewAutoRegistrationStatus = awstypes.AutoRegistrationStatusEnable
		} else {
			input.NewAutoRegistrationStatus = awstypes.AutoRegistrationStatusDisable
		}

		if d.HasChange("registration_config") {
			if v, ok := d.GetOk("registration_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.RegistrationConfig = expandRegistrationConfig(v.([]any)[0].(map[string]any))
			}
		}

		_, err := tfresource.RetryWhenIsA[*awstypes.InvalidRequestException](ctx, propagationTimeout, func() (any, error) {
			return conn.UpdateCACertificate(ctx, input)
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IoT CA Certificate (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceCACertificateRead(ctx, d, meta)...)
}
