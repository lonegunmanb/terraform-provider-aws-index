package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIndexingConfigurationPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	input := &iot.UpdateIndexingConfigurationInput{}

	if v, ok := d.GetOk("thing_group_indexing_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ThingGroupIndexingConfiguration = expandThingGroupIndexingConfiguration(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("thing_indexing_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ThingIndexingConfiguration = expandThingIndexingConfiguration(v.([]any)[0].(map[string]any))
	}

	_, err := conn.UpdateIndexingConfiguration(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating IoT Indexing Configuration: %s", err)
	}

	if d.IsNewResource() {
		d.SetId(meta.(*conns.AWSClient).Region(ctx))
	}

	return append(diags, resourceIndexingConfigurationRead(ctx, d, meta)...)
}
