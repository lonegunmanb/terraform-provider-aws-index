package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePolicyUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		policy, err := structure.NormalizeJsonString(d.Get(names.AttrPolicy).(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &iot.CreatePolicyVersionInput{
			PolicyDocument: aws.String(policy),
			PolicyName:     aws.String(d.Id()),
			SetAsDefault:   true,
		}

		_, errCreate := conn.CreatePolicyVersion(ctx, input)

		// "VersionsLimitExceededException: The policy ... already has the maximum number of versions (5)"
		if errs.IsA[*awstypes.VersionsLimitExceededException](errCreate) {
			// Prune the lowest version and retry.
			policyVersions, err := findPolicyVersionsByName(ctx, conn, d.Id())

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "reading IoT Policy (%s) versions: %s", d.Id(), err)
			}

			var versionIDs []int

			for _, v := range policyVersions {
				if v.IsDefaultVersion {
					continue
				}

				v, err := strconv.Atoi(aws.ToString(v.VersionId))

				if err != nil {
					continue
				}

				versionIDs = append(versionIDs, v)
			}

			if len(versionIDs) > 0 {
				// Sort ascending.
				slices.Sort(versionIDs)
				versionID := strconv.Itoa(versionIDs[0])

				if err := deletePolicyVersion(ctx, conn, d.Id(), versionID); err != nil {
					return sdkdiag.AppendFromErr(diags, err)
				}

				_, errCreate = conn.CreatePolicyVersion(ctx, input)
			}
		}

		if errCreate != nil {
			return sdkdiag.AppendErrorf(diags, "updating IoT Policy (%s): %s", d.Id(), errCreate)
		}
	}

	return append(diags, resourcePolicyRead(ctx, d, meta)...)
}
