package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCACertificateCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	input := &iot.RegisterCACertificateInput{
		AllowAutoRegistration: d.Get("allow_auto_registration").(bool),
		CaCertificate:         aws.String(d.Get("ca_certificate_pem").(string)),
		CertificateMode:       awstypes.CertificateMode(d.Get("certificate_mode").(string)),
		SetAsActive:           d.Get("active").(bool),
		Tags:                  getTagsIn(ctx),
	}

	if v, ok := d.GetOk("registration_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.RegistrationConfig = expandRegistrationConfig(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("verification_certificate_pem"); ok {
		input.VerificationCertificate = aws.String(v.(string))
	}

	outputRaw, err := tfresource.RetryWhenIsA[any, *awstypes.InvalidRequestException](ctx, propagationTimeout, func(ctx context.Context) (any, error) {
		return conn.RegisterCACertificate(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "registering IoT CA Certificate: %s", err)
	}

	d.SetId(aws.ToString(outputRaw.(*iot.RegisterCACertificateOutput).CertificateId))

	return append(diags, resourceCACertificateRead(ctx, d, meta)...)
}
