package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := iot.UpdateDomainConfigurationInput{
			DomainConfigurationName: aws.String(d.Id()),
		}

		if d.HasChange("application_protocol") {
			input.ApplicationProtocol = awstypes.ApplicationProtocol(d.Get("application_protocol").(string))
		}

		if d.HasChange("authentication_type") {
			input.AuthenticationType = awstypes.AuthenticationType(d.Get("authentication_type").(string))
		}

		if d.HasChange("authorizer_config") {
			if v, ok := d.GetOk("authorizer_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.AuthorizerConfig = expandAuthorizerConfig(v.([]any)[0].(map[string]any))
			} else {
				input.RemoveAuthorizerConfig = true
			}
		}

		if d.HasChange(names.AttrStatus) {
			input.DomainConfigurationStatus = awstypes.DomainConfigurationStatus(d.Get(names.AttrStatus).(string))
		}

		if d.HasChange("tls_config") {
			if v, ok := d.GetOk("tls_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.TlsConfig = expandTlsConfig(v.([]any)[0].(map[string]any))
			}
		}

		_, err := conn.UpdateDomainConfiguration(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IoT Domain Configuration (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceDomainConfigurationRead(ctx, d, meta)...)
}
