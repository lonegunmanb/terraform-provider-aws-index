package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *billingGroupResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	conn := r.Meta().IoTClient(ctx)
	var data billingGroupResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	input := &iot.CreateBillingGroupInput{
		Tags: getTagsIn(ctx),
	}
	response.Diagnostics.Append(flex.Expand(ctx, data, input, flex.WithFieldNamePrefix("BillingGroup"))...)
	if response.Diagnostics.HasError() {
		return
	}

	out, err := conn.CreateBillingGroup(ctx, input)
	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.IoT, create.ErrActionCreating, ResNameBillingGroup, data.Name.String(), err),
			err.Error(),
		)
		return
	}
	if out == nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.IoT, create.ErrActionCreating, ResNameBillingGroup, data.Name.String(), nil),
			errors.New("empty output").Error(),
		)
		return
	}

	findOut, err := findBillingGroupByName(ctx, conn, data.Name.ValueString())
	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.IoT, create.ErrActionCreating, ResNameBillingGroup, data.Name.String(), err),
			err.Error(),
		)
		return
	}

	// To preserve historical behavior of the Plugin-SDKV2 based resource, treat
	// billing group properties with a nested nil description as a null object
	if findOut.BillingGroupProperties != nil && findOut.BillingGroupProperties.BillingGroupDescription == nil {
		findOut.BillingGroupProperties = nil
	}

	// To preserve historical behavior of the Plugin-SDKV2 based resource, the billing
	// group name is copied to the `id` attribute (not the ID generated by AWS)
	data.ID = types.StringValue(data.Name.ValueString())
	response.Diagnostics.Append(flex.Flatten(ctx, findOut, &data, flex.WithFieldNamePrefix("BillingGroup"))...)
	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
