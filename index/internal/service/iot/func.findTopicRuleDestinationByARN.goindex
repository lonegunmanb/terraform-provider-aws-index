package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findTopicRuleDestinationByARN(ctx context.Context, conn *iot.Client, arn string) (*awstypes.TopicRuleDestination, error) {
	// GetTopicRuleDestination returns unhelpful errors such as
	//	"UnauthorizedException: Access to TopicRuleDestination 'arn:aws:iot:us-west-2:123456789012:ruledestination/vpc/f267138a-7383-4670-9e44-a7fe2f48af5e' was denied"
	// when querying for a rule destination that doesn't exist.
	inputL := &iot.ListTopicRuleDestinationsInput{}
	var destination *awstypes.TopicRuleDestinationSummary

	pages := iot.NewListTopicRuleDestinationsPaginator(conn, inputL)
pageLoop:
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.DestinationSummaries {
			if aws.ToString(v.Arn) == arn {
				destination = &v
				break pageLoop
			}
		}
	}

	if destination == nil {
		return nil, tfresource.NewEmptyResultError(nil)
	}

	inputG := &iot.GetTopicRuleDestinationInput{
		Arn: aws.String(arn),
	}

	output, err := conn.GetTopicRuleDestination(ctx, inputG)

	if errs.IsA[*awstypes.ResourceNotFoundException](err) {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: inputG,
		}
	}

	if err != nil {
		return nil, err
	}

	if output == nil || output.TopicRuleDestination == nil {
		return nil, tfresource.NewEmptyResultError(inputG)
	}

	return output.TopicRuleDestination, nil
}
