package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	output, err := findDomainConfigurationByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] IoT Domain Configuration (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IoT Domain Configuration (%s): %s", d.Id(), err)
	}

	d.Set("application_protocol", output.ApplicationProtocol)
	d.Set(names.AttrARN, output.DomainConfigurationArn)
	d.Set("authentication_type", output.AuthenticationType)
	if output.AuthorizerConfig != nil {
		if err := d.Set("authorizer_config", []any{flattenAuthorizerConfig(output.AuthorizerConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting authorizer_config: %s", err)
		}
	} else {
		d.Set("authorizer_config", nil)
	}
	d.Set(names.AttrDomainName, output.DomainName)
	d.Set("domain_type", output.DomainType)
	d.Set(names.AttrName, output.DomainConfigurationName)
	d.Set("server_certificate_arns", tfslices.ApplyToAll(output.ServerCertificates, func(v awstypes.ServerCertificateSummary) string {
		return aws.ToString(v.ServerCertificateArn)
	}))
	d.Set("service_type", output.ServiceType)
	d.Set(names.AttrStatus, output.DomainConfigurationStatus)
	if output.TlsConfig != nil {
		if err := d.Set("tls_config", []any{flattenTlsConfig(output.TlsConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting tls_config: %s", err)
		}
	} else {
		d.Set("tls_config", nil)
	}
	d.Set("validation_certificate_arn", d.Get("validation_certificate_arn"))

	return diags
}
