package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRoleAliasUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChange("credential_duration") {
		input := &iot.UpdateRoleAliasInput{
			CredentialDurationSeconds: aws.Int32(int32(d.Get("credential_duration").(int))),
			RoleAlias:                 aws.String(d.Id()),
		}

		_, err := conn.UpdateRoleAlias(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating role alias %s: %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrRoleARN) {
		roleAliasInput := &iot.UpdateRoleAliasInput{
			RoleAlias: aws.String(d.Id()),
			RoleArn:   aws.String(d.Get(names.AttrRoleARN).(string)),
		}
		_, err := conn.UpdateRoleAlias(ctx, roleAliasInput)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating role alias %s: %s", d.Id(), err)
		}
	}

	return append(diags, resourceRoleAliasRead(ctx, d, meta)...)
}
