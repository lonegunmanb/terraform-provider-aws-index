package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
)
func resourceEventConfigurationsPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	input := &iot.UpdateEventConfigurationsInput{}

	if v, ok := d.GetOk("event_configurations"); ok && len(v.(map[string]any)) > 0 {
		input.EventConfigurations = tfmaps.ApplyToAllValues(v.(map[string]any), func(v any) awstypes.Configuration {
			return awstypes.Configuration{
				Enabled: v.(bool),
			}
		})
	}

	_, err := conn.UpdateEventConfigurations(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating IoT Event Configurations: %s", err)
	}

	if d.IsNewResource() {
		d.SetId(meta.(*conns.AWSClient).Region(ctx))
	}

	return append(diags, resourceEventConfigurationsRead(ctx, d, meta)...)
}
