package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCACertificateRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	output, err := findCACertificateByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] IoT CA Certificate (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IoT CA Certificate (%s): %s", d.Id(), err)
	}

	certificateDescription := output.CertificateDescription
	d.Set("active", string(certificateDescription.Status) == string(awstypes.CACertificateStatusActive))
	d.Set("allow_auto_registration", string(certificateDescription.AutoRegistrationStatus) == string(awstypes.AutoRegistrationStatusEnable))
	d.Set(names.AttrARN, certificateDescription.CertificateArn)
	d.Set("ca_certificate_pem", certificateDescription.CertificatePem)
	d.Set("certificate_mode", certificateDescription.CertificateMode)
	d.Set("customer_version", certificateDescription.CustomerVersion)
	d.Set("generation_id", certificateDescription.GenerationId)
	if output.RegistrationConfig != nil {
		if err := d.Set("registration_config", []any{flattenRegistrationConfig(output.RegistrationConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting registration_config: %s", err)
		}
	} else {
		d.Set("registration_config", nil)
	}
	if certificateDescription.Validity != nil {
		if err := d.Set("validity", []any{flattenCertificateValidity(certificateDescription.Validity)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting validity: %s", err)
		}
	} else {
		d.Set("validity", nil)
	}

	return diags
}
