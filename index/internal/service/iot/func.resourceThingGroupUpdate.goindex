package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceThingGroupUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &iot.UpdateThingGroupInput{
			ExpectedVersion: aws.Int64(int64(d.Get(names.AttrVersion).(int))),
			ThingGroupName:  aws.String(d.Get(names.AttrName).(string)),
		}

		if v, ok := d.GetOk(names.AttrProperties); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.ThingGroupProperties = expandThingGroupProperties(v.([]any)[0].(map[string]any))
		} else {
			input.ThingGroupProperties = &awstypes.ThingGroupProperties{}
		}

		// https://docs.aws.amazon.com/iot/latest/apireference/API_AttributePayload.html#API_AttributePayload_Contents:
		// "To remove an attribute, call UpdateThing with an empty attribute value."
		if input.ThingGroupProperties.AttributePayload == nil {
			input.ThingGroupProperties.AttributePayload = &awstypes.AttributePayload{
				Attributes: map[string]string{},
			}
		}

		_, err := conn.UpdateThingGroup(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IoT Thing Group (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceThingGroupRead(ctx, d, meta)...)
}
