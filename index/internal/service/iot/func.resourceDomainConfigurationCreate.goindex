package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := iot.CreateDomainConfigurationInput{
		DomainConfigurationName: aws.String(name),
		Tags:                    getTagsIn(ctx),
	}

	if v, ok := d.GetOk("application_protocol"); ok {
		input.ApplicationProtocol = awstypes.ApplicationProtocol(v.(string))
	}

	if v, ok := d.GetOk("authentication_type"); ok {
		input.AuthenticationType = awstypes.AuthenticationType(v.(string))
	}

	if v, ok := d.GetOk("authorizer_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.AuthorizerConfig = expandAuthorizerConfig(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrDomainName); ok {
		input.DomainName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("server_certificate_arns"); ok && v.(*schema.Set).Len() > 0 {
		input.ServerCertificateArns = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("service_type"); ok {
		input.ServiceType = awstypes.ServiceType(v.(string))
	}

	if v, ok := d.GetOk("tls_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.TlsConfig = expandTlsConfig(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("validation_certificate_arn"); ok {
		input.ValidationCertificateArn = aws.String(v.(string))
	}

	output, err := conn.CreateDomainConfiguration(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating IoT Domain Configuration (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.DomainConfigurationName))

	return append(diags, resourceDomainConfigurationRead(ctx, d, meta)...)
}
