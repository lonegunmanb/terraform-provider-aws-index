package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"
	"reflect"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTopicRule() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceTopicRuleCreate,
		ReadWithoutTimeout:   resourceTopicRuleRead,
		UpdateWithoutTimeout: resourceTopicRuleUpdate,
		DeleteWithoutTimeout: resourceTopicRuleDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		SchemaFunc: func() map[string]*schema.Schema {
			topicRuleErrorActionExactlyOneOf := []string{
				"error_action.0.cloudwatch_alarm",
				"error_action.0.cloudwatch_logs",
				"error_action.0.cloudwatch_metric",
				"error_action.0.dynamodb",
				"error_action.0.dynamodbv2",
				"error_action.0.elasticsearch",
				"error_action.0.firehose",
				"error_action.0.http",
				"error_action.0.iot_analytics",
				"error_action.0.iot_events",
				"error_action.0.kafka",
				"error_action.0.kinesis",
				"error_action.0.lambda",
				"error_action.0.republish",
				"error_action.0.s3",
				"error_action.0.sns",
				"error_action.0.sqs",
				"error_action.0.step_functions",
				"error_action.0.timestream",
			}

			timestreamDimensionResource := func() *schema.Resource {
				return &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrName: {
							Type:     schema.TypeString,
							Required: true,
						},
						names.AttrValue: {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				}
			}

			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"cloudwatch_alarm": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"alarm_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"state_reason": {
								Type:     schema.TypeString,
								Required: true,
							},
							"state_value": {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validTopicRuleCloudWatchAlarmStateValue,
							},
						},
					},
				},
				names.AttrCloudWatchLogs: {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"batch_mode": {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							names.AttrLogGroupName: {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"cloudwatch_metric": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrMetricName: {
								Type:     schema.TypeString,
								Required: true,
							},
							"metric_namespace": {
								Type:     schema.TypeString,
								Required: true,
							},
							"metric_timestamp": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: verify.ValidUTCTimestamp,
							},
							"metric_unit": {
								Type:     schema.TypeString,
								Required: true,
							},
							"metric_value": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Optional: true,
				},
				"dynamodb": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"hash_key_field": {
								Type:     schema.TypeString,
								Required: true,
							},
							"hash_key_value": {
								Type:     schema.TypeString,
								Required: true,
							},
							"hash_key_type": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"operation": {
								Type:     schema.TypeString,
								Optional: true,
								ValidateFunc: validation.StringInSlice([]string{
									"DELETE",
									"INSERT",
									"UPDATE",
								}, false),
							},
							"payload_field": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"range_key_field": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"range_key_value": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"range_key_type": {
								Type:     schema.TypeString,
								Optional: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrTableName: {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				"dynamodbv2": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"put_item": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrTableName: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"elasticsearch": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrEndpoint: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validTopicRuleElasticsearchEndpoint,
							},
							names.AttrID: {
								Type:     schema.TypeString,
								Required: true,
							},
							"index": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrType: {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				names.AttrEnabled: {
					Type:     schema.TypeBool,
					Required: true,
				},
				"error_action": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"cloudwatch_alarm": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"alarm_name": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"state_reason": {
											Type:     schema.TypeString,
											Required: true,
										},
										"state_value": {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validTopicRuleCloudWatchAlarmStateValue,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							names.AttrCloudWatchLogs: {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"batch_mode": {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  false,
										},
										names.AttrLogGroupName: {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"cloudwatch_metric": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrMetricName: {
											Type:     schema.TypeString,
											Required: true,
										},
										"metric_namespace": {
											Type:     schema.TypeString,
											Required: true,
										},
										"metric_timestamp": {
											Type:         schema.TypeString,
											Optional:     true,
											ValidateFunc: verify.ValidUTCTimestamp,
										},
										"metric_unit": {
											Type:     schema.TypeString,
											Required: true,
										},
										"metric_value": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"dynamodb": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"hash_key_field": {
											Type:     schema.TypeString,
											Required: true,
										},
										"hash_key_value": {
											Type:     schema.TypeString,
											Required: true,
										},
										"hash_key_type": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"operation": {
											Type:     schema.TypeString,
											Optional: true,
											ValidateFunc: validation.StringInSlice([]string{
												"DELETE",
												"INSERT",
												"UPDATE",
											}, false),
										},
										"payload_field": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"range_key_field": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"range_key_value": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"range_key_type": {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrTableName: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"dynamodbv2": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"put_item": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrTableName: {
														Type:     schema.TypeString,
														Required: true,
													},
												},
											},
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"elasticsearch": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrEndpoint: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validTopicRuleElasticsearchEndpoint,
										},
										names.AttrID: {
											Type:     schema.TypeString,
											Required: true,
										},
										"index": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrType: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"firehose": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"batch_mode": {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  false,
										},
										"delivery_stream_name": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"separator": {
											Type:         schema.TypeString,
											Optional:     true,
											ValidateFunc: validTopicRuleFirehoseSeparator,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"http": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"confirmation_url": {
											Type:         schema.TypeString,
											Optional:     true,
											ValidateFunc: validation.IsURLWithHTTPS,
										},
										"http_header": {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrKey: {
														Type:     schema.TypeString,
														Required: true,
													},
													names.AttrValue: {
														Type:     schema.TypeString,
														Required: true,
													},
												},
											},
										},
										names.AttrURL: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: validation.IsURLWithHTTPS,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"iot_analytics": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"batch_mode": {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  false,
										},
										"channel_name": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"iot_events": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"batch_mode": {
											Type:     schema.TypeBool,
											Optional: true,
											Default:  false,
										},
										"input_name": {
											Type:     schema.TypeString,
											Required: true,
										},
										"message_id": {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"kafka": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"client_properties": {
											Type:     schema.TypeMap,
											Required: true,
											Elem:     &schema.Schema{Type: schema.TypeString},
										},
										names.AttrDestinationARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrHeader: {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrKey: {
														Type:     schema.TypeString,
														Required: true,
													},
													names.AttrValue: {
														Type:     schema.TypeString,
														Required: true,
													},
												},
											},
										},
										names.AttrKey: {
											Type:     schema.TypeString,
											Optional: true,
										},
										"partition": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"topic": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"kinesis": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"partition_key": {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"stream_name": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"lambda": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrFunctionARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"republish": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"qos": {
											Type:         schema.TypeInt,
											Optional:     true,
											Default:      0,
											ValidateFunc: validation.IntBetween(0, 1),
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"topic": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"s3": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrBucketName: {
											Type:     schema.TypeString,
											Required: true,
										},
										"canned_acl": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[awstypes.CannedAccessControlList](),
										},
										names.AttrKey: {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"sns": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"message_format": {
											Type:     schema.TypeString,
											Default:  awstypes.MessageFormatRaw,
											Optional: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrTargetARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"sqs": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"queue_url": {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"use_base64": {
											Type:     schema.TypeBool,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"step_functions": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"execution_name_prefix": {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										"state_machine_name": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
							"timestream": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrDatabaseName: {
											Type:     schema.TypeString,
											Required: true,
										},
										"dimension": {
											Type:     schema.TypeSet,
											Required: true,
											Elem:     timestreamDimensionResource(),
										},
										names.AttrRoleARN: {
											Type:         schema.TypeString,
											Required:     true,
											ValidateFunc: verify.ValidARN,
										},
										names.AttrTableName: {
											Type:     schema.TypeString,
											Required: true,
										},
										"timestamp": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrUnit: {
														Type:     schema.TypeString,
														Required: true,
														ValidateFunc: validation.StringInSlice([]string{
															"SECONDS",
															"MILLISECONDS",
															"MICROSECONDS",
															"NANOSECONDS",
														}, false),
													},
													names.AttrValue: {
														Type:     schema.TypeString,
														Required: true,
													},
												},
											},
										},
									},
								},
								ExactlyOneOf: topicRuleErrorActionExactlyOneOf,
							},
						},
					},
				},
				"firehose": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"batch_mode": {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							"delivery_stream_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"separator": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validTopicRuleFirehoseSeparator,
							},
						},
					},
				},
				"http": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"confirmation_url": {
								Type:         schema.TypeString,
								Optional:     true,
								ValidateFunc: validation.IsURLWithHTTPS,
							},
							"http_header": {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrKey: {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrValue: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							names.AttrURL: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: validation.IsURLWithHTTPS,
							},
						},
					},
				},
				"iot_analytics": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"batch_mode": {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							"channel_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"iot_events": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"batch_mode": {
								Type:     schema.TypeBool,
								Optional: true,
								Default:  false,
							},
							"input_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							"message_id": {
								Type:     schema.TypeString,
								Optional: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"kafka": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"client_properties": {
								Type:     schema.TypeMap,
								Required: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							names.AttrDestinationARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrHeader: {
								Type:     schema.TypeList,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrKey: {
											Type:     schema.TypeString,
											Required: true,
										},
										names.AttrValue: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							names.AttrKey: {
								Type:     schema.TypeString,
								Optional: true,
							},
							"partition": {
								Type:     schema.TypeString,
								Optional: true,
							},
							"topic": {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				"kinesis": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"partition_key": {
								Type:     schema.TypeString,
								Optional: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"stream_name": {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				"lambda": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrFunctionARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				names.AttrName: {
					Type:         schema.TypeString,
					Required:     true,
					ForceNew:     true,
					ValidateFunc: validTopicRuleName,
				},
				"republish": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"qos": {
								Type:         schema.TypeInt,
								Optional:     true,
								Default:      0,
								ValidateFunc: validation.IntBetween(0, 1),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"topic": {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				"s3": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrBucketName: {
								Type:     schema.TypeString,
								Required: true,
							},
							"canned_acl": {
								Type:             schema.TypeString,
								Optional:         true,
								ValidateDiagFunc: enum.Validate[awstypes.CannedAccessControlList](),
							},
							names.AttrKey: {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"sns": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"message_format": {
								Type:     schema.TypeString,
								Optional: true,
								Default:  awstypes.MessageFormatRaw,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrTargetARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
						},
					},
				},
				"sql": {
					Type:     schema.TypeString,
					Required: true,
				},
				"sql_version": {
					Type:     schema.TypeString,
					Required: true,
				},
				"sqs": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"queue_url": {
								Type:     schema.TypeString,
								Required: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"use_base64": {
								Type:     schema.TypeBool,
								Required: true,
							},
						},
					},
				},
				"step_functions": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"execution_name_prefix": {
								Type:     schema.TypeString,
								Optional: true,
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							"state_machine_name": {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"timestream": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrDatabaseName: {
								Type:     schema.TypeString,
								Required: true,
							},
							"dimension": {
								Type:     schema.TypeSet,
								Required: true,
								Elem:     timestreamDimensionResource(),
							},
							names.AttrRoleARN: {
								Type:         schema.TypeString,
								Required:     true,
								ValidateFunc: verify.ValidARN,
							},
							names.AttrTableName: {
								Type:     schema.TypeString,
								Required: true,
							},
							"timestamp": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										names.AttrUnit: {
											Type:     schema.TypeString,
											Required: true,
											ValidateFunc: validation.StringInSlice([]string{
												"SECONDS",
												"MILLISECONDS",
												"MICROSECONDS",
												"NANOSECONDS",
											}, false),
										},
										names.AttrValue: {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
						},
					},
				},
			}
		},
	}
}
