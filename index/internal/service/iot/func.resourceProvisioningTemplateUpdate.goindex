package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProvisioningTemplateUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IoTClient(ctx)

	if d.HasChange("template_body") {
		input := &iot.CreateProvisioningTemplateVersionInput{
			SetAsDefault: true,
			TemplateBody: aws.String(d.Get("template_body").(string)),
			TemplateName: aws.String(d.Id()),
		}

		_, err := conn.CreateProvisioningTemplateVersion(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating IoT Provisioning Template (%s) version: %s", d.Id(), err)
		}
	}

	if d.HasChanges(names.AttrDescription, names.AttrEnabled, "provisioning_role_arn", "pre_provisioning_hook") {
		input := &iot.UpdateProvisioningTemplateInput{
			Description:         aws.String(d.Get(names.AttrDescription).(string)),
			Enabled:             aws.Bool(d.Get(names.AttrEnabled).(bool)),
			ProvisioningRoleArn: aws.String(d.Get("provisioning_role_arn").(string)),
			TemplateName:        aws.String(d.Id()),
		}

		if v, ok := d.GetOk("pre_provisioning_hook"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.PreProvisioningHook = expandProvisioningHook(v.([]any)[0].(map[string]any))
		}

		_, err := tfresource.RetryWhenIsA[any, *awstypes.InvalidRequestException](ctx, propagationTimeout,
			func(ctx context.Context) (any, error) {
				return conn.UpdateProvisioningTemplate(ctx, input)
			})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IoT Provisioning Template (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceProvisioningTemplateRead(ctx, d, meta)...)
}
