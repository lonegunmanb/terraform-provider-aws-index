package github.com/hashicorp/terraform-provider-aws/internal/service/iot
import (
	"context"
	"log"
	"reflect"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iot/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenErrorAction(apiObject *awstypes.Action) []any {
	tfList := make([]any, 0)

	if apiObject == nil {
		return nil
	}

	input := []awstypes.Action{*apiObject}
	if apiObject.CloudwatchAlarm != nil {
		tfList = append(tfList, map[string]any{"cloudwatch_alarm": flattenCloudWatchAlarmActions(input)})
		return tfList
	}
	if apiObject.CloudwatchLogs != nil {
		tfList = append(tfList, map[string]any{names.AttrCloudWatchLogs: flattenCloudWatchLogsActions(input)})
		return tfList
	}
	if apiObject.CloudwatchMetric != nil {
		tfList = append(tfList, map[string]any{"cloudwatch_metric": flattenCloudWatchMetricActions(input)})
		return tfList
	}
	if apiObject.DynamoDB != nil {
		tfList = append(tfList, map[string]any{"dynamodb": flattenDynamoDBActions(input)})
		return tfList
	}
	if apiObject.DynamoDBv2 != nil {
		tfList = append(tfList, map[string]any{"dynamodbv2": flattenDynamoDBv2Actions(input)})
		return tfList
	}
	if apiObject.Elasticsearch != nil {
		tfList = append(tfList, map[string]any{"elasticsearch": flattenElasticsearchActions(input)})
		return tfList
	}
	if apiObject.Firehose != nil {
		tfList = append(tfList, map[string]any{"firehose": flattenFirehoseActions(input)})
		return tfList
	}
	if apiObject.Http != nil {
		tfList = append(tfList, map[string]any{"http": flattenHTTPActions(input)})
		return tfList
	}
	if apiObject.IotAnalytics != nil {
		tfList = append(tfList, map[string]any{"iot_analytics": flattenAnalyticsActions(input)})
		return tfList
	}
	if apiObject.IotEvents != nil {
		tfList = append(tfList, map[string]any{"iot_events": flattenEventsActions(input)})
		return tfList
	}
	if apiObject.Kafka != nil {
		tfList = append(tfList, map[string]any{"kafka": flattenKafkaActions(input)})
		return tfList
	}
	if apiObject.Kinesis != nil {
		tfList = append(tfList, map[string]any{"kinesis": flattenKinesisActions(input)})
		return tfList
	}
	if apiObject.Lambda != nil {
		tfList = append(tfList, map[string]any{"lambda": flattenLambdaActions(input)})
		return tfList
	}
	if apiObject.Republish != nil {
		tfList = append(tfList, map[string]any{"republish": flattenRepublishActions(input)})
		return tfList
	}
	if apiObject.S3 != nil {
		tfList = append(tfList, map[string]any{"s3": flattenS3Actions(input)})
		return tfList
	}
	if apiObject.Sns != nil {
		tfList = append(tfList, map[string]any{"sns": flattenSNSActions(input)})
		return tfList
	}
	if apiObject.Sqs != nil {
		tfList = append(tfList, map[string]any{"sqs": flattenSQSActions(input)})
		return tfList
	}
	if apiObject.StepFunctions != nil {
		tfList = append(tfList, map[string]any{"step_functions": flattenStepFunctionsActions(input)})
		return tfList
	}
	if apiObject.Timestream != nil {
		tfList = append(tfList, map[string]any{"timestream": flattenTimestreamActions(input)})
		return tfList
	}

	return tfList
}
