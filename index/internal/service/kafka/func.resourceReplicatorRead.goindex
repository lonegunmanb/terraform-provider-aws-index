package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReplicatorRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).KafkaClient(ctx)

	output, err := findReplicatorByARN(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Kafka Replicator (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MSK Replicator (%s): %s", d.Id(), err)
	}

	sourceAlias := aws.ToString(output.ReplicationInfoList[0].SourceKafkaClusterAlias)
	targetAlias := aws.ToString(output.ReplicationInfoList[0].TargetKafkaClusterAlias)
	var sourceARN, targetARN *string

	for _, cluster := range output.KafkaClusters {
		if clusterAlias := aws.ToString(cluster.KafkaClusterAlias); clusterAlias == sourceAlias {
			sourceARN = cluster.AmazonMskCluster.MskClusterArn
		} else if clusterAlias == targetAlias {
			targetARN = cluster.AmazonMskCluster.MskClusterArn
		}
	}

	d.Set(names.AttrARN, output.ReplicatorArn)
	d.Set("current_version", output.CurrentVersion)
	d.Set(names.AttrDescription, output.ReplicatorDescription)
	d.Set("kafka_cluster", flattenKafkaClusterDescriptions(output.KafkaClusters))
	d.Set("replication_info_list", flattenReplicationInfoDescriptions(output.ReplicationInfoList, sourceARN, targetARN))
	d.Set("replicator_name", output.ReplicatorName)
	d.Set("service_execution_role_arn", output.ServiceExecutionRoleArn)

	setTagsOut(ctx, output.Tags)

	return diags
}
