package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandKafkaCluster(tfMap map[string]any) types.KafkaCluster { // nosemgrep:ci.kafka-in-func-name
	apiObject := types.KafkaCluster{}

	if v, ok := tfMap[names.AttrVPCConfig].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.VpcConfig = expandKafkaClusterClientVPCConfig(v[0].(map[string]any))
	}

	if v, ok := tfMap["amazon_msk_cluster"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.AmazonMskCluster = expandAmazonMSKCluster(v[0].(map[string]any))
	}

	return apiObject
}
