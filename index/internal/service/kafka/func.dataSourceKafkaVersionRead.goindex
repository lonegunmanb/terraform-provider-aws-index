package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceKafkaVersionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics { // nosemgrep:ci.kafka-in-func-name
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KafkaClient(ctx)

	var preferredVersions []string
	if v, ok := d.GetOk("preferred_versions"); ok && len(v.([]any)) > 0 {
		preferredVersions = flex.ExpandStringValueList(v.([]any))
	} else if v, ok := d.GetOk(names.AttrVersion); ok {
		preferredVersions = []string{v.(string)}
	}

	kafkaVersion, err := findKafkaVersion(ctx, conn, preferredVersions)

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("MSK Kafka Version", err))
	}

	version := aws.ToString(kafkaVersion.Version)
	d.SetId(version)
	d.Set(names.AttrStatus, kafkaVersion.Status)
	d.Set(names.AttrVersion, version)

	return diags
}
