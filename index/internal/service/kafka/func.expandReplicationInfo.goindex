package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandReplicationInfo(tfMap map[string]any) types.ReplicationInfo {
	apiObject := types.ReplicationInfo{}

	if v, ok := tfMap["source_kafka_cluster_arn"].(string); ok {
		apiObject.SourceKafkaClusterArn = aws.String(v)
	}

	if v, ok := tfMap["target_kafka_cluster_arn"].(string); ok {
		apiObject.TargetKafkaClusterArn = aws.String(v)
	}

	if v, ok := tfMap["target_compression_type"].(string); ok {
		apiObject.TargetCompressionType = types.TargetCompressionType(v)
	}

	if v, ok := tfMap["topic_replication"].([]any); ok {
		apiObject.TopicReplication = expandTopicReplication(v[0].(map[string]any))
	}

	if v, ok := tfMap["consumer_group_replication"].([]any); ok {
		apiObject.ConsumerGroupReplication = expandConsumerGroupReplication(v[0].(map[string]any))
	}

	return apiObject
}
