package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceBootstrapBrokers,
			TypeName: "aws_msk_bootstrap_brokers",
			Name:     "Bootstrap Brokers",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceBrokerNodes,
			TypeName: "aws_msk_broker_nodes",
			Name:     "Broker Nodes",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceCluster,
			TypeName: "aws_msk_cluster",
			Name:     "Cluster",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceConfiguration,
			TypeName: "aws_msk_configuration",
			Name:     "Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceKafkaVersion,
			TypeName: "aws_msk_kafka_version",
			Name:     "Kafka Version",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceVPCConnection,
			TypeName: "aws_msk_vpc_connection",
			Name:     "VPC Connection",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
