package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenReplicationInfoDescription(apiObject types.ReplicationInfoDescription, sourceCluster, targetCluster *string) map[string]any {
	tfMap := map[string]any{}

	if v := sourceCluster; v != nil {
		tfMap["source_kafka_cluster_arn"] = aws.ToString(v)
	}

	if v := targetCluster; v != nil {
		tfMap["target_kafka_cluster_arn"] = aws.ToString(v)
	}

	if v := apiObject.SourceKafkaClusterAlias; v != nil {
		tfMap["source_kafka_cluster_alias"] = aws.ToString(v)
	}

	if v := apiObject.TargetKafkaClusterAlias; v != nil {
		tfMap["target_kafka_cluster_alias"] = aws.ToString(v)
	}

	if v := apiObject.TargetCompressionType; v != "" {
		tfMap["target_compression_type"] = v
	}

	if v := apiObject.TopicReplication; v != nil {
		tfMap["topic_replication"] = []any{flattenTopicReplication(v)}
	}

	if v := apiObject.ConsumerGroupReplication; v != nil {
		tfMap["consumer_group_replication"] = []any{flattenConsumerGroupReplication(v)}
	}

	return tfMap
}
