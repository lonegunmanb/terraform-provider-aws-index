package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findKafkaVersion(ctx context.Context, conn *kafka.Client, preferredVersions []string) (*types.KafkaVersion, error) { // nosemgrep:ci.kafka-in-func-name
	input := &kafka.ListKafkaVersionsInput{}
	output, err := findKafkaVersions(ctx, conn, input)

	if err != nil {
		return nil, err
	}

	var kafkaVersions []types.KafkaVersion
	for _, preferredVersion := range preferredVersions {
		for _, kafkaVersion := range output {
			if preferredVersion == aws.ToString(kafkaVersion.Version) {
				kafkaVersions = append(kafkaVersions, kafkaVersion)
			}
		}
	}

	return tfresource.AssertFirstValueResult(kafkaVersions)
}
