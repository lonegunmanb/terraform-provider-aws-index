package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandConsumerGroupReplication(tfMap map[string]any) *types.ConsumerGroupReplication {
	apiObject := &types.ConsumerGroupReplication{}

	if v, ok := tfMap["consumer_groups_to_replicate"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.ConsumerGroupsToReplicate = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["consumer_groups_to_exclude"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.ConsumerGroupsToExclude = flex.ExpandStringValueSet(v)
	}

	if v, ok := tfMap["synchronise_consumer_group_offsets"].(bool); ok {
		apiObject.SynchroniseConsumerGroupOffsets = aws.Bool(v)
	}

	if v, ok := tfMap["detect_and_copy_new_consumer_groups"].(bool); ok {
		apiObject.DetectAndCopyNewConsumerGroups = aws.Bool(v)
	}

	return apiObject
}
