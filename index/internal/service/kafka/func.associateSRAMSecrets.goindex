package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
)
func associateSRAMSecrets(ctx context.Context, conn *kafka.Client, clusterARN string, secretARNs []string) error {
	for chunk := range slices.Chunk(secretARNs, scramSecretBatchSize) {
		input := &kafka.BatchAssociateScramSecretInput{
			ClusterArn:    aws.String(clusterARN),
			SecretArnList: chunk,
		}

		output, err := conn.BatchAssociateScramSecret(ctx, input)

		if err == nil {
			err = unprocessedScramSecretsError(output.UnprocessedScramSecrets, false)
		}

		if err != nil {
			return err
		}
	}

	return nil
}
