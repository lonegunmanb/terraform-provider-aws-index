package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"slices"

	"github.com/aws/aws-sdk-go-v2/service/kafka"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *singleSCRAMSecretAssociationResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data singleSCRAMSecretAssociationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	parts := []string{
		data.ClusterARN.ValueString(),
		data.SecretARN.ValueString(),
	}
	id, err := flex.FlattenResourceId(parts, singleSCRAMSecretAssociationResourceIDPartCount, false)

	if err != nil {
		response.Diagnostics.AddError("creating MSK Single SCRAM Secret Association resource ID", err.Error())

		return
	}

	conn := r.Meta().KafkaClient(ctx)

	if err := associateSRAMSecrets(ctx, conn, data.ClusterARN.ValueString(), []string{data.SecretARN.ValueString()}); err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating MSK Single SCRAM Secret Association (%s)", id), err.Error())

		return
	}

	// Set values for unknowns.
	data.ID = fwflex.StringValueToFramework(ctx, id)

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
