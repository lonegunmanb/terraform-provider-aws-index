package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenTopicReplication(apiObject *types.TopicReplication) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if aws.ToBool(apiObject.CopyAccessControlListsForTopics) {
		tfMap["copy_access_control_lists_for_topics"] = apiObject.CopyAccessControlListsForTopics
	}

	if aws.ToBool(apiObject.CopyTopicConfigurations) {
		tfMap["copy_topic_configurations"] = apiObject.CopyTopicConfigurations
	}

	if aws.ToBool(apiObject.DetectAndCopyNewTopics) {
		tfMap["detect_and_copy_new_topics"] = apiObject.DetectAndCopyNewTopics
	}

	if v := apiObject.StartingPosition; v != nil {
		tfMap["starting_position"] = []any{flattenReplicationStartingPosition(v)}
	}

	if v := apiObject.TopicNameConfiguration; v != nil {
		tfMap["topic_name_configuration"] = []any{flattenReplicationTopicNameConfiguration(v)}
	}

	if v := apiObject.TopicsToReplicate; v != nil {
		tfMap["topics_to_replicate"] = v
	}

	if v := apiObject.TopicsToExclude; v != nil {
		tfMap["topics_to_exclude"] = v
	}

	return tfMap
}
