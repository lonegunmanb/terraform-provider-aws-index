package github.com/hashicorp/terraform-provider-aws/internal/service/kafka
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafka/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReplicatorUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).KafkaClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &kafka.UpdateReplicationInfoInput{
			CurrentVersion:        aws.String(d.Get("current_version").(string)),
			ReplicatorArn:         aws.String(d.Id()),
			SourceKafkaClusterArn: aws.String(d.Get("replication_info_list.0.source_kafka_cluster_arn").(string)),
			TargetKafkaClusterArn: aws.String(d.Get("replication_info_list.0.target_kafka_cluster_arn").(string)),
		}

		if d.HasChanges("replication_info_list.0.consumer_group_replication") {
			if v, ok := d.GetOk("replication_info_list.0.consumer_group_replication"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.ConsumerGroupReplication = expandConsumerGroupReplicationUpdate(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChanges("replication_info_list.0.topic_replication") {
			if v, ok := d.GetOk("replication_info_list.0.topic_replication"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.TopicReplication = expandTopicReplicationUpdate(v.([]any)[0].(map[string]any))
			}
		}

		_, err := conn.UpdateReplicationInfo(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating MSK Replicator (%s): %s", d.Id(), err)
		}

		if _, err := waitReplicatorUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for MSK Replicator (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceReplicatorRead(ctx, d, meta)...)
}
