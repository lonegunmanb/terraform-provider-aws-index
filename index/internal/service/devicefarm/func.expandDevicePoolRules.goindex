package github.com/hashicorp/terraform-provider-aws/internal/service/devicefarm
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm"
	awstypes "github.com/aws/aws-sdk-go-v2/service/devicefarm/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDevicePoolRules(s *schema.Set) []awstypes.Rule {
	rules := make([]awstypes.Rule, 0)

	for _, r := range s.List() {
		rule := awstypes.Rule{}
		tfMap := r.(map[string]any)

		if v, ok := tfMap["attribute"].(string); ok && v != "" {
			rule.Attribute = awstypes.DeviceAttribute(v)
		}

		if v, ok := tfMap["operator"].(string); ok && v != "" {
			rule.Operator = awstypes.RuleOperator(v)
		}

		if v, ok := tfMap[names.AttrValue].(string); ok && v != "" {
			rule.Value = aws.String(v)
		}

		rules = append(rules, rule)
	}
	return rules
}
