package github.com/hashicorp/terraform-provider-aws/internal/service/kendra
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kendra"
	"github.com/aws/aws-sdk-go-v2/service/kendra/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceExperienceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).KendraClient(ctx)

	id, indexId, err := ExperienceParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	in := &kendra.UpdateExperienceInput{
		Id:      aws.String(id),
		IndexId: aws.String(indexId),
	}

	if d.HasChange(names.AttrConfiguration) {
		in.Configuration = expandConfiguration(d.Get(names.AttrConfiguration).([]any))
	}

	if d.HasChange(names.AttrDescription) {
		in.Description = aws.String(d.Get(names.AttrDescription).(string))
	}

	if d.HasChange(names.AttrName) {
		in.Name = aws.String(d.Get(names.AttrName).(string))
	}

	if d.HasChange(names.AttrRoleARN) {
		in.RoleArn = aws.String(d.Get(names.AttrRoleARN).(string))
	}

	log.Printf("[DEBUG] Updating Kendra Experience (%s): %#v", d.Id(), in)
	_, err = conn.UpdateExperience(ctx, in)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Kendra Experience (%s): %s", d.Id(), err)
	}

	if err := waitExperienceUpdated(ctx, conn, id, indexId, d.Timeout(schema.TimeoutUpdate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Kendra Experience (%s) update: %s", d.Id(), err)
	}

	return append(diags, resourceExperienceRead(ctx, d, meta)...)
}
