package github.com/hashicorp/terraform-provider-aws/internal/service/kendra
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kendra"
	"github.com/aws/aws-sdk-go-v2/service/kendra/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContentSourceConfiguration(tfMap map[string]any) *types.ContentSourceConfiguration {
	if tfMap == nil {
		return nil
	}

	result := &types.ContentSourceConfiguration{}

	if v, ok := tfMap["data_source_ids"].(*schema.Set); ok && v.Len() > 0 {
		result.DataSourceIds = expandStringList(v.List())
	}

	if v, ok := tfMap["direct_put_content"].(bool); ok {
		result.DirectPutContent = v
	}

	if v, ok := tfMap["faq_ids"].(*schema.Set); ok && v.Len() > 0 {
		result.FaqIds = expandStringList(v.List())
	}

	return result
}
