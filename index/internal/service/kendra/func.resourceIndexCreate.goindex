package github.com/hashicorp/terraform-provider-aws/internal/service/kendra
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kendra"
	"github.com/aws/aws-sdk-go-v2/service/kendra/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIndexCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).KendraClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &kendra.CreateIndexInput{
		ClientToken: aws.String(id.UniqueId()),
		Name:        aws.String(name),
		RoleArn:     aws.String(d.Get(names.AttrRoleARN).(string)),
		Tags:        getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("edition"); ok {
		input.Edition = types.IndexEdition(v.(string))
	}

	if v, ok := d.GetOk("server_side_encryption_configuration"); ok {
		input.ServerSideEncryptionConfiguration = expandServerSideEncryptionConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("user_context_policy"); ok {
		input.UserContextPolicy = types.UserContextPolicy(v.(string))
	}

	if v, ok := d.GetOk("user_group_resolution_configuration"); ok {
		input.UserGroupResolutionConfiguration = expandUserGroupResolutionConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("user_token_configurations"); ok {
		input.UserTokenConfigurations = expandUserTokenConfigurations(v.([]any))
	}

	outputRaw, err := tfresource.RetryWhen(ctx, propagationTimeout,
		func() (any, error) {
			return conn.CreateIndex(ctx, input)
		},
		func(err error) (bool, error) {
			var validationException *types.ValidationException

			if errors.As(err, &validationException) && strings.Contains(validationException.ErrorMessage(), validationExceptionMessage) {
				return true, err
			}

			return false, err
		},
	)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Kendra Index (%s): %s", name, err)
	}

	if outputRaw == nil {
		return sdkdiag.AppendErrorf(diags, "creating Kendra Index (%s): empty output", name)
	}

	output := outputRaw.(*kendra.CreateIndexOutput)

	d.SetId(aws.ToString(output.Id))

	// waiter since the status changes from CREATING to either ACTIVE or FAILED
	if _, err := waitIndexCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Index (%s) creation: %s", d.Id(), err)
	}

	callUpdateIndex := false

	// CreateIndex API does not support capacity_units but UpdateIndex does
	if v, ok := d.GetOk("capacity_units"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		callUpdateIndex = true
	}

	// CreateIndex API does not support document_metadata_configuration_updates but UpdateIndex does
	if v, ok := d.GetOk("document_metadata_configuration_updates"); ok && v.(*schema.Set).Len() >= 13 {
		callUpdateIndex = true
	}

	if callUpdateIndex {
		return append(diags, resourceIndexUpdate(ctx, d, meta)...)
	}

	return append(diags, resourceIndexRead(ctx, d, meta)...)
}
