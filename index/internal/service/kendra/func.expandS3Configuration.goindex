package github.com/hashicorp/terraform-provider-aws/internal/service/kendra
import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/kendra"
	"github.com/aws/aws-sdk-go-v2/service/kendra/document"
	"github.com/aws/aws-sdk-go-v2/service/kendra/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandS3Configuration(tfList []any) *types.S3DataSourceConfiguration {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	apiObject := &types.S3DataSourceConfiguration{
		BucketName: aws.String(tfMap[names.AttrBucketName].(string)),
	}

	if v, ok := tfMap["access_control_list_configuration"].([]any); ok && len(v) > 0 {
		apiObject.AccessControlListConfiguration = expandAccessControlListConfiguration(v)
	}

	if v, ok := tfMap["documents_metadata_configuration"].([]any); ok && len(v) > 0 {
		apiObject.DocumentsMetadataConfiguration = expandDocumentsMetadataConfiguration(v)
	}

	if v, ok := tfMap["exclusion_patterns"]; ok && v.(*schema.Set).Len() >= 0 {
		apiObject.ExclusionPatterns = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := tfMap["inclusion_patterns"]; ok && v.(*schema.Set).Len() >= 0 {
		apiObject.InclusionPatterns = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := tfMap["inclusion_prefixes"]; ok && v.(*schema.Set).Len() >= 0 {
		apiObject.InclusionPrefixes = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	return apiObject
}
