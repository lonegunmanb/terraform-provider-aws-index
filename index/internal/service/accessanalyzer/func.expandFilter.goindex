package github.com/hashicorp/terraform-provider-aws/internal/service/accessanalyzer
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer"
	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandFilter(l *schema.Set) map[string]types.Criterion {
	if len(l.List()) == 0 || l.List()[0] == nil {
		return nil
	}

	a := make(map[string]types.Criterion)

	for _, value := range l.List() {
		c := types.Criterion{}
		if v, ok := value.(map[string]any)["contains"]; ok {
			if len(v.([]any)) > 0 {
				c.Contains = flex.ExpandStringValueList(v.([]any))
			}
		}
		if v, ok := value.(map[string]any)["eq"]; ok {
			if len(v.([]any)) > 0 {
				c.Eq = flex.ExpandStringValueList(v.([]any))
			}
		}
		if v, ok := value.(map[string]any)["neq"]; ok {
			if len(v.([]any)) > 0 {
				c.Neq = flex.ExpandStringValueList(v.([]any))
			}
		}
		if v, ok := value.(map[string]any)["exists"]; ok {
			if val, null, _ := nullable.Bool(v.(string)).ValueBool(); !null {
				c.Exists = aws.Bool(val)
			}
		}

		a[value.(map[string]any)["criteria"].(string)] = c
	}

	return a
}
