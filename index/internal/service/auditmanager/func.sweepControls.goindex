package github.com/hashicorp/terraform-provider-aws/internal/service/auditmanager
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/auditmanager"
	"github.com/aws/aws-sdk-go-v2/service/auditmanager/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepControls(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.AuditManagerClient(ctx)
	var input auditmanager.ListControlsInput
	input.ControlType = types.ControlTypeCustom
	sweepResources := make([]sweep.Sweepable, 0)

	pages := auditmanager.NewListControlsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if errs.IsA[*types.AccessDeniedException](err) {
			break
		}

		if err != nil {
			return nil, err
		}

		for _, v := range page.ControlMetadataList {
			id := aws.ToString(v.Id)

			log.Printf("[INFO] Deleting AuditManager Control: %s", id)
			sweepResources = append(sweepResources, framework.NewSweepResource(newControlResource, client,
				framework.NewAttribute(names.AttrID, id),
			))
		}
	}

	return sweepResources, nil
}
