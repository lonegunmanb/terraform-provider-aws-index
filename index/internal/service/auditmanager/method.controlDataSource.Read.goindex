package github.com/hashicorp/terraform-provider-aws/internal/service/auditmanager
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/auditmanager"
	awstypes "github.com/aws/aws-sdk-go-v2/service/auditmanager/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *controlDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data controlDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().AuditManagerClient(ctx)

	controlMetadata, err := findControlByTwoPartKey(ctx, conn, data.Name.ValueString(), data.Type.ValueEnum())

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading Audit Manager Control (%s)", data.Name.ValueString()), err.Error())

		return
	}

	// Control metadata from the ListControls API does not contain all information available
	// about a control. Use control ID to get complete information.
	id := aws.ToString(controlMetadata.Id)
	control, err := findControlByID(ctx, conn, id)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading Audit Manager Control (%s)", id), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, control, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	data.ID = fwflex.StringValueToFramework(ctx, id)
	setTagsOut(ctx, control.Tags)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
