package github.com/hashicorp/terraform-provider-aws/internal/service/appintegrations
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appintegrations"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceEventIntegrationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AppIntegrationsClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := appintegrations.GetEventIntegrationInput{
		Name: aws.String(name),
	}
	output, err := conn.GetEventIntegration(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading AppIntegrations Event Integration (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.Name))
	d.Set(names.AttrARN, output.EventIntegrationArn)
	d.Set(names.AttrDescription, output.Description)
	if err := d.Set("event_filter", flattenEventFilter(output.EventFilter)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting event_filter: %s", err)
	}
	d.Set("eventbridge_bus", output.EventBridgeBus)
	d.Set(names.AttrName, output.Name)

	setTagsOut(ctx, output.Tags)

	return diags
}
