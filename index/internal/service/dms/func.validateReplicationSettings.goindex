package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"encoding/json"
	"log"

	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
)
func validateReplicationSettings(i any, path cty.Path) diag.Diagnostics {
	var diags diag.Diagnostics

	v, ok := i.(string)
	if !ok {
		return append(diags, errs.NewIncorrectValueTypeAttributeError(path, "string"))
	}

	var m map[string]any

	if err := json.Unmarshal([]byte(v), &m); err != nil {
		return append(diags, errs.NewInvalidValueAttributeError(path, "Unable to parse as JSON"))
	}

	if l, ok := m["Logging"].(map[string]any); ok {
		if _, ok := l["EnableLogContext"]; ok {
			if enabled, ok := l["EnableLogging"]; !ok || !enabled.(bool) {
				diags = append(diags, errs.NewInvalidValueAttributeError(path, "The parameter Logging.EnableLogContext is not allowed when Logging.EnableLogging is not set to true."))
			}
		}

		if _, ok := l["CloudWatchLogGroup"]; ok {
			diags = append(diags, errs.NewInvalidValueAttributeError(path, "The parameter Logging.CloudWatchLogGroup is read-only and cannot be set."))
		}
		if _, ok := l["CloudWatchLogStream"]; ok {
			diags = append(diags, errs.NewInvalidValueAttributeError(path, "The parameter Logging.CloudWatchLogStream is read-only and cannot be set."))
		}
	}

	return diags
}
