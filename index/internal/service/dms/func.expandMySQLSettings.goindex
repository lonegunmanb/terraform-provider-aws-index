package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tfkms "github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandMySQLSettings(tfMap map[string]any) *awstypes.MySQLSettings {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.MySQLSettings{}

	if v, ok := tfMap["after_connect_script"].(string); ok && v != "" {
		apiObject.AfterConnectScript = aws.String(v)
	}
	if v, ok := tfMap["authentication_method"].(string); ok && v != "" {
		apiObject.AuthenticationMethod = awstypes.MySQLAuthenticationMethod(v)
	}
	if v, ok := tfMap["clean_source_metadata_on_mismatch"].(bool); ok {
		apiObject.CleanSourceMetadataOnMismatch = aws.Bool(v)
	}
	if v, ok := tfMap["events_poll_interval"].(int); ok && v != 0 {
		apiObject.EventsPollInterval = aws.Int32(int32(v))
	}
	if v, ok := tfMap["execute_timeout"].(int); ok && v != 0 {
		apiObject.ExecuteTimeout = aws.Int32(int32(v))
	}
	if v, ok := tfMap["max_file_size"].(int); ok && v != 0 {
		apiObject.MaxFileSize = aws.Int32(int32(v))
	}
	if v, ok := tfMap["parallel_load_threads"].(int); ok && v != 0 {
		apiObject.ParallelLoadThreads = aws.Int32(int32(v))
	}
	if v, ok := tfMap["server_timezone"].(string); ok && v != "" {
		apiObject.ServerTimezone = aws.String(v)
	}
	if v, ok := tfMap["service_access_role_arn"].(string); ok && v != "" {
		apiObject.ServiceAccessRoleArn = aws.String(v)
	}
	if v, ok := tfMap["target_db_type"].(string); ok && v != "" {
		apiObject.TargetDbType = awstypes.TargetDbType(v)
	}

	return apiObject
}
