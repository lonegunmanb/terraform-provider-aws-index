package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandComputeConfigInput(tfMap map[string]any) *awstypes.ComputeConfig {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.ComputeConfig{}

	if v, ok := tfMap[names.AttrAvailabilityZone].(string); ok && v != "" {
		apiObject.AvailabilityZone = aws.String(v)
	}

	if v, ok := tfMap["dns_name_servers"].(string); ok && v != "" {
		apiObject.DnsNameServers = aws.String(v)
	}

	if v, ok := tfMap[names.AttrKMSKeyID].(string); ok && v != "" {
		apiObject.KmsKeyId = aws.String(v)
	}

	if v, ok := tfMap["max_capacity_units"].(int); ok && v != 0 {
		apiObject.MaxCapacityUnits = aws.Int32(int32(v))
	}

	if v, ok := tfMap["min_capacity_units"].(int); ok && v != 0 {
		apiObject.MinCapacityUnits = aws.Int32(int32(v))
	}

	if v, ok := tfMap["multi_az"].(bool); ok {
		apiObject.MultiAZ = aws.Bool(v)
	}

	if v, ok := tfMap[names.AttrPreferredMaintenanceWindow].(string); ok && v != "" {
		apiObject.PreferredMaintenanceWindow = aws.String(v)
	}

	if v, ok := tfMap["replication_subnet_group_id"].(string); ok && v != "" {
		apiObject.ReplicationSubnetGroupId = aws.String(v)
	}

	if v, ok := tfMap[names.AttrVPCSecurityGroupIDs].(*schema.Set); ok && v.Len() > 0 {
		apiObject.VpcSecurityGroupIds = flex.ExpandStringValueSet(v)
	}

	return apiObject
}
