package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceCertificateRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DMSClient(ctx)

	certificateID := d.Get("certificate_id").(string)
	out, err := findCertificateByID(ctx, conn, certificateID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading DMS Certificate (%s): %s", certificateID, err)
	}

	d.SetId(aws.ToString(out.CertificateIdentifier))
	arn := aws.ToString(out.CertificateArn)
	d.Set(names.AttrCertificateARN, arn)
	d.Set("certificate_id", out.CertificateIdentifier)
	d.Set("certificate_pem", out.CertificatePem)
	if len(out.CertificateWallet) != 0 {
		d.Set("certificate_wallet", itypes.Base64EncodeOnce(out.CertificateWallet))
	}
	d.Set("key_length", out.KeyLength)
	d.Set("signing_algorithm", out.SigningAlgorithm)
	d.Set("valid_from_date", out.ValidFromDate.String())
	d.Set("valid_to_date", out.ValidToDate.String())

	return diags
}
