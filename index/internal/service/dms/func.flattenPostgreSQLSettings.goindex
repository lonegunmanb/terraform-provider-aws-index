package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tfkms "github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenPostgreSQLSettings(apiObject *awstypes.PostgreSQLSettings) []map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.AfterConnectScript; v != nil {
		tfMap["after_connect_script"] = aws.ToString(v)
	}
	tfMap["authentication_method"] = apiObject.AuthenticationMethod
	if v := apiObject.BabelfishDatabaseName; v != nil {
		tfMap["babelfish_database_name"] = aws.ToString(v)
	}
	if v := apiObject.CaptureDdls; v != nil {
		tfMap["capture_ddls"] = aws.ToBool(v)
	}
	tfMap["database_mode"] = apiObject.DatabaseMode
	if v := apiObject.DdlArtifactsSchema; v != nil {
		tfMap["ddl_artifacts_schema"] = aws.ToString(v)
	}
	if v := apiObject.ExecuteTimeout; v != nil {
		tfMap["execute_timeout"] = aws.ToInt32(v)
	}
	if v := apiObject.FailTasksOnLobTruncation; v != nil {
		tfMap["fail_tasks_on_lob_truncation"] = aws.ToBool(v)
	}
	if v := apiObject.HeartbeatEnable; v != nil {
		tfMap["heartbeat_enable"] = aws.ToBool(v)
	}
	if v := apiObject.HeartbeatFrequency; v != nil {
		tfMap["heartbeat_frequency"] = aws.ToInt32(v)
	}
	if v := apiObject.HeartbeatSchema; v != nil {
		tfMap["heartbeat_schema"] = aws.ToString(v)
	}
	if v := apiObject.MapBooleanAsBoolean; v != nil {
		tfMap["map_boolean_as_boolean"] = aws.ToBool(v)
	}
	if v := apiObject.MapJsonbAsClob; v != nil {
		tfMap["map_jsonb_as_clob"] = aws.ToBool(v)
	}
	tfMap["map_long_varchar_as"] = apiObject.MapLongVarcharAs
	if v := apiObject.MaxFileSize; v != nil {
		tfMap["max_file_size"] = aws.ToInt32(v)
	}
	tfMap["plugin_name"] = apiObject.PluginName
	if v := apiObject.ServiceAccessRoleArn; v != nil {
		tfMap["service_access_role_arn"] = aws.ToString(v)
	}
	if v := apiObject.SlotName; v != nil {
		tfMap["slot_name"] = aws.ToString(v)
	}

	return []map[string]any{tfMap}
}
