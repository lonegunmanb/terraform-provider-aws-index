package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceEndpointRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DMSClient(ctx)

	endptID := d.Get("endpoint_id").(string)
	out, err := findEndpointByID(ctx, conn, endptID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading DMS Endpoint (%s): %s", endptID, err)
	}

	d.SetId(aws.ToString(out.EndpointIdentifier))
	d.Set("endpoint_id", out.EndpointIdentifier)
	arn := aws.ToString(out.EndpointArn)
	d.Set("endpoint_arn", arn)
	d.Set(names.AttrEndpointType, out.EndpointType)
	d.Set(names.AttrDatabaseName, out.DatabaseName)
	d.Set("engine_name", out.EngineName)
	d.Set(names.AttrPort, out.Port)
	d.Set("server_name", out.ServerName)
	d.Set("ssl_mode", out.SslMode)
	d.Set(names.AttrUsername, out.Username)

	if err := resourceEndpointDataSourceSetState(d, out); err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	return diags
}
