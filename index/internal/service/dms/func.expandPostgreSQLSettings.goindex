package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tfkms "github.com/hashicorp/terraform-provider-aws/internal/service/kms"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPostgreSQLSettings(tfMap map[string]any) *awstypes.PostgreSQLSettings {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.PostgreSQLSettings{}

	if v, ok := tfMap["after_connect_script"].(string); ok && v != "" {
		apiObject.AfterConnectScript = aws.String(v)
	}
	if v, ok := tfMap["authentication_method"].(string); ok && v != "" {
		apiObject.AuthenticationMethod = awstypes.PostgreSQLAuthenticationMethod(v)
	}
	if v, ok := tfMap["babelfish_database_name"].(string); ok && v != "" {
		apiObject.BabelfishDatabaseName = aws.String(v)
	}
	if v, ok := tfMap["capture_ddls"].(bool); ok {
		apiObject.CaptureDdls = aws.Bool(v)
	}
	if v, ok := tfMap["database_mode"].(string); ok && v != "" {
		apiObject.DatabaseMode = awstypes.DatabaseMode(v)
	}
	if v, ok := tfMap["ddl_artifacts_schema"].(string); ok && v != "" {
		apiObject.DdlArtifactsSchema = aws.String(v)
	}
	if v, ok := tfMap["execute_timeout"].(int); ok {
		apiObject.ExecuteTimeout = aws.Int32(int32(v))
	}
	if v, ok := tfMap["fail_tasks_on_lob_truncation"].(bool); ok {
		apiObject.FailTasksOnLobTruncation = aws.Bool(v)
	}
	if v, ok := tfMap["heartbeat_enable"].(bool); ok {
		apiObject.HeartbeatEnable = aws.Bool(v)
	}
	if v, ok := tfMap["heartbeat_frequency"].(int); ok {
		apiObject.HeartbeatFrequency = aws.Int32(int32(v))
	}
	if v, ok := tfMap["heartbeat_schema"].(string); ok && v != "" {
		apiObject.HeartbeatSchema = aws.String(v)
	}
	if v, ok := tfMap["map_boolean_as_boolean"].(bool); ok {
		apiObject.MapBooleanAsBoolean = aws.Bool(v)
	}
	if v, ok := tfMap["map_jsonb_as_clob"].(bool); ok {
		apiObject.MapJsonbAsClob = aws.Bool(v)
	}
	if v, ok := tfMap["map_long_varchar_as"].(string); ok && v != "" {
		apiObject.MapLongVarcharAs = awstypes.LongVarcharMappingType(v)
	}
	if v, ok := tfMap["max_file_size"].(int); ok {
		apiObject.MaxFileSize = aws.Int32(int32(v))
	}
	if v, ok := tfMap["plugin_name"].(string); ok && v != "" {
		apiObject.PluginName = awstypes.PluginNameValue(v)
	}
	if v, ok := tfMap["service_access_role_arn"].(string); ok && v != "" {
		apiObject.ServiceAccessRoleArn = aws.String(v)
	}
	if v, ok := tfMap["slot_name"].(string); ok && v != "" {
		apiObject.SlotName = aws.String(v)
	}

	return apiObject
}
