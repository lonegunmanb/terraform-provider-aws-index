package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenComputeConfig(apiObject *awstypes.ComputeConfig) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		names.AttrAvailabilityZone:           aws.ToString(apiObject.AvailabilityZone),
		"dns_name_servers":                   aws.ToString(apiObject.DnsNameServers),
		names.AttrKMSKeyID:                   aws.ToString(apiObject.KmsKeyId),
		"max_capacity_units":                 aws.ToInt32(apiObject.MaxCapacityUnits),
		"min_capacity_units":                 aws.ToInt32(apiObject.MinCapacityUnits),
		"multi_az":                           aws.ToBool(apiObject.MultiAZ),
		names.AttrPreferredMaintenanceWindow: aws.ToString(apiObject.PreferredMaintenanceWindow),
		"replication_subnet_group_id":        aws.ToString(apiObject.ReplicationSubnetGroupId),
		names.AttrVPCSecurityGroupIDs:        apiObject.VpcSecurityGroupIds,
	}

	return []any{tfMap}
}
