package github.com/hashicorp/terraform-provider-aws/internal/service/dms
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	dms "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceReplicationConfigUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DMSClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll, "start_replication") {
		if err := stopReplication(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &dms.ModifyReplicationConfigInput{
			ReplicationConfigArn: aws.String(d.Id()),
		}

		if d.HasChange("compute_config") {
			if v, ok := d.GetOk("compute_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.ComputeConfig = expandComputeConfigInput(v.([]any)[0].(map[string]any))
			}
		}

		if d.HasChange("replication_settings") {
			input.ReplicationSettings = aws.String(d.Get("replication_settings").(string))
		}

		if d.HasChange("replication_type") {
			input.ReplicationType = awstypes.MigrationTypeValue(d.Get("replication_type").(string))
		}

		if d.HasChange("source_endpoint_arn") {
			input.SourceEndpointArn = aws.String(d.Get("source_endpoint_arn").(string))
		}

		if d.HasChange("supplemental_settings") {
			input.SupplementalSettings = aws.String(d.Get("supplemental_settings").(string))
		}

		if d.HasChange("table_mappings") {
			input.TableMappings = aws.String(d.Get("table_mappings").(string))
		}

		if d.HasChange("target_endpoint_arn") {
			input.TargetEndpointArn = aws.String(d.Get("target_endpoint_arn").(string))
		}

		_, err := conn.ModifyReplicationConfig(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying DMS Replication Config (%s): %s", d.Id(), err)
		}

		if d.Get("start_replication").(bool) {
			if err := startReplication(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	if d.HasChange("start_replication") {
		var f func(context.Context, *dms.Client, string, time.Duration) error
		if d.Get("start_replication").(bool) {
			f = startReplication
		} else {
			f = stopReplication
		}
		if err := f(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	return append(diags, resourceReplicationConfigRead(ctx, d, meta)...)
}
