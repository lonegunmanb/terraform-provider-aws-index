package github.com/hashicorp/terraform-provider-aws/internal/service/deploy
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandZonalConfig(d *schema.ResourceData) *types.ZonalConfig {
	v, ok := d.GetOk("zonal_config")
	if !ok {
		return nil
	}

	tfMap := v.([]any)[0].(map[string]any)
	apiObject := &types.ZonalConfig{}

	if v, ok := tfMap["first_zone_monitor_duration_in_seconds"].(int); ok {
		apiObject.FirstZoneMonitorDurationInSeconds = aws.Int64(int64(v))
	}
	if v, ok := tfMap["minimum_healthy_hosts_per_zone"]; ok && len(v.([]any)) > 0 {
		apiObject.MinimumHealthyHostsPerZone = expandMinimumHealthyHostsPerZone(v.([]any)[0].(map[string]any))
	}
	if v, ok := tfMap["monitor_duration_in_seconds"].(int); ok {
		apiObject.MonitorDurationInSeconds = aws.Int64(int64(v))
	}

	return apiObject
}
