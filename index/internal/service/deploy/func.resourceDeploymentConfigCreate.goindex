package github.com/hashicorp/terraform-provider-aws/internal/service/deploy
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDeploymentConfigCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DeployClient(ctx)

	name := d.Get("deployment_config_name").(string)
	input := &codedeploy.CreateDeploymentConfigInput{
		ComputePlatform:      types.ComputePlatform(d.Get("compute_platform").(string)),
		DeploymentConfigName: aws.String(name),
		MinimumHealthyHosts:  expandMinimumHealthyHosts(d),
		TrafficRoutingConfig: expandTrafficRoutingConfig(d),
		ZonalConfig:          expandZonalConfig(d),
	}

	_, err := conn.CreateDeploymentConfig(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating CodeDeploy Deployment Config (%s): %s", name, err)
	}

	d.SetId(name)

	return append(diags, resourceDeploymentConfigRead(ctx, d, meta)...)
}
