package github.com/hashicorp/terraform-provider-aws/internal/service/deploy
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAlarmConfiguration(configured []any) *types.AlarmConfiguration {
	result := &types.AlarmConfiguration{}

	if len(configured) == 1 {
		config := configured[0].(map[string]any)
		n := flex.ExpandStringSet(config["alarms"].(*schema.Set))
		alarms := make([]types.Alarm, 0, len(n))

		for _, name := range n {
			alarm := types.Alarm{
				Name: name,
			}
			alarms = append(alarms, alarm)
		}

		result.Alarms = alarms
		result.Enabled = config[names.AttrEnabled].(bool)
		result.IgnorePollAlarmFailure = config["ignore_poll_alarm_failure"].(bool)
	} else { // delete the configuration
		result.Alarms = make([]types.Alarm, 0)
		result.Enabled = false
		result.IgnorePollAlarmFailure = false
	}

	return result
}
