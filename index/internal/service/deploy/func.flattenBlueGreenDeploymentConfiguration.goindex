package github.com/hashicorp/terraform-provider-aws/internal/service/deploy
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenBlueGreenDeploymentConfiguration(config *types.BlueGreenDeploymentConfiguration) []map[string]any {
	if config == nil {
		return nil
	}

	m := make(map[string]any)

	if config.DeploymentReadyOption != nil {
		a := make([]map[string]any, 0)
		deploymentReadyOption := make(map[string]any)

		if v := string(config.DeploymentReadyOption.ActionOnTimeout); v != "" {
			deploymentReadyOption["action_on_timeout"] = v
		}
		if v := config.DeploymentReadyOption.WaitTimeInMinutes; v != 0 {
			deploymentReadyOption["wait_time_in_minutes"] = v
		}

		m["deployment_ready_option"] = append(a, deploymentReadyOption)
	}

	if config.GreenFleetProvisioningOption != nil {
		b := make([]map[string]any, 0)
		greenFleetProvisioningOption := make(map[string]any)

		if v := string(config.GreenFleetProvisioningOption.Action); v != "" {
			greenFleetProvisioningOption[names.AttrAction] = v
		}

		m["green_fleet_provisioning_option"] = append(b, greenFleetProvisioningOption)
	}

	if config.TerminateBlueInstancesOnDeploymentSuccess != nil {
		c := make([]map[string]any, 0)
		blueInstanceTerminationOption := make(map[string]any)

		if v := string(config.TerminateBlueInstancesOnDeploymentSuccess.Action); v != "" {
			blueInstanceTerminationOption[names.AttrAction] = v
		}
		if v := config.TerminateBlueInstancesOnDeploymentSuccess.TerminationWaitTimeInMinutes; v != 0 {
			blueInstanceTerminationOption["termination_wait_time_in_minutes"] = v
		}

		m["terminate_blue_instances_on_deployment_success"] = append(c, blueInstanceTerminationOption)
	}

	list := make([]map[string]any, 0)
	list = append(list, m)
	return list
}
