package github.com/hashicorp/terraform-provider-aws/internal/service/ssoadmin
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssoadmin/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *applicationResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data applicationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().SSOAdminClient(ctx)

	name := fwflex.StringValueFromFramework(ctx, data.Name)
	var input ssoadmin.CreateApplicationInput
	response.Diagnostics.Append(fwflex.Expand(ctx, data, &input)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Additional fields.
	input.Tags = getTagsIn(ctx)

	output, err := conn.CreateApplication(ctx, &input)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating SSO Application (%s)", name), err.Error())

		return
	}

	// Set values for unknowns.
	data.ARN = fwflex.StringToFramework(ctx, output.ApplicationArn)
	data.ApplicationARN = fwflex.StringToFramework(ctx, output.ApplicationArn)
	data.ID = fwflex.StringToFramework(ctx, output.ApplicationArn)

	// Read after create to get computed attributes omitted from the create response.
	app, err := findApplicationByID(ctx, conn, data.ID.ValueString())

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading SSO Application (%s)", data.ID.ValueString()), err.Error())

		return
	}

	// Skip writing to state if only the visibilty attribute is returned
	// to avoid a nested computed attribute causing a diff.
	if app.PortalOptions != nil && app.PortalOptions.SignInOptions == nil {
		app.PortalOptions = nil
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, app, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
