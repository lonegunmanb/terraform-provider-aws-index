package github.com/hashicorp/terraform-provider-aws/internal/service/ssoadmin
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *applicationDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data applicationDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().SSOAdminClient(ctx)

	output, err := findApplicationByID(ctx, conn, data.ApplicationARN.ValueString())

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading SSO Application (%s)", data.ApplicationARN.ValueString()), err.Error())

		return
	}

	// Skip writing to state if only the visibilty attribute is returned
	// to avoid a nested computed attribute causing a diff.
	if output.PortalOptions != nil && output.PortalOptions.SignInOptions == nil {
		output.PortalOptions = nil
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, output, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
