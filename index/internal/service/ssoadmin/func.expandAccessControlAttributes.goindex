package github.com/hashicorp/terraform-provider-aws/internal/service/ssoadmin
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssoadmin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAccessControlAttributes(d *schema.ResourceData) []awstypes.AccessControlAttribute {
	var attributes []awstypes.AccessControlAttribute

	attInterface := d.Get("attribute").(*schema.Set).List()
	for _, attrMap := range attInterface {
		attr := attrMap.(map[string]any)
		var attribute awstypes.AccessControlAttribute
		if key, ok := attr[names.AttrKey].(string); ok {
			attribute.Key = aws.String(key)
		}
		val := attr[names.AttrValue].(*schema.Set).List()[0].(map[string]any)
		if v, ok := val[names.AttrSource].(*schema.Set); ok && len(v.List()) > 0 {
			attribute.Value = &awstypes.AccessControlAttributeValue{
				Source: flex.ExpandStringValueSet(v),
			}
		}
		attributes = append(attributes, attribute)
	}

	return attributes
}
