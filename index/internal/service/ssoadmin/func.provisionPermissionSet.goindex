package github.com/hashicorp/terraform-provider-aws/internal/service/ssoadmin
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssoadmin/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func provisionPermissionSet(ctx context.Context, conn *ssoadmin.Client, permissionSetARN, instanceARN string, timeout time.Duration) error {
	input := &ssoadmin.ProvisionPermissionSetInput{
		InstanceArn:      aws.String(instanceARN),
		PermissionSetArn: aws.String(permissionSetARN),
		TargetType:       awstypes.ProvisionTargetTypeAllProvisionedAccounts,
	}

	output, err := conn.ProvisionPermissionSet(ctx, input)

	if err != nil {
		return fmt.Errorf("provisioning SSO Permission Set (%s): %w", permissionSetARN, err)
	}

	if _, err := waitPermissionSetProvisioned(ctx, conn, instanceARN, aws.ToString(output.PermissionSetProvisioningStatus.RequestId), timeout); err != nil {
		return fmt.Errorf("waiting for SSO Permission Set (%s) provision: %w", permissionSetARN, err)
	}

	return nil
}
