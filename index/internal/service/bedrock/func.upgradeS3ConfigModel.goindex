package github.com/hashicorp/terraform-provider-aws/internal/service/bedrock
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeS3ConfigModel(ctx context.Context, old fwtypes.ObjectValueOf[s3ConfigModel], diags *diag.Diagnostics) fwtypes.ListNestedObjectValueOf[s3ConfigModel] {
	if old.IsNull() {
		return fwtypes.NewListNestedObjectValueOfNull[s3ConfigModel](ctx)
	}

	var s3ConfigV0 s3ConfigModel
	diags.Append(old.As(ctx, &s3ConfigV0, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true})...)

	newList := []s3ConfigModel{
		{
			BucketName: s3ConfigV0.BucketName,
			KeyPrefix:  s3ConfigV0.KeyPrefix,
		},
	}

	result, d := fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newList)
	diags.Append(d...)

	return result
}
