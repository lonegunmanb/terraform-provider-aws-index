package github.com/hashicorp/terraform-provider-aws/internal/service/bedrock
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeCloudWatchConfigModelFromV0(ctx context.Context, old fwtypes.ObjectValueOf[cloudWatchConfigModelV0], diags *diag.Diagnostics) fwtypes.ListNestedObjectValueOf[cloudWatchConfigModel] {
	if old.IsNull() {
		return fwtypes.NewListNestedObjectValueOfNull[cloudWatchConfigModel](ctx)
	}

	var cloudWatchConfigV0 cloudWatchConfigModelV0
	diags.Append(old.As(ctx, &cloudWatchConfigV0, basetypes.ObjectAsOptions{})...)

	newList := []cloudWatchConfigModel{
		{
			LargeDataDeliveryS3Config: upgradeS3ConfigModel(ctx, cloudWatchConfigV0.LargeDataDeliveryS3Config, diags),
			LogGroupName:              cloudWatchConfigV0.LogGroupName,
			RoleArn:                   cloudWatchConfigV0.RoleArn,
		},
	}

	result, d := fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newList)
	diags.Append(d...)

	return result
}
