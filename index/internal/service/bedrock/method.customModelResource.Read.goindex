package github.com/hashicorp/terraform-provider-aws/internal/service/bedrock
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/bedrock"
	awstypes "github.com/aws/aws-sdk-go-v2/service/bedrock/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *customModelResource) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data customModelResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().BedrockClient(ctx)

	jobARN := data.JobARN.ValueString()
	outputGJ, err := findModelCustomizationJobByID(ctx, conn, jobARN)

	if tfresource.NotFound(err) {
		response.Diagnostics.Append(fwdiag.NewResourceNotFoundWarningDiagnostic(err))
		response.State.RemoveResource(ctx)

		return
	}

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading Bedrock Custom Model customization job (%s)", jobARN), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, outputGJ, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	// Some fields in GetModelCustomizationJobOutput have different names than in CreateModelCustomizationJobInput.
	data.CustomModelKmsKeyID = fwflex.StringToFrameworkARN(ctx, outputGJ.OutputModelKmsKeyArn)
	data.CustomModelName = fwflex.StringToFramework(ctx, outputGJ.OutputModelName)
	data.JobStatus = fwtypes.StringEnumValue(outputGJ.Status)
	// The base model ARN in GetCustomModelOutput can contain the model version and parameter count.
	baseModelARN := fwflex.StringFromFramework(ctx, data.BaseModelIdentifier)
	data.BaseModelIdentifier = fwflex.StringToFrameworkARN(ctx, outputGJ.BaseModelArn)
	if baseModelARN != nil {
		if old, err := arn.Parse(aws.ToString(baseModelARN)); err == nil {
			if new, err := arn.Parse(aws.ToString(outputGJ.BaseModelArn)); err == nil {
				if len(strings.SplitN(old.Resource, ":", 2)) == 1 {
					// Old ARN doesn't contain the model version and parameter count.
					new.Resource = strings.SplitN(new.Resource, ":", 2)[0]
					data.BaseModelIdentifier = fwtypes.ARNValue(new.String())
				}
			}
		}
	}

	if outputGJ.OutputModelArn != nil {
		customModelARN := aws.ToString(outputGJ.OutputModelArn)
		outputGM, err := findCustomModelByID(ctx, conn, customModelARN)

		if tfresource.NotFound(err) {
			response.Diagnostics.Append(fwdiag.NewResourceNotFoundWarningDiagnostic(err))
			response.State.RemoveResource(ctx)

			return
		}

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("reading Bedrock Custom Model (%s)", customModelARN), err.Error())

			return
		}

		var dataFromGetCustomModel customModelResourceModel
		response.Diagnostics.Append(fwflex.Flatten(ctx, outputGM, &dataFromGetCustomModel)...)
		if response.Diagnostics.HasError() {
			return
		}

		data.CustomModelARN = fwflex.StringToFramework(ctx, outputGM.ModelArn)
		data.TrainingMetrics = dataFromGetCustomModel.TrainingMetrics
		data.ValidationMetrics = dataFromGetCustomModel.ValidationMetrics
	}

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
