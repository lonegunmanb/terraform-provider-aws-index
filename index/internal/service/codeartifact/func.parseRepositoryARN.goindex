package github.com/hashicorp/terraform-provider-aws/internal/service/codeartifact
import (
	"context"
	"errors"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func parseRepositoryARN(v string) (string, string, string, error) {
	// arn:${Partition}:codeartifact:${Region}:${Account}:repository/${DomainName}/${RepositoryName}
	arn, err := arn.Parse(v)
	if err != nil {
		return "", "", "", err
	}

	parts := strings.Split(strings.TrimPrefix(arn.Resource, "repository/"), "/")
	if len(parts) != 2 {
		return "", "", "", errors.New("invalid repository ARN")
	}

	return arn.AccountID, parts[0], parts[1], nil
}
