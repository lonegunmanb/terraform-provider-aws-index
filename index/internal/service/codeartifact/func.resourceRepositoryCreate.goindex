package github.com/hashicorp/terraform-provider-aws/internal/service/codeartifact
import (
	"context"
	"errors"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodeArtifactClient(ctx)

	input := &codeartifact.CreateRepositoryInput{
		Domain:     aws.String(d.Get(names.AttrDomain).(string)),
		Repository: aws.String(d.Get("repository").(string)),
		Tags:       getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("domain_owner"); ok {
		input.DomainOwner = aws.String(v.(string))
	}

	if v, ok := d.GetOk("upstream"); ok {
		input.Upstreams = expandUpstreams(v.([]any))
	}

	output, err := conn.CreateRepository(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating CodeArtifact Repository: %s", err)
	}

	repository := output.Repository
	d.SetId(aws.ToString(repository.Arn))

	if v, ok := d.GetOk("external_connections"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		tfMap := v.([]any)[0].(map[string]any)
		externalConnection := tfMap["external_connection_name"].(string)
		input := &codeartifact.AssociateExternalConnectionInput{
			Domain:             repository.DomainName,
			DomainOwner:        repository.DomainOwner,
			ExternalConnection: aws.String(externalConnection),
			Repository:         repository.Name,
		}

		_, err := conn.AssociateExternalConnection(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "associating CodeArtifact Repository (%s) external connection (%s): %s", d.Id(), externalConnection, err)
		}
	}

	return append(diags, resourceRepositoryRead(ctx, d, meta)...)
}
