package github.com/hashicorp/terraform-provider-aws/internal/service/codeartifact
import (
	"context"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodeArtifactClient(ctx)

	owner, domainName, err := parseDomainARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	domain, err := findDomainByTwoPartKey(ctx, conn, owner, domainName)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CodeArtifact Domain (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CodeArtifact Domain (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, domain.Arn)
	d.Set("asset_size_bytes", strconv.FormatInt(domain.AssetSizeBytes, 10))
	d.Set(names.AttrCreatedTime, domain.CreatedTime.Format(time.RFC3339))
	d.Set(names.AttrDomain, domain.Name)
	d.Set("encryption_key", domain.EncryptionKey)
	d.Set(names.AttrOwner, domain.Owner)
	d.Set("repository_count", domain.RepositoryCount)
	d.Set("s3_bucket_arn", domain.S3BucketArn)

	return diags
}
