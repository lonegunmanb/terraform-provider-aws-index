package github.com/hashicorp/terraform-provider-aws/internal/service/codeartifact
import (
	"context"
	"errors"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodeArtifactClient(ctx)

	owner, domainName, repositoryName, err := parseRepositoryARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if d.HasChanges(names.AttrDescription, "upstream") {
		input := &codeartifact.UpdateRepositoryInput{
			Domain:      aws.String(domainName),
			DomainOwner: aws.String(owner),
			Repository:  aws.String(repositoryName),
		}

		if d.HasChange(names.AttrDescription) {
			input.Description = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange("upstream") {
			if v, ok := d.GetOk("upstream"); ok && len(v.([]any)) > 0 {
				input.Upstreams = expandUpstreams(v.([]any))
			}
		}

		_, err := conn.UpdateRepository(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating CodeArtifact Repository (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange("external_connections") {
		if v, ok := d.GetOk("external_connections"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)
			externalConnection := tfMap["external_connection_name"].(string)
			input := &codeartifact.AssociateExternalConnectionInput{
				Domain:             aws.String(domainName),
				DomainOwner:        aws.String(owner),
				ExternalConnection: aws.String(externalConnection),
				Repository:         aws.String(repositoryName),
			}

			_, err := conn.AssociateExternalConnection(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "associating CodeArtifact Repository (%s) external connection (%s): %s", d.Id(), externalConnection, err)
			}
		} else {
			o, _ := d.GetChange("external_connections")
			tfMap := o.([]any)[0].(map[string]any)
			externalConnection := tfMap["external_connection_name"].(string)
			input := &codeartifact.DisassociateExternalConnectionInput{
				Domain:             aws.String(domainName),
				DomainOwner:        aws.String(owner),
				ExternalConnection: aws.String(externalConnection),
				Repository:         aws.String(repositoryName),
			}

			_, err := conn.DisassociateExternalConnection(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "disassociating CodeArtifact Repository (%s) external connection (%s): %s", d.Id(), externalConnection, err)
			}
		}
	}

	return append(diags, resourceRepositoryRead(ctx, d, meta)...)
}
