package github.com/hashicorp/terraform-provider-aws/internal/service/codeartifact
import (
	"context"
	"errors"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRepositoryRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodeArtifactClient(ctx)

	owner, domainName, repositoryName, err := parseRepositoryARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	repository, err := findRepositoryByThreePartKey(ctx, conn, owner, domainName, repositoryName)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CodeArtifact Repository (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CodeArtifact Repository (%s): %s", d.Id(), err)
	}

	d.Set("administrator_account", repository.AdministratorAccount)
	d.Set(names.AttrARN, repository.Arn)
	d.Set(names.AttrDescription, repository.Description)
	d.Set(names.AttrDomain, repository.DomainName)
	d.Set("domain_owner", repository.DomainOwner)
	if err := d.Set("external_connections", flattenRepositoryExternalConnectionInfos(repository.ExternalConnections)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting external_connections: %s", err)
	}
	d.Set("repository", repository.Name)
	if err := d.Set("upstream", flattenUpstreamRepositoryInfos(repository.Upstreams)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting upstream: %s", err)
	}

	return diags
}
