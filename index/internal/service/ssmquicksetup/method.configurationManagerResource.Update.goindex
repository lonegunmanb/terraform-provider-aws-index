package github.com/hashicorp/terraform-provider-aws/internal/service/ssmquicksetup
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmquicksetup/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *configurationManagerResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var new, old configurationManagerResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().SSMQuickSetupClient(ctx)

	arn := fwflex.StringValueFromFramework(ctx, new.ManagerARN)

	if !new.Description.Equal(old.Description) || !new.Name.Equal(old.Name) {
		var input ssmquicksetup.UpdateConfigurationManagerInput
		response.Diagnostics.Append(fwflex.Expand(ctx, new, &input)...)
		if response.Diagnostics.HasError() {
			return
		}

		_, err := conn.UpdateConfigurationManager(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating SSM Quick Setup Configuration Manager (%s)", arn), err.Error())

			return
		}
	}

	if !new.ConfigurationDefinition.Equal(old.ConfigurationDefinition) {
		var inputs []ssmquicksetup.UpdateConfigurationDefinitionInput
		response.Diagnostics.Append(fwflex.Expand(ctx, new.ConfigurationDefinition, &inputs)...)
		if response.Diagnostics.HasError() {
			return
		}

		for _, input := range inputs {
			input.ManagerArn = aws.String(arn)

			_, err := conn.UpdateConfigurationDefinition(ctx, &input)

			if err != nil {
				response.Diagnostics.AddError(fmt.Sprintf("updating SSM Quick Setup Configuration Manager (%s)", arn), err.Error())

				return
			}
		}
	}

	output, err := waitConfigurationManagerUpdated(ctx, conn, arn, r.UpdateTimeout(ctx, new.Timeouts))

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("waiting for SSM Quick Setup Configuration Manager (%s) update", arn), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, output, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
