package github.com/hashicorp/terraform-provider-aws/internal/service/ssmquicksetup
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmquicksetup/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *configurationManagerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().SSMQuickSetupClient(ctx)

	var plan, state configurationManagerResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !plan.Name.Equal(state.Name) ||
		!plan.Description.Equal(state.Description) {
		var input ssmquicksetup.UpdateConfigurationManagerInput
		resp.Diagnostics.Append(flex.Expand(ctx, plan, &input)...)
		if resp.Diagnostics.HasError() {
			return
		}

		_, err := conn.UpdateConfigurationManager(ctx, &input)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.SSMQuickSetup, create.ErrActionUpdating, ResNameConfigurationManager, plan.ManagerARN.String(), err),
				err.Error(),
			)
			return
		}
	}

	if !plan.ConfigurationDefinition.Equal(state.ConfigurationDefinition) {
		var inputs []ssmquicksetup.UpdateConfigurationDefinitionInput
		resp.Diagnostics.Append(flex.Expand(ctx, plan.ConfigurationDefinition, &inputs)...)
		if resp.Diagnostics.HasError() {
			return
		}

		for _, input := range inputs {
			input.ManagerArn = plan.ManagerARN.ValueStringPointer()

			_, err := conn.UpdateConfigurationDefinition(ctx, &input)
			if err != nil {
				resp.Diagnostics.AddError(
					create.ProblemStandardMessage(names.SSMQuickSetup, create.ErrActionUpdating, ResNameConfigurationManager, plan.ManagerARN.String(), err),
					err.Error(),
				)
				return
			}
		}
	}

	updateTimeout := r.UpdateTimeout(ctx, plan.Timeouts)
	statusOut, err := waitConfigurationManagerUpdated(ctx, conn, plan.ManagerARN.ValueString(), updateTimeout)
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.SSMQuickSetup, create.ErrActionWaitingForUpdate, ResNameConfigurationManager, plan.ManagerARN.String(), err),
			err.Error(),
		)
		return
	}

	resp.Diagnostics.Append(flex.Flatten(ctx, statusOut, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}
