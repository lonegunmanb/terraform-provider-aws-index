package github.com/hashicorp/terraform-provider-aws/internal/service/shield
import (
	"context"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/service/shield"
	awstypes "github.com/aws/aws-sdk-go-v2/service/shield/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *proactiveEngagementResource) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data proactiveEngagementResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().ShieldClient(ctx)

	subscription, err := findSubscription(ctx, conn)

	if err == nil && subscription.ProactiveEngagementStatus == "" {
		err = tfresource.NewEmptyResultError(nil)
	}

	var emergencyContacts []awstypes.EmergencyContact

	if err == nil {
		emergencyContacts, err = findEmergencyContactSettings(ctx, conn)
	}

	if tfresource.NotFound(err) {
		response.Diagnostics.Append(fwdiag.NewResourceNotFoundWarningDiagnostic(err))
		response.State.RemoveResource(ctx)

		return
	}

	if err != nil {
		response.Diagnostics.AddError("reading Shield Proactive Engagement", err.Error())

		return
	}

	data.EmergencyContactList = fwtypes.NewListNestedObjectValueOfValueSliceMust[emergencyContactModel](ctx, tfslices.ApplyToAll(emergencyContacts, func(apiObject awstypes.EmergencyContact) emergencyContactModel {
		return emergencyContactModel{
			ContactNotes: fwflex.StringToFramework(ctx, apiObject.ContactNotes),
			EmailAddress: fwflex.StringToFramework(ctx, apiObject.EmailAddress),
			PhoneNumber:  fwflex.StringToFramework(ctx, apiObject.PhoneNumber),
		}
	}))
	data.Enabled = types.BoolValue(subscription.ProactiveEngagementStatus == awstypes.ProactiveEngagementStatusEnabled)

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
