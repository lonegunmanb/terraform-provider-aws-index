package github.com/hashicorp/terraform-provider-aws/internal/service/shield
import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/shield"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepProactiveEngagements(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("error getting client: %w", err)
	}
	input := &shield.DescribeSubscriptionInput{}
	conn := client.ShieldClient(ctx)
	sweepResources := make([]sweep.Sweepable, 0)

	output, err := conn.DescribeSubscription(ctx, input)

	if awsv2.SkipSweepError(err) {
		log.Printf("[WARN] Skipping Shield Proactive Engagement sweep for %s: %s", region, err)
		return nil
	}

	if err != nil {
		return fmt.Errorf("error listing Shield Proactive Engagements (%s): %w", region, err)
	}

	if output.Subscription.ProactiveEngagementStatus != "" {
		log.Printf("[INFO] Deleting Shield Proactive Engagement")
		sweepResources = append(sweepResources, framework.NewSweepResource(newProactiveEngagementResource, client,
			framework.NewAttribute(names.AttrID, client.AccountID(ctx)),
		))
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping Shield Proactive Engagements (%s): %w", region, err)
	}

	return nil
}
