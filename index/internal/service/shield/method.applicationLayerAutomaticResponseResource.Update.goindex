package github.com/hashicorp/terraform-provider-aws/internal/service/shield
import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/shield"
	awstypes "github.com/aws/aws-sdk-go-v2/service/shield/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *applicationLayerAutomaticResponseResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new applicationLayerAutomaticResponseResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().ShieldClient(ctx)

	if !new.Action.Equal(old.Action) {
		action := &awstypes.ResponseAction{}
		switch new.Action.ValueEnum() {
		case applicationLayerAutomaticResponseActionBlock:
			action.Block = &awstypes.BlockAction{}
		case applicationLayerAutomaticResponseActionCount:
			action.Count = &awstypes.CountAction{}
		}

		resourceARN := new.ResourceARN.ValueString()
		input := &shield.UpdateApplicationLayerAutomaticResponseInput{
			Action:      action,
			ResourceArn: aws.String(resourceARN),
		}

		_, err := conn.UpdateApplicationLayerAutomaticResponse(ctx, input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Shield Application Layer Automatic Response (%s)", resourceARN), err.Error())

			return
		}

		if _, err := waitApplicationLayerAutomaticResponseEnabled(ctx, conn, resourceARN, r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for Shield Application Layer Automatic Response (%s) update", resourceARN), err.Error())

			return
		}
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
