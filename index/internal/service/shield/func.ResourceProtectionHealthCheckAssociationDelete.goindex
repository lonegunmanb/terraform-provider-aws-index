package github.com/hashicorp/terraform-provider-aws/internal/service/shield
import (
	"context"
	"log"
	"slices"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/shield"
	awstypes "github.com/aws/aws-sdk-go-v2/service/shield/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
)
func ResourceProtectionHealthCheckAssociationDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ShieldClient(ctx)

	protectionId, healthCheckId, err := ProtectionHealthCheckAssociationParseResourceID(d.Id())

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "parsing Shield Protection and Route53 Health Check Association ID: %s", err)
	}

	input := &shield.DisassociateHealthCheckInput{
		ProtectionId:   aws.String(protectionId),
		HealthCheckArn: aws.String(healthCheckId),
	}

	_, err = conn.DisassociateHealthCheck(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "disassociating Route53 Health Check (%s) from Shield Protected resource (%s): %s", d.Get("health_check_arn"), d.Get("shield_protection_id"), err)
	}
	return diags
}
