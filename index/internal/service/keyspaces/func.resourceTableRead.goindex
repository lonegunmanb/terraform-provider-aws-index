package github.com/hashicorp/terraform-provider-aws/internal/service/keyspaces
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KeyspacesClient(ctx)

	keyspaceName, tableName, err := tableParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	table, err := findTableByTwoPartKey(ctx, conn, keyspaceName, tableName)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Keyspaces Table (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Keyspaces Table (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, table.ResourceArn)
	if table.CapacitySpecification != nil {
		if err := d.Set("capacity_specification", []any{flattenCapacitySpecificationSummary(table.CapacitySpecification)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting capacity_specification: %s", err)
		}
	} else {
		d.Set("capacity_specification", nil)
	}
	if table.ClientSideTimestamps != nil {
		if err := d.Set("client_side_timestamps", []any{flattenClientSideTimestamps(table.ClientSideTimestamps)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting client_side_timestamps: %s", err)
		}
	} else {
		d.Set("client_side_timestamps", nil)
	}
	if table.Comment != nil {
		if err := d.Set(names.AttrComment, []any{flattenComment(table.Comment)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting comment: %s", err)
		}
	} else {
		d.Set(names.AttrComment, nil)
	}
	d.Set("default_time_to_live", table.DefaultTimeToLive)
	if table.EncryptionSpecification != nil {
		if err := d.Set("encryption_specification", []any{flattenEncryptionSpecification(table.EncryptionSpecification)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting encryption_specification: %s", err)
		}
	} else {
		d.Set("encryption_specification", nil)
	}
	d.Set("keyspace_name", table.KeyspaceName)
	if table.PointInTimeRecovery != nil {
		if err := d.Set("point_in_time_recovery", []any{flattenPointInTimeRecoverySummary(table.PointInTimeRecovery)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting point_in_time_recovery: %s", err)
		}
	} else {
		d.Set("point_in_time_recovery", nil)
	}
	if table.SchemaDefinition != nil {
		if err := d.Set("schema_definition", []any{flattenSchemaDefinition(table.SchemaDefinition)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting schema_definition: %s", err)
		}
	} else {
		d.Set("schema_definition", nil)
	}
	d.Set(names.AttrTableName, table.TableName)
	if table.Ttl != nil {
		if err := d.Set("ttl", []any{flattenTimeToLive(table.Ttl)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting ttl: %s", err)
		}
	} else {
		d.Set("ttl", nil)
	}

	return diags
}
