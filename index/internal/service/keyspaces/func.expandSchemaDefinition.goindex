package github.com/hashicorp/terraform-provider-aws/internal/service/keyspaces
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSchemaDefinition(tfMap map[string]any) *types.SchemaDefinition {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.SchemaDefinition{}

	if v, ok := tfMap["clustering_key"].([]any); ok && len(v) > 0 {
		apiObject.ClusteringKeys = expandClusteringKeys(v)
	}

	if v, ok := tfMap["column"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.AllColumns = expandColumnDefinitions(v.List())
	}

	if v, ok := tfMap["partition_key"].([]any); ok && len(v) > 0 {
		apiObject.PartitionKeys = expandPartitionKeys(v)
	}

	if v, ok := tfMap["static_column"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.StaticColumns = expandStaticColumns(v.List())
	}

	return apiObject
}
