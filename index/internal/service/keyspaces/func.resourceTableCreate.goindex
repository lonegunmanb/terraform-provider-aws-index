package github.com/hashicorp/terraform-provider-aws/internal/service/keyspaces
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTableCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KeyspacesClient(ctx)

	keyspaceName := d.Get("keyspace_name").(string)
	tableName := d.Get(names.AttrTableName).(string)
	id := tableCreateResourceID(keyspaceName, tableName)
	input := &keyspaces.CreateTableInput{
		KeyspaceName: aws.String(keyspaceName),
		TableName:    aws.String(tableName),
		Tags:         getTagsIn(ctx),
	}

	if v, ok := d.GetOk("capacity_specification"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.CapacitySpecification = expandCapacitySpecification(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("client_side_timestamps"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ClientSideTimestamps = expandClientSideTimestamps(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrComment); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Comment = expandComment(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("default_time_to_live"); ok {
		input.DefaultTimeToLive = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("encryption_specification"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.EncryptionSpecification = expandEncryptionSpecification(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("point_in_time_recovery"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.PointInTimeRecovery = expandPointInTimeRecovery(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("schema_definition"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.SchemaDefinition = expandSchemaDefinition(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("ttl"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Ttl = expandTimeToLive(v.([]any)[0].(map[string]any))
	}

	_, err := conn.CreateTable(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Keyspaces Table (%s): %s", id, err)
	}

	d.SetId(id)

	if _, err := waitTableCreated(ctx, conn, keyspaceName, tableName, d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Keyspaces Table (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceTableRead(ctx, d, meta)...)
}
