package github.com/hashicorp/terraform-provider-aws/internal/service/storagegateway
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway"
	awstypes "github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTapePoolCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).StorageGatewayClient(ctx)

	name := d.Get("pool_name").(string)
	input := &storagegateway.CreateTapePoolInput{
		PoolName:                aws.String(name),
		StorageClass:            awstypes.TapeStorageClass(d.Get(names.AttrStorageClass).(string)),
		RetentionLockType:       awstypes.RetentionLockType(d.Get("retention_lock_type").(string)),
		RetentionLockTimeInDays: aws.Int32(int32(d.Get("retention_lock_time_in_days").(int))),
		Tags:                    getTagsIn(ctx),
	}

	output, err := conn.CreateTapePool(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Storage Gateway Tape Pool (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.PoolARN))

	return append(diags, resourceTapePoolRead(ctx, d, meta)...)
}
