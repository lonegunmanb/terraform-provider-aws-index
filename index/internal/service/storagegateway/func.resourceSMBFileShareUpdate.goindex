package github.com/hashicorp/terraform-provider-aws/internal/service/storagegateway
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway"
	awstypes "github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSMBFileShareUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).StorageGatewayClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &storagegateway.UpdateSMBFileShareInput{
			AccessBasedEnumeration: aws.Bool(d.Get("access_based_enumeration").(bool)),
			FileShareARN:           aws.String(d.Id()),
			GuessMIMETypeEnabled:   aws.Bool(d.Get("guess_mime_type_enabled").(bool)),
			KMSEncrypted:           aws.Bool(d.Get("kms_encrypted").(bool)),
			ReadOnly:               aws.Bool(d.Get("read_only").(bool)),
			RequesterPays:          aws.Bool(d.Get("requester_pays").(bool)),
			SMBACLEnabled:          aws.Bool(d.Get("smb_acl_enabled").(bool)),
		}

		if d.HasChange("admin_user_list") {
			input.AdminUserList = flex.ExpandStringValueSet(d.Get("admin_user_list").(*schema.Set))
		}

		if d.HasChange("audit_destination_arn") {
			input.AuditDestinationARN = aws.String(d.Get("audit_destination_arn").(string))
		}

		if d.HasChange("cache_attributes") {
			if v, ok := d.GetOk("cache_attributes"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
				input.CacheAttributes = expandCacheAttributes(v.([]any)[0].(map[string]any))
			} else {
				input.CacheAttributes = &awstypes.CacheAttributes{}
			}
		}

		if d.HasChange("case_sensitivity") {
			input.CaseSensitivity = awstypes.CaseSensitivity(d.Get("case_sensitivity").(string))
		}

		if d.HasChange("default_storage_class") {
			input.DefaultStorageClass = aws.String(d.Get("default_storage_class").(string))
		}

		if d.HasChange("file_share_name") {
			input.FileShareName = aws.String(d.Get("file_share_name").(string))
		}

		if d.HasChange("invalid_user_list") {
			input.InvalidUserList = flex.ExpandStringValueSet(d.Get("invalid_user_list").(*schema.Set))
		}

		// This value can only be set when KMSEncrypted is true.
		if d.HasChange(names.AttrKMSKeyARN) && d.Get("kms_encrypted").(bool) {
			input.KMSKey = aws.String(d.Get(names.AttrKMSKeyARN).(string))
		} else if d.Get("kms_encrypted").(bool) && d.Get(names.AttrKMSKeyARN).(string) != "" {
			input.KMSKey = aws.String(d.Get(names.AttrKMSKeyARN).(string))
		}

		if d.HasChange("notification_policy") {
			input.NotificationPolicy = aws.String(d.Get("notification_policy").(string))
		}

		if d.HasChange("object_acl") {
			input.ObjectACL = awstypes.ObjectACL(d.Get("object_acl").(string))
		}

		if d.HasChange("oplocks_enabled") {
			input.OplocksEnabled = aws.Bool(d.Get("oplocks_enabled").(bool))
		}

		if d.HasChange("valid_user_list") {
			input.ValidUserList = flex.ExpandStringValueSet(d.Get("valid_user_list").(*schema.Set))
		}

		_, err := conn.UpdateSMBFileShare(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Storage Gateway SMB File Share (%s): %s", d.Id(), err)
		}

		if _, err = waitSMBFileShareUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Storage Gateway SMB File Share (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceSMBFileShareRead(ctx, d, meta)...)
}
