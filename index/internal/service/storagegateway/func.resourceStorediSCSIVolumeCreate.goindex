package github.com/hashicorp/terraform-provider-aws/internal/service/storagegateway
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway"
	awstypes "github.com/aws/aws-sdk-go-v2/service/storagegateway/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStorediSCSIVolumeCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).StorageGatewayClient(ctx)

	input := &storagegateway.CreateStorediSCSIVolumeInput{
		DiskId:               aws.String(d.Get("disk_id").(string)),
		GatewayARN:           aws.String(d.Get("gateway_arn").(string)),
		NetworkInterfaceId:   aws.String(d.Get(names.AttrNetworkInterfaceID).(string)),
		PreserveExistingData: d.Get("preserve_existing_data").(bool),
		Tags:                 getTagsIn(ctx),
		TargetName:           aws.String(d.Get("target_name").(string)),
	}

	if v, ok := d.GetOk("kms_encrypted"); ok {
		input.KMSEncrypted = aws.Bool(v.(bool))
	}

	if v, ok := d.GetOk(names.AttrKMSKey); ok {
		input.KMSKey = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrSnapshotID); ok {
		input.SnapshotId = aws.String(v.(string))
	}

	output, err := conn.CreateStorediSCSIVolume(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Storage Gateway Stored iSCSI Volume: %s", err)
	}

	d.SetId(aws.ToString(output.VolumeARN))

	if _, err := waitStorediSCSIVolumeAvailable(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Storage Gateway Stored iSCSI Volume (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceStorediSCSIVolumeRead(ctx, d, meta)...)
}
