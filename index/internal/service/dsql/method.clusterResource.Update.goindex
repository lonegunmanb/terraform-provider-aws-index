package github.com/hashicorp/terraform-provider-aws/internal/service/dsql
import (
	"context"
	"fmt"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dsql"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dsql/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *clusterResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var new, old clusterResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().DSQLClient(ctx)

	if !new.DeletionProtectionEnabled.Equal(old.DeletionProtectionEnabled) ||
		!new.KMSEncryptionKey.Equal(old.KMSEncryptionKey) ||
		!new.MultiRegionProperties.Equal(old.MultiRegionProperties) {
		id := fwflex.StringValueFromFramework(ctx, new.Identifier)
		var input dsql.UpdateClusterInput
		response.Diagnostics.Append(fwflex.Expand(ctx, new, &input)...)
		if response.Diagnostics.HasError() {
			return
		}

		// Additional fields.
		input.ClientToken = aws.String(sdkid.UniqueId())

		_, err := conn.UpdateCluster(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Aurora DSQL Cluster (%s)", id), err.Error())

			return
		}

		if _, err := waitClusterUpdated(ctx, conn, id, r.UpdateTimeout(ctx, new.Timeouts)); err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for Aurora DSQL Cluster (%s) update", id), err.Error())

			return
		}

		if new.KMSEncryptionKey.Equal(old.KMSEncryptionKey) {
			new.EncryptionDetails = old.EncryptionDetails
		} else {
			output, err := waitClusterEncryptionEnabled(ctx, conn, id, r.UpdateTimeout(ctx, new.Timeouts))

			if err != nil {
				response.Diagnostics.AddError(fmt.Sprintf("waiting for Aurora DSQL Cluster (%s) encryption enable", id), err.Error())

				return
			}

			response.Diagnostics.Append(fwflex.Flatten(ctx, output, &new.EncryptionDetails)...)
			if response.Diagnostics.HasError() {
				return
			}
		}
	} else {
		new.EncryptionDetails = old.EncryptionDetails
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
