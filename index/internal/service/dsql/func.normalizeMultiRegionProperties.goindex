package github.com/hashicorp/terraform-provider-aws/internal/service/dsql
import (
	"context"
	"fmt"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dsql"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dsql/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func normalizeMultiRegionProperties(output *dsql.GetClusterOutput) *awstypes.MultiRegionProperties {
	if output == nil || output.MultiRegionProperties == nil {
		return nil
	}

	// Take a deep copy.
	apiObject := awstypes.MultiRegionProperties{
		Clusters:      slices.Clone(output.MultiRegionProperties.Clusters),
		WitnessRegion: aws.String(strings.Clone(aws.ToString(output.MultiRegionProperties.WitnessRegion))),
	}

	if sourceClusterARN := output.Arn; sourceClusterARN != nil {
		// Remove the current cluster from the list of clusters in the multi-region properties
		// This is needed because one of the ARNs of the clusters in the multi-region properties is
		// the same as the ARN of this specific cluster, and we need to remove it from the
		// list of clusters to avoid a conflict when updating the resource.
		apiObject.Clusters = slices.DeleteFunc(apiObject.Clusters, func(s string) bool {
			return strings.EqualFold(s, aws.ToString(sourceClusterARN))
		})
	}

	return &apiObject
}
