package github.com/hashicorp/terraform-provider-aws/internal/service/resourcegroups
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *resourcegroups.Client, identifier string, oldTagsMap, newTagsMap any, optFns ...func(*resourcegroups.Options)) error {
	oldTags := tftags.New(ctx, oldTagsMap)
	newTags := tftags.New(ctx, newTagsMap)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.ResourceGroups)
	if len(removedTags) > 0 {
		input := resourcegroups.UntagInput{
			Arn:  aws.String(identifier),
			Keys: removedTags.Keys(),
		}

		_, err := conn.Untag(ctx, &input, optFns...)

		if err != nil {
			return fmt.Errorf("untagging resource (%s): %w", identifier, err)
		}
	}

	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.ResourceGroups)
	if len(updatedTags) > 0 {
		input := resourcegroups.TagInput{
			Arn:  aws.String(identifier),
			Tags: svcTags(updatedTags),
		}

		_, err := conn.Tag(ctx, &input, optFns...)

		if err != nil {
			return fmt.Errorf("tagging resource (%s): %w", identifier, err)
		}
	}

	return nil
}
