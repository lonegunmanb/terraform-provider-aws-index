package github.com/hashicorp/terraform-provider-aws/internal/service/resourcegroups
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ResourceGroupsClient(ctx)

	group, err := findGroupByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Resource Groups Group %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Resource Groups Group (%s): %s", d.Id(), err)
	}

	arn := aws.ToString(group.GroupArn)
	d.Set(names.AttrARN, arn)
	d.Set(names.AttrDescription, group.Description)
	d.Set(names.AttrName, group.Name)

	q, err := conn.GetGroupQuery(ctx, &resourcegroups.GetGroupQueryInput{
		GroupName: aws.String(d.Id()),
	})

	hasQuery := true
	if err != nil {
		if errs.IsA[*types.BadRequestException](err) {
			// Attempting to get the query on a configuration group returns BadRequestException.
			hasQuery = false
		} else {
			return sdkdiag.AppendErrorf(diags, "reading Resource Groups Group (%s) resource query: %s", d.Id(), err)
		}
	}

	groupCfg, err := findGroupConfigurationByGroupName(ctx, conn, d.Id())

	hasConfiguration := true
	if err != nil {
		if errs.IsA[*types.BadRequestException](err) {
			// Attempting to get configuration on a query group returns BadRequestException.
			hasConfiguration = false
		} else {
			return sdkdiag.AppendErrorf(diags, "reading Resource Groups Group (%s) configuration: %s", d.Id(), err)
		}
	}

	if hasQuery {
		resultQuery := map[string]any{}
		resultQuery["query"] = aws.ToString(q.GroupQuery.ResourceQuery.Query)
		resultQuery[names.AttrType] = q.GroupQuery.ResourceQuery.Type
		if err := d.Set("resource_query", []map[string]any{resultQuery}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting resource_query: %s", err)
		}
	}
	if hasConfiguration {
		if err := d.Set(names.AttrConfiguration, flattenGroupConfigurationItems(groupCfg.Configuration)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting configuration: %s", err)
		}
	}

	return diags
}
