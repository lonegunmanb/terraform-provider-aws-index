package github.com/hashicorp/terraform-provider-aws/internal/service/resourcegroups
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGroupUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ResourceGroupsClient(ctx)

	// Conversion between a resource-query and configuration group is not possible and vice-versa
	if d.HasChange(names.AttrConfiguration) && d.HasChange("resource_query") {
		return sdkdiag.AppendErrorf(diags, "conversion between resource-query and configuration group types is not possible")
	}

	if d.HasChange(names.AttrDescription) {
		input := &resourcegroups.UpdateGroupInput{
			Description: aws.String(d.Get(names.AttrDescription).(string)),
			GroupName:   aws.String(d.Id()),
		}

		_, err := conn.UpdateGroup(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Resource Groups Group (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange("resource_query") {
		input := &resourcegroups.UpdateGroupQueryInput{
			GroupName:     aws.String(d.Id()),
			ResourceQuery: expandResourceQuery(d.Get("resource_query").([]any)),
		}

		_, err := conn.UpdateGroupQuery(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Resource Groups Group (%s) resource query: %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrConfiguration) {
		input := &resourcegroups.PutGroupConfigurationInput{
			Configuration: expandGroupConfigurationItems(d.Get(names.AttrConfiguration).(*schema.Set).List()),
			Group:         aws.String(d.Id()),
		}

		_, err := conn.PutGroupConfiguration(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Resource Groups Group (%s) configuration: %s", d.Id(), err)
		}

		if _, err := waitGroupConfigurationUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Resource Groups Group (%s) configuration update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceGroupRead(ctx, d, meta)...)
}
