package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceChannelCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MediaLiveClient(ctx)

	in := &medialive.CreateChannelInput{
		Name:      aws.String(d.Get(names.AttrName).(string)),
		RequestId: aws.String(id.UniqueId()),
		Tags:      getTagsIn(ctx),
	}

	if v, ok := d.GetOk("cdi_input_specification"); ok && len(v.([]any)) > 0 {
		in.CdiInputSpecification = expandChannelCdiInputSpecification(v.([]any))
	}
	if v, ok := d.GetOk("channel_class"); ok {
		in.ChannelClass = types.ChannelClass(v.(string))
	}
	if v, ok := d.GetOk("destinations"); ok && v.(*schema.Set).Len() > 0 {
		in.Destinations = expandChannelDestinations(v.(*schema.Set).List())
	}
	if v, ok := d.GetOk("encoder_settings"); ok && len(v.([]any)) > 0 {
		in.EncoderSettings = expandChannelEncoderSettings(v.([]any))
	}
	if v, ok := d.GetOk("input_attachments"); ok && v.(*schema.Set).Len() > 0 {
		in.InputAttachments = expandChannelInputAttachments(v.(*schema.Set).List())
	}
	if v, ok := d.GetOk("input_specification"); ok && len(v.([]any)) > 0 {
		in.InputSpecification = expandChannelInputSpecification(v.([]any))
	}
	if v, ok := d.GetOk("maintenance"); ok && len(v.([]any)) > 0 {
		in.Maintenance = expandChannelMaintenanceCreate(v.([]any))
	}
	if v, ok := d.GetOk(names.AttrRoleARN); ok {
		in.RoleArn = aws.String(v.(string))
	}
	if v, ok := d.GetOk("vpc"); ok && len(v.([]any)) > 0 {
		in.Vpc = expandChannelVPC(v.([]any))
	}

	out, err := conn.CreateChannel(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionCreating, ResNameChannel, d.Get(names.AttrName).(string), err)
	}

	if out == nil || out.Channel == nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionCreating, ResNameChannel, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(out.Channel.Id))

	if _, err := waitChannelCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionWaitingForCreation, ResNameChannel, d.Id(), err)
	}

	if d.Get("start_channel").(bool) {
		if err := startChannel(ctx, conn, d.Timeout(schema.TimeoutCreate), d.Id()); err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionCreating, ResNameChannel, d.Get(names.AttrName).(string), err)
		}
	}

	return append(diags, resourceChannelRead(ctx, d, meta)...)
}
