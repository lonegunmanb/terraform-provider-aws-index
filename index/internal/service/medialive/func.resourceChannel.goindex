package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceChannel() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceChannelCreate,
		ReadWithoutTimeout:   resourceChannelRead,
		UpdateWithoutTimeout: resourceChannelUpdate,
		DeleteWithoutTimeout: resourceChannelDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(15 * time.Minute),
			Update: schema.DefaultTimeout(15 * time.Minute),
			Delete: schema.DefaultTimeout(15 * time.Minute),
		},

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"cdi_input_specification": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"resolution": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[types.CdiInputResolution](),
							},
						},
					},
				},
				"channel_class": {
					Type:             schema.TypeString,
					Required:         true,
					ForceNew:         true,
					ValidateDiagFunc: enum.Validate[types.ChannelClass](),
				},
				"channel_id": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"destinations": {
					Type:     schema.TypeSet,
					Required: true,
					MinItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrID: {
								Type:     schema.TypeString,
								Required: true,
							},
							"media_package_settings": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"channel_id": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							"multiplex_settings": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"multiplex_id": {
											Type:     schema.TypeString,
											Required: true,
										},
										"program_name": {
											Type:     schema.TypeString,
											Required: true,
										},
									},
								},
							},
							"settings": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"password_param": {
											Type:     schema.TypeString,
											Optional: true,
										},
										"stream_name": {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrURL: {
											Type:     schema.TypeString,
											Optional: true,
										},
										names.AttrUsername: {
											Type:     schema.TypeString,
											Optional: true,
										},
									},
								},
							},
						},
					},
				},
				"encoder_settings": func() *schema.Schema {
					return channelEncoderSettingsSchema()
				}(),
				"input_attachments": {
					Type:     schema.TypeSet,
					Required: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"automatic_input_failover_settings": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"secondary_input_id": {
											Type:     schema.TypeString,
											Required: true,
										},
										"error_clear_time_msec": {
											Type:     schema.TypeInt,
											Optional: true,
										},
										"failover_condition": {
											Type:     schema.TypeSet,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"failover_condition_settings": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"audio_silence_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"audio_selector_name": {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																			"audio_silence_threshold_msec": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"input_loss_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"input_loss_threshold_msec": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"video_black_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"black_detect_threshold": {
																				Type:     schema.TypeFloat,
																				Optional: true,
																			},
																			"video_black_threshold_msec": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										"input_preference": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[types.InputPreference](),
										},
									},
								},
							},
							"input_attachment_name": {
								Type:     schema.TypeString,
								Required: true,
							},
							"input_id": {
								Type:     schema.TypeString,
								Required: true,
							},
							"input_settings": {
								Type:     schema.TypeList,
								Optional: true,
								Computed: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"audio_selector": {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrName: {
														Type:     schema.TypeString,
														Required: true,
													},
													"selector_settings": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"audio_hls_rendition_selection": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"group_id": {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																			names.AttrName: {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																		},
																	},
																},
																"audio_language_selection": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			names.AttrLanguageCode: {
																				Type:     schema.TypeString,
																				Required: true,
																			},
																			"language_selection_policy": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.AudioLanguageSelectionPolicy](),
																			},
																		},
																	},
																},
																"audio_pid_selection": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"pid": {
																				Type:     schema.TypeInt,
																				Required: true,
																			},
																		},
																	},
																},
																"audio_track_selection": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"dolby_e_decode": {
																				Type:     schema.TypeList,
																				Optional: true,
																				MaxItems: 1,
																				Elem: &schema.Resource{
																					Schema: map[string]*schema.Schema{
																						"program_selection": {
																							Type:             schema.TypeString,
																							Required:         true,
																							ValidateDiagFunc: enum.Validate[types.DolbyEProgramSelection](),
																						},
																					},
																				},
																			},
																			"tracks": {
																				Type:     schema.TypeSet,
																				Required: true,
																				Elem: &schema.Resource{
																					Schema: map[string]*schema.Schema{
																						"track": {
																							Type:     schema.TypeInt,
																							Required: true,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										"caption_selector": {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrName: {
														Type:     schema.TypeString,
														Required: true,
													},
													names.AttrLanguageCode: {
														Type:     schema.TypeString,
														Optional: true,
													},
													"selector_settings": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"ancillary_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"source_ancillary_channel_number": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"arib_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{}, // no exported elements in this list
																	},
																},
																"dvb_sub_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"ocr_language": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.DvbSubOcrLanguage](),
																			},
																			"pid": {
																				Type:         schema.TypeInt,
																				Optional:     true,
																				ValidateFunc: validation.IntAtLeast(1),
																			},
																		},
																	},
																},
																"embedded_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"convert_608_to_708": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.EmbeddedConvert608To708](),
																			},
																			"scte20_detection": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.EmbeddedScte20Detection](),
																			},
																			"source_608_channel_number": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"scte20_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"convert_608_to_708": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.Scte20Convert608To708](),
																			},
																			"source_608_channel_number": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"scte27_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"ocr_language": {
																				Type:             schema.TypeString,
																				Optional:         true,
																				ValidateDiagFunc: enum.Validate[types.Scte27OcrLanguage](),
																			},
																			"pid": {
																				Type:     schema.TypeInt,
																				Optional: true,
																			},
																		},
																	},
																},
																"teletext_source_settings": {
																	Type:     schema.TypeList,
																	Optional: true,
																	MaxItems: 1,
																	Elem: &schema.Resource{
																		Schema: map[string]*schema.Schema{
																			"output_rectangle": {
																				Type:     schema.TypeList,
																				Optional: true,
																				MaxItems: 1,
																				Elem: &schema.Resource{
																					Schema: map[string]*schema.Schema{
																						"height": {
																							Type:     schema.TypeFloat,
																							Required: true,
																						},
																						"left_offset": {
																							Type:     schema.TypeFloat,
																							Required: true,
																						},
																						"top_offset": {
																							Type:     schema.TypeFloat,
																							Required: true,
																						},
																						"width": {
																							Type:     schema.TypeFloat,
																							Required: true,
																						},
																					},
																				},
																			},
																			"page_number": {
																				Type:     schema.TypeString,
																				Optional: true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										"deblock_filter": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[types.InputDeblockFilter](),
										},
										"denoise_filter": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[types.InputDenoiseFilter](),
										},
										"filter_strength": {
											Type:             schema.TypeInt,
											Optional:         true,
											ValidateDiagFunc: validation.ToDiagFunc(validation.IntBetween(1, 5)),
										},
										"input_filter": {
											Type:             schema.TypeString,
											Optional:         true,
											Computed:         true,
											ValidateDiagFunc: enum.Validate[types.InputFilter](),
										},
										"network_input_settings": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"hls_input_settings": {
														Type:     schema.TypeList,
														Optional: true,
														MaxItems: 1,
														Elem: &schema.Resource{
															Schema: map[string]*schema.Schema{
																"bandwidth": {
																	Type:     schema.TypeInt,
																	Optional: true,
																},
																"buffer_segments": {
																	Type:     schema.TypeInt,
																	Optional: true,
																},
																"retries": {
																	Type:     schema.TypeInt,
																	Optional: true,
																},
																"retry_interval": {
																	Type:     schema.TypeInt,
																	Optional: true,
																},
																"scte35_source": {
																	Type:             schema.TypeString,
																	Optional:         true,
																	ValidateDiagFunc: enum.Validate[types.HlsScte35SourceType](),
																},
															},
														},
													},
													"server_validation": {
														Type:             schema.TypeString,
														Optional:         true,
														ValidateDiagFunc: enum.Validate[types.NetworkInputServerValidation](),
													},
												},
											},
										},
										"scte35_pid": {
											Type:     schema.TypeInt,
											Optional: true,
										},
										"smpte2038_data_preference": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[types.Smpte2038DataPreference](),
										},
										"source_end_behavior": {
											Type:             schema.TypeString,
											Optional:         true,
											ValidateDiagFunc: enum.Validate[types.InputSourceEndBehavior](),
										},
										"video_selector": {
											Type:     schema.TypeList,
											Optional: true,
											MaxItems: 1,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													"color_space": {
														Type:             schema.TypeString,
														Optional:         true,
														ValidateDiagFunc: enum.Validate[types.VideoSelectorColorSpace](),
													},
													// TODO implement color_space_settings
													"color_space_usage": {
														Type:             schema.TypeString,
														Optional:         true,
														ValidateDiagFunc: enum.Validate[types.VideoSelectorColorSpaceUsage](),
													},
													// TODO implement selector_settings
												},
											},
										},
									},
								},
							},
						},
					},
				},
				"input_specification": {
					Type:     schema.TypeList,
					Required: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"codec": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[types.InputCodec](),
							},
							"maximum_bitrate": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[types.InputMaximumBitrate](),
							},
							"input_resolution": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[types.InputResolution](),
							},
						},
					},
				},
				"log_level": {
					Type:             schema.TypeString,
					Optional:         true,
					Computed:         true,
					ValidateDiagFunc: enum.Validate[types.LogLevel](),
				},
				"maintenance": {
					Type:     schema.TypeList,
					Optional: true,
					Computed: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"maintenance_day": {
								Type:             schema.TypeString,
								Required:         true,
								ValidateDiagFunc: enum.Validate[types.MaintenanceDay](),
							},
							"maintenance_start_time": {
								Type:     schema.TypeString,
								Required: true,
							},
						},
					},
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
				},
				names.AttrRoleARN: {
					Type:             schema.TypeString,
					Optional:         true,
					ValidateDiagFunc: validation.ToDiagFunc(verify.ValidARN),
				},
				"start_channel": {
					Type:     schema.TypeBool,
					Optional: true,
					Default:  false,
				},
				"vpc": {
					Type:     schema.TypeList,
					Optional: true,
					MaxItems: 1,
					ForceNew: true,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							names.AttrAvailabilityZones: {
								Type:     schema.TypeSet,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"network_interface_ids": {
								Type:     schema.TypeSet,
								Computed: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							"public_address_allocation_ids": {
								Type:     schema.TypeList,
								Required: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							names.AttrSecurityGroupIDs: {
								Type:     schema.TypeSet,
								Optional: true,
								Computed: true,
								MaxItems: 5,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
							names.AttrSubnetIDs: {
								Type:     schema.TypeSet,
								Required: true,
								Elem:     &schema.Schema{Type: schema.TypeString},
							},
						},
					},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
			}
		},
	}
}
