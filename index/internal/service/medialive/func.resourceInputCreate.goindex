package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceInputCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MediaLiveClient(ctx)

	in := &medialive.CreateInputInput{
		RequestId: aws.String(id.UniqueId()),
		Name:      aws.String(d.Get(names.AttrName).(string)),
		Tags:      getTagsIn(ctx),
		Type:      types.InputType(d.Get(names.AttrType).(string)),
	}

	if v, ok := d.GetOk("destinations"); ok && v.(*schema.Set).Len() > 0 {
		in.Destinations = expandDestinations(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("input_devices"); ok && v.(*schema.Set).Len() > 0 {
		in.InputDevices = inputDevices(v.(*schema.Set).List()).expandToDeviceSettings()
	}

	if v, ok := d.GetOk("input_security_groups"); ok && len(v.([]any)) > 0 {
		in.InputSecurityGroups = flex.ExpandStringValueList(d.Get("input_security_groups").([]any))
	}

	if v, ok := d.GetOk("media_connect_flows"); ok && v.(*schema.Set).Len() > 0 {
		in.MediaConnectFlows = expandMediaConnectFlows(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk(names.AttrRoleARN); ok {
		in.RoleArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("sources"); ok && v.(*schema.Set).Len() > 0 {
		in.Sources = expandSources(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk("vpc"); ok && len(v.([]any)) > 0 {
		in.Vpc = expandVPC(v.([]any))
	}

	// IAM propagation
	outputRaw, err := tfresource.RetryWhen(ctx, propagationTimeout,
		func(ctx context.Context) (any, error) {
			return conn.CreateInput(ctx, in)
		},
		func(err error) (bool, error) {
			var bre *types.BadRequestException
			if errors.As(err, &bre) {
				return strings.Contains(bre.ErrorMessage(), "Please make sure the role exists and medialive.amazonaws.com is a trusted service"), err
			}
			return false, err
		},
	)

	if err != nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionCreating, ResNameInput, d.Get(names.AttrName).(string), err)
	}

	if outputRaw == nil || outputRaw.(*medialive.CreateInputOutput).Input == nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionCreating, ResNameInput, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(outputRaw.(*medialive.CreateInputOutput).Input.Id))

	if _, err := waitInputCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.MediaLive, create.ErrActionWaitingForCreation, ResNameInput, d.Id(), err)
	}

	return append(diags, resourceInputRead(ctx, d, meta)...)
}
