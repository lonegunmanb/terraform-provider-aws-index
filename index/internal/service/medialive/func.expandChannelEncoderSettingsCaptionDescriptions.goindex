package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandChannelEncoderSettingsCaptionDescriptions(tfList []any) []types.CaptionDescription {
	if tfList == nil {
		return nil
	}

	var captionDesc []types.CaptionDescription
	for _, tfItem := range tfList {
		m, ok := tfItem.(map[string]any)
		if !ok {
			continue
		}

		var d types.CaptionDescription
		if v, ok := m["caption_selector_name"].(string); ok && v != "" {
			d.CaptionSelectorName = aws.String(v)
		}
		if v, ok := m[names.AttrName].(string); ok && v != "" {
			d.Name = aws.String(v)
		}
		if v, ok := m["accessibility"].(string); ok && v != "" {
			d.Accessibility = types.AccessibilityType(v)
		}
		if v, ok := m["destination_settings"].([]any); ok && len(v) > 0 {
			d.DestinationSettings = expandChannelEncoderSettingsCaptionDescriptionsDestinationSettings(v)
		}
		if v, ok := m[names.AttrLanguageCode].(string); ok && v != "" {
			d.LanguageCode = aws.String(v)
		}
		if v, ok := m["language_description"].(string); ok && v != "" {
			d.LanguageDescription = aws.String(v)
		}

		captionDesc = append(captionDesc, d)
	}

	return captionDesc
}
