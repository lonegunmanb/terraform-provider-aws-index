package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandMsSmoothGroupSettings(tfList []any) *types.MsSmoothGroupSettings {
	if tfList == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.MsSmoothGroupSettings
	if v, ok := m[names.AttrDestination].([]any); ok && len(v) > 0 {
		out.Destination = expandDestination(v)
	}
	if v, ok := m["acquisition_point_id"].(string); ok && v != "" {
		out.AcquisitionPointId = aws.String(v)
	}
	if v, ok := m["audio_only_timecode_control"].(string); ok && v != "" {
		out.AudioOnlyTimecodeControl = types.SmoothGroupAudioOnlyTimecodeControl(v)
	}
	if v, ok := m["certificate_mode"].(string); ok && v != "" {
		out.CertificateMode = types.SmoothGroupCertificateMode(v)
	}
	if v, ok := m["connection_retry_interval"].(int); ok && v != 0 {
		out.ConnectionRetryInterval = aws.Int32(int32(v))
	}
	if v, ok := m["event_id"].(string); ok && v != "" {
		out.EventId = aws.String(v)
	}
	if v, ok := m["event_id_mode"].(string); ok && v != "" {
		out.EventIdMode = types.SmoothGroupEventIdMode(v)
	}
	if v, ok := m["event_stop_behavior"].(string); ok && v != "" {
		out.EventStopBehavior = types.SmoothGroupEventStopBehavior(v)
	}
	if v, ok := m["filecache_duration"].(int); ok && v != 0 {
		out.FilecacheDuration = aws.Int32(int32(v))
	}
	if v, ok := m["fragment_length"].(int); ok && v != 0 {
		out.FragmentLength = aws.Int32(int32(v))
	}
	if v, ok := m["input_loss_action"].(string); ok && v != "" {
		out.InputLossAction = types.InputLossActionForMsSmoothOut(v)
	}
	if v, ok := m["num_retries"].(int); ok && v != 0 {
		out.NumRetries = aws.Int32(int32(v))
	}
	if v, ok := m["restart_delay"].(int); ok && v != 0 {
		out.RestartDelay = aws.Int32(int32(v))
	}
	if v, ok := m["segmentation_mode"].(string); ok && v != "" {
		out.SegmentationMode = types.SmoothGroupSegmentationMode(v)
	}
	if v, ok := m["send_delay_ms"].(int); ok && v != 0 {
		out.SendDelayMs = aws.Int32(int32(v))
	}
	if v, ok := m["sparse_track_type"].(string); ok && v != "" {
		out.SparseTrackType = types.SmoothGroupSparseTrackType(v)
	}
	if v, ok := m["stream_manifest_behavior"].(string); ok && v != "" {
		out.StreamManifestBehavior = types.SmoothGroupStreamManifestBehavior(v)
	}
	if v, ok := m["timestamp_offset"].(string); ok && v != "" {
		out.TimestampOffset = aws.String(v)
	}
	if v, ok := m["timestamp_offset_mode"].(string); ok && v != "" {
		out.TimestampOffsetMode = types.SmoothGroupTimestampOffsetMode(v)
	}

	return &out
}
