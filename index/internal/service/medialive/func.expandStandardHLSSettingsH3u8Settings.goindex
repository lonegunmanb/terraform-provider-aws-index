package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandStandardHLSSettingsH3u8Settings(tfList []any) *types.M3u8Settings {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.M3u8Settings
	if v, ok := m["audio_frames_per_pes"].(int); ok && v != 0 {
		out.AudioFramesPerPes = aws.Int32(int32(v))
	}
	if v, ok := m["audio_pids"].(string); ok && v != "" {
		out.AudioPids = aws.String(v)
	}
	if v, ok := m["ecm_pid"].(string); ok && v != "" {
		out.EcmPid = aws.String(v)
	}
	if v, ok := m["nielsen_id3_behavior"].(string); ok && v != "" {
		out.NielsenId3Behavior = types.M3u8NielsenId3Behavior(v)
	}
	if v, ok := m["pat_interval"].(int); ok && v != 0 {
		out.PatInterval = aws.Int32(int32(v))
	}
	if v, ok := m["pcr_control"].(string); ok && v != "" {
		out.PcrControl = types.M3u8PcrControl(v)
	}
	if v, ok := m["pcr_period"].(int); ok && v != 0 {
		out.PcrPeriod = aws.Int32(int32(v))
	}
	if v, ok := m["pcr_pid"].(string); ok && v != "" {
		out.PcrPid = aws.String(v)
	}
	if v, ok := m["pmt_interval"].(int); ok && v != 0 {
		out.PmtInterval = aws.Int32(int32(v))
	}
	if v, ok := m["pmt_pid"].(string); ok && v != "" {
		out.PmtPid = aws.String(v)
	}
	if v, ok := m["program_num"].(int); ok && v != 0 {
		out.ProgramNum = aws.Int32(int32(v))
	}
	if v, ok := m["scte35_behavior"].(string); ok && v != "" {
		out.Scte35Behavior = types.M3u8Scte35Behavior(v)
	}
	if v, ok := m["scte35_pid"].(string); ok && v != "" {
		out.Scte35Pid = aws.String(v)
	}
	if v, ok := m["timed_metadata_behavior"].(string); ok && v != "" {
		out.TimedMetadataBehavior = types.M3u8TimedMetadataBehavior(v)
	}
	if v, ok := m["timed_metadata_pid"].(string); ok && v != "" {
		out.TimedMetadataPid = aws.String(v)
	}
	if v, ok := m["transport_stream_id"].(int); ok && v != 0 {
		out.TransportStreamId = aws.Int32(int32(v))
	}
	if v, ok := m["video_pid"].(string); ok && v != "" {
		out.VideoPid = aws.String(v)
	}

	return &out
}
