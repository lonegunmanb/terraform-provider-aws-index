package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandsVideoDescriptionsCodecSettingsH265Settings(tfList []any) *types.H265Settings {
	if tfList == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.H265Settings
	if v, ok := m["framerate_denominator"].(int); ok && v != 0 {
		out.FramerateDenominator = aws.Int32(int32(v))
	}
	if v, ok := m["framerate_numerator"].(int); ok && v != 0 {
		out.FramerateNumerator = aws.Int32(int32(v))
	}
	if v, ok := m["adaptive_quantization"].(string); ok && v != "" {
		out.AdaptiveQuantization = types.H265AdaptiveQuantization(v)
	}
	if v, ok := m["afd_signaling"].(string); ok && v != "" {
		out.AfdSignaling = types.AfdSignaling(v)
	}
	if v, ok := m["alternative_transfer_function"].(string); ok && v != "" {
		out.AlternativeTransferFunction = types.H265AlternativeTransferFunction(v)
	}
	if v, ok := m["bitrate"].(int); ok && v != 0 {
		out.Bitrate = aws.Int32(int32(v))
	}
	if v, ok := m["buf_size"].(int); ok && v != 0 {
		out.BufSize = aws.Int32(int32(v))
	}
	if v, ok := m["color_metadata"].(string); ok && v != "" {
		out.ColorMetadata = types.H265ColorMetadata(v)
	}
	if v, ok := m["color_space_settings"].([]any); ok && len(v) > 0 {
		out.ColorSpaceSettings = expandH265ColorSpaceSettings(v)
	}
	if v, ok := m["filter_settings"].([]any); ok && len(v) > 0 {
		out.FilterSettings = expandH265FilterSettings(v)
	}
	if v, ok := m["fixed_afd"].(string); ok && v != "" {
		out.FixedAfd = types.FixedAfd(v)
	}
	if v, ok := m["flicker_aq"].(string); ok && v != "" {
		out.FlickerAq = types.H265FlickerAq(v)
	}
	if v, ok := m["gop_closed_cadence"].(int); ok && v != 0 {
		out.GopClosedCadence = aws.Int32(int32(v))
	}
	if v, ok := m["gop_size"].(float64); ok && v != 0.0 {
		out.GopSize = aws.Float64(v)
	}
	if v, ok := m["gop_size_units"].(string); ok && v != "" {
		out.GopSizeUnits = types.H265GopSizeUnits(v)
	}
	if v, ok := m["level"].(string); ok && v != "" {
		out.Level = types.H265Level(v)
	}
	if v, ok := m["look_ahead_rate_control"].(string); ok && v != "" {
		out.LookAheadRateControl = types.H265LookAheadRateControl(v)
	}
	if v, ok := m["max_bitrate"].(int); ok && v != 0 {
		out.MaxBitrate = aws.Int32(int32(v))
	}
	if v, ok := m["min_i_interval"].(int); ok && v != 0 {
		out.MinIInterval = aws.Int32(int32(v))
	}
	if v, ok := m["min_qp"].(int); ok && v != 0 {
		out.MinQp = aws.Int32(int32(v))
	}
	if v, ok := m["mv_over_picture_boundaries"].(string); ok && v != "" {
		out.MvOverPictureBoundaries = types.H265MvOverPictureBoundaries(v)
	}
	if v, ok := m["mv_temporal_predictor"].(string); ok && v != "" {
		out.MvTemporalPredictor = types.H265MvTemporalPredictor(v)
	}
	if v, ok := m["par_denominator"].(int); ok && v != 0 {
		out.ParDenominator = aws.Int32(int32(v))
	}
	if v, ok := m["par_numerator"].(int); ok && v != 0 {
		out.ParNumerator = aws.Int32(int32(v))
	}
	if v, ok := m[names.AttrProfile].(string); ok && v != "" {
		out.Profile = types.H265Profile(v)
	}
	if v, ok := m["qvbr_quality_level"].(int); ok && v != 0 {
		out.QvbrQualityLevel = aws.Int32(int32(v))
	}
	if v, ok := m["rate_control_mode"].(string); ok && v != "" {
		out.RateControlMode = types.H265RateControlMode(v)
	}
	if v, ok := m["scan_type"].(string); ok && v != "" {
		out.ScanType = types.H265ScanType(v)
	}
	if v, ok := m["scene_change_detect"].(string); ok && v != "" {
		out.SceneChangeDetect = types.H265SceneChangeDetect(v)
	}
	if v, ok := m["slices"].(int); ok && v != 0 {
		out.Slices = aws.Int32(int32(v))
	}
	if v, ok := m["tier"].(string); ok && v != "" {
		out.Tier = types.H265Tier(v)
	}
	if v, ok := m["tile_height"].(int); ok && v != 0 {
		out.TileHeight = aws.Int32(int32(v))
	}
	if v, ok := m["tile_padding"].(string); ok && v != "" {
		out.TilePadding = types.H265TilePadding(v)
	}
	if v, ok := m["tile_width"].(int); ok && v != 0 {
		out.TileWidth = aws.Int32(int32(v))
	}
	if v, ok := m["timecode_burnin_settings"].([]any); ok && len(v) > 0 {
		out.TimecodeBurninSettings = expandH265TimecodeBurninSettings(v)
	}
	if v, ok := m["timecode_insertion"].(string); ok && v != "" {
		out.TimecodeInsertion = types.H265TimecodeInsertionBehavior(v)
	}
	if v, ok := m["treeblock_size"].(string); ok && v != "" {
		out.TreeblockSize = types.H265TreeblockSize(v)
	}

	return &out
}
