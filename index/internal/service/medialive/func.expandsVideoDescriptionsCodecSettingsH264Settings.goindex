package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandsVideoDescriptionsCodecSettingsH264Settings(tfList []any) *types.H264Settings {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.H264Settings
	if v, ok := m["adaptive_quantization"].(string); ok && v != "" {
		out.AdaptiveQuantization = types.H264AdaptiveQuantization(v)
	}
	if v, ok := m["afd_signaling"].(string); ok && v != "" {
		out.AfdSignaling = types.AfdSignaling(v)
	}
	if v, ok := m["bitrate"].(int); ok && v != 0 {
		out.Bitrate = aws.Int32(int32(v))
	}
	if v, ok := m["buf_fill_pct"].(int); ok && v != 0 {
		out.BufFillPct = aws.Int32(int32(v))
	}
	if v, ok := m["buf_size"].(int); ok && v != 0 {
		out.BufSize = aws.Int32(int32(v))
	}
	if v, ok := m["color_metadata"].(string); ok && v != "" {
		out.ColorMetadata = types.H264ColorMetadata(v)
	}
	if v, ok := m["entropy_encoding"].(string); ok && v != "" {
		out.EntropyEncoding = types.H264EntropyEncoding(v)
	}
	if v, ok := m["filter_settings"].([]any); ok && len(v) > 0 {
		out.FilterSettings = expandH264SettingsFilterSettings(v)
	}
	if v, ok := m["fixed_afd"].(string); ok && v != "" {
		out.FixedAfd = types.FixedAfd(v)
	}
	if v, ok := m["flicker_aq"].(string); ok && v != "" {
		out.FlickerAq = types.H264FlickerAq(v)
	}
	if v, ok := m["force_field_pictures"].(string); ok && v != "" {
		out.ForceFieldPictures = types.H264ForceFieldPictures(v)
	}
	if v, ok := m["framerate_control"].(string); ok && v != "" {
		out.FramerateControl = types.H264FramerateControl(v)
	}
	if v, ok := m["framerate_denominator"].(int); ok && v != 0 {
		out.FramerateDenominator = aws.Int32(int32(v))
	}
	if v, ok := m["framerate_numerator"].(int); ok && v != 0 {
		out.FramerateNumerator = aws.Int32(int32(v))
	}
	if v, ok := m["gop_b_reference"].(string); ok && v != "" {
		out.GopBReference = types.H264GopBReference(v)
	}
	if v, ok := m["gop_closed_cadence"].(int); ok && v != 0 {
		out.GopClosedCadence = aws.Int32(int32(v))
	}
	if v, ok := m["gop_num_b_frames"].(int); ok && v != 0 {
		out.GopNumBFrames = aws.Int32(int32(v))
	}
	if v, ok := m["gop_size"].(float64); ok && v != 0.0 {
		out.GopSize = aws.Float64(v)
	}
	if v, ok := m["gop_size_units"].(string); ok && v != "" {
		out.GopSizeUnits = types.H264GopSizeUnits(v)
	}
	if v, ok := m["level"].(string); ok && v != "" {
		out.Level = types.H264Level(v)
	}
	if v, ok := m["look_ahead_rate_control"].(string); ok && v != "" {
		out.LookAheadRateControl = types.H264LookAheadRateControl(v)
	}
	if v, ok := m["max_bitrate"].(int); ok && v != 0 {
		out.MaxBitrate = aws.Int32(int32(v))
	}
	if v, ok := m["min_i_interval"].(int); ok && v != 0 {
		out.MinIInterval = aws.Int32(int32(v))
	}
	if v, ok := m["num_ref_frames"].(int); ok && v != 0 {
		out.NumRefFrames = aws.Int32(int32(v))
	}
	if v, ok := m["par_control"].(string); ok && v != "" {
		out.ParControl = types.H264ParControl(v)
	}
	if v, ok := m["par_denominator"].(int); ok && v != 0 {
		out.ParDenominator = aws.Int32(int32(v))
	}
	if v, ok := m["par_numerator"].(int); ok && v != 0 {
		out.ParNumerator = aws.Int32(int32(v))
	}
	if v, ok := m[names.AttrProfile].(string); ok && v != "" {
		out.Profile = types.H264Profile(v)
	}
	if v, ok := m["quality_level"].(string); ok && v != "" {
		out.QualityLevel = types.H264QualityLevel(v)
	}
	if v, ok := m["qvbr_quality_level"].(int); ok && v != 0 {
		out.QvbrQualityLevel = aws.Int32(int32(v))
	}
	if v, ok := m["rate_control_mode"].(string); ok && v != "" {
		out.RateControlMode = types.H264RateControlMode(v)
	}
	if v, ok := m["scan_type"].(string); ok && v != "" {
		out.ScanType = types.H264ScanType(v)
	}
	if v, ok := m["scene_change_detect"].(string); ok && v != "" {
		out.SceneChangeDetect = types.H264SceneChangeDetect(v)
	}
	if v, ok := m["slices"].(int); ok && v != 0 {
		out.Slices = aws.Int32(int32(v))
	}
	if v, ok := m["softness"].(int); ok && v != 0 {
		out.Softness = aws.Int32(int32(v))
	}
	if v, ok := m["spatial_aq"].(string); ok && v != "" {
		out.SpatialAq = types.H264SpatialAq(v)
	}
	if v, ok := m["subgop_length"].(string); ok && v != "" {
		out.SubgopLength = types.H264SubGopLength(v)
	}
	if v, ok := m["syntax"].(string); ok && v != "" {
		out.Syntax = types.H264Syntax(v)
	}
	if v, ok := m["temporal_aq"].(string); ok && v != "" {
		out.TemporalAq = types.H264TemporalAq(v)
	}
	if v, ok := m["timecode_insertion"].(string); ok && v != "" {
		out.TimecodeInsertion = types.H264TimecodeInsertionBehavior(v)
	}

	return &out
}
