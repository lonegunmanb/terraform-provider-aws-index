package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandInputAttachmentInputSettings(tfList []any) *types.InputSettings {
	if tfList == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.InputSettings
	if v, ok := m["audio_selector"].([]any); ok && len(v) > 0 {
		out.AudioSelectors = expandInputAttachmentInputSettingsAudioSelectors(v)
	}
	if v, ok := m["caption_selector"].([]any); ok && len(v) > 0 {
		out.CaptionSelectors = expandInputAttachmentInputSettingsCaptionSelectors(v)
	}
	if v, ok := m["deblock_filter"].(string); ok && v != "" {
		out.DeblockFilter = types.InputDeblockFilter(v)
	}
	if v, ok := m["denoise_filter"].(string); ok && v != "" {
		out.DenoiseFilter = types.InputDenoiseFilter(v)
	}
	if v, ok := m["filter_strength"].(int); ok && v != 0 {
		out.FilterStrength = aws.Int32(int32(v))
	}
	if v, ok := m["input_filter"].(string); ok && v != "" {
		out.InputFilter = types.InputFilter(v)
	}
	if v, ok := m["network_input_settings"].([]any); ok && len(v) > 0 {
		out.NetworkInputSettings = expandInputAttachmentInputSettingsNetworkInputSettings(v)
	}
	if v, ok := m["scte35_pid"].(int); ok && v != 0 {
		out.Scte35Pid = aws.Int32(int32(v))
	}
	if v, ok := m["smpte2038_data_preference"].(string); ok && v != "" {
		out.Smpte2038DataPreference = types.Smpte2038DataPreference(v)
	}
	if v, ok := m["source_end_behavior"].(string); ok && v != "" {
		out.SourceEndBehavior = types.InputSourceEndBehavior(v)
	}

	return &out
}
