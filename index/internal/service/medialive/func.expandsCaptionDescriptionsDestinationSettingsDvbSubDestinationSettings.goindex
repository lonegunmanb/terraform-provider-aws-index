package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings(tfList []any) *types.DvbSubDestinationSettings {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	m := tfList[0].(map[string]any)

	var out types.DvbSubDestinationSettings
	if v, ok := m["alignment"].(string); ok && len(v) > 0 {
		out.Alignment = types.DvbSubDestinationAlignment(v)
	}
	if v, ok := m["background_color"].(string); ok && len(v) > 0 {
		out.BackgroundColor = types.DvbSubDestinationBackgroundColor(v)
	}
	if v, ok := m["background_opacity"].(int); ok && v != 0 {
		out.BackgroundOpacity = aws.Int32(int32(v))
	}
	if v, ok := m["font"].([]any); ok && len(v) > 0 {
		out.Font = expandInputLocation(v)
	}
	if v, ok := m["font_color"].(string); ok && len(v) > 0 {
		out.FontColor = types.DvbSubDestinationFontColor(v)
	}
	if v, ok := m["font_opacity"].(int); ok && v != 0 {
		out.FontOpacity = aws.Int32(int32(v))
	}
	if v, ok := m["font_resolution"].(int); ok && v != 0 {
		out.FontResolution = aws.Int32(int32(v))
	}
	if v, ok := m["font_size"].(string); ok && v != "" {
		out.FontSize = aws.String(v)
	}
	if v, ok := m["outline_color"].(string); ok && len(v) > 0 {
		out.OutlineColor = types.DvbSubDestinationOutlineColor(v)
	}
	if v, ok := m["outline_size"].(int); ok && v != 0 {
		out.OutlineSize = aws.Int32(int32(v))
	}
	if v, ok := m["shadow_color"].(string); ok && len(v) > 0 {
		out.ShadowColor = types.DvbSubDestinationShadowColor(v)
	}
	if v, ok := m["shadow_opacity"].(int); ok && v != 0 {
		out.ShadowOpacity = aws.Int32(int32(v))
	}
	if v, ok := m["shadow_x_offset"].(int); ok && v != 0 {
		out.ShadowXOffset = aws.Int32(int32(v))
	}
	if v, ok := m["shadow_y_offset"].(int); ok && v != 0 {
		out.ShadowYOffset = aws.Int32(int32(v))
	}
	if v, ok := m["teletext_grid_control"].(string); ok && len(v) > 0 {
		out.TeletextGridControl = types.DvbSubDestinationTeletextGridControl(v)
	}
	if v, ok := m["x_position"].(int); ok && v != 0 {
		out.XPosition = aws.Int32(int32(v))
	}
	if v, ok := m["y_position"].(int); ok && v != 0 {
		out.YPosition = aws.Int32(int32(v))
	}

	return &out
}
