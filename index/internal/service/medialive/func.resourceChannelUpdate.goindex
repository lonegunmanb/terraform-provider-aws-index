package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceChannelUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MediaLiveClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll, "start_channel") {
		in := &medialive.UpdateChannelInput{
			ChannelId: aws.String(d.Id()),
		}

		if d.HasChange(names.AttrName) {
			in.Name = aws.String(d.Get(names.AttrName).(string))
		}

		if d.HasChange("cdi_input_specification") {
			in.CdiInputSpecification = expandChannelCdiInputSpecification(d.Get("cdi_input_specification").([]any))
		}

		if d.HasChange("destinations") {
			in.Destinations = expandChannelDestinations(d.Get("destinations").(*schema.Set).List())
		}

		if d.HasChange("encoder_settings") {
			in.EncoderSettings = expandChannelEncoderSettings(d.Get("encoder_settings").([]any))
		}

		if d.HasChange("input_attachments") {
			in.InputAttachments = expandChannelInputAttachments(d.Get("input_attachments").(*schema.Set).List())
		}

		if d.HasChange("input_specification") {
			in.InputSpecification = expandChannelInputSpecification(d.Get("input_specification").([]any))
		}

		if d.HasChange("log_level") {
			in.LogLevel = types.LogLevel(d.Get("log_level").(string))
		}

		if d.HasChange("maintenance") {
			in.Maintenance = expandChannelMaintenanceUpdate(d.Get("maintenance").([]any))
		}

		if d.HasChange(names.AttrRoleARN) {
			in.RoleArn = aws.String(d.Get(names.AttrRoleARN).(string))
		}

		channel, err := FindChannelByID(ctx, conn, d.Id())

		if err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
		}

		if channel.State == types.ChannelStateRunning {
			if err := stopChannel(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id()); err != nil {
				return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
			}
		}

		out, err := conn.UpdateChannel(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
		}

		if _, err := waitChannelUpdated(ctx, conn, aws.ToString(out.Channel.Id), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionWaitingForUpdate, ResNameChannel, d.Id(), err)
		}
	}

	if d.Get("start_channel").(bool) {
		if err := startChannel(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id()); err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Get(names.AttrName).(string), err)
		}
	}

	if d.HasChange("start_channel") {
		channel, err := FindChannelByID(ctx, conn, d.Id())

		if err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
		}

		switch d.Get("start_channel").(bool) {
		case true:
			if channel.State == types.ChannelStateIdle {
				if err := startChannel(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id()); err != nil {
					return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
				}
			}
		default:
			if channel.State == types.ChannelStateRunning {
				if err := stopChannel(ctx, conn, d.Timeout(schema.TimeoutUpdate), d.Id()); err != nil {
					return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameChannel, d.Id(), err)
				}
			}
		}
	}

	return append(diags, resourceChannelRead(ctx, d, meta)...)
}
