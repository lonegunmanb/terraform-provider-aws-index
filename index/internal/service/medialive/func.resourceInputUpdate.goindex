package github.com/hashicorp/terraform-provider-aws/internal/service/medialive
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/medialive/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceInputUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).MediaLiveClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		in := &medialive.UpdateInputInput{
			InputId: aws.String(d.Id()),
		}

		if d.HasChange("destinations") {
			in.Destinations = expandDestinations(d.Get("destinations").(*schema.Set).List())
		}

		if d.HasChange("input_devices") {
			in.InputDevices = inputDevices(d.Get("input_devices").(*schema.Set).List()).expandToDeviceRequest()
		}

		if d.HasChange("media_connect_flows") {
			in.MediaConnectFlows = expandMediaConnectFlows(d.Get("media_connect_flows").(*schema.Set).List())
		}

		if d.HasChange(names.AttrName) {
			in.Name = aws.String(d.Get(names.AttrName).(string))
		}

		if d.HasChange(names.AttrRoleARN) {
			in.RoleArn = aws.String(d.Get(names.AttrRoleARN).(string))
		}

		if d.HasChange("sources") {
			in.Sources = expandSources(d.Get("sources").(*schema.Set).List())
		}

		rawOutput, err := tfresource.RetryWhen(ctx, 2*time.Minute,
			func(ctx context.Context) (any, error) {
				return conn.UpdateInput(ctx, in)
			},
			func(err error) (bool, error) {
				var bre *types.BadRequestException
				if errors.As(err, &bre) {
					return strings.Contains(bre.ErrorMessage(), "The first input attached to a channel cannot be a dynamic input"), err
				}
				return false, err
			},
		)

		if err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionUpdating, ResNameInput, d.Id(), err)
		}

		out := rawOutput.(*medialive.UpdateInputOutput)

		if _, err := waitInputUpdated(ctx, conn, aws.ToString(out.Input.Id), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return create.AppendDiagError(diags, names.MediaLive, create.ErrActionWaitingForUpdate, ResNameInput, d.Id(), err)
		}
	}

	return append(diags, resourceInputRead(ctx, d, meta)...)
}
