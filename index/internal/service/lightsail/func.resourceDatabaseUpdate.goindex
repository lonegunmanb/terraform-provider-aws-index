package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDatabaseUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	if d.HasChangesExcept(names.AttrApplyImmediately, "final_snapshot_name", "skip_final_snapshot", names.AttrTags, names.AttrTagsAll) {
		input := &lightsail.UpdateRelationalDatabaseInput{
			ApplyImmediately:       aws.Bool(d.Get(names.AttrApplyImmediately).(bool)),
			RelationalDatabaseName: aws.String(d.Id()),
		}

		if d.HasChange("backup_retention_enabled") {
			if d.Get("backup_retention_enabled").(bool) {
				input.EnableBackupRetention = aws.Bool(d.Get("backup_retention_enabled").(bool))
			} else {
				input.DisableBackupRetention = aws.Bool(true)
			}
		}

		if d.HasChange("ca_certificate_identifier") {
			input.CaCertificateIdentifier = aws.String(d.Get("ca_certificate_identifier").(string))
		}

		if d.HasChange("master_password") {
			input.MasterUserPassword = aws.String(d.Get("master_password").(string))
		}

		if d.HasChange("preferred_backup_window") {
			input.PreferredBackupWindow = aws.String(d.Get("preferred_backup_window").(string))
		}

		if d.HasChange(names.AttrPreferredMaintenanceWindow) {
			input.PreferredMaintenanceWindow = aws.String(d.Get(names.AttrPreferredMaintenanceWindow).(string))
		}

		if d.HasChange(names.AttrPubliclyAccessible) {
			input.PubliclyAccessible = aws.Bool(d.Get(names.AttrPubliclyAccessible).(bool))
		}

		output, err := conn.UpdateRelationalDatabase(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Lightsail Relational Database (%s): %s", d.Id(), err)
		}

		diagError := expandOperations(ctx, conn, output.Operations, types.OperationTypeUpdateRelationalDatabase, ResNameDatabase, d.Id())

		if diagError != nil {
			return diagError
		}

		if d.HasChange("backup_retention_enabled") {
			if err := waitDatabaseBackupRetentionModified(ctx, conn, aws.String(d.Id()), d.Get("backup_retention_enabled").(bool)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for Lightsail Relational Database (%s) backup retention update: %s", d.Id(), err)
			}
		}

		if d.HasChange(names.AttrPubliclyAccessible) {
			if err := waitDatabasePubliclyAccessibleModified(ctx, conn, aws.String(d.Id()), d.Get(names.AttrPubliclyAccessible).(bool)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for Lightsail Relational Database (%s) publicly accessible update: %s", d.Id(), err)
			}
		}

		// Some Operations can complete before the Database enters the Available state. Added a waiter to make sure the Database is available before continuing.
		if _, err = waitDatabaseModified(ctx, conn, aws.String(d.Id())); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Lightsail Relational Database (%s) to become available: %s", d.Id(), err)
		}
	}

	return append(diags, resourceDatabaseRead(ctx, d, meta)...)
}
