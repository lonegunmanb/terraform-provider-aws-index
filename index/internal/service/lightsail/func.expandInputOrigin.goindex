package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandInputOrigin(tfMap map[string]any) *types.InputOrigin {
	if tfMap == nil {
		return nil
	}

	a := &types.InputOrigin{}

	if v, ok := tfMap[names.AttrName].(string); ok && v != "" {
		a.Name = aws.String(v)
	}

	if v, ok := tfMap["protocol_policy"].(string); ok && v != "" {
		a.ProtocolPolicy = types.OriginProtocolPolicyEnum(v)
	}

	if v, ok := tfMap["region_name"].(string); ok && v != "" {
		a.RegionName = types.RegionName(v)
	}

	return a
}
