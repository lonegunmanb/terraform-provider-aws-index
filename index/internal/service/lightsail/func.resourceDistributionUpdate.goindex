package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDistributionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	update := false
	bundleUpdate := false

	in := &lightsail.UpdateDistributionInput{
		DistributionName: aws.String(d.Id()),
	}

	bundleIn := &lightsail.UpdateDistributionBundleInput{
		DistributionName: aws.String(d.Id()),
	}

	if d.HasChanges("cache_behavior_settings") {
		in.CacheBehaviorSettings = expandCacheSettings(d.Get("cache_behavior_settings").([]any)[0].(map[string]any))
		update = true
	}

	if d.HasChanges("cache_behavior") {
		in.CacheBehaviors = expandCacheBehaviorsPerPath(d.Get("cache_behavior").(*schema.Set).List())
		update = true
	}

	if d.HasChanges("default_cache_behavior") {
		in.DefaultCacheBehavior = expandCacheBehavior(d.Get("default_cache_behavior").([]any)[0].(map[string]any))
		update = true
	}

	if d.HasChanges("is_enabled") {
		in.IsEnabled = aws.Bool(d.Get("is_enabled").(bool))
		update = true
	}

	if d.HasChanges("origin") {
		in.Origin = expandInputOrigin(d.Get("origin").([]any)[0].(map[string]any))
		update = true
	}

	if d.HasChanges("certificate_name") {
		in.CertificateName = aws.String(d.Get("certificate_name").(string))
		update = true
	}

	if d.HasChanges("bundle_id") {
		bundleIn.BundleId = aws.String(d.Get("bundle_id").(string))
		bundleUpdate = true
	}

	if d.HasChange(names.AttrIPAddressType) {
		out, err := conn.SetIpAddressType(ctx, &lightsail.SetIpAddressTypeInput{
			ResourceName:  aws.String(d.Id()),
			ResourceType:  types.ResourceTypeDistribution,
			IpAddressType: types.IpAddressType(d.Get(names.AttrIPAddressType).(string)),
		})

		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeSetIpAddressType), ResNameDistribution, d.Id(), err)
		}

		diag := expandOperations(ctx, conn, out.Operations, types.OperationTypeSetIpAddressType, ResNameDistribution, d.Id())

		if diag != nil {
			return diag
		}
	}

	if update {
		log.Printf("[DEBUG] Updating Lightsail Distribution (%s): %#v", d.Id(), in)
		out, err := conn.UpdateDistribution(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, create.ErrActionUpdating, ResNameDistribution, d.Id(), err)
		}

		diag := expandOperation(ctx, conn, *out.Operation, types.OperationTypeUpdateDistribution, ResNameDistribution, d.Id())

		if diag != nil {
			return diag
		}
	}

	if bundleUpdate {
		log.Printf("[DEBUG] Updating Lightsail Distribution Bundle (%s): %#v", d.Id(), in)
		out, err := conn.UpdateDistributionBundle(ctx, bundleIn)
		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, create.ErrActionUpdating, ResNameDistribution, d.Id(), err)
		}

		diag := expandOperation(ctx, conn, *out.Operation, types.OperationTypeUpdateDistributionBundle, ResNameDistribution, d.Id())

		if diag != nil {
			return diag
		}
	}

	return append(diags, resourceDistributionRead(ctx, d, meta)...)
}
