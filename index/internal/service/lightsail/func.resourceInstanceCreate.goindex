package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceInstanceCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	iName := d.Get(names.AttrName).(string)

	in := lightsail.CreateInstancesInput{
		AvailabilityZone: aws.String(d.Get(names.AttrAvailabilityZone).(string)),
		BlueprintId:      aws.String(d.Get("blueprint_id").(string)),
		BundleId:         aws.String(d.Get("bundle_id").(string)),
		InstanceNames:    []string{iName},
		Tags:             getTagsIn(ctx),
	}

	if v, ok := d.GetOk("key_pair_name"); ok {
		in.KeyPairName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("user_data"); ok {
		in.UserData = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrIPAddressType); ok {
		in.IpAddressType = types.IpAddressType(v.(string))
	}

	out, err := conn.CreateInstances(ctx, &in)
	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeCreateInstance), ResInstance, iName, err)
	}

	diag := expandOperations(ctx, conn, out.Operations, types.OperationTypeCreateInstance, ResInstance, iName)

	if diag != nil {
		return diag
	}

	d.SetId(iName)

	// Cannot enable add ons with creation request
	if expandAddOnEnabled(d.Get("add_on").([]any)) {
		in := lightsail.EnableAddOnInput{
			ResourceName: aws.String(iName),
			AddOnRequest: expandAddOnRequest(d.Get("add_on").([]any)),
		}

		out, err := conn.EnableAddOn(ctx, &in)

		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeEnableAddOn), ResInstance, iName, err)
		}

		diag := expandOperations(ctx, conn, out.Operations, types.OperationTypeEnableAddOn, ResInstance, iName)

		if diag != nil {
			return diag
		}
	}

	return append(diags, resourceInstanceRead(ctx, d, meta)...)
}
