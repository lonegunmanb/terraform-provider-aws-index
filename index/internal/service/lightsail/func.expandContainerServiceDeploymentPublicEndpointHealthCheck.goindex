package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContainerServiceDeploymentPublicEndpointHealthCheck(tfList []any) *types.ContainerServiceHealthCheckConfig {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap, ok := tfList[0].(map[string]any)
	if !ok {
		return nil
	}

	healthCheck := &types.ContainerServiceHealthCheckConfig{
		HealthyThreshold:   aws.Int32(int32(tfMap["healthy_threshold"].(int))),
		IntervalSeconds:    aws.Int32(int32(tfMap["interval_seconds"].(int))),
		Path:               aws.String(tfMap[names.AttrPath].(string)),
		SuccessCodes:       aws.String(tfMap["success_codes"].(string)),
		TimeoutSeconds:     aws.Int32(int32(tfMap["timeout_seconds"].(int))),
		UnhealthyThreshold: aws.Int32(int32(tfMap["unhealthy_threshold"].(int))),
	}

	return healthCheck
}
