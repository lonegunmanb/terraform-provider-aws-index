package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"errors"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDiskAttachmentDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	id_parts := strings.SplitN(d.Id(), ",", -1)
	dName := id_parts[0]
	iName := id_parts[1]

	// A Disk can only be detached from a stopped instance
	iStateOut, err := waitInstanceState(ctx, conn, &iName)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionReading, ResInstance, iName, errors.New("Error waiting for Instance to enter running or stopped state"))
	}

	if aws.ToString(iStateOut.State.Name) == "running" {
		stopOut, err := conn.StopInstance(ctx, &lightsail.StopInstanceInput{
			InstanceName: aws.String(iName),
		})

		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeStopInstance), ResInstance, iName, err)
		}

		diag := expandOperations(ctx, conn, stopOut.Operations, types.OperationTypeStopInstance, ResInstance, iName)

		if diag != nil {
			return diag
		}
	}

	out, err := conn.DetachDisk(ctx, &lightsail.DetachDiskInput{
		DiskName: aws.String(dName),
	})

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeDetachDisk), ResDiskAttachment, d.Get("disk_name").(string), err)
	}

	diag := expandOperations(ctx, conn, out.Operations, types.OperationTypeDetachDisk, ResDiskAttachment, d.Get("disk_name").(string))

	if diag != nil {
		return diag
	}

	iStateOut, err = waitInstanceState(ctx, conn, &iName)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionReading, ResInstance, iName, errors.New("Error waiting for Instance to enter running or stopped state"))
	}

	if aws.ToString(iStateOut.State.Name) != "running" {
		startOut, err := conn.StartInstance(ctx, &lightsail.StartInstanceInput{
			InstanceName: aws.String(iName),
		})

		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeStartInstance), ResInstance, iName, err)
		}

		diag := expandOperations(ctx, conn, startOut.Operations, types.OperationTypeStartInstance, ResInstance, iName)

		if diag != nil {
			return diag
		}
	}

	return diags
}
