package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
)
func (p *servicePackage) ListTags(ctx context.Context, meta any, identifier, resourceType string) error {
	var (
		tags tftags.KeyValueTags
		err  error
	)
	switch resourceType {
	case "Bucket":
		tags, err = bucketListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "Certificate":
		tags, err = certificateListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "ContainerService":
		tags, err = containerServiceListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "Database":
		tags, err = databaseListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "Disk":
		tags, err = diskListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "Distribution":
		tags, err = distributionListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "Instance":
		tags, err = instanceListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "KeyPair":
		tags, err = keyPairListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	case "LB":
		tags, err = lbListTags(ctx, meta.(*conns.AWSClient).LightsailClient(ctx), identifier)

	default:
		return nil
	}

	if err != nil {
		return err
	}

	if inContext, ok := tftags.FromContext(ctx); ok {
		inContext.TagsOut = option.Some(tags)
	}

	return nil
}
