package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContainerServiceProtocol(tfMap map[string]any) map[string]types.ContainerServiceProtocol {
	if tfMap == nil {
		return nil
	}

	apiObject := map[string]types.ContainerServiceProtocol{}

	for k, v := range tfMap {
		switch v {
		case "HTTP":
			apiObject[k] = types.ContainerServiceProtocolHttp
		case "HTTPS":
			apiObject[k] = types.ContainerServiceProtocolHttps
		case "TCP":
			apiObject[k] = types.ContainerServiceProtocolTcp
		case "UDP":
			apiObject[k] = types.ContainerServiceProtocolUdp
		}
	}

	return apiObject
}
