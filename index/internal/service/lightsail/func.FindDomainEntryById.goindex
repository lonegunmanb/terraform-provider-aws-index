package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func FindDomainEntryById(ctx context.Context, conn *lightsail.Client, id string) (*types.DomainEntry, error) {
	partCount := flex.ResourceIdPartCount(id)

	in := &lightsail.GetDomainInput{}
	var name string
	var domainName string
	var entryName string
	var recordType string
	var recordTarget string

	// if there is not more than one partCount, the legacy separator will be used.
	if partCount == 1 {
		idParts := strings.Split(id, "_")
		idLength := len(idParts)
		var index int

		if idLength <= 3 {
			return nil, tfresource.NewEmptyResultError(in)
		}

		if idLength == 5 {
			index = 1
			name = "_" + idParts[index]
		} else {
			index = 0
			name = idParts[index]
		}

		domainName = idParts[index+1]
		entryName = expandDomainEntryName(name, domainName)
		recordType = idParts[index+2]
		recordTarget = idParts[index+3]
	} else {
		idParts, err := flex.ExpandResourceId(id, DomainEntryIdPartsCount, true)

		if err != nil {
			return nil, err
		}

		name = idParts[0]
		domainName = idParts[1]
		entryName = expandDomainEntryName(name, domainName)
		recordType = idParts[2]
		recordTarget = idParts[3]
	}

	in.DomainName = aws.String(domainName)

	out, err := conn.GetDomain(ctx, in)

	if IsANotFoundError(err) {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: in,
		}
	}

	if err != nil {
		return nil, err
	}

	var entry types.DomainEntry
	entryExists := false

	for _, n := range out.Domain.DomainEntries {
		if entryName == aws.ToString(n.Name) && recordType == aws.ToString(n.Type) && recordTarget == aws.ToString(n.Target) {
			entry = n
			entryExists = true
			break
		}
	}

	if !entryExists {
		return nil, tfresource.NewEmptyResultError(in)
	}

	return &entry, nil
}
