package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCacheSettings(tfMap map[string]any) *types.CacheSettings {
	if tfMap == nil {
		return nil
	}

	a := &types.CacheSettings{}

	if v, ok := tfMap["allowed_http_methods"].(string); ok && v != "" {
		a.AllowedHTTPMethods = aws.String(v)
	}

	if v, ok := tfMap["cached_http_methods"].(string); ok && v != "" {
		a.CachedHTTPMethods = aws.String(v)
	}

	if v, ok := tfMap["default_ttl"].(int); ok && v != 0 {
		a.DefaultTTL = aws.Int64(int64(v))
	}

	if v, ok := tfMap["forwarded_cookies"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		a.ForwardedCookies = expandCookieObject(v.([]any)[0].(map[string]any))
	}

	if v, ok := tfMap["forwarded_headers"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		a.ForwardedHeaders = expandHeaderObject(v.([]any)[0].(map[string]any))
	}

	if v, ok := tfMap["forwarded_query_strings"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		a.ForwardedQueryStrings = expandQueryStringObject(v.([]any)[0].(map[string]any))
	}

	if v, ok := tfMap["maximum_ttl"].(int); ok && v != 0 {
		a.MaximumTTL = aws.Int64(int64(v))
	}

	if v, ok := tfMap["minimum_ttl"].(int); ok && v != 0 {
		a.MinimumTTL = aws.Int64(int64(v))
	}

	return a
}
