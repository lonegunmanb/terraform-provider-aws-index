package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenInstancePortState(apiObject types.InstancePortState) map[string]any {
	tfMap := map[string]any{}

	tfMap["from_port"] = int(apiObject.FromPort)
	tfMap["to_port"] = int(apiObject.ToPort)
	tfMap[names.AttrProtocol] = string(apiObject.Protocol)

	if v := apiObject.Cidrs; v != nil {
		tfMap["cidrs"] = v
	}

	if v := apiObject.CidrListAliases; v != nil {
		tfMap["cidr_list_aliases"] = v
	}

	if v := apiObject.Ipv6Cidrs; v != nil {
		tfMap["ipv6_cidrs"] = v
	}

	return tfMap
}
