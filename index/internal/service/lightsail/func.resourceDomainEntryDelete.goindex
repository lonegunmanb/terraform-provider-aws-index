package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainEntryDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	domainName, err := expandDomainNameFromId(d.Id())

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionExpandingResourceId, ResNameDomainEntry, d.Id(), err)
	}

	domainEntry, err := expandDomainEntry(d.Id())

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionExpandingResourceId, ResNameDomainEntry, d.Id(), err)
	}

	resp, err := conn.DeleteDomainEntry(ctx, &lightsail.DeleteDomainEntryInput{
		DomainName:  aws.String(domainName),
		DomainEntry: domainEntry,
	})

	if errs.IsA[*types.NotFoundException](err) || errs.IsA[*types.OperationFailureException](err) {
		return diags
	}

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionDeleting, ResNameDomainEntry, d.Id(), err)
	}

	diag := expandOperations(ctx, conn, []types.Operation{*resp.Operation}, types.OperationTypeDeleteDomain, ResNameDomainEntry, d.Id())

	if diag != nil {
		return diag
	}

	return diags
}
