package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func FindContainerServiceDeploymentByVersion(ctx context.Context, conn *lightsail.Client, serviceName string, version int) (*types.ContainerServiceDeployment, error) {
	input := &lightsail.GetContainerServiceDeploymentsInput{
		ServiceName: aws.String(serviceName),
	}

	output, err := conn.GetContainerServiceDeployments(ctx, input)

	if IsANotFoundError(err) {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: input,
		}
	}

	if err != nil {
		return nil, err
	}

	if output == nil || len(output.Deployments) == 0 {
		return nil, tfresource.NewEmptyResultError(input)
	}

	var result types.ContainerServiceDeployment

	for _, deployment := range output.Deployments {
		if reflect.DeepEqual(deployment, types.ContainerServiceDeployment{}) {
			continue
		}

		if int(aws.ToInt32(deployment.Version)) == version {
			result = deployment
			break
		}
	}

	if reflect.DeepEqual(result, types.ContainerServiceDeployment{}) {
		return nil, &retry.NotFoundError{
			Message:     "Empty result",
			LastRequest: input,
		}
	}

	return &result, nil
}
