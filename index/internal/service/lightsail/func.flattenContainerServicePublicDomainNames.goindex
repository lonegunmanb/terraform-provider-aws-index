package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"log"
	"reflect"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenContainerServicePublicDomainNames(domainNames map[string][]string) []any {
	if domainNames == nil {
		return []any{}
	}

	var rawCertificates []any

	for certName, domains := range domainNames {
		rawCertificate := map[string]any{
			"certificate_name": certName,
			"domain_names":     domains,
		}

		rawCertificates = append(rawCertificates, rawCertificate)
	}

	return []any{
		map[string]any{
			names.AttrCertificate: rawCertificates,
		},
	}
}
