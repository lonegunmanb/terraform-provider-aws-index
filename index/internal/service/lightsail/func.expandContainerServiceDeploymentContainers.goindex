package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strconv"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContainerServiceDeploymentContainers(tfList []any) map[string]types.Container {
	if len(tfList) == 0 {
		return map[string]types.Container{}
	}

	result := make(map[string]types.Container)

	for _, tfListRaw := range tfList {
		tfMap, ok := tfListRaw.(map[string]any)
		if !ok {
			continue
		}

		containerName := tfMap["container_name"].(string)

		container := types.Container{
			Image: aws.String(tfMap["image"].(string)),
		}

		if v, ok := tfMap["command"].([]any); ok && len(v) > 0 {
			container.Command = aws.ToStringSlice(flex.ExpandStringList(v))
		}

		if v, ok := tfMap[names.AttrEnvironment].(map[string]any); ok && len(v) > 0 {
			container.Environment = aws.ToStringMap(flex.ExpandStringMap(v))
		}

		if v, ok := tfMap["ports"].(map[string]any); ok && len(v) > 0 {
			container.Ports = expandContainerServiceProtocol(v)
		}

		result[containerName] = container
	}

	return result
}
