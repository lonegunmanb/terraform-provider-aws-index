package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPortInfo(tfMap map[string]any) types.PortInfo {
	// if tfMap == nil {
	// 	return nil
	// }

	apiObject := types.PortInfo{
		FromPort: int32(tfMap["from_port"].(int)),
		ToPort:   int32(tfMap["to_port"].(int)),
		Protocol: types.NetworkProtocol(tfMap[names.AttrProtocol].(string)),
	}

	if v, ok := tfMap["cidrs"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.Cidrs = aws.ToStringSlice(flex.ExpandStringSet(v))
	}

	if v, ok := tfMap["cidr_list_aliases"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.CidrListAliases = aws.ToStringSlice(flex.ExpandStringSet(v))
	}

	if v, ok := tfMap["ipv6_cidrs"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.Ipv6Cidrs = aws.ToStringSlice(flex.ExpandStringSet(v))
	}

	return apiObject
}
