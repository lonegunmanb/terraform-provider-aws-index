package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBucketAccessKeyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	in := lightsail.CreateBucketAccessKeyInput{
		BucketName: aws.String(d.Get(names.AttrBucketName).(string)),
	}

	out, err := conn.CreateBucketAccessKey(ctx, &in)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeCreateBucketAccessKey), ResBucketAccessKey, d.Get(names.AttrBucketName).(string), err)
	}

	diag := expandOperations(ctx, conn, out.Operations, types.OperationTypeCreateBucketAccessKey, ResBucketAccessKey, d.Get(names.AttrBucketName).(string))

	if diag != nil {
		return diag
	}

	idParts := []string{d.Get(names.AttrBucketName).(string), *out.AccessKey.AccessKeyId}
	id, err := flex.FlattenResourceId(idParts, BucketAccessKeyIdPartsCount, false)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionFlatteningResourceId, ResBucketAccessKey, d.Get(names.AttrBucketName).(string), err)
	}

	d.SetId(id)
	d.Set("secret_access_key", out.AccessKey.SecretAccessKey)

	return append(diags, resourceBucketAccessKeyRead(ctx, d, meta)...)
}
