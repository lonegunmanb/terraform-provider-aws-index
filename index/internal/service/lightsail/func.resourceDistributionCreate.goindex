package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDistributionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)

	in := &lightsail.CreateDistributionInput{
		BundleId:             aws.String(d.Get("bundle_id").(string)),
		DefaultCacheBehavior: expandCacheBehavior(d.Get("default_cache_behavior").([]any)[0].(map[string]any)),
		DistributionName:     aws.String(d.Get(names.AttrName).(string)),
		Origin:               expandInputOrigin(d.Get("origin").([]any)[0].(map[string]any)),
		Tags:                 getTagsIn(ctx),
	}

	if v, ok := d.GetOk("cache_behavior_settings"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.CacheBehaviorSettings = expandCacheSettings(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("cache_behavior"); ok && v.(*schema.Set).Len() > 0 {
		in.CacheBehaviors = expandCacheBehaviorsPerPath(v.(*schema.Set).List())
	}

	if v, ok := d.GetOk(names.AttrIPAddressType); ok {
		in.IpAddressType = types.IpAddressType(v.(string))
	}

	if v, ok := d.GetOk("certificate_name"); ok {
		in.CertificateName = aws.String(v.(string))
	}

	out, err := conn.CreateDistribution(ctx, in)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionCreating, ResNameDistribution, d.Get(names.AttrName).(string), err)
	}

	if out == nil || out.Distribution == nil {
		return create.AppendDiagError(diags, names.Lightsail, create.ErrActionCreating, ResNameDistribution, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	id := aws.ToString(out.Distribution.Name)

	diag := expandOperation(ctx, conn, *out.Operation, types.OperationTypeCreateDistribution, ResNameDistribution, id)

	if diag != nil {
		return diag
	}

	d.SetId(id)

	isEnabled := d.Get("is_enabled").(bool)

	if !isEnabled {
		updateIn := &lightsail.UpdateDistributionInput{
			DistributionName: aws.String(id),
			IsEnabled:        aws.Bool(isEnabled),
		}
		updateOut, err := conn.UpdateDistribution(ctx, updateIn)

		if err != nil {
			return create.AppendDiagError(diags, names.Lightsail, create.ErrActionUpdating, ResNameDistribution, d.Id(), err)
		}

		diagUpdate := expandOperation(ctx, conn, *updateOut.Operation, types.OperationTypeUpdateDistribution, ResNameDistribution, d.Id())

		if diagUpdate != nil {
			return diagUpdate
		}
	}

	return append(diags, resourceDistributionRead(ctx, d, meta)...)
}
