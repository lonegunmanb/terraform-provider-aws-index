package github.com/hashicorp/terraform-provider-aws/internal/service/lightsail
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/lightsail/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainEntryCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).LightsailClient(ctx)
	name := d.Get(names.AttrName).(string)
	req := &lightsail.CreateDomainEntryInput{
		DomainName: aws.String(d.Get(names.AttrDomainName).(string)),

		DomainEntry: &types.DomainEntry{
			IsAlias: aws.Bool(d.Get("is_alias").(bool)),
			Name:    aws.String(expandDomainEntryName(name, d.Get(names.AttrDomainName).(string))),
			Target:  aws.String(d.Get(names.AttrTarget).(string)),
			Type:    aws.String(d.Get(names.AttrType).(string)),
		},
	}

	resp, err := conn.CreateDomainEntry(ctx, req)

	if err != nil {
		return create.AppendDiagError(diags, names.Lightsail, string(types.OperationTypeCreateDomain), ResNameDomainEntry, name, err)
	}

	diag := expandOperations(ctx, conn, []types.Operation{*resp.Operation}, types.OperationTypeCreateDomain, ResNameDomainEntry, name)

	if diag != nil {
		return diag
	}

	// Generate an ID
	idParts := []string{
		name,
		d.Get(names.AttrDomainName).(string),
		d.Get(names.AttrType).(string),
		d.Get(names.AttrTarget).(string),
	}

	id, err := flex.FlattenResourceId(idParts, DomainEntryIdPartsCount, true)

	if err != nil {
		return create.AppendDiagError(diags, names.DynamoDB, create.ErrActionFlatteningResourceId, ResNameDomainEntry, d.Get(names.AttrDomainName).(string), err)
	}

	d.SetId(id)

	return append(diags, resourceDomainEntryRead(ctx, d, meta)...)
}
