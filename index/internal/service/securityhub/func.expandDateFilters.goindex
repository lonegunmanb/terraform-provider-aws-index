package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"log"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDateFilters(l []any) []types.DateFilter {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	var dateFilters []types.DateFilter

	for _, item := range l {
		tfMap, ok := item.(map[string]any)
		if !ok {
			continue
		}

		df := types.DateFilter{}

		if v, ok := tfMap["date_range"].([]any); ok && len(v) > 0 && v[0] != nil {
			df.DateRange = expandDateFilterDateRange(v)
		}

		if v, ok := tfMap["end"].(string); ok && v != "" {
			df.End = aws.String(v)
		}

		if v, ok := tfMap["start"].(string); ok && v != "" {
			df.Start = aws.String(v)
		}

		dateFilters = append(dateFilters, df)
	}

	return dateFilters
}
