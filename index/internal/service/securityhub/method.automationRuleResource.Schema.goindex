package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	awstypes "github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *automationRuleResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	const (
		defaultFilterSchemaMaxSize = 20
	)
	response.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrDescription: schema.StringAttribute{
				Required: true,
			},
			names.AttrID: framework.IDAttribute(),
			"is_terminal": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(false),
			},
			"rule_name": schema.StringAttribute{
				Required: true,
			},
			"rule_order": schema.Int64Attribute{
				Required: true,
			},
			"rule_status": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.RuleStatus](),
				Computed:   true,
				Optional:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			names.AttrActions: schema.SetNestedBlock{
				CustomType: fwtypes.NewSetNestedObjectTypeOf[automationRulesActionModel](ctx),
				Validators: []validator.Set{
					setvalidator.IsRequired(),
					setvalidator.SizeAtLeast(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrType: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.AutomationRulesActionType](),
							Optional:   true,
						},
					},
					Blocks: map[string]schema.Block{
						"finding_fields_update": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[automationRulesFindingFieldsUpdateModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"confidence": schema.Int64Attribute{
										Optional: true,
									},
									"criticality": schema.Int64Attribute{
										Optional: true,
									},
									"types": schema.ListAttribute{
										CustomType:  fwtypes.ListOfStringType,
										Optional:    true,
										ElementType: types.StringType,
									},
									"user_defined_fields": schema.MapAttribute{
										CustomType:  fwtypes.MapOfStringType,
										Optional:    true,
										ElementType: types.StringType,
									},
									"verification_state": schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.VerificationState](),
										Optional:   true,
									},
								},
								Blocks: map[string]schema.Block{
									"note": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[noteUpdateModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"text": schema.StringAttribute{
													Required: true,
												},
												"updated_by": schema.StringAttribute{
													Required: true,
												},
											},
										},
									},
									"related_findings": schema.SetNestedBlock{
										CustomType: fwtypes.NewSetNestedObjectTypeOf[relatedFindingModel](ctx),
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												names.AttrID: schema.StringAttribute{
													Required: true,
												},
												"product_arn": schema.StringAttribute{
													CustomType: fwtypes.ARNType,
													Required:   true,
												},
											},
										},
									},
									"severity": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[severityUpdateModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"label": schema.StringAttribute{
													CustomType: fwtypes.StringEnumType[awstypes.SeverityLabel](),
													Optional:   true,
													Computed:   true,
												},
												"product": schema.Float64Attribute{
													Optional: true,
												},
											},
										},
									},
									"workflow": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[workflowUpdateModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												names.AttrStatus: schema.StringAttribute{
													CustomType: fwtypes.StringEnumType[awstypes.WorkflowStatus](),
													Optional:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"criteria": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[automationRulesFindingFiltersModel](ctx),
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtLeast(1),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						names.AttrAWSAccountID:               stringFilterSchemaFramework(ctx, 100), //nolint:mnd // 100 is the maximum number of items
						"aws_account_name":                   stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"company_name":                       stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"compliance_associated_standards_id": stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"compliance_security_control_id":     stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"compliance_status":                  stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"confidence":                         numberFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						names.AttrCreatedAt:                  dateFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"criticality":                        numberFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						names.AttrDescription:                stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"first_observed_at":                  dateFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"generator_id":                       stringFilterSchemaFramework(ctx, 100), //nolint:mnd // 100 is the maximum number of items
						names.AttrID:                         stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"last_observed_at":                   dateFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"note_text":                          stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"note_updated_at":                    dateFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"note_updated_by":                    stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"product_arn":                        stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"product_name":                       stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"record_state":                       stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"related_findings_id":                stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"related_findings_product_arn":       stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"resource_application_arn":           stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"resource_application_name":          stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"resource_details_other":             mapFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						names.AttrResourceID:                 stringFilterSchemaFramework(ctx, 100), //nolint:mnd // 100 is the maximum number of items
						"resource_partition":                 stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"resource_region":                    stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						names.AttrResourceTags:               mapFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						names.AttrResourceType:               stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"severity_label":                     stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"source_url":                         stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"title":                              stringFilterSchemaFramework(ctx, 100), //nolint:mnd // 100 is the maximum number of items
						names.AttrType:                       stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"updated_at":                         dateFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"user_defined_fields":                mapFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"verification_state":                 stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
						"workflow_status":                    stringFilterSchemaFramework(ctx, defaultFilterSchemaMaxSize),
					},
				},
			},
		},
	}
}
