package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"errors"
	"log"
	"math"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationPolicy() *schema.Resource {
	return &schema.Resource{
		CreateWithoutTimeout: resourceConfigurationPolicyCreate,
		ReadWithoutTimeout:   resourceConfigurationPolicyRead,
		UpdateWithoutTimeout: resourceConfigurationPolicyUpdate,
		DeleteWithoutTimeout: resourceConfigurationPolicyDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		SchemaFunc: func() map[string]*schema.Schema {
			customParameterResource := func() *schema.Resource {
				return &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bool": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeBool,
									},
								},
							},
						},
						"double": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeFloat,
									},
								},
							},
						},
						"enum": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeString,
									},
								},
							},
						},
						"enum_list": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeList,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"int": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required:     true,
										Type:         schema.TypeInt,
										ValidateFunc: validation.IntAtMost(math.MaxInt32),
									},
								},
							},
						},
						"int_list": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeList,
										Elem: &schema.Schema{
											Type:         schema.TypeInt,
											ValidateFunc: validation.IntAtMost(math.MaxInt32),
										},
									},
								},
							},
						},
						names.AttrName: {
							Type:         schema.TypeString,
							Required:     true,
							ValidateFunc: validation.StringIsNotEmpty,
						},
						"string": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeString,
									},
								},
							},
						},
						"string_list": {
							Type:     schema.TypeList,
							MaxItems: 1,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									names.AttrValue: {
										Required: true,
										Type:     schema.TypeList,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"value_type": {
							Type:             schema.TypeString,
							Required:         true,
							ValidateDiagFunc: enum.Validate[types.ParameterValueType](),
						},
					},
				}
			}

			return map[string]*schema.Schema{
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"configuration_policy": {
					Type:     schema.TypeList,
					Required: true,
					MaxItems: 1,
					Elem: &schema.Resource{
						Schema: map[string]*schema.Schema{
							"enabled_standard_arns": {
								Type:     schema.TypeSet,
								Optional: true,
								Elem: &schema.Schema{
									Type:         schema.TypeString,
									ValidateFunc: verify.ValidARN,
								},
							},
							"security_controls_configuration": {
								Type:     schema.TypeList,
								Optional: true,
								MaxItems: 1,
								Elem: &schema.Resource{
									Schema: map[string]*schema.Schema{
										"disabled_control_identifiers": {
											Type:     schema.TypeSet,
											Optional: true,
											Elem: &schema.Schema{
												Type:         schema.TypeString,
												ValidateFunc: validation.StringIsNotEmpty,
											},
											ConflictsWith: []string{
												"configuration_policy.0.security_controls_configuration.0.enabled_control_identifiers",
											},
										},
										"enabled_control_identifiers": {
											Type:     schema.TypeSet,
											Optional: true,
											Elem: &schema.Schema{
												Type:         schema.TypeString,
												ValidateFunc: validation.StringIsNotEmpty,
											},
											ConflictsWith: []string{
												"configuration_policy.0.security_controls_configuration.0.disabled_control_identifiers",
											},
										},
										"security_control_custom_parameter": {
											Type:     schema.TypeList,
											Optional: true,
											Elem: &schema.Resource{
												Schema: map[string]*schema.Schema{
													names.AttrParameter: {
														Type:     schema.TypeSet,
														Required: true,
														MinItems: 1,
														Elem:     customParameterResource(),
													},
													"security_control_id": {
														Type:         schema.TypeString,
														Required:     true,
														ValidateFunc: validation.StringIsNotEmpty,
													},
												},
											},
										},
									},
								},
							},
							"service_enabled": {
								Type:     schema.TypeBool,
								Required: true,
							},
						},
					},
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Optional: true,
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
					ValidateFunc: validation.StringMatch(
						regexache.MustCompile(`[A-Za-z0-9\-\.!*/]+`),
						"Only alphanumeric characters and the following ASCII characters are permitted: -, ., !, *, /",
					),
				},
			}
		},
	}
}
