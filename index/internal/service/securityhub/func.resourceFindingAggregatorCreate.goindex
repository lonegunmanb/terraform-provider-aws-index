package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceFindingAggregatorCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	linkingMode := d.Get("linking_mode").(string)
	input := &securityhub.CreateFindingAggregatorInput{
		RegionLinkingMode: aws.String(linkingMode),
	}

	if v, ok := d.GetOk("specified_regions"); ok && v.(*schema.Set).Len() > 0 && (linkingMode == linkingModeAllRegionsExceptSpecified || linkingMode == linkingModeSpecifiedRegions) {
		input.Regions = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	output, err := conn.CreateFindingAggregator(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Security Hub Finding Aggregator: %s", err)
	}

	d.SetId(aws.ToString(output.FindingAggregatorArn))

	return append(diags, resourceFindingAggregatorRead(ctx, d, meta)...)
}
