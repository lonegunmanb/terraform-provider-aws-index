package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStandardsControlRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	standardsSubscriptionARN, err := standardsControlARNToStandardsSubscriptionARN(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	control, err := findStandardsControlByTwoPartKey(ctx, conn, standardsSubscriptionARN, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Security Hub Standards Control (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Security Hub Standards Control (%s): %s", d.Id(), err)
	}

	d.Set("control_id", control.ControlId)
	d.Set("control_status", control.ControlStatus)
	d.Set("control_status_updated_at", control.ControlStatusUpdatedAt.Format(time.RFC3339))
	d.Set(names.AttrDescription, control.Description)
	d.Set("disabled_reason", control.DisabledReason)
	d.Set("related_requirements", control.RelatedRequirements)
	d.Set("remediation_url", control.RemediationUrl)
	d.Set("severity_rating", control.SeverityRating)
	d.Set("standards_control_arn", control.StandardsControlArn)
	d.Set("title", control.Title)

	return diags
}
