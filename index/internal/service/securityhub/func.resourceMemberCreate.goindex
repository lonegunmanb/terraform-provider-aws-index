package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMemberCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	accountID := d.Get(names.AttrAccountID).(string)
	input := &securityhub.CreateMembersInput{
		AccountDetails: []types.AccountDetails{{
			AccountId: aws.String(accountID),
		}},
	}

	if v, ok := d.GetOk(names.AttrEmail); ok {
		input.AccountDetails[0].Email = aws.String(v.(string))
	}

	output, err := conn.CreateMembers(ctx, input)

	if err == nil && output != nil {
		err = unprocessedAccountsError(output.UnprocessedAccounts)
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Security Hub Member (%s): %s", accountID, err)
	}

	d.SetId(accountID)

	if d.Get("invite").(bool) {
		input := &securityhub.InviteMembersInput{
			AccountIds: []string{d.Id()},
		}

		output, err := conn.InviteMembers(ctx, input)

		if err == nil && output != nil {
			err = unprocessedAccountsError(output.UnprocessedAccounts)
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "inviting Security Hub Member (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceMemberRead(ctx, d, meta)...)
}
