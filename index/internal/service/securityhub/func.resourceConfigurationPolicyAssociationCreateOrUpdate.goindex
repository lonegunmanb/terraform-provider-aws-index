package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceConfigurationPolicyAssociationCreateOrUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	targetID := d.Get("target_id").(string)
	input := &securityhub.StartConfigurationPolicyAssociationInput{
		ConfigurationPolicyIdentifier: aws.String(d.Get("policy_id").(string)),
		Target:                        expandTarget(targetID),
	}

	_, err := conn.StartConfigurationPolicyAssociation(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "starting Security Hub Configuration Policy Association (%s): %s", targetID, err)
	}

	timeout := d.Timeout(schema.TimeoutCreate)
	if d.IsNewResource() {
		d.SetId(targetID)
	} else {
		timeout = d.Timeout(schema.TimeoutUpdate)
	}

	if _, err := waitConfigurationPolicyAssociationSucceeded(ctx, conn, d.Id(), timeout); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Security Hub Configuration Policy Association (%s) success: %s", targetID, err)
	}

	return append(diags, resourceConfigurationPolicyAssociationRead(ctx, d, meta)...)
}
