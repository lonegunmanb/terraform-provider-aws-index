package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceInviteAccepterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	masterID := d.Get("master_id").(string)
	invitation, err := findInvitation(ctx, conn, &securityhub.ListInvitationsInput{}, func(v *types.Invitation) bool {
		return aws.ToString(v.AccountId) == masterID
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Security Hub Invitation (%s): %s", masterID, err)
	}

	invitationID := aws.ToString(invitation.InvitationId)
	input := &securityhub.AcceptInvitationInput{
		InvitationId: aws.String(invitationID),
		MasterId:     aws.String(masterID),
	}

	_, err = conn.AcceptInvitation(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "accepting Security Hub Invitation (%s): %s", invitationID, err)
	}

	d.SetId(meta.(*conns.AWSClient).AccountID(ctx))

	return append(diags, resourceInviteAccepterRead(ctx, d, meta)...)
}
