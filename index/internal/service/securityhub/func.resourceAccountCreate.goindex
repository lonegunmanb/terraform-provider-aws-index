package github.com/hashicorp/terraform-provider-aws/internal/service/securityhub
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securityhub/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccountCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecurityHubClient(ctx)

	inputC := &securityhub.EnableSecurityHubInput{
		EnableDefaultStandards: aws.Bool(d.Get("enable_default_standards").(bool)),
	}

	if v, ok := d.GetOk("control_finding_generator"); ok {
		inputC.ControlFindingGenerator = types.ControlFindingGenerator(v.(string))
	}

	_, err := conn.EnableSecurityHub(ctx, inputC)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Security Hub Account: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).AccountID(ctx))

	autoEnableControls := d.Get("auto_enable_controls").(bool)
	inputU := &securityhub.UpdateSecurityHubConfigurationInput{
		AutoEnableControls: aws.Bool(autoEnableControls),
	}

	_, err = conn.UpdateSecurityHubConfiguration(ctx, inputU)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Security Hub Account (%s): %s", d.Id(), err)
	}

	arn := accountHubARN(ctx, meta.(*conns.AWSClient))
	const (
		timeout = 1 * time.Minute
	)
	_, err = tfresource.RetryUntilEqual(ctx, timeout, autoEnableControls, func(ctx context.Context) (bool, error) {
		output, err := findHubByARN(ctx, conn, arn)

		if err != nil {
			return false, err
		}

		return aws.ToBool(output.AutoEnableControls), nil
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Security Hub Account (%s) update: %s", d.Id(), err)
	}

	return append(diags, resourceAccountRead(ctx, d, meta)...)
}
