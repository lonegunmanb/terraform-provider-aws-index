package github.com/hashicorp/terraform-provider-aws/internal/service/computeoptimizer
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/computeoptimizer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/computeoptimizer/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *recommendationPreferencesResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	response.Schema = schema.Schema{

		Attributes: map[string]schema.Attribute{
			"enhanced_infrastructure_metrics": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.EnhancedInfrastructureMetrics](),
				Optional:   true,
			},
			names.AttrID: framework.IDAttribute(),
			"inferred_workload_types": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.InferredWorkloadTypesPreference](),
				Optional:   true,
			},
			"look_back_period": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.LookBackPeriodPreference](),
				Optional:   true,
				Computed:   true,
			},
			names.AttrResourceType: schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(enum.Slice(awstypes.ResourceTypeAutoScalingGroup, awstypes.ResourceTypeEc2Instance, awstypes.ResourceTypeRdsDbInstance, awstypes.ResourceTypeAuroraDbClusterStorage)...),
				},
			},
			"savings_estimation_mode": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.SavingsEstimationMode](),
				Optional:   true,
			},
		},
		Blocks: map[string]schema.Block{
			"external_metrics_preference": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[externalMetricsPreferenceModel](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrSource: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.ExternalMetricsSource](),
							Required:   true,
						},
					},
				},
			},
			"preferred_resource": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[preferredResourceModel](ctx),
				NestedObject: schema.NestedBlockObject{
					Validators: []validator.Object{
						objectvalidator.AtLeastOneOf(
							path.MatchRelative().AtParent().AtName("exclude_list"),
							path.MatchRelative().AtParent().AtName("include_list"),
						),
					},
					Attributes: map[string]schema.Attribute{
						"exclude_list": schema.SetAttribute{
							CustomType: fwtypes.SetOfStringType,
							Optional:   true,
							Validators: []validator.Set{
								setvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("include_list")),
								setvalidator.SizeAtMost(1000),
							},
						},
						"include_list": schema.SetAttribute{
							CustomType: fwtypes.SetOfStringType,
							Optional:   true,
							Validators: []validator.Set{
								setvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("exclude_list")),
								setvalidator.SizeAtMost(1000),
							},
						},
						names.AttrName: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.PreferredResourceName](),
							Required:   true,
						},
					},
				},
			},
			names.AttrScope: schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[scopeModel](ctx),
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtLeast(1),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrName: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.ScopeName](),
							Required:   true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
						names.AttrValue: schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
					},
				},
			},
			"utilization_preference": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[utilizationPreferenceModel](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrMetricName: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.CustomizableMetricName](),
							Required:   true,
						},
					},
					Blocks: map[string]schema.Block{
						"metric_parameters": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[customizableMetricParametersModel](ctx),
							Validators: []validator.List{
								listvalidator.IsRequired(),
								listvalidator.SizeAtLeast(1),
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"headroom": schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.CustomizableMetricHeadroom](),
										Required:   true,
									},
									"threshold": schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.CustomizableMetricThreshold](),
										Optional:   true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
