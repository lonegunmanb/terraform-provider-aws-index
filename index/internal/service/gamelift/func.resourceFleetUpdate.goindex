package github.com/hashicorp/terraform-provider-aws/internal/service/gamelift
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceFleetUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)

	if d.HasChanges(names.AttrDescription, "metric_groups", names.AttrName, "new_game_session_protection_policy", "resource_creation_limit_policy") {
		input := &gamelift.UpdateFleetAttributesInput{
			Description:                    aws.String(d.Get(names.AttrDescription).(string)),
			FleetId:                        aws.String(d.Id()),
			MetricGroups:                   flex.ExpandStringValueList(d.Get("metric_groups").([]any)),
			Name:                           aws.String(d.Get(names.AttrName).(string)),
			NewGameSessionProtectionPolicy: awstypes.ProtectionPolicy(d.Get("new_game_session_protection_policy").(string)),
			ResourceCreationLimitPolicy:    expandResourceCreationLimitPolicy(d.Get("resource_creation_limit_policy").([]any)),
		}

		_, err := conn.UpdateFleetAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating GameLift Fleet (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange("ec2_inbound_permission") {
		o, n := d.GetChange("ec2_inbound_permission")
		authorizations, revocations := diffPortSettings(o.(*schema.Set).List(), n.(*schema.Set).List())
		input := &gamelift.UpdateFleetPortSettingsInput{
			FleetId:                         aws.String(d.Id()),
			InboundPermissionAuthorizations: authorizations,
			InboundPermissionRevocations:    revocations,
		}

		_, err := conn.UpdateFleetPortSettings(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating GameLift Fleet (%s) port settings: %s", d.Id(), err)
		}
	}

	if d.HasChange("runtime_configuration") {
		input := &gamelift.UpdateRuntimeConfigurationInput{
			FleetId:              aws.String(d.Id()),
			RuntimeConfiguration: expandRuntimeConfiguration(d.Get("runtime_configuration").([]any)),
		}

		_, err := conn.UpdateRuntimeConfiguration(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating GameLift Fleet (%s) runtime configuration: %s", d.Id(), err)
		}
	}

	return append(diags, resourceFleetRead(ctx, d, meta)...)
}
