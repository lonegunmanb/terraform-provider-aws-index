package github.com/hashicorp/terraform-provider-aws/internal/service/gamelift
import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/gamelift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRuntimeConfiguration(tfList []any) *awstypes.RuntimeConfiguration {
	if len(tfList) < 1 {
		return nil
	}

	apiObject := &awstypes.RuntimeConfiguration{}
	tfMap := tfList[0].(map[string]any)

	if v, ok := tfMap["game_session_activation_timeout_seconds"].(int); ok && v > 0 {
		apiObject.GameSessionActivationTimeoutSeconds = aws.Int32(int32(v))
	}

	if v, ok := tfMap["max_concurrent_game_session_activations"].(int); ok && v > 0 {
		apiObject.MaxConcurrentGameSessionActivations = aws.Int32(int32(v))
	}

	if v, ok := tfMap["server_process"]; ok {
		apiObject.ServerProcesses = expandServerProcesses(v.([]any))
	}

	return apiObject
}
