package github.com/hashicorp/terraform-provider-aws/internal/service/gamelift
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	autoscalingtypes "github.com/aws/aws-sdk-go-v2/service/autoscaling/types"
	"github.com/aws/aws-sdk-go-v2/service/gamelift"
	awstypes "github.com/aws/aws-sdk-go-v2/service/gamelift/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfautoscaling "github.com/hashicorp/terraform-provider-aws/internal/service/autoscaling"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGameServerGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GameLiftClient(ctx)
	autoscalingConn := meta.(*conns.AWSClient).AutoScalingClient(ctx)

	gameServerGroup, err := findGameServerGroupByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] GameLift Game Server Group (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading GameLift Game Server Group (%s): %s", d.Id(), err)
	}

	if asgArnParts := strings.Split(aws.ToString(gameServerGroup.AutoScalingGroupArn), "/"); len(asgArnParts) == 2 {
		asgName := asgArnParts[1]
		asg, err := tfautoscaling.FindGroupByName(ctx, autoscalingConn, asgName)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading Auto Scaling Group (%s): %s", asgName, err)
		}

		asgPolicy, err := tfautoscaling.FindScalingPolicyByTwoPartKey(ctx, autoscalingConn, asgName, d.Id())

		switch {
		case tfresource.NotFound(err):
		case err != nil:
			return sdkdiag.AppendErrorf(diags, "reading Auto Scaling Policy (%s/%s): %s", asgName, d.Id(), err)
		}

		if asgPolicy != nil {
			if err := d.Set("auto_scaling_policy", []any{flattenGameServerGroupAutoScalingPolicy(asgPolicy)}); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting auto_scaling_policy: %s", err)
			}
		} else {
			d.Set("auto_scaling_policy", nil)
		}

		if err := d.Set(names.AttrLaunchTemplate, flattenAutoScalingLaunchTemplateSpecification(asg.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting launch_template: %s", err)
		}
		d.Set("max_size", asg.MaxSize)
		d.Set("min_size", asg.MinSize)
	}

	d.Set(names.AttrARN, gameServerGroup.GameServerGroupArn)
	d.Set("auto_scaling_group_arn", gameServerGroup.AutoScalingGroupArn)
	d.Set("balancing_strategy", gameServerGroup.BalancingStrategy)
	d.Set("game_server_group_name", gameServerGroup.GameServerGroupName)
	d.Set("game_server_protection_policy", gameServerGroup.GameServerProtectionPolicy)
	if err := d.Set("instance_definition", flattenInstanceDefinitions(gameServerGroup.InstanceDefinitions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting instance_definition: %s", err)
	}
	d.Set(names.AttrRoleARN, gameServerGroup.RoleArn)

	return diags
}
