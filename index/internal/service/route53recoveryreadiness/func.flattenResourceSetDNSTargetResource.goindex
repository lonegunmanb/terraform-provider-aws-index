package github.com/hashicorp/terraform-provider-aws/internal/service/route53recoveryreadiness
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenResourceSetDNSTargetResource(dtresource *awstypes.DNSTargetResource) []map[string]any {
	if dtresource == nil {
		return nil
	}

	dtr := make(map[string]any)
	dtr[names.AttrDomainName] = dtresource.DomainName
	dtr["hosted_zone_arn"] = dtresource.HostedZoneArn
	dtr["record_set_id"] = dtresource.RecordSetId
	dtr["record_type"] = dtresource.RecordType
	dtr["target_resource"] = flattenResourceSetTargetResource(dtresource.TargetResource)
	result := []map[string]any{dtr}
	return result
}
