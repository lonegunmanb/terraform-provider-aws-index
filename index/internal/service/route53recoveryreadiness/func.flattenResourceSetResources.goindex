package github.com/hashicorp/terraform-provider-aws/internal/service/route53recoveryreadiness
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenResourceSetResources(resources []awstypes.Resource) []map[string]any {
	rs := make([]map[string]any, 0)
	for _, resource := range resources {
		r := map[string]any{}
		if v := resource.ResourceArn; v != nil {
			r[names.AttrResourceARN] = v
		}
		if v := resource.ReadinessScopes; v != nil {
			r["readiness_scopes"] = v
		}
		if v := resource.ComponentId; v != nil {
			r["component_id"] = v
		}
		if v := resource.DnsTargetResource; v != nil {
			r["dns_target_resource"] = flattenResourceSetDNSTargetResource(v)
		}
		rs = append(rs, r)
	}
	return rs
}
