package github.com/hashicorp/terraform-provider-aws/internal/service/route53recoveryreadiness
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandResourceSetResources(rs []any) []awstypes.Resource {
	var resources []awstypes.Resource

	for _, r := range rs {
		r := r.(map[string]any)
		resource := awstypes.Resource{}
		if v, ok := r[names.AttrResourceARN]; ok && v.(string) != "" {
			resource.ResourceArn = aws.String(v.(string))
		}
		if v, ok := r["readiness_scopes"]; ok {
			resource.ReadinessScopes = flex.ExpandStringValueList(v.([]any))
		}
		if v, ok := r["component_id"]; ok {
			resource.ComponentId = aws.String(v.(string))
		}
		if v, ok := r["dns_target_resource"]; ok {
			resource.DnsTargetResource = expandResourceSetDNSTargetResource(v.([]any))
		}
		resources = append(resources, resource)
	}
	return resources
}
