package github.com/hashicorp/terraform-provider-aws/internal/service/securitylake
import (
	"context"
	"errors"
	"fmt"
	"net/url"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/securitylake"
	awstypes "github.com/aws/aws-sdk-go-v2/service/securitylake/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *subscriberNotificationResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new subscriberNotificationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().SecurityLakeClient(ctx)

	if !old.Configuration.Equal(new.Configuration) {
		var configurationData []subscriberNotificationResourceConfigurationModel
		response.Diagnostics.Append(new.Configuration.ElementsAs(ctx, &configurationData, false)...)
		if response.Diagnostics.HasError() {
			return
		}

		configuration, d := expandSubscriberNotificationResourceConfiguration(ctx, configurationData)
		response.Diagnostics.Append(d...)
		if response.Diagnostics.HasError() {
			return
		}

		in := &securitylake.UpdateSubscriberNotificationInput{
			SubscriberId:  new.SubscriberID.ValueStringPointer(),
			Configuration: configuration,
		}

		output, err := conn.UpdateSubscriberNotification(ctx, in)
		if err != nil {
			response.Diagnostics.AddError(
				create.ProblemStandardMessage(names.SecurityLake, create.ErrActionUpdating, ResNameSubscriberNotification, new.ID.String(), err),
				err.Error(),
			)
			return
		}

		new.EndpointID = fwflex.StringToFramework(ctx, output.SubscriberEndpoint)
		new.SubscriberEndpoint = fwflex.StringToFramework(ctx, output.SubscriberEndpoint)
		id, err := new.setID()
		if err != nil {
			response.Diagnostics.AddError(
				create.ProblemStandardMessage(names.SecurityLake, create.ErrActionUpdating, ResNameSubscriberNotification, new.ID.String(), err),
				err.Error(),
			)
			return
		}
		new.ID = types.StringValue(id)
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
