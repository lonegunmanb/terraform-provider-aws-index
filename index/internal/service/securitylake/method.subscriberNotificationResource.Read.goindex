package github.com/hashicorp/terraform-provider-aws/internal/service/securitylake
import (
	"context"
	"errors"
	"fmt"
	"net/url"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/securitylake"
	awstypes "github.com/aws/aws-sdk-go-v2/service/securitylake/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *subscriberNotificationResource) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data subscriberNotificationResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	if err := data.initFromID(); err != nil {
		response.Diagnostics.AddError("parsing resource ID", err.Error())
		return
	}

	conn := r.Meta().SecurityLakeClient(ctx)

	output, err := findSubscriberNotificationBySubscriberID(ctx, conn, data.SubscriberID.ValueString())

	if tfresource.NotFound(err) {
		response.State.RemoveResource(ctx)
		return
	}
	if err != nil {
		response.Diagnostics.AddError("creating Security Lake Subscriber Notification", err.Error())
		return
	}

	data.EndpointID = fwflex.StringToFramework(ctx, output.SubscriberEndpoint)
	data.SubscriberEndpoint = fwflex.StringToFramework(ctx, output.SubscriberEndpoint)
	data.Configuration = refreshConfiguration(ctx, data.Configuration, output, &response.Diagnostics)
	if response.Diagnostics.HasError() {
		return
	}

	// For HTTPS Configurations, only the `endpoint` value can be read back from the Security Lake API.
	// `authorization_api_key_name` is configured on the EventBridge API Destination created by Security Lake
	// `authorization_api_key_value` is configured in the Secrets Manager Secret used by the EventBridge API Destination
	// Setting `http_method` does not seem to work, and it is not a parameter when using the Console, nor does it affect the EventBridge API Destination
	// `target_role_arn` is used in an unknown location

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
