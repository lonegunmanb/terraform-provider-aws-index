package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (s blueGreenDeploymentSweeper) Delete(ctx context.Context, optFns ...tfresource.OptionsFunc) error {
	input := rds.DeleteBlueGreenDeploymentInput{
		BlueGreenDeploymentIdentifier: aws.String(s.id),
	}
	_, err := s.conn.DeleteBlueGreenDeployment(ctx, &input)

	if err != nil {
		return fmt.Errorf("deleting RDS Blue/Green Deployment (%s): %w", s.id, err)
	}

	const (
		timeout = 10 * time.Minute
	)
	if _, err := waitBlueGreenDeploymentDeleted(ctx, s.conn, s.id, timeout); err != nil {
		return fmt.Errorf("waiting for RDS Blue/Green Deployment (%s) delete: %w", s.id, err)
	}

	return nil
}
