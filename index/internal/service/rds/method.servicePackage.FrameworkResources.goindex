package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newClusterSnapshotCopyResource,
			TypeName: "aws_rds_cluster_snapshot_copy",
			Name:     "Cluster Snapshot Copy",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: "db_cluster_snapshot_arn",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newExportTaskResource,
			TypeName: "aws_rds_export_task",
			Name:     "Export Task",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newInstanceStateResource,
			TypeName: "aws_rds_instance_state",
			Name:     "Instance State",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newIntegrationResource,
			TypeName: "aws_rds_integration",
			Name:     "Integration",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalARNIdentity(inttypes.WithIdentityDuplicateAttrs(names.AttrID)),
			Import: inttypes.FrameworkImport{
				WrappedImport: true,
			},
		},
		{
			Factory:  newShardGroupResource,
			TypeName: "aws_rds_shard_group",
			Name:     "Shard Group",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
