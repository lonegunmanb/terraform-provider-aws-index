package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfio "github.com/hashicorp/terraform-provider-aws/internal/io"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCustomDBEngineVersionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	engine, engineVersion, err := customEngineDBVersionParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	out, err := findCustomDBEngineVersionByTwoPartKey(ctx, conn, engine, engineVersion)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] RDS Custom DB Engine Version (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading RDS Custom DB Engine Version (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, out.DBEngineVersionArn)
	if out.CreateTime != nil {
		d.Set(names.AttrCreateTime, out.CreateTime.Format(time.RFC3339))
	}
	d.Set("database_installation_files_s3_bucket_name", out.DatabaseInstallationFilesS3BucketName)
	d.Set("database_installation_files_s3_prefix", out.DatabaseInstallationFilesS3Prefix)
	d.Set("db_parameter_group_family", out.DBParameterGroupFamily)
	d.Set(names.AttrDescription, out.DBEngineVersionDescription)
	d.Set(names.AttrEngine, out.Engine)
	d.Set(names.AttrEngineVersion, out.EngineVersion)
	d.Set("image_id", out.Image.ImageId)
	d.Set(names.AttrKMSKeyID, out.KMSKeyId)
	d.Set("major_engine_version", out.MajorEngineVersion)
	d.Set("manifest_computed", out.CustomDBEngineVersionManifest)
	d.Set(names.AttrStatus, out.Status)

	setTagsOut(ctx, out.TagList)

	return diags
}
