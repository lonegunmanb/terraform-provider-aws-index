package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceSubnetGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	v, err := findDBSubnetGroupByName(ctx, conn, d.Get(names.AttrName).(string))

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("RDS DB Subnet Group", err))
	}

	d.SetId(aws.ToString(v.DBSubnetGroupName))
	d.Set(names.AttrARN, v.DBSubnetGroupArn)
	d.Set(names.AttrDescription, v.DBSubnetGroupDescription)
	d.Set(names.AttrName, v.DBSubnetGroupName)
	d.Set(names.AttrStatus, v.SubnetGroupStatus)
	d.Set(names.AttrSubnetIDs, tfslices.ApplyToAll(v.Subnets, func(v types.Subnet) string {
		return aws.ToString(v.SubnetIdentifier)
	}))
	d.Set("supported_network_types", v.SupportedNetworkTypes)
	d.Set(names.AttrVPCID, v.VpcId)

	return diags
}
