package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandScalingConfiguration(tfMap map[string]any) *types.ScalingConfiguration {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.ScalingConfiguration{}

	if v, ok := tfMap["auto_pause"].(bool); ok {
		apiObject.AutoPause = aws.Bool(v)
	}

	if v, ok := tfMap[names.AttrMaxCapacity].(int); ok {
		apiObject.MaxCapacity = aws.Int32(int32(v))
	}

	if v, ok := tfMap["min_capacity"].(int); ok {
		apiObject.MinCapacity = aws.Int32(int32(v))
	}

	if v, ok := tfMap["seconds_before_timeout"].(int); ok {
		apiObject.SecondsBeforeTimeout = aws.Int32(int32(v))
	}

	if v, ok := tfMap["seconds_until_auto_pause"].(int); ok {
		apiObject.SecondsUntilAutoPause = aws.Int32(int32(v))
	}

	if v, ok := tfMap["timeout_action"].(string); ok && v != "" {
		apiObject.TimeoutAction = aws.String(v)
	}

	return apiObject
}
