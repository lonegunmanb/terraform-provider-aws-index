package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"sort"

	"github.com/YakDriver/go-version"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceOrderableInstance() *schema.Resource {
	return &schema.Resource{
		ReadWithoutTimeout: dataSourceOrderableInstanceRead,

		Schema: map[string]*schema.Schema{
			"availability_zone_group": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			names.AttrAvailabilityZones: {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			names.AttrEngine: {
				Type:     schema.TypeString,
				Required: true,
			},
			"engine_latest_version": {
				Type:     schema.TypeBool,
				Optional: true,
			},
			names.AttrEngineVersion: {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"instance_class": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"license_model": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"max_iops_per_db_instance": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"max_iops_per_gib": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"max_storage_size": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"min_iops_per_db_instance": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"min_iops_per_gib": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"min_storage_size": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"multi_az_capable": {
				Type:     schema.TypeBool,
				Computed: true,
			},
			"outpost_capable": {
				Type:     schema.TypeBool,
				Computed: true,
			},
			"preferred_engine_versions": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"preferred_instance_classes": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"read_replica_capable": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			names.AttrStorageType: {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"supported_engine_modes": {
				Type:     schema.TypeList,
				Computed: true,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"supported_network_types": {
				Type:     schema.TypeList,
				Computed: true,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},
			"supports_clusters": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_enhanced_monitoring": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_global_databases": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_iam_database_authentication": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_iops": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_kerberos_authentication": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_multi_az": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_performance_insights": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_storage_autoscaling": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"supports_storage_encryption": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"vpc": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
		},
	}
}
