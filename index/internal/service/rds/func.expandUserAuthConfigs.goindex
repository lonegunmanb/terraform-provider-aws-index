package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUserAuthConfigs(tfList []any) []types.UserAuthConfig {
	if len(tfList) == 0 {
		return nil
	}

	apiObjects := make([]types.UserAuthConfig, 0, len(tfList))

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := types.UserAuthConfig{}

		if v, ok := tfMap["auth_scheme"].(string); ok && v != "" {
			apiObject.AuthScheme = types.AuthScheme(v)
		}

		if v, ok := tfMap["client_password_auth_type"].(string); ok && v != "" {
			apiObject.ClientPasswordAuthType = types.ClientPasswordAuthType(v)
		}

		if v, ok := tfMap[names.AttrDescription].(string); ok && v != "" {
			apiObject.Description = aws.String(v)
		}

		if v, ok := tfMap["iam_auth"].(string); ok && v != "" {
			apiObject.IAMAuth = types.IAMAuthMode(v)
		}

		if v, ok := tfMap["secret_arn"].(string); ok && v != "" {
			apiObject.SecretArn = aws.String(v)
		}

		if v, ok := tfMap[names.AttrUsername].(string); ok && v != "" {
			apiObject.UserName = aws.String(v)
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
