package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceReservedOfferingRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	input := &rds.DescribeReservedDBInstancesOfferingsInput{
		DBInstanceClass:    aws.String(d.Get("db_instance_class").(string)),
		Duration:           aws.String(strconv.Itoa(d.Get(names.AttrDuration).(int))),
		MultiAZ:            aws.Bool(d.Get("multi_az").(bool)),
		OfferingType:       aws.String(d.Get("offering_type").(string)),
		ProductDescription: aws.String(d.Get("product_description").(string)),
	}

	// A filter is necessary because the API returns all products where the product description contains
	// the input product description. Sending "mysql" will return "mysql" *and* "aurora-mysql" offerings,
	// causing an error: multiple RDS Reserved Instance Offerings matched
	offering, err := findReservedDBInstancesOffering(ctx, conn, input, func(v *types.ReservedDBInstancesOffering) bool {
		return aws.ToString(v.ProductDescription) == d.Get("product_description").(string) && aws.ToString(v.DBInstanceClass) == d.Get("db_instance_class").(string)
	})
	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("RDS Reserved Instance Offering", err))
	}

	offeringID := aws.ToString(offering.ReservedDBInstancesOfferingId)
	d.SetId(offeringID)
	d.Set("currency_code", offering.CurrencyCode)
	d.Set("db_instance_class", offering.DBInstanceClass)
	d.Set(names.AttrDuration, offering.Duration)
	d.Set("fixed_price", offering.FixedPrice)
	d.Set("multi_az", offering.MultiAZ)
	d.Set("offering_id", offeringID)
	d.Set("offering_type", offering.OfferingType)
	d.Set("product_description", offering.ProductDescription)

	return diags
}
