package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGlobalClusterDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)
	deadline := inttypes.NewDeadline(d.Timeout(schema.TimeoutDelete))

	if d.Get(names.AttrForceDestroy).(bool) {
		log.Printf("[DEBUG] Removing cluster members from RDS Global Cluster: %s", d.Id())

		// The writer cluster must be removed last.
		var writerARN string
		globalClusterMembers := d.Get("global_cluster_members").(*schema.Set)
		if globalClusterMembers.Len() > 0 {
			for _, tfMapRaw := range globalClusterMembers.List() {
				tfMap, ok := tfMapRaw.(map[string]any)
				if !ok {
					continue
				}

				dbClusterARN, ok := tfMap["db_cluster_arn"].(string)
				if !ok {
					continue
				}

				if tfMap["is_writer"].(bool) {
					writerARN = dbClusterARN
					continue
				}

				input := &rds.RemoveFromGlobalClusterInput{
					DbClusterIdentifier:     aws.String(dbClusterARN),
					GlobalClusterIdentifier: aws.String(d.Id()),
				}

				_, err := conn.RemoveFromGlobalCluster(ctx, input)

				if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "is not found in global cluster") {
					continue
				}

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "removing RDS DB Cluster (%s) from RDS Global Cluster (%s): %s", dbClusterARN, d.Id(), err)
				}

				if _, err := waitGlobalClusterMemberRemoved(ctx, conn, dbClusterARN, deadline.Remaining()); err != nil {
					return sdkdiag.AppendErrorf(diags, "waiting for RDS DB Cluster (%s) removal from RDS Global Cluster (%s): %s", dbClusterARN, d.Id(), err)
				}
			}

			input := &rds.RemoveFromGlobalClusterInput{
				DbClusterIdentifier:     aws.String(writerARN),
				GlobalClusterIdentifier: aws.String(d.Id()),
			}

			_, err := conn.RemoveFromGlobalCluster(ctx, input)

			if err != nil {
				if !tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "is not found in global cluster") {
					return sdkdiag.AppendErrorf(diags, "removing RDS DB Cluster (%s) from RDS Global Cluster (%s): %s", writerARN, d.Id(), err)
				}
			}

			if _, err := waitGlobalClusterMemberRemoved(ctx, conn, writerARN, deadline.Remaining()); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for RDS DB Cluster (%s) removal from RDS Global Cluster (%s): %s", writerARN, d.Id(), err)
			}
		}
	}

	log.Printf("[DEBUG] Deleting RDS Global Cluster: %s", d.Id())

	// Allow for eventual consistency
	// InvalidGlobalClusterStateFault: Global Cluster arn:aws:rds::123456789012:global-cluster:tf-acc-test-5618525093076697001-0 is not empty
	const (
		// GlobalClusterClusterDeleteTimeout is the timeout for actual deletion of the cluster
		// This operation will be quick if successful
		globalClusterClusterDeleteTimeout = 5 * time.Minute
	)
	timeout := max(deadline.Remaining(), globalClusterClusterDeleteTimeout)
	_, err := tfresource.RetryWhenIsAErrorMessageContains[any, *types.InvalidGlobalClusterStateFault](ctx, timeout, func(ctx context.Context) (any, error) {
		return conn.DeleteGlobalCluster(ctx, &rds.DeleteGlobalClusterInput{
			GlobalClusterIdentifier: aws.String(d.Id()),
		})
	}, "is not empty")

	if errs.IsA[*types.GlobalClusterNotFoundFault](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting RDS Global Cluster (%s): %s", d.Id(), err)
	}

	if _, err := waitGlobalClusterDeleted(ctx, conn, d.Id(), deadline.Remaining()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for RDS Global Cluster (%s) delete: %s", d.Id(), err)
	}

	return diags
}
