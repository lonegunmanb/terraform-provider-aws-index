package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *clusterSnapshotCopyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var old, new clusterSnapshotCopyResourceModel
	conn := r.Meta().RDSClient(ctx)

	resp.Diagnostics.Append(req.State.Get(ctx, &old)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &new)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !old.SharedAccounts.Equal(new.SharedAccounts) {
		var have, want []string
		resp.Diagnostics.Append(old.SharedAccounts.ElementsAs(ctx, &have, false)...)
		resp.Diagnostics.Append(new.SharedAccounts.ElementsAs(ctx, &want, false)...)
		if resp.Diagnostics.HasError() {
			return
		}

		toAdd, toRemove, _ := intflex.DiffSlices(have, want, func(s1, s2 string) bool { return s1 == s2 })

		input := &rds.ModifyDBClusterSnapshotAttributeInput{
			AttributeName:               aws.String(dbSnapshotAttributeNameRestore),
			DBClusterSnapshotIdentifier: new.TargetDBClusterSnapshotIdentifier.ValueStringPointer(),
			ValuesToAdd:                 toAdd,
			ValuesToRemove:              toRemove,
		}

		if _, err := conn.ModifyDBClusterSnapshotAttribute(ctx, input); err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.RDS, create.ErrActionUpdating, ResNameClusterSnapshotCopy, new.ID.String(), err),
				err.Error(),
			)
			return
		}
	}

	// StorageType can be null, and UseStateForUnknown takes no action
	// on null state values. Explicitly pass through the null value in
	// this case to prevent "invalid result object after apply" errors
	if old.StorageType.IsNull() {
		new.StorageType = types.StringNull()
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &new)...)
}
