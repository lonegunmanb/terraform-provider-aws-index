package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProxyDefaultTargetGroupPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	dbProxyName := d.Get("db_proxy_name").(string)
	input := &rds.ModifyDBProxyTargetGroupInput{
		DBProxyName:     aws.String(dbProxyName),
		TargetGroupName: aws.String("default"),
	}

	if v, ok := d.GetOk("connection_pool_config"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ConnectionPoolConfig = expandConnectionPoolConfiguration(v.([]any)[0].(map[string]any))
	}

	_, err := conn.ModifyDBProxyTargetGroup(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating RDS DB Proxy Default Target Group (%s): %s", dbProxyName, err)
	}

	timeout := d.Timeout(schema.TimeoutUpdate)
	if d.IsNewResource() {
		timeout = d.Timeout(schema.TimeoutCreate)

		d.SetId(dbProxyName)
	}

	if _, err := waitDefaultDBProxyTargetGroupAvailable(ctx, conn, dbProxyName, timeout); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for RDS DB Proxy Default Target Group (%s) update: %s", d.Id(), err)
	}

	return append(diags, resourceProxyDefaultTargetGroupRead(ctx, d, meta)...)
}
