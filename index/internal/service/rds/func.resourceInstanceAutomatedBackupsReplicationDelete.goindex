package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceInstanceAutomatedBackupsReplicationDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	backup, err := findDBInstanceAutomatedBackupByARN(ctx, conn, d.Id())

	switch {
	case tfresource.NotFound(err):
		return diags
	case err != nil:
		return sdkdiag.AppendErrorf(diags, "reading RDS DB Instance Automated Backup (%s): %s", d.Id(), err)
	}

	dbInstanceID := aws.ToString(backup.DBInstanceIdentifier)
	sourceDatabaseARN, err := arn.Parse(aws.ToString(backup.DBInstanceArn))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	log.Printf("[DEBUG] Stopping RDS Instance Automated Backups Replication: %s", d.Id())
	sourceDBInstanceARN := d.Get("source_db_instance_arn").(string)
	_, err = conn.StopDBInstanceAutomatedBackupsReplication(ctx, &rds.StopDBInstanceAutomatedBackupsReplicationInput{
		SourceDBInstanceArn: aws.String(sourceDBInstanceARN),
	})

	if errs.IsA[*types.DBInstanceNotFoundFault](err) {
		return diags
	}

	if errs.IsAErrorMessageContains[*types.InvalidDBInstanceStateFault](err, "not replicating to the current region") {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "stopping RDS Instance Automated Backups Replication (%s): %s", sourceDBInstanceARN, err)
	}

	// Make API calls in the source Region.
	optFn := func(o *rds.Options) {
		o.Region = sourceDatabaseARN.Region
	}

	if _, err := waitDBInstanceAutomatedBackupDeleted(ctx, conn, dbInstanceID, d.Id(), d.Timeout(schema.TimeoutCreate), optFn); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for RDS DB Instance Automated Backup (%s) delete: %s", d.Id(), err)
	}

	return diags
}
