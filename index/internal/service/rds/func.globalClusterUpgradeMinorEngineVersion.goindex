package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func globalClusterUpgradeMinorEngineVersion(ctx context.Context, conn *rds.Client, globalClusterID, engineVersion string, clusterMembers *schema.Set, timeout time.Duration) error {
	log.Printf("[INFO] Performing RDS Global Cluster (%s) minor version (%s) upgrade", globalClusterID, engineVersion)

	leelooMultiPass := false // only one pass is needed

	for _, tfMapRaw := range clusterMembers.List() {
		tfMap := tfMapRaw.(map[string]any)

		// DBClusterIdentifier supposedly can be either ARN or ID, and both used to work,
		// but as of now, only ID works.
		if memberARN, ok := tfMap["db_cluster_arn"]; !ok || memberARN.(string) == "" {
			continue
		}

		memberARN := tfMap["db_cluster_arn"].(string)

		clusterID, clusterRegion, err := clusterIDAndRegionFromARN(memberARN)
		if err != nil {
			return err
		}

		if clusterID == "" {
			continue
		}

		optFn := func(o *rds.Options) {
			o.Region = clusterRegion
		}

		// pre-wait for the cluster to be in a state where it can be updated
		if _, err := waitGlobalClusterMemberUpdated(ctx, conn, clusterID, timeout, optFn); err != nil {
			return fmt.Errorf("waiting for RDS Global Cluster (%s) member (%s) update: %w", globalClusterID, clusterID, err)
		}

		input := &rds.ModifyDBClusterInput{
			ApplyImmediately:    aws.Bool(true),
			DBClusterIdentifier: aws.String(clusterID),
			EngineVersion:       aws.String(engineVersion),
		}

		log.Printf("[INFO] Performing RDS Global Cluster (%s) Cluster (%s) minor version (%s) upgrade", globalClusterID, clusterID, engineVersion)
		_, err = tfresource.RetryWhen(ctx, timeout,
			func(ctx context.Context) (any, error) {
				return conn.ModifyDBCluster(ctx, input, optFn)
			},
			func(err error) (bool, error) {
				if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "IAM role ARN value is invalid or does not include the required permissions") {
					return true, err
				}

				if errs.IsAErrorMessageContains[*types.InvalidDBClusterStateFault](err, "Cannot modify engine version without a primary instance in DB cluster") {
					return false, err
				}

				if errs.IsA[*types.InvalidDBClusterStateFault](err) {
					return true, err
				}

				return false, err
			},
		)

		if errs.IsAErrorMessageContains[*types.InvalidGlobalClusterStateFault](err, "is upgrading") {
			leelooMultiPass = true
			continue
		}

		if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "upgrade global replicas first") {
			leelooMultiPass = true
			continue
		}

		if err != nil {
			return fmt.Errorf("modifying RDS Global Cluster (%s) member (%s) EngineVersion: %w", globalClusterID, clusterID, err)
		}

		if _, err := waitGlobalClusterMemberUpdated(ctx, conn, clusterID, timeout, optFn); err != nil {
			return fmt.Errorf("waiting for RDS Global Cluster (%s) member (%s) update: %w", globalClusterID, clusterID, err)
		}
	}

	globalCluster, err := findGlobalClusterByID(ctx, conn, globalClusterID)

	if err != nil {
		return fmt.Errorf("after minor engine_version upgrade to RDS Global Cluster (%s) members: %w", globalClusterID, err)
	}

	if leelooMultiPass || aws.ToString(globalCluster.EngineVersion) != engineVersion {
		log.Printf("[DEBUG] RDS Global Cluster (%s) upgrade did not take effect, trying again", globalClusterID)

		return globalClusterUpgradeMinorEngineVersion(ctx, conn, globalClusterID, engineVersion, clusterMembers, timeout)
	}

	return nil
}
