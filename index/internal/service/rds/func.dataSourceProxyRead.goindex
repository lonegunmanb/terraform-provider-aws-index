package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceProxyRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	name := d.Get(names.AttrName).(string)
	dbProxy, err := findDBProxyByName(ctx, conn, name)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading RDS DB Proxy (%s): %s", name, err)
	}

	d.SetId(name)
	d.Set(names.AttrARN, dbProxy.DBProxyArn)
	d.Set("auth", flattenUserAuthConfigInfos(dbProxy.Auth))
	d.Set("debug_logging", dbProxy.DebugLogging)
	d.Set(names.AttrEndpoint, dbProxy.Endpoint)
	d.Set("engine_family", dbProxy.EngineFamily)
	d.Set("idle_client_timeout", dbProxy.IdleClientTimeout)
	d.Set("require_tls", dbProxy.RequireTLS)
	d.Set(names.AttrRoleARN, dbProxy.RoleArn)
	d.Set(names.AttrVPCID, dbProxy.VpcId)
	d.Set(names.AttrVPCSecurityGroupIDs, dbProxy.VpcSecurityGroupIds)
	d.Set("vpc_subnet_ids", dbProxy.VpcSubnetIds)

	return diags
}
