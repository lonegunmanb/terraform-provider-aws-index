package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClusterEndpointUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RDSClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &rds.ModifyDBClusterEndpointInput{
			DBClusterEndpointIdentifier: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("custom_endpoint_type"); ok {
			input.EndpointType = aws.String(v.(string))
		}

		if v, ok := d.GetOk("excluded_members"); ok && v.(*schema.Set).Len() > 0 {
			input.ExcludedMembers = flex.ExpandStringValueSet(v.(*schema.Set))
		} else {
			input.ExcludedMembers = []string{}
		}

		if v, ok := d.GetOk("static_members"); ok && v.(*schema.Set).Len() > 0 {
			input.StaticMembers = flex.ExpandStringValueSet(v.(*schema.Set))
		} else {
			input.StaticMembers = []string{}
		}

		_, err := conn.ModifyDBClusterEndpoint(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying RDS Cluster Endpoint (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceClusterEndpointRead(ctx, d, meta)...)
}
