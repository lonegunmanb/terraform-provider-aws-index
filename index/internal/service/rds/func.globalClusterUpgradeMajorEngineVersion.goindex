package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func globalClusterUpgradeMajorEngineVersion(ctx context.Context, conn *rds.Client, globalClusterID, engineVersion string, timeout time.Duration) error {
	input := &rds.ModifyGlobalClusterInput{
		AllowMajorVersionUpgrade: aws.Bool(true),
		EngineVersion:            aws.String(engineVersion),
		GlobalClusterIdentifier:  aws.String(globalClusterID),
	}

	_, err := tfresource.RetryWhen(ctx, timeout,
		func(ctx context.Context) (any, error) {
			return conn.ModifyGlobalCluster(ctx, input)
		},
		func(err error) (bool, error) {
			if errs.IsA[*types.GlobalClusterNotFoundFault](err) {
				return false, err
			}

			if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "only supports Major Version Upgrades") {
				return false, err // NOT retryable !! AND indicates this should be a minor version upgrade
			}

			// Any other errors are retryable.
			return err != nil, err
		},
	)

	if err != nil {
		return fmt.Errorf("modifying RDS Global Cluster (%s) EngineVersion: %w", globalClusterID, err)
	}

	globalCluster, err := findGlobalClusterByID(ctx, conn, globalClusterID)

	if err != nil {
		return fmt.Errorf("after major engine_version upgrade to RDS Global Cluster (%s): %w", globalClusterID, err)
	}

	for _, clusterMember := range globalCluster.GlobalClusterMembers {
		memberARN := aws.ToString(clusterMember.DBClusterArn)

		if memberARN == "" {
			continue
		}

		clusterID, clusterRegion, err := clusterIDAndRegionFromARN(memberARN)
		if err != nil {
			return err
		}

		if clusterID == "" {
			continue
		}

		optFn := func(o *rds.Options) {
			o.Region = clusterRegion
		}

		if _, err := waitGlobalClusterMemberUpdated(ctx, conn, clusterID, timeout, optFn); err != nil {
			return fmt.Errorf("waiting for RDS Global Cluster (%s) member (%s) update: %w", globalClusterID, clusterID, err)
		}
	}

	return err
}
