package github.com/hashicorp/terraform-provider-aws/internal/service/rds
import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rds/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *clusterSnapshotCopyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data clusterSnapshotCopyResourceModel
	conn := r.Meta().RDSClient(ctx)

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	in := &rds.CopyDBClusterSnapshotInput{}
	resp.Diagnostics.Append(flex.Expand(ctx, data, in)...)
	if resp.Diagnostics.HasError() {
		return
	}
	in.Tags = getTagsIn(ctx)

	if !data.DestinationRegion.IsNull() && data.PresignedURL.IsNull() {
		output, err := rds.NewPresignClient(conn, func(o *rds.PresignOptions) {
			o.ClientOptions = append(o.ClientOptions, func(o *rds.Options) {
				o.Region = data.DestinationRegion.ValueString()
			})
		}).PresignCopyDBClusterSnapshot(ctx, in)

		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.RDS, create.ErrActionCreating, ResNameClusterSnapshotCopy, data.TargetDBClusterSnapshotIdentifier.String(), err),
				err.Error(),
			)
			return
		}

		in.PreSignedUrl = aws.String(output.URL)
	}

	out, err := conn.CopyDBClusterSnapshot(ctx, in)
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.RDS, create.ErrActionCreating, ResNameClusterSnapshotCopy, data.TargetDBClusterSnapshotIdentifier.String(), err),
			err.Error(),
		)
		return
	}
	if out == nil || out.DBClusterSnapshot == nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.RDS, create.ErrActionCreating, ResNameClusterSnapshotCopy, data.TargetDBClusterSnapshotIdentifier.String(), err),
			errors.New("empty output").Error(),
		)
		return
	}

	resp.Diagnostics.Append(flex.Flatten(ctx, out.DBClusterSnapshot, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	data.ID = types.StringValue(aws.ToString(out.DBClusterSnapshot.DBClusterSnapshotIdentifier))

	createTimeout := r.CreateTimeout(ctx, data.Timeouts)
	if _, err := waitDBClusterSnapshotCreated(ctx, conn, data.ID.ValueString(), createTimeout); err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.RDS, create.ErrActionWaitingForCreation, ResNameClusterSnapshotCopy, data.TargetDBClusterSnapshotIdentifier.String(), err),
			err.Error(),
		)
		return
	}

	if !data.SharedAccounts.IsNull() {
		toAdd := []string{}
		resp.Diagnostics.Append(data.SharedAccounts.ElementsAs(ctx, &toAdd, false)...)
		if resp.Diagnostics.HasError() {
			return
		}

		input := &rds.ModifyDBClusterSnapshotAttributeInput{
			AttributeName:               aws.String(dbSnapshotAttributeNameRestore),
			DBClusterSnapshotIdentifier: data.TargetDBClusterSnapshotIdentifier.ValueStringPointer(),
			ValuesToAdd:                 toAdd,
		}

		if _, err := conn.ModifyDBClusterSnapshotAttribute(ctx, input); err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.RDS, create.ErrActionCreating, ResNameClusterSnapshotCopy, data.TargetDBClusterSnapshotIdentifier.String(), err),
				err.Error(),
			)
			return
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
