package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceContactUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMContactsClient(ctx)

	if d.HasChanges(names.AttrDisplayName) {
		in := &ssmcontacts.UpdateContactInput{
			ContactId:   aws.String(d.Id()),
			DisplayName: aws.String(d.Get(names.AttrDisplayName).(string)),
		}

		_, err := conn.UpdateContact(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.SSMContacts, create.ErrActionUpdating, ResNameContact, d.Id(), err)
		}
	}

	return append(diags, resourceContactRead(ctx, d, meta)...)
}
