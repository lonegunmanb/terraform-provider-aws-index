package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandShiftCoverages(ctx context.Context, object []*shiftCoveragesData, diags *diag.Diagnostics) map[string][]awstypes.CoverageTime {
	if len(object) == 0 {
		return nil
	}

	result := make(map[string][]awstypes.CoverageTime)
	for _, v := range object {
		covTimes, diagErr := v.CoverageTimes.ToSlice(ctx)
		diags.Append(diagErr...)
		if diags.HasError() {
			return nil
		}

		var cTimes []awstypes.CoverageTime
		for _, val := range covTimes {
			end, diagErr := val.End.ToPtr(ctx)
			diags.Append(diagErr...)
			if diags.HasError() {
				return nil
			}
			start, diagErr := val.Start.ToPtr(ctx)
			diags.Append(diagErr...)
			if diags.HasError() {
				return nil
			}

			cTimes = append(cTimes, awstypes.CoverageTime{
				End: &awstypes.HandOffTime{
					HourOfDay:    fwflex.Int32ValueFromFrameworkInt64(ctx, end.HourOfDay),
					MinuteOfHour: fwflex.Int32ValueFromFrameworkInt64(ctx, end.MinuteOfHour),
				},
				Start: &awstypes.HandOffTime{
					HourOfDay:    fwflex.Int32ValueFromFrameworkInt64(ctx, start.HourOfDay),
					MinuteOfHour: fwflex.Int32ValueFromFrameworkInt64(ctx, start.MinuteOfHour),
				},
			})
		}

		result[v.MapBlockKey.ValueString()] = cTimes
	}

	return result
}
