package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *rotationResource) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	s := schema.Schema{
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			"contact_ids": schema.ListAttribute{
				CustomType:  fwtypes.ListOfStringType,
				ElementType: types.StringType,
				Required:    true,
			},
			names.AttrID: framework.IDAttribute(),
			names.AttrName: schema.StringAttribute{
				Required: true,
			},
			names.AttrStartTime: schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Optional:   true,
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
			"time_zone_id": schema.StringAttribute{
				Required: true,
			},
		},
		Blocks: map[string]schema.Block{
			"recurrence": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[recurrenceData](ctx),
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"number_of_on_calls": schema.Int64Attribute{
							Required: true,
						},
						"recurrence_multiplier": schema.Int64Attribute{
							Required: true,
						},
					},
					Blocks: map[string]schema.Block{
						"daily_settings": handOffTimeSchema(ctx, nil),
						"monthly_settings": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[monthlySettingsData](ctx),
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"day_of_month": schema.Int64Attribute{
										Required: true,
									},
								},
								Blocks: map[string]schema.Block{
									"hand_off_time": handOffTimeSchema(ctx, aws.Int(1)),
								},
							},
						},
						"shift_coverages": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[shiftCoveragesData](ctx),
							PlanModifiers: []planmodifier.List{
								shiftCoveragesPlanModifier(),
								listplanmodifier.UseStateForUnknown(),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{ // nosemgrep:ci.semgrep.framework.map_block_key-meaningful-names
									"map_block_key": schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.DayOfWeek](),
										Required:   true,
									},
								},
								Blocks: map[string]schema.Block{
									"coverage_times": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[coverageTimesData](ctx),
										NestedObject: schema.NestedBlockObject{
											Blocks: map[string]schema.Block{
												"end":   handOffTimeSchema(ctx, aws.Int(1)),
												"start": handOffTimeSchema(ctx, aws.Int(1)),
											},
										},
										Validators: []validator.List{
											listvalidator.IsRequired(),
											listvalidator.SizeAtLeast(1),
										},
									},
								},
							},
						},
						"weekly_settings": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[weeklySettingsData](ctx),
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"day_of_week": schema.StringAttribute{
										CustomType: fwtypes.StringEnumType[awstypes.DayOfWeek](),
										Required:   true,
									},
								},
								Blocks: map[string]schema.Block{
									"hand_off_time": handOffTimeSchema(ctx, aws.Int(1)),
								},
							},
						},
					},
				},
			},
		},
	}

	if s.Blocks == nil {
		s.Blocks = make(map[string]schema.Block)
	}

	response.Schema = s
}
