package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceContactCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	client := meta.(*conns.AWSClient).SSMContactsClient(ctx)

	input := &ssmcontacts.CreateContactInput{
		Alias:       aws.String(d.Get(names.AttrAlias).(string)),
		DisplayName: aws.String(d.Get(names.AttrDisplayName).(string)),
		Plan:        &types.Plan{Stages: []types.Stage{}},
		Tags:        getTagsIn(ctx),
		Type:        types.ContactType(d.Get(names.AttrType).(string)),
	}

	output, err := client.CreateContact(ctx, input)
	if err != nil {
		return create.AppendDiagError(diags, names.SSMContacts, create.ErrActionCreating, ResNameContact, d.Get(names.AttrAlias).(string), err)
	}

	if output == nil {
		return create.AppendDiagError(diags, names.SSMContacts, create.ErrActionCreating, ResNameContact, d.Get(names.AttrAlias).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(output.ContactArn))

	return append(diags, resourceContactRead(ctx, d, meta)...)
}
