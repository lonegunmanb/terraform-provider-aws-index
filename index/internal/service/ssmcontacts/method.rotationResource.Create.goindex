package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *rotationResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	conn := r.Meta().SSMContactsClient(ctx)
	var plan rotationResourceModel

	response.Diagnostics.Append(request.Plan.Get(ctx, &plan)...)

	if response.Diagnostics.HasError() {
		return
	}

	recurrenceData, diags := plan.Recurrence.ToPtr(ctx)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	shiftCoveragesData, diags := recurrenceData.ShiftCoverages.ToSlice(ctx)
	response.Diagnostics.Append(diags...)
	if response.Diagnostics.HasError() {
		return
	}

	shiftCoverages := expandShiftCoverages(ctx, shiftCoveragesData, &response.Diagnostics)
	if response.Diagnostics.HasError() {
		return
	}

	dailySettingsInput, dailySettingsOutput := setupSerializationObjects[handOffTime, awstypes.HandOffTime](recurrenceData.DailySettings)
	response.Diagnostics.Append(fwflex.Expand(ctx, dailySettingsInput, &dailySettingsOutput)...)
	if response.Diagnostics.HasError() {
		return
	}

	monthlySettingsInput, monthlySettingsOutput := setupSerializationObjects[monthlySettingsData, awstypes.MonthlySetting](recurrenceData.MonthlySettings)
	response.Diagnostics.Append(fwflex.Expand(ctx, monthlySettingsInput, &monthlySettingsOutput)...)
	if response.Diagnostics.HasError() {
		return
	}

	weeklySettingsInput, weeklySettingsOutput := setupSerializationObjects[weeklySettingsData, awstypes.WeeklySetting](recurrenceData.WeeklySettings)
	response.Diagnostics.Append(fwflex.Expand(ctx, weeklySettingsInput, &weeklySettingsOutput)...)
	if response.Diagnostics.HasError() {
		return
	}

	input := &ssmcontacts.CreateRotationInput{
		IdempotencyToken: aws.String(id.UniqueId()),
		ContactIds:       fwflex.ExpandFrameworkStringValueList(ctx, plan.ContactIds),
		Name:             fwflex.StringFromFramework(ctx, plan.Name),
		Recurrence: &awstypes.RecurrenceSettings{
			NumberOfOnCalls:      fwflex.Int32FromFrameworkInt64(ctx, recurrenceData.NumberOfOnCalls),
			RecurrenceMultiplier: fwflex.Int32FromFrameworkInt64(ctx, recurrenceData.RecurrenceMultiplier),
			DailySettings:        dailySettingsOutput.Data,
			MonthlySettings:      monthlySettingsOutput.Data,
			ShiftCoverages:       shiftCoverages,
			WeeklySettings:       weeklySettingsOutput.Data,
		},
		StartTime:  fwflex.TimeFromFramework(ctx, plan.StartTime),
		TimeZoneId: fwflex.StringFromFramework(ctx, plan.TimeZoneID),
		Tags:       getTagsIn(ctx),
	}

	output, err := conn.CreateRotation(ctx, input)

	if err != nil {
		response.Diagnostics.AddError(
			create.ProblemStandardMessage(names.SSMContacts, create.ErrActionCreating, ResNameRotation, plan.Name.ValueString(), err),
			err.Error(),
		)
		return
	}

	state := plan

	state.ID = fwflex.StringToFramework(ctx, output.RotationArn)
	state.ARN = fwflex.StringToFramework(ctx, output.RotationArn)

	response.Diagnostics.Append(response.State.Set(ctx, &state)...)
}
