package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePlanCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMContactsClient(ctx)

	contactId := d.Get("contact_id").(string)
	stages := expandStages(d.Get(names.AttrStage).([]any))
	plan := &types.Plan{
		Stages: stages,
	}

	in := &ssmcontacts.UpdateContactInput{
		ContactId: aws.String(contactId),
		Plan:      plan,
	}

	_, err := conn.UpdateContact(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.SSMContacts,
			create.ErrActionCreating,
			ResNamePlan,
			contactId,
			err)
	}

	d.SetId(contactId)

	return append(diags, resourcePlanRead(ctx, d, meta)...)
}
