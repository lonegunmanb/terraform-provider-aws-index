package github.com/hashicorp/terraform-provider-aws/internal/service/ssmcontacts
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceContactChannelCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SSMContactsClient(ctx)

	delivery_address := expandContactChannelAddress(d.Get("delivery_address").([]any))
	in := &ssmcontacts.CreateContactChannelInput{
		ContactId:       aws.String(d.Get("contact_id").(string)),
		DeferActivation: aws.Bool(true),
		DeliveryAddress: delivery_address,
		Name:            aws.String(d.Get(names.AttrName).(string)),
		Type:            types.ChannelType(d.Get(names.AttrType).(string)),
	}

	out, err := conn.CreateContactChannel(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.SSMContacts, create.ErrActionCreating, ResNameContactChannel, d.Get(names.AttrName).(string), err)
	}

	if out == nil {
		return create.AppendDiagError(diags, names.SSMContacts, create.ErrActionCreating, ResNameContactChannel, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	d.SetId(aws.ToString(out.ContactChannelArn))

	return append(diags, resourceContactChannelRead(ctx, d, meta)...)
}
