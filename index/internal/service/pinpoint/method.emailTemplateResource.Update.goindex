package github.com/hashicorp/terraform-provider-aws/internal/service/pinpoint
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pinpoint"
	awstypes "github.com/aws/aws-sdk-go-v2/service/pinpoint/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *emailTemplateResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().PinpointClient(ctx)

	var old, new emailTemplateResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &old)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &new)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !old.TemplateName.Equal(new.TemplateName) ||
		!old.Arn.Equal(new.Arn) ||
		!old.EmailTemplate.Equal(new.EmailTemplate) {
		in := &pinpoint.UpdateEmailTemplateInput{}

		resp.Diagnostics.Append(flex.Expand(ctx, &old, in, flex.WithFieldNameSuffix("Request"))...)
		if resp.Diagnostics.HasError() {
			return
		}

		in.TemplateName = old.TemplateName.ValueStringPointer()

		_, err := conn.UpdateEmailTemplate(ctx, in)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.Pinpoint, create.ErrActionUpdating, ResNameEmailTemplate, new.TemplateName.String(), err),
				err.Error(),
			)
			return
		}
	}

	output, err := findEmailTemplateByName(ctx, conn, old.TemplateName.ValueString())
	if err != nil {
		create.AddError(&resp.Diagnostics, names.Pinpoint, create.ErrActionWaitingForUpdate, ResNameEmailTemplate, old.TemplateName.ValueString(), err)
		return
	}

	resp.Diagnostics.Append(flex.Flatten(ctx, output, &new, flex.WithFieldNameSuffix("Response"))...)
	resp.Diagnostics.Append(resp.State.Set(ctx, &new)...)
}
