package github.com/hashicorp/terraform-provider-aws/internal/service/pinpoint
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/pinpoint"
	awstypes "github.com/aws/aws-sdk-go-v2/service/pinpoint/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAppUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).PinpointClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		appSettings := &awstypes.WriteApplicationSettingsRequest{}

		if d.HasChange("campaign_hook") {
			appSettings.CampaignHook = expandCampaignHook(d.Get("campaign_hook").([]any))
		}

		//if d.HasChange("cloudwatch_metrics_enabled") {
		//	appSettings.CloudWatchMetricsEnabled = aws.Bool(d.Get("cloudwatch_metrics_enabled").(bool));
		//}

		if d.HasChange("limits") {
			appSettings.Limits = expandCampaignLimits(d.Get("limits").([]any))
		}

		if d.HasChange("quiet_time") {
			appSettings.QuietTime = expandQuietTime(d.Get("quiet_time").([]any))
		}

		input := &pinpoint.UpdateApplicationSettingsInput{
			ApplicationId:                   aws.String(d.Id()),
			WriteApplicationSettingsRequest: appSettings,
		}

		_, err := conn.UpdateApplicationSettings(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Pinpoint App (%s) settings: %s", d.Id(), err)
		}
	}

	return append(diags, resourceAppRead(ctx, d, meta)...)
}
