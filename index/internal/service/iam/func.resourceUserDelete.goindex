package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	// IAM Users must be removed from all groups before they can be deleted.
	if err := deleteUserGroupMemberships(ctx, conn, d.Id()); err != nil {
		if !errs.IsA[*awstypes.NoSuchEntityException](err) {
			return sdkdiag.AppendErrorf(diags, "removing IAM User (%s) group memberships: %s", d.Id(), err)
		}
	}

	// All access keys, MFA devices and login profile for the user must be removed.
	if d.Get(names.AttrForceDestroy).(bool) {
		for _, v := range []struct {
			f      func(context.Context, *iam.Client, string) error
			format string
		}{
			{deleteUserPolicies, "removing IAM User (%s) policies: %s"},
			{detachUserPolicies, "detaching IAM User (%s) policies: %s"},
			{deleteUserAccessKeys, "removing IAM User (%s) access keys: %s"},
			{deleteUserSSHKeys, "removing IAM User (%s) access keys: %s"},
			{deleteUserVirtualMFADevices, "removing IAM User (%s) Virtual MFA devices: %s"},
			{deactivateUserMFADevices, "removing IAM User (%s) MFA devices: %s"},
			{deleteUserLoginProfile, "removing IAM User (%s) login profile: %s"},
			{deleteUserSigningCertificates, "removing IAM User (%s) signing certificate: %s"},
			{deleteServiceSpecificCredentials, "removing IAM User (%s) Service Specific Credentials: %s"},
		} {
			if err := v.f(ctx, conn, d.Id()); err != nil {
				if !errs.IsA[*awstypes.NoSuchEntityException](err) {
					return sdkdiag.AppendErrorf(diags, v.format, d.Id(), err)
				}
			}
		}
	}

	log.Println("[DEBUG] Deleting IAM User:", d.Id())
	input := iam.DeleteUserInput{
		UserName: aws.String(d.Id()),
	}
	_, err := conn.DeleteUser(ctx, &input)

	if errs.IsA[*awstypes.NoSuchEntityException](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting IAM User (%s): %s", d.Id(), err)
	}

	return diags
}
