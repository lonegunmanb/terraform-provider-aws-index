package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	if d.HasChanges(names.AttrName, names.AttrPath) {
		o, n := d.GetChange(names.AttrName)
		input := iam.UpdateUserInput{
			NewUserName: aws.String(n.(string)),
			NewPath:     aws.String(d.Get(names.AttrPath).(string)),
			UserName:    aws.String(o.(string)),
		}

		_, err := conn.UpdateUser(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IAM User (%s): %s", d.Id(), err)
		}

		d.SetId(n.(string))
	}

	if d.HasChange("permissions_boundary") {
		if v, ok := d.GetOk("permissions_boundary"); ok {
			input := iam.PutUserPermissionsBoundaryInput{
				PermissionsBoundary: aws.String(v.(string)),
				UserName:            aws.String(d.Id()),
			}

			_, err := conn.PutUserPermissionsBoundary(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "setting IAM User (%s) permissions boundary: %s", d.Id(), err)
			}
		} else {
			input := iam.DeleteUserPermissionsBoundaryInput{
				UserName: aws.String(d.Id()),
			}
			_, err := conn.DeleteUserPermissionsBoundary(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deleting IAM User (%s) permissions boundary: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceUserRead(ctx, d, meta)...)
}
