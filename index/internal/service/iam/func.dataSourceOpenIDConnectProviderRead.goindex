package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceOpenIDConnectProviderRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	var input iam.GetOpenIDConnectProviderInput

	if v, ok := d.GetOk(names.AttrARN); ok {
		input.OpenIDConnectProviderArn = aws.String(v.(string))
	} else if v, ok := d.GetOk(names.AttrURL); ok {
		url := v.(string)

		oidcpEntry, err := findOpenIDConnectProviderByURL(ctx, conn, url)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading IAM OIDC Provider (%s): %s", url, err)
		}

		input.OpenIDConnectProviderArn = oidcpEntry.Arn
	}

	output, err := findOpenIDConnectProvider(ctx, conn, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IAM OIDC Provider: %s", err)
	}

	arn := aws.ToString(input.OpenIDConnectProviderArn)
	d.SetId(arn)
	d.Set(names.AttrARN, arn)
	d.Set("client_id_list", output.ClientIDList)
	d.Set("thumbprint_list", output.ThumbprintList)
	d.Set(names.AttrURL, output.Url)

	setTagsOut(ctx, output.Tags)

	return diags
}
