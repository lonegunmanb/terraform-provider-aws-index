package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceAccessKey,
			TypeName: "aws_iam_access_key",
			Name:     "Access Key",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceAccountAlias,
			TypeName: "aws_iam_account_alias",
			Name:     "Account Alias",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceAccountPasswordPolicy,
			TypeName: "aws_iam_account_password_policy",
			Name:     "Account Password Policy",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceGroup,
			TypeName: "aws_iam_group",
			Name:     "Group",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceGroupMembership,
			TypeName: "aws_iam_group_membership",
			Name:     "Group Membership",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceGroupPolicy,
			TypeName: "aws_iam_group_policy",
			Name:     "Group Policy",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceGroupPolicyAttachment,
			TypeName: "aws_iam_group_policy_attachment",
			Name:     "Group Policy Attachment",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceInstanceProfile,
			TypeName: "aws_iam_instance_profile",
			Name:     "Instance Profile",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "InstanceProfile",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceOpenIDConnectProvider,
			TypeName: "aws_iam_openid_connect_provider",
			Name:     "OIDC Provider",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "OIDCProvider",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourcePolicy,
			TypeName: "aws_iam_policy",
			Name:     "Policy",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "Policy",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourcePolicyAttachment,
			TypeName: "aws_iam_policy_attachment",
			Name:     "Policy Attachment",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceRole,
			TypeName: "aws_iam_role",
			Name:     "Role",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "Role",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalSingleParameterIdentity(names.AttrName,
				inttypes.WithV6_0SDKv2Fix(),
			),
		},
		{
			Factory:  resourceRolePolicy,
			TypeName: "aws_iam_role_policy",
			Name:     "Role Policy",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute(names.AttrRole, true),
				inttypes.StringIdentityAttribute(names.AttrName, true),
			}),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
				ImportID:      rolePolicyImportID{},
			},
		},
		{
			Factory:  resourceRolePolicyAttachment,
			TypeName: "aws_iam_role_policy_attachment",
			Name:     "Role Policy Attachment",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute(names.AttrRole, true),
				inttypes.StringIdentityAttribute("policy_arn", true),
			}),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
				ImportID:      rolePolicyAttachmentImportID{},
			},
		},
		{
			Factory:  resourceSAMLProvider,
			TypeName: "aws_iam_saml_provider",
			Name:     "SAML Provider",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "SAMLProvider",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceSecurityTokenServicePreferences,
			TypeName: "aws_iam_security_token_service_preferences",
			Name:     "Security Token Service Preferences",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceServerCertificate,
			TypeName: "aws_iam_server_certificate",
			Name:     "Server Certificate",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "ServerCertificate",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceServiceLinkedRole,
			TypeName: "aws_iam_service_linked_role",
			Name:     "Service Linked Role",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "ServiceLinkedRole",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceServiceSpecificCredential,
			TypeName: "aws_iam_service_specific_credential",
			Name:     "Service Specific Credential",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceSigningCertificate,
			TypeName: "aws_iam_signing_certificate",
			Name:     "Signing Certificate",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUser,
			TypeName: "aws_iam_user",
			Name:     "User",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "User",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUserGroupMembership,
			TypeName: "aws_iam_user_group_membership",
			Name:     "User Group Membership",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUserLoginProfile,
			TypeName: "aws_iam_user_login_profile",
			Name:     "User Login Profile",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUserPolicy,
			TypeName: "aws_iam_user_policy",
			Name:     "User Policy",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUserPolicyAttachment,
			TypeName: "aws_iam_user_policy_attachment",
			Name:     "User Policy Attachment",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceUserSSHKey,
			TypeName: "aws_iam_user_ssh_key",
			Name:     "User SSH Key",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  resourceVirtualMFADevice,
			TypeName: "aws_iam_virtual_mfa_device",
			Name:     "Virtual MFA Device",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "VirtualMFADevice",
			}),
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
		},
	}
}
