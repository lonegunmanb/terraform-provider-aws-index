package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) ListTags(ctx context.Context, meta any, identifier, resourceType string) error {
	var (
		tags tftags.KeyValueTags
		err  error
	)
	switch resourceType {
	case "InstanceProfile":
		tags, err = instanceProfileKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "OIDCProvider":
		tags, err = openIDConnectProviderKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "Policy":
		tags, err = policyKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "Role":
		tags, err = roleKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "SAMLProvider":
		tags, err = samlProviderKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "ServiceLinkedRole":
		var roleName string
		_, roleName, _, err = DecodeServiceLinkedRoleID(identifier)
		if err != nil {
			return err
		}
		tags, err = roleKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), roleName)

	case "ServerCertificate":
		tags, err = serverCertificateKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "User":
		tags, err = userKeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	case "VirtualMFADevice":
		tags, err = virtualMFADevicekeyValueTags(ctx, meta.(*conns.AWSClient).IAMClient(ctx), identifier)

	default:
		return nil
	}

	if err != nil {
		return err
	}

	if inContext, ok := tftags.FromContext(ctx); ok {
		inContext.TagsOut = option.Some(tags)
	}

	return nil
}
