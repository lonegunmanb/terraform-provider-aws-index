package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserSSHKeyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	username := d.Get(names.AttrUsername).(string)
	input := &iam.UploadSSHPublicKeyInput{
		SSHPublicKeyBody: aws.String(d.Get(names.AttrPublicKey).(string)),
		UserName:         aws.String(username),
	}

	output, err := conn.UploadSSHPublicKey(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "uploading IAM User SSH Key (%s): %s", username, err)
	}

	d.SetId(aws.ToString(output.SSHPublicKey.SSHPublicKeyId))

	_, err = tfresource.RetryWhenNotFound(ctx, propagationTimeout, func(ctx context.Context) (any, error) {
		return findSSHPublicKeyByThreePartKey(ctx, conn, d.Id(), d.Get("encoding").(string), username)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for IAM User SSH Key (%s) create: %s", d.Id(), err)
	}

	if v, ok := d.GetOk(names.AttrStatus); ok {
		input := &iam.UpdateSSHPublicKeyInput{
			SSHPublicKeyId: aws.String(d.Id()),
			Status:         awstypes.StatusType(v.(string)),
			UserName:       aws.String(username),
		}

		_, err := conn.UpdateSSHPublicKey(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating IAM User SSH Key (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceUserSSHKeyRead(ctx, d, meta)...)
}
