package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceServiceSpecificCredentialCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	serviceName, userName := d.Get(names.AttrServiceName).(string), d.Get(names.AttrUserName).(string)
	input := iam.CreateServiceSpecificCredentialInput{
		ServiceName: aws.String(serviceName),
		UserName:    aws.String(userName),
	}

	if v, ok := d.GetOk("credential_age_days"); ok {
		input.CredentialAgeDays = aws.Int32(int32(v.(int)))
	}

	output, err := conn.CreateServiceSpecificCredential(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating IAM Service-Specific Credential: %s", err)
	}

	cred := output.ServiceSpecificCredential
	credID := aws.ToString(cred.ServiceSpecificCredentialId)
	d.SetId(serviceSpecificCredentialCreateResourceID(serviceName, userName, credID))
	d.Set("service_credential_secret", cred.ServiceCredentialSecret)
	d.Set("service_password", cred.ServicePassword)

	if v, ok := d.GetOk(names.AttrStatus); ok && awstypes.StatusType(v.(string)) != awstypes.StatusTypeActive {
		input := iam.UpdateServiceSpecificCredentialInput{
			ServiceSpecificCredentialId: aws.String(credID),
			Status:                      awstypes.StatusType(v.(string)),
			UserName:                    aws.String(userName),
		}

		_, err := conn.UpdateServiceSpecificCredential(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting IAM Service-Specific Credential (%s) status: %s", d.Id(), err)
		}
	}

	return append(diags, resourceServiceSpecificCredentialRead(ctx, d, meta)...)
}
