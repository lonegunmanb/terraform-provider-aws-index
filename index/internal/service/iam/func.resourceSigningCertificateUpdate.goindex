package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports

	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSigningCertificateUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	certId, userName, err := DecodeSigningCertificateId(d.Id())
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating IAM Signing Certificate (%s): %s", d.Id(), err)
	}

	updateInput := &iam.UpdateSigningCertificateInput{
		CertificateId: aws.String(certId),
		UserName:      aws.String(userName),
		Status:        awstypes.StatusType(d.Get(names.AttrStatus).(string)),
	}

	_, err = conn.UpdateSigningCertificate(ctx, updateInput)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating IAM Signing Certificate (%s): %s", d.Id(), err)
	}

	return append(diags, resourceSigningCertificateRead(ctx, d, meta)...)
}
