package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceServerCertificateRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	var matcher = func(cert awstypes.ServerCertificateMetadata) bool {
		return strings.HasPrefix(aws.ToString(cert.ServerCertificateName), d.Get(names.AttrNamePrefix).(string))
	}
	if v, ok := d.GetOk(names.AttrName); ok {
		matcher = func(cert awstypes.ServerCertificateMetadata) bool {
			return aws.ToString(cert.ServerCertificateName) == v.(string)
		}
	}

	var metadatas []awstypes.ServerCertificateMetadata
	input := &iam.ListServerCertificatesInput{}
	if v, ok := d.GetOk("path_prefix"); ok {
		input.PathPrefix = aws.String(v.(string))
	}
	log.Printf("[DEBUG] Reading IAM Server Certificate")
	pages := iam.NewListServerCertificatesPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading IAM Server Certificate: listing certificates: %s", err)
		}
		for _, cert := range page.ServerCertificateMetadataList {
			if matcher(cert) {
				metadatas = append(metadatas, cert)
			}
		}
	}

	if len(metadatas) == 0 {
		return sdkdiag.AppendErrorf(diags, "Search for AWS IAM server certificate returned no results")
	}
	if len(metadatas) > 1 && !d.Get("latest").(bool) {
		return sdkdiag.AppendErrorf(diags, "Search for AWS IAM server certificate returned too many results")
	}

	metadata := slices.MaxFunc(metadatas, func(a, b awstypes.ServerCertificateMetadata) int {
		return a.Expiration.Compare(aws.ToTime(b.Expiration))
	})
	d.SetId(aws.ToString(metadata.ServerCertificateId))
	d.Set(names.AttrARN, metadata.Arn)
	d.Set(names.AttrPath, metadata.Path)
	d.Set(names.AttrName, metadata.ServerCertificateName)
	if metadata.Expiration != nil {
		d.Set("expiration_date", metadata.Expiration.Format(time.RFC3339))
	}

	log.Printf("[DEBUG] Get Public Key Certificate for %s", *metadata.ServerCertificateName)
	serverCertificateResp, err := conn.GetServerCertificate(ctx, &iam.GetServerCertificateInput{
		ServerCertificateName: metadata.ServerCertificateName,
	})
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IAM Server Certificate: getting certificate details: %s", err)
	}
	d.Set("upload_date", serverCertificateResp.ServerCertificate.ServerCertificateMetadata.UploadDate.Format(time.RFC3339))
	d.Set("certificate_body", serverCertificateResp.ServerCertificate.CertificateBody)
	d.Set(names.AttrCertificateChain, serverCertificateResp.ServerCertificate.CertificateChain)

	return diags
}
