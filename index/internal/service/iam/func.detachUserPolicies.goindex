package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func detachUserPolicies(ctx context.Context, conn *iam.Client, username string) error {
	input := &iam.ListAttachedUserPoliciesInput{
		UserName: aws.String(username),
	}

	output, err := conn.ListAttachedUserPolicies(ctx, input)
	if errs.IsA[*awstypes.NoSuchEntityException](err) {
		// user was an entity 2 nanoseconds ago, but now it's not
		return nil
	}

	if err != nil {
		return fmt.Errorf("listing/detaching IAM User (%s) attached policy: %s", username, err)
	}

	for _, policy := range output.AttachedPolicies {
		policyARN := aws.ToString(policy.PolicyArn)

		log.Printf("[DEBUG] Detaching IAM User (%s) attached policy: %s", username, policyARN)

		if err := detachPolicyFromUser(ctx, conn, username, policyARN); err != nil {
			return fmt.Errorf("detaching IAM User (%s) attached policy: %s", username, err)
		}
	}

	return nil
}
