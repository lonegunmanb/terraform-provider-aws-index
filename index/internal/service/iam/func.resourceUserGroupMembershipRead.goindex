package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceUserGroupMembershipRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	user := d.Get("user").(string)
	groups := d.Get("groups").(*schema.Set)

	input := &iam.ListGroupsForUserInput{
		UserName: aws.String(user),
	}

	var gl []string

	err := retry.RetryContext(ctx, propagationTimeout, func() *retry.RetryError {
		err := listGroupsForUserPages(ctx, conn, input, func(page *iam.ListGroupsForUserOutput, lastPage bool) bool {
			if page == nil {
				return !lastPage
			}

			for _, group := range page.Groups {
				if groups.Contains(aws.ToString(group.GroupName)) {
					gl = append(gl, aws.ToString(group.GroupName))
				}
			}

			return !lastPage
		})

		if d.IsNewResource() && errs.IsA[*awstypes.NoSuchEntityException](err) {
			return retry.RetryableError(err)
		}

		if err != nil {
			return retry.NonRetryableError(err)
		}

		return nil
	})

	if tfresource.TimedOut(err) {
		err = listGroupsForUserPages(ctx, conn, input, func(page *iam.ListGroupsForUserOutput, lastPage bool) bool {
			if page == nil {
				return !lastPage
			}

			for _, group := range page.Groups {
				if groups.Contains(aws.ToString(group.GroupName)) {
					gl = append(gl, aws.ToString(group.GroupName))
				}
			}

			return !lastPage
		})
	}

	var nse *awstypes.NoSuchEntityException
	if !d.IsNewResource() && tfawserr.ErrCodeEquals(err, nse.ErrorCode()) {
		log.Printf("[WARN] IAM User Group Membership (%s) not found, removing from state", user)
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IAM User Group Membership (%s): %s", user, err)
	}

	if err := d.Set("groups", gl); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting group list from IAM (%s), error: %s", user, err)
	}

	return diags
}
