package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func deleteUserAccessKeys(ctx context.Context, conn *iam.Client, user string) error {
	accessKeys, err := findAccessKeysByUser(ctx, conn, user)

	if err != nil && !tfresource.NotFound(err) {
		return fmt.Errorf("listing IAM User (%s) access keys: %w", user, err)
	}

	var errs []error
	for _, v := range accessKeys {
		accessKeyID := aws.ToString(v.AccessKeyId)
		input := iam.DeleteAccessKeyInput{
			AccessKeyId: aws.String(accessKeyID),
			UserName:    aws.String(user),
		}
		_, err := conn.DeleteAccessKey(ctx, &input)

		if err != nil {
			return fmt.Errorf("deleting IAM User (%s) access key (%s): %w", user, accessKeyID, err)
		}
	}

	return errors.Join(errs...)
}
