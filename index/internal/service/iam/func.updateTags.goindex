package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *iam.Client, identifier, resourceType string, oldTagsMap, newTagsMap any) error {
	switch resourceType {
	case "InstanceProfile":
		return instanceProfileUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "OIDCProvider":
		return openIDConnectProviderUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "Policy":
		return policyUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "Role":
		return roleUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "ServiceLinkedRole":
		_, roleName, _, err := DecodeServiceLinkedRoleID(identifier)
		if err != nil {
			return err
		}
		return roleUpdateTags(ctx, conn, roleName, oldTagsMap, newTagsMap)
	case "SAMLProvider":
		return samlProviderUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "ServerCertificate":
		return serverCertificateUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "User":
		return userUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	case "VirtualMFADevice":
		return virtualMFADeviceUpdateTags(ctx, conn, identifier, oldTagsMap, newTagsMap)
	}

	return fmt.Errorf("unsupported resource type: %s", resourceType)
}
