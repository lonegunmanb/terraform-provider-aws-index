package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"reflect"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceInstanceProfilesRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).IAMClient(ctx)

	roleName := d.Get("role_name").(string)
	instanceProfiles, err := findInstanceProfilesForRole(ctx, conn, roleName)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading IAM Instance Profiles for Role (%s): %s", roleName, err)
	}

	var arns, nms, paths []string

	for _, v := range instanceProfiles {
		arns = append(arns, aws.ToString(v.Arn))
		nms = append(nms, aws.ToString(v.InstanceProfileName))
		paths = append(paths, aws.ToString(v.Path))
	}

	d.SetId(roleName)
	d.Set(names.AttrARNs, arns)
	d.Set(names.AttrNames, nms)
	d.Set("paths", paths)

	return diags
}
