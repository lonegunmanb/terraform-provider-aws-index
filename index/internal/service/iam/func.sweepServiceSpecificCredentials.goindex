package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepServiceSpecificCredentials(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.IAMClient(ctx)
	var input iam.ListUsersInput
	var users []awstypes.User
	prefixes := []string{
		"test-user",
		"test_user",
		"tf-acc",
		"tf_acc",
	}

	pages := iam.NewListUsersPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.Users {
			for _, prefix := range prefixes {
				if strings.HasPrefix(aws.ToString(v.UserName), prefix) {
					users = append(users, v)
					break
				}
			}
		}
	}

	sweepResources := make([]sweep.Sweepable, 0)

	for _, user := range users {
		userName := aws.ToString(user.UserName)
		input := iam.ListServiceSpecificCredentialsInput{
			UserName: aws.String(userName),
		}

		err := listServiceSpecificCredentialsPages(ctx, conn, &input, func(page *iam.ListServiceSpecificCredentialsOutput, lastPage bool) bool {
			if page == nil {
				return !lastPage
			}

			for _, v := range page.ServiceSpecificCredentials {
				r := resourceServiceSpecificCredential()
				d := r.Data(nil)
				d.SetId(serviceSpecificCredentialCreateResourceID(aws.ToString(v.ServiceName), aws.ToString(v.UserName), aws.ToString(v.ServiceSpecificCredentialId)))

				sweepResources = append(sweepResources, sdk.NewSweepResource(r, d, client))
			}

			return !lastPage
		})

		if err != nil {
			tflog.Warn(ctx, "Skipping resource", map[string]any{
				"error":            err.Error(),
				names.AttrUserName: userName,
			})
			continue
		}
	}

	return sweepResources, nil
}
