package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitRoleARNIsNotUniqueID(ctx context.Context, conn *iam.Client, id string, role *awstypes.Role) (*awstypes.Role, error) {
	if arn.IsARN(aws.ToString(role.Arn)) {
		return role, nil
	}

	stateConf := &retry.StateChangeConf{
		Pending:                   []string{RoleStatusARNIsUniqueID, RoleStatusNotFound},
		Target:                    []string{names.AttrARN},
		Refresh:                   statusRoleCreate(ctx, conn, id),
		Timeout:                   propagationTimeout,
		NotFoundChecks:            10,
		ContinuousTargetOccurence: 5,
		Delay:                     10 * time.Second,
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)

	if output, ok := outputRaw.(*awstypes.Role); ok {
		return output, err
	}

	return nil, err
}
