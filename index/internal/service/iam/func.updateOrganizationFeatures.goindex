package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"fmt"
	"slices"

	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateOrganizationFeatures(ctx context.Context, conn *iam.Client, new, old []awstypes.FeatureType) error {
	toEnable := itypes.Set[awstypes.FeatureType](new).Difference(old)
	toDisable := itypes.Set[awstypes.FeatureType](old).Difference(new)

	if slices.Contains(toEnable, awstypes.FeatureTypeRootCredentialsManagement) {
		input := &iam.EnableOrganizationsRootCredentialsManagementInput{}

		_, err := conn.EnableOrganizationsRootCredentialsManagement(ctx, input)

		if err != nil {
			return fmt.Errorf("enabling Organizations root credentials management: %w", err)
		}
	}

	if slices.Contains(toEnable, awstypes.FeatureTypeRootSessions) {
		input := &iam.EnableOrganizationsRootSessionsInput{}

		_, err := conn.EnableOrganizationsRootSessions(ctx, input)

		if err != nil {
			return fmt.Errorf("enabling Organizations root sessions: %w", err)
		}
	}

	if slices.Contains(toDisable, awstypes.FeatureTypeRootCredentialsManagement) {
		input := &iam.DisableOrganizationsRootCredentialsManagementInput{}

		_, err := conn.DisableOrganizationsRootCredentialsManagement(ctx, input)

		if err != nil {
			return fmt.Errorf("disabling Organizations root credentials management: %w", err)
		}
	}

	if slices.Contains(toDisable, awstypes.FeatureTypeRootSessions) {
		input := &iam.DisableOrganizationsRootSessionsInput{}

		_, err := conn.DisableOrganizationsRootSessions(ctx, input)

		if err != nil {
			return fmt.Errorf("disabling Organizations root sessions: %w", err)
		}
	}

	return nil
}
