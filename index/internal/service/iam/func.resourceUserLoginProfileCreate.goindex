package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"bytes"
	"context"
	"crypto/rand"
	"errors"
	"log"
	"math/big"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserLoginProfileCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).IAMClient(ctx)
	username := d.Get("user").(string)

	passwordLength := d.Get("password_length").(int)
	initialPassword, err := GeneratePassword(passwordLength)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating IAM User Login Profile for %q: %s", username, err)
	}

	request := &iam.CreateLoginProfileInput{
		UserName:              aws.String(username),
		Password:              aws.String(initialPassword),
		PasswordResetRequired: d.Get("password_reset_required").(bool),
	}

	createResp, err := conn.CreateLoginProfile(ctx, request)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating IAM User Login Profile for %q: %s", username, err)
	}

	d.SetId(aws.ToString(createResp.LoginProfile.UserName))

	if v, ok := d.GetOk("pgp_key"); ok {
		encryptionKey, err := retrieveGPGKey(v.(string))
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating IAM User Login Profile for %q: %s", username, err)
		}

		fingerprint, encrypted, err := encryptValue(encryptionKey, initialPassword, "Password")
		if err != nil {
			return sdkdiag.AppendErrorf(diags, "creating IAM User Login Profile for %q: %s", username, err)
		}

		d.Set("key_fingerprint", fingerprint)
		d.Set("encrypted_password", encrypted)
	} else {
		d.Set(names.AttrPassword, initialPassword)
	}

	return append(diags, resourceUserLoginProfileRead(ctx, d, meta)...)
}
