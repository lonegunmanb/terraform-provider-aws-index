package github.com/hashicorp/terraform-provider-aws/internal/service/iam
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	awstypes "github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func deleteServiceLinkedRole(ctx context.Context, conn *iam.Client, roleName string) error {
	input := iam.DeleteServiceLinkedRoleInput{
		RoleName: aws.String(roleName),
	}
	output, err := conn.DeleteServiceLinkedRole(ctx, &input)

	if errs.IsA[*awstypes.NoSuchEntityException](err) {
		return nil
	}

	if err != nil {
		return fmt.Errorf("deleting IAM Service Linked Role (%s): %w", roleName, err)
	}

	deletionTaskID := aws.ToString(output.DeletionTaskId)
	if deletionTaskID == "" {
		return nil
	}

	if err := waitServiceLinkedRoleDeleted(ctx, conn, deletionTaskID); err != nil {
		return fmt.Errorf("waiting for IAM Service Linked Role (%s) delete: %w", roleName, err)
	}

	return nil
}
