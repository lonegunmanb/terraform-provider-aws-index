package github.com/hashicorp/terraform-provider-aws/internal/service/dax
import (
	"cmp"
	"context"
	"fmt"
	"log"
	"reflect"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/dax"
	awstypes "github.com/aws/aws-sdk-go-v2/service/dax/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceClusterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DAXClient(ctx)

	clusterName := d.Get(names.AttrClusterName).(string)
	iamRoleArn := d.Get(names.AttrIAMRoleARN).(string)
	nodeType := d.Get("node_type").(string)
	numNodes := int32(d.Get("replication_factor").(int))
	subnetGroupName := d.Get("subnet_group_name").(string)
	securityIdSet := d.Get(names.AttrSecurityGroupIDs).(*schema.Set)
	securityIds := flex.ExpandStringSet(securityIdSet)
	input := &dax.CreateClusterInput{
		ClusterName:       aws.String(clusterName),
		IamRoleArn:        aws.String(iamRoleArn),
		NodeType:          aws.String(nodeType),
		ReplicationFactor: numNodes,
		SecurityGroupIds:  aws.ToStringSlice(securityIds),
		SubnetGroupName:   aws.String(subnetGroupName),
		Tags:              getTagsIn(ctx),
	}

	// optionals can be defaulted by AWS
	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("cluster_endpoint_encryption_type"); ok {
		input.ClusterEndpointEncryptionType = awstypes.ClusterEndpointEncryptionType(v.(string))
	}

	if v, ok := d.GetOk(names.AttrParameterGroupName); ok {
		input.ParameterGroupName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("maintenance_window"); ok {
		input.PreferredMaintenanceWindow = aws.String(v.(string))
	}

	if v, ok := d.GetOk("notification_topic_arn"); ok {
		input.NotificationTopicArn = aws.String(v.(string))
	}

	preferredAZs := d.Get(names.AttrAvailabilityZones).(*schema.Set)
	if preferredAZs.Len() > 0 {
		input.AvailabilityZones = flex.ExpandStringValueSet(preferredAZs)
	}

	if v, ok := d.GetOk("server_side_encryption"); ok && len(v.([]any)) > 0 {
		options := v.([]any)
		s := options[0].(map[string]any)
		input.SSESpecification = expandEncryptAtRestOptions(s)
	}

	// IAM roles take some time to propagate
	var resp *dax.CreateClusterOutput
	err := retry.RetryContext(ctx, propagationTimeout, func() *retry.RetryError {
		var err error
		resp, err = conn.CreateCluster(ctx, input)
		if errs.IsA[*awstypes.InvalidParameterValueException](err) {
			return retry.RetryableError(err)
		}

		if err != nil {
			return retry.NonRetryableError(err)
		}
		return nil
	})
	if tfresource.TimedOut(err) {
		resp, err = conn.CreateCluster(ctx, input)
	}
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating DAX cluster: %s", err)
	}

	// Assign the cluster id as the resource ID
	// DAX always retains the id in lower case, so we have to
	// mimic that or else we won't be able to refresh a resource whose
	// name contained uppercase characters.
	d.SetId(strings.ToLower(*resp.Cluster.ClusterName))

	pending := []string{"creating", "modifying"}
	stateConf := &retry.StateChangeConf{
		Pending:    pending,
		Target:     []string{"available"},
		Refresh:    clusterStateRefreshFunc(ctx, conn, d.Id(), "available", pending),
		Timeout:    d.Timeout(schema.TimeoutCreate),
		MinTimeout: 10 * time.Second,
		Delay:      30 * time.Second,
	}

	log.Printf("[DEBUG] Waiting for state to become available: %v", d.Id())
	_, sterr := stateConf.WaitForStateContext(ctx)
	if sterr != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for DAX cluster (%s) to be created: %s", d.Id(), sterr)
	}

	return append(diags, resourceClusterRead(ctx, d, meta)...)
}
