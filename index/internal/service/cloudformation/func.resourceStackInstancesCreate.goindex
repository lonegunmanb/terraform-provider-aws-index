package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStackInstancesCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CloudFormationClient(ctx)

	stackSetName := d.Get("stack_set_name").(string)
	input := &cloudformation.CreateStackInstancesInput{
		StackSetName: aws.String(stackSetName),
	}

	if v, ok := d.GetOk(AttrRegions); ok && v.(*schema.Set).Len() > 0 {
		input.Regions = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk(AttrRegions); !ok || v.(*schema.Set).Len() == 0 {
		input.Regions = []string{meta.(*conns.AWSClient).Region(ctx)}
	}

	if v, ok := d.GetOk(AttrAccounts); ok && v.(*schema.Set).Len() > 0 {
		input.Accounts = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	deployedByOU := ""
	if v, ok := d.GetOk("deployment_targets"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DeploymentTargets = expandDeploymentTargets(v.([]any))
		input.Accounts = nil

		if v, ok := d.GetOk("deployment_targets.0.organizational_unit_ids"); ok && len(v.(*schema.Set).List()) > 0 {
			deployedByOU = "OU"
		}
	} else {
		input.Accounts = []string{meta.(*conns.AWSClient).AccountID(ctx)}
	}

	callAs := d.Get("call_as").(string)
	if v, ok := d.GetOk("call_as"); ok {
		input.CallAs = awstypes.CallAs(v.(string))
	}

	if v, ok := d.GetOk("parameter_overrides"); ok {
		input.ParameterOverrides = expandParameters(v.(map[string]any))
	}

	if v, ok := d.GetOk("operation_preferences"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.OperationPreferences = expandOperationPreferences(v.([]any)[0].(map[string]any))
	}

	id, err := flex.FlattenResourceId([]string{stackSetName, callAs, deployedByOU}, stackInstancesResourceIDPartCount, true)
	if err != nil {
		return create.AppendDiagError(diags, names.CloudFormation, create.ErrActionFlatteningResourceId, ResNameStackInstances, stackSetName, err)
	}

	_, err = tfresource.RetryWhen(ctx, propagationTimeout,
		func() (any, error) {
			input.OperationId = aws.String(sdkid.UniqueId())

			output, err := conn.CreateStackInstances(ctx, input)
			if err != nil {
				return nil, err
			}

			d.SetId(id)

			operation, err := waitStackSetOperationSucceeded(ctx, conn, stackSetName, aws.ToString(output.OperationId), callAs, d.Timeout(schema.TimeoutCreate))
			if err != nil {
				return nil, fmt.Errorf("waiting for create: %w", err)
			}

			return operation, nil
		},
		isRetryableIAMPropagationErr,
	)

	if err != nil {
		return create.AppendDiagError(diags, names.CloudFormation, create.ErrActionCreating, ResNameStackInstances, id, err)
	}

	return append(diags, resourceStackInstancesRead(ctx, d, meta)...)
}
