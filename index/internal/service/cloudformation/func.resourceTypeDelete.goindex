package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTypeDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CloudFormationClient(ctx)

	log.Printf("[INFO] Deleting CloudFormation Type: %s", d.Id())
	input := cloudformation.DeregisterTypeInput{
		Arn: aws.String(d.Id()),
	}
	_, err := conn.DeregisterType(ctx, &input)

	// Must deregister type if removing final LIVE version. This error can also occur
	// when the type is already DEPRECATED.
	if errs.IsAErrorMessageContains[*awstypes.CFNRegistryException](err, "is the default version and cannot be deregistered") {
		typeARN, _, err := typeVersionARNToTypeARNAndVersionID(d.Id())
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := &cloudformation.ListTypeVersionsInput{
			Arn:              aws.String(typeARN),
			DeprecatedStatus: awstypes.DeprecatedStatusLive,
		}

		var typeVersionSummaries []awstypes.TypeVersionSummary

		pages := cloudformation.NewListTypeVersionsPaginator(conn, input)
		for pages.HasMorePages() {
			page, err := pages.NextPage(ctx)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "listing CloudFormation Type (%s) Versions: %s", d.Id(), err)
			}

			typeVersionSummaries = append(typeVersionSummaries, page.TypeVersionSummaries...)
		}

		if len(typeVersionSummaries) <= 1 {
			input := &cloudformation.DeregisterTypeInput{
				Arn: aws.String(typeARN),
			}

			_, err := conn.DeregisterType(ctx, input)

			if errs.IsA[*awstypes.TypeNotFoundException](err) {
				return diags
			}

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deregistering CloudFormation Type (%s): %s", d.Id(), err)
			}

			return diags
		}
	}

	if errs.IsA[*awstypes.TypeNotFoundException](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deregistering CloudFormation Type (%s): %s", d.Id(), err)
	}

	return diags
}
