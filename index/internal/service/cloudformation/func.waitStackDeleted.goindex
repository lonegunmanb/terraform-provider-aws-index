package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func waitStackDeleted(ctx context.Context, conn *cloudformation.Client, name, requestToken string, timeout time.Duration) (*awstypes.Stack, error) {
	const (
		minTimeout = 5 * time.Second
	)
	stateConf := retry.StateChangeConf{
		Pending:        enum.Slice(awstypes.StackStatusDeleteInProgress, awstypes.StackStatusRollbackInProgress),
		Target:         enum.Slice(awstypes.StackStatusDeleteComplete, awstypes.StackStatusDeleteFailed),
		Timeout:        timeout,
		MinTimeout:     minTimeout,
		Delay:          10 * time.Second,
		Refresh:        statusStack(ctx, conn, name),
		NotFoundChecks: 1,
	}

	outputRaw, err := stateConf.WaitForStateContext(ctx)
	switch {
	case tfresource.NotFound(err):
		return nil, nil
	case err != nil:
		return nil, err
	}

	output, ok := outputRaw.(*awstypes.Stack)
	if !ok {
		return nil, err
	}

	var reasonErr error

	switch output.StackStatus {
	case awstypes.StackStatusDeleteFailed:
		if events := getStackFailureEvents(ctx, conn, name, requestToken); len(events) > 0 {
			reasonErr = stackEventsError(events)
		} else {
			reasonErr = errors.New(aws.ToString(output.StackStatusReason))
		}
	}

	if reasonErr != nil {
		err = fmt.Errorf("stack status (%s): %w", output.StackStatus, reasonErr)
	}

	return output, err
}
