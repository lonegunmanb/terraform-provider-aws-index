package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func deleteStackInstances(ctx context.Context, d *schema.ResourceData, meta any, accounts, regions, dtAccounts, dtOUs []string) error {
	conn := meta.(*conns.AWSClient).CloudFormationClient(ctx)

	input := &cloudformation.DeleteStackInstancesInput{
		OperationId:  aws.String(sdkid.UniqueId()),
		Accounts:     accounts,
		Regions:      regions,
		RetainStacks: aws.Bool(d.Get("retain_stacks").(bool)),
		StackSetName: aws.String(d.Get("stack_set_name").(string)),
	}

	// can only give either accounts or deployment_targets
	if v, ok := d.GetOk("deployment_targets"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DeploymentTargets = expandDeploymentTargets(v.([]any))
		input.DeploymentTargets.Accounts = dtAccounts
		input.DeploymentTargets.OrganizationalUnitIds = dtOUs
		input.Accounts = nil
	}

	if v, ok := d.GetOk("call_as"); ok {
		input.CallAs = awstypes.CallAs(v.(string))
	}

	if v, ok := d.GetOk("operation_preferences"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.OperationPreferences = expandOperationPreferences(v.([]any)[0].(map[string]any))
	}

	log.Printf("[DEBUG] Deleting CloudFormation Stack Instances: %s", d.Id())
	outputRaw, err := tfresource.RetryWhenIsA[*awstypes.OperationInProgressException](ctx, d.Timeout(schema.TimeoutDelete), func() (any, error) {
		return conn.DeleteStackInstances(ctx, input)
	})

	if errs.IsA[*awstypes.StackInstanceNotFoundException](err) || errs.IsA[*awstypes.StackSetNotFoundException](err) {
		return nil
	}

	if err != nil {
		return err
	}

	if _, err := waitStackSetOperationSucceeded(ctx, conn, d.Get("stack_set_name").(string), aws.ToString(outputRaw.(*cloudformation.DeleteStackInstancesOutput).OperationId), d.Get("call_as").(string), d.Timeout(schema.TimeoutDelete)); err != nil {
		return err
	}

	return nil
}
