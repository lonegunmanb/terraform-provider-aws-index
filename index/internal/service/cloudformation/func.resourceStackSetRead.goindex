package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceStackSetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CloudFormationClient(ctx)

	callAs := d.Get("call_as").(string)
	stackSet, err := findStackSetByName(ctx, conn, d.Id(), callAs)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] CloudFormation StackSet (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading CloudFormation StackSet (%s): %s", d.Id(), err)
	}

	d.Set("administration_role_arn", stackSet.AdministrationRoleARN)
	d.Set(names.AttrARN, stackSet.StackSetARN)
	if err := d.Set("auto_deployment", flattenStackSetAutoDeploymentResponse(stackSet.AutoDeployment)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting auto_deployment: %s", err)
	}
	d.Set("capabilities", stackSet.Capabilities)
	d.Set(names.AttrDescription, stackSet.Description)
	d.Set("execution_role_name", stackSet.ExecutionRoleName)
	if err := d.Set("managed_execution", flattenStackSetManagedExecution(stackSet.ManagedExecution)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting managed_execution: %s", err)
	}
	d.Set(names.AttrName, stackSet.StackSetName)
	d.Set("permission_model", stackSet.PermissionModel)
	if err := d.Set(names.AttrParameters, flattenAllParameters(stackSet.Parameters)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting parameters: %s", err)
	}
	d.Set("stack_set_id", stackSet.StackSetId)
	d.Set("template_body", stackSet.TemplateBody)

	setTagsOut(ctx, stackSet.Tags)

	return diags
}
