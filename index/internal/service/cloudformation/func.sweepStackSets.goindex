package github.com/hashicorp/terraform-provider-aws/internal/service/cloudformation
import (
	"context"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tforganizations "github.com/hashicorp/terraform-provider-aws/internal/service/organizations"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
)
func sweepStackSets(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.CloudFormationClient(ctx)
	input := cloudformation.ListStackSetsInput{
		Status: awstypes.StackSetStatusActive,
	}
	sweepResources := make([]sweep.Sweepable, 0)

	// Attempt to determine whether or not Organizations access is enabled.
	orgAccessEnabled := false
	if servicePrincipalNames, err := tforganizations.FindEnabledServicePrincipalNames(ctx, client.OrganizationsClient(ctx)); err == nil {
		orgAccessEnabled = slices.Contains(servicePrincipalNames, "member.org.stacksets.cloudformation.amazonaws.com")
	}

	pages := cloudformation.NewListStackSetsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.Summaries {
			name := aws.ToString(v.StackSetName)

			if status := v.Status; status == awstypes.StackSetStatusDeleted {
				log.Printf("[INFO] SkippingCloudFormation StackSet %s: Status=%s", name, status)
				continue
			}

			if permissionModel := v.PermissionModel; permissionModel == awstypes.PermissionModelsServiceManaged && !orgAccessEnabled {
				log.Printf("[INFO] SkippingCloudFormation StackSet %s: PermissionModel=%s", name, permissionModel)
				continue
			}

			r := resourceStackSet()
			d := r.Data(nil)
			d.SetId(name)
			d.Set("call_as", awstypes.CallAsSelf)

			sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
		}
	}

	return sweepResources, nil
}
