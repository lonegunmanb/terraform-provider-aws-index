package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func startNotebookInstance(ctx context.Context, conn *sagemaker.Client, id string) error {
	startOpts := &sagemaker.StartNotebookInstanceInput{
		NotebookInstanceName: aws.String(id),
	}
	// StartNotebookInstance sometimes doesn't take so we'll check for a state change and if
	// it doesn't change we'll send another request
	err := tfresource.Retry(ctx, 5*time.Minute, func(ctx context.Context) *tfresource.RetryError {
		_, err := conn.StartNotebookInstance(ctx, startOpts)
		if err != nil {
			return tfresource.NonRetryableError(fmt.Errorf("starting: %w", err))
		}

		err = waitNotebookInstanceStarted(ctx, conn, id)
		if err != nil {
			return tfresource.RetryableError(fmt.Errorf("starting: waiting for completion: %w", err))
		}

		return nil
	})

	if err != nil {
		return fmt.Errorf("starting: %w", err)
	}

	if err := waitNotebookInstanceInService(ctx, conn, id); err != nil {
		return fmt.Errorf("starting: waiting to be in service: %w", err)
	}
	return nil
}
