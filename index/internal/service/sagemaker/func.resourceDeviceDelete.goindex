package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDeviceDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	deviceFleetName, deviceName, err := decodeDeviceId(d.Id())
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting SageMaker AI Device (%s): %s", d.Id(), err)
	}

	input := &sagemaker.DeregisterDevicesInput{
		DeviceFleetName: aws.String(deviceFleetName),
		DeviceNames:     []string{deviceName},
	}

	if _, err := conn.DeregisterDevices(ctx, input); err != nil {
		if tfawserr.ErrMessageContains(err, ErrCodeValidationException, "Device with name") ||
			tfawserr.ErrMessageContains(err, ErrCodeValidationException, "No device fleet with name") {
			return diags
		}
		return sdkdiag.AppendErrorf(diags, "deleting SageMaker AI Device (%s): %s", d.Id(), err)
	}

	return diags
}
