package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandProjectProvisioningParameters(l []any) []awstypes.ProvisioningParameter {
	if len(l) == 0 {
		return nil
	}

	params := make([]awstypes.ProvisioningParameter, 0, len(l))

	for _, lRaw := range l {
		data := lRaw.(map[string]any)

		scpd := awstypes.ProvisioningParameter{
			Key: aws.String(data[names.AttrKey].(string)),
		}

		if v, ok := data[names.AttrValue].(string); ok && v != "" {
			scpd.Value = aws.String(v)
		}

		params = append(params, scpd)
	}

	return params
}
