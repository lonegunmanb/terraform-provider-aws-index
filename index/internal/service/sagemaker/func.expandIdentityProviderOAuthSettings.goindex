package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandIdentityProviderOAuthSettings(l []any) []awstypes.IdentityProviderOAuthSetting {
	providers := make([]awstypes.IdentityProviderOAuthSetting, 0, len(l))

	for _, eRaw := range l {
		data := eRaw.(map[string]any)

		provider := awstypes.IdentityProviderOAuthSetting{}

		if v, ok := data["data_source_name"].(string); ok && v != "" {
			provider.DataSourceName = awstypes.DataSourceName(v)
		}

		if v, ok := data["secret_arn"].(string); ok && v != "" {
			provider.SecretArn = aws.String(v)
		}

		if v, ok := data[names.AttrStatus].(string); ok && v != "" {
			provider.Status = awstypes.FeatureStatus(v)
		}

		providers = append(providers, provider)
	}

	return providers
}
