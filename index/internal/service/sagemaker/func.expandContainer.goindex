package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContainer(m map[string]any) *awstypes.ContainerDefinition {
	container := awstypes.ContainerDefinition{}

	if v, ok := m["image"]; ok && v.(string) != "" {
		container.Image = aws.String(v.(string))
	}

	if v, ok := m[names.AttrMode]; ok && v.(string) != "" {
		container.Mode = awstypes.ContainerMode(v.(string))
	}

	if v, ok := m["container_hostname"]; ok && v.(string) != "" {
		container.ContainerHostname = aws.String(v.(string))
	}
	if v, ok := m["model_data_url"]; ok && v.(string) != "" {
		container.ModelDataUrl = aws.String(v.(string))
	}
	if v, ok := m["model_package_name"]; ok && v.(string) != "" {
		container.ModelPackageName = aws.String(v.(string))
	}
	if v, ok := m["model_data_source"]; ok {
		container.ModelDataSource = expandModelDataSource(v.([]any))
	}
	if v, ok := m[names.AttrEnvironment].(map[string]any); ok && len(v) > 0 {
		container.Environment = flex.ExpandStringValueMap(v)
	}

	if v, ok := m["image_config"]; ok {
		container.ImageConfig = expandModelImageConfig(v.([]any))
	}

	if v, ok := m["inference_specification_name"]; ok && v.(string) != "" {
		container.InferenceSpecificationName = aws.String(v.(string))
	}

	if v, ok := m["multi_model_config"].([]any); ok && len(v) > 0 {
		container.MultiModelConfig = expandMultiModelConfig(v)
	}

	return &container
}
