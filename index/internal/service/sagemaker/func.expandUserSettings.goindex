package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandUserSettings(l []any) *awstypes.UserSettings {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	m := l[0].(map[string]any)

	config := &awstypes.UserSettings{}

	if v, ok := m["auto_mount_home_efs"].(string); ok && v != "" {
		config.AutoMountHomeEFS = awstypes.AutoMountHomeEFS(v)
	}

	if v, ok := m["canvas_app_settings"].([]any); ok && len(v) > 0 {
		config.CanvasAppSettings = expandCanvasAppSettings(v)
	}

	if v, ok := m["execution_role"].(string); ok && v != "" {
		config.ExecutionRole = aws.String(v)
	}

	if v, ok := m["default_landing_uri"].(string); ok && v != "" {
		config.DefaultLandingUri = aws.String(v)
	}

	if v, ok := m["code_editor_app_settings"].([]any); ok && len(v) > 0 {
		config.CodeEditorAppSettings = expandDomainCodeEditorAppSettings(v)
	}

	if v, ok := m["custom_file_system_config"].([]any); ok {
		if len(v) > 0 {
			config.CustomFileSystemConfigs = expandCustomFileSystemConfigs(v)
		} else {
			config.CustomFileSystemConfigs = []awstypes.CustomFileSystemConfig{}
		}
	}

	if v, ok := m["custom_posix_user_config"].([]any); ok && len(v) > 0 {
		config.CustomPosixUserConfig = expandCustomPOSIXUserConfig(v)
	}

	if v, ok := m["jupyter_lab_app_settings"].([]any); ok && len(v) > 0 {
		config.JupyterLabAppSettings = expandDomainJupyterLabAppSettings(v)
	}

	if v, ok := m["jupyter_server_app_settings"].([]any); ok && len(v) > 0 {
		config.JupyterServerAppSettings = expandDomainJupyterServerAppSettings(v)
	}

	if v, ok := m["kernel_gateway_app_settings"].([]any); ok && len(v) > 0 {
		config.KernelGatewayAppSettings = expandDomainKernelGatewayAppSettings(v)
	}

	if v, ok := m["r_session_app_settings"].([]any); ok && len(v) > 0 {
		config.RSessionAppSettings = expandRSessionAppSettings(v)
	}

	if v, ok := m[names.AttrSecurityGroups].(*schema.Set); ok && v.Len() > 0 {
		config.SecurityGroups = flex.ExpandStringValueSet(v)
	}

	if v, ok := m["sharing_settings"].([]any); ok && len(v) > 0 {
		config.SharingSettings = expandDomainShareSettings(v)
	}

	if v, ok := m["studio_web_portal"].(string); ok && v != "" {
		config.StudioWebPortal = awstypes.StudioWebPortal(v)
	}

	if v, ok := m["space_storage_settings"].([]any); ok && len(v) > 0 {
		config.SpaceStorageSettings = expandDefaultSpaceStorageSettings(v)
	}

	if v, ok := m["tensor_board_app_settings"].([]any); ok && len(v) > 0 {
		config.TensorBoardAppSettings = expandDomainTensorBoardAppSettings(v)
	}

	if v, ok := m["r_studio_server_pro_app_settings"].([]any); ok && len(v) > 0 {
		config.RStudioServerProAppSettings = expandRStudioServerProAppSettings(v)
	}

	if v, ok := m["studio_web_portal_settings"].([]any); ok && len(v) > 0 {
		config.StudioWebPortalSettings = expandStudioWebPortalSettings(v)
	}

	return config
}
