package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSpaceCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	domainId := d.Get("domain_id").(string)
	spaceName := d.Get("space_name").(string)
	input := &sagemaker.CreateSpaceInput{
		SpaceName: aws.String(spaceName),
		DomainId:  aws.String(domainId),
		Tags:      getTagsIn(ctx),
	}

	if v, ok := d.GetOk("ownership_settings"); ok && len(v.([]any)) > 0 {
		input.OwnershipSettings = expandOwnershipSettings(v.([]any))
	}

	if v, ok := d.GetOk("space_settings"); ok && len(v.([]any)) > 0 {
		input.SpaceSettings = expandSpaceSettings(v.([]any))
	}

	if v, ok := d.GetOk("space_sharing_settings"); ok && len(v.([]any)) > 0 {
		input.SpaceSharingSettings = expandSpaceSharingSettings(v.([]any))
	}

	if v, ok := d.GetOk("space_display_name"); ok {
		input.SpaceDisplayName = aws.String(v.(string))
	}

	log.Printf("[DEBUG] SageMaker AI Space create config: %#v", *input)
	out, err := conn.CreateSpace(ctx, input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SageMaker AI Space: %s", err)
	}

	d.SetId(aws.ToString(out.SpaceArn))

	if err := waitSpaceInService(ctx, conn, domainId, spaceName); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for SageMaker AI Space (%s) to create: %s", d.Id(), err)
	}

	return append(diags, resourceSpaceRead(ctx, d, meta)...)
}
