package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNotebookInstanceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &sagemaker.UpdateNotebookInstanceInput{
			NotebookInstanceName: aws.String(d.Get(names.AttrName).(string)),
		}

		if d.HasChange("additional_code_repositories") {
			if v, ok := d.GetOk("additional_code_repositories"); ok {
				input.AdditionalCodeRepositories = flex.ExpandStringValueSet(v.(*schema.Set))
			} else {
				input.DisassociateAdditionalCodeRepositories = aws.Bool(true)
			}
		}

		if d.HasChange("default_code_repository") {
			if v, ok := d.GetOk("default_code_repository"); ok {
				input.DefaultCodeRepository = aws.String(v.(string))
			} else {
				input.DisassociateDefaultCodeRepository = aws.Bool(true)
			}
		}

		if d.HasChange("instance_metadata_service_configuration") {
			input.InstanceMetadataServiceConfiguration = expandNotebookInstanceMetadataServiceConfiguration(d.Get("instance_metadata_service_configuration").([]any))
		}

		if d.HasChange(names.AttrInstanceType) {
			input.InstanceType = awstypes.InstanceType(d.Get(names.AttrInstanceType).(string))
		}

		if d.HasChange("lifecycle_config_name") {
			if v, ok := d.GetOk("lifecycle_config_name"); ok {
				input.LifecycleConfigName = aws.String(v.(string))
			} else {
				input.DisassociateLifecycleConfig = aws.Bool(true)
			}
		}

		if d.HasChange(names.AttrRoleARN) {
			input.RoleArn = aws.String(d.Get(names.AttrRoleARN).(string))
		}

		if d.HasChange("root_access") {
			input.RootAccess = awstypes.RootAccess(d.Get("root_access").(string))
		}

		if d.HasChange(names.AttrVolumeSize) {
			input.VolumeSizeInGB = aws.Int32(int32(d.Get(names.AttrVolumeSize).(int)))
		}

		// Stop notebook.
		notebook, err := findNotebookInstanceByName(ctx, conn, d.Id())

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SageMaker AI Notebook Instance (%s): %s", d.Id(), err)
		}

		previousStatus := notebook.NotebookInstanceStatus

		if previousStatus != awstypes.NotebookInstanceStatusStopped {
			if err := stopNotebookInstance(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating SageMaker AI Notebook Instance (%s): %s", d.Id(), err)
			}
		}

		if _, err := conn.UpdateNotebookInstance(ctx, input); err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SageMaker AI Notebook Instance (%s): %s", d.Id(), err)
		}

		if err := waitNotebookInstanceStopped(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for SageMaker AI Notebook Instance (%s) to stop: %s", d.Id(), err)
		}

		// Restart if needed
		if previousStatus == awstypes.NotebookInstanceStatusInService {
			if err := startNotebookInstance(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendErrorf(diags, "updating SageMaker AI Notebook Instance (%s): %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceNotebookInstanceRead(ctx, d, meta)...)
}
