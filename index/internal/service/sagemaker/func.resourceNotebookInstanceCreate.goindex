package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNotebookInstanceCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &sagemaker.CreateNotebookInstanceInput{
		InstanceMetadataServiceConfiguration: expandNotebookInstanceMetadataServiceConfiguration(d.Get("instance_metadata_service_configuration").([]any)),
		InstanceType:                         awstypes.InstanceType(d.Get(names.AttrInstanceType).(string)),
		NotebookInstanceName:                 aws.String(name),
		RoleArn:                              aws.String(d.Get(names.AttrRoleARN).(string)),
		SecurityGroupIds:                     flex.ExpandStringValueSet(d.Get(names.AttrSecurityGroups).(*schema.Set)),
		Tags:                                 getTagsIn(ctx),
	}

	if v, ok := d.GetOk("additional_code_repositories"); ok && v.(*schema.Set).Len() > 0 {
		input.AdditionalCodeRepositories = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("default_code_repository"); ok {
		input.DefaultCodeRepository = aws.String(v.(string))
	}

	if v, ok := d.GetOk("direct_internet_access"); ok {
		input.DirectInternetAccess = awstypes.DirectInternetAccess(v.(string))
	}

	if k, ok := d.GetOk(names.AttrKMSKeyID); ok {
		input.KmsKeyId = aws.String(k.(string))
	}

	if l, ok := d.GetOk("lifecycle_config_name"); ok {
		input.LifecycleConfigName = aws.String(l.(string))
	}

	if v, ok := d.GetOk("platform_identifier"); ok {
		input.PlatformIdentifier = aws.String(v.(string))
	}

	if v, ok := d.GetOk("root_access"); ok {
		input.RootAccess = awstypes.RootAccess(v.(string))
	}

	if s, ok := d.GetOk(names.AttrSubnetID); ok {
		input.SubnetId = aws.String(s.(string))
	}

	if v, ok := d.GetOk(names.AttrVolumeSize); ok {
		input.VolumeSizeInGB = aws.Int32(int32(v.(int)))
	}

	log.Printf("[DEBUG] Creating SageMaker AI Notebook Instance: %#v", input)
	_, err := conn.CreateNotebookInstance(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SageMaker AI Notebook Instance: %s", err)
	}

	d.SetId(name)

	if err := waitNotebookInstanceInService(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for SageMaker AI Notebook Instance (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceNotebookInstanceRead(ctx, d, meta)...)
}
