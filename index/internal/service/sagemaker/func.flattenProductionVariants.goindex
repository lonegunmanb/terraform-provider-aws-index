package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenProductionVariants(list []awstypes.ProductionVariant) []map[string]any {
	result := make([]map[string]any, 0, len(list))

	for _, i := range list {
		l := map[string]any{
			"accelerator_type":       i.AcceleratorType,
			names.AttrInstanceType:   i.InstanceType,
			"inference_ami_version":  i.InferenceAmiVersion,
			"initial_variant_weight": aws.ToFloat32(i.InitialVariantWeight),
			"model_name":             aws.ToString(i.ModelName),
			"variant_name":           aws.ToString(i.VariantName),
		}

		if i.InitialInstanceCount != nil {
			l["initial_instance_count"] = aws.ToInt32(i.InitialInstanceCount)
		}

		if i.ContainerStartupHealthCheckTimeoutInSeconds != nil {
			l["container_startup_health_check_timeout_in_seconds"] = aws.ToInt32(i.ContainerStartupHealthCheckTimeoutInSeconds)
		}

		if i.ModelDataDownloadTimeoutInSeconds != nil {
			l["model_data_download_timeout_in_seconds"] = aws.ToInt32(i.ModelDataDownloadTimeoutInSeconds)
		}

		if i.VolumeSizeInGB != nil {
			l["volume_size_in_gb"] = aws.ToInt32(i.VolumeSizeInGB)
		}

		if i.RoutingConfig != nil {
			l["routing_config"] = flattenRoutingConfig(i.RoutingConfig)
		}

		if i.ServerlessConfig != nil {
			l["serverless_config"] = flattenServerlessConfig(i.ServerlessConfig)
		}

		if i.CoreDumpConfig != nil {
			l["core_dump_config"] = flattenCoreDumpConfig(i.CoreDumpConfig)
		}

		if i.EnableSSMAccess != nil {
			l["enable_ssm_access"] = aws.ToBool(i.EnableSSMAccess)
		}

		if i.ManagedInstanceScaling != nil {
			l["managed_instance_scaling"] = flattenManagedInstanceScaling(i.ManagedInstanceScaling)
		}

		result = append(result, l)
	}
	return result
}
