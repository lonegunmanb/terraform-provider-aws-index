package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceServicecatalogPortfolioStatusPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	status := d.Get(names.AttrStatus).(string)
	var err error
	if status == string(awstypes.SagemakerServicecatalogStatusEnabled) {
		_, err = conn.EnableSagemakerServicecatalogPortfolio(ctx, &sagemaker.EnableSagemakerServicecatalogPortfolioInput{})
	} else {
		_, err = conn.DisableSagemakerServicecatalogPortfolio(ctx, &sagemaker.DisableSagemakerServicecatalogPortfolioInput{})
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "setting SageMaker AI Servicecatalog Portfolio Status: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))

	return append(diags, resourceServicecatalogPortfolioStatusRead(ctx, d, meta)...)
}
