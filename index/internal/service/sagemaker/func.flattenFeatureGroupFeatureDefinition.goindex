package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenFeatureGroupFeatureDefinition(config []awstypes.FeatureDefinition) []map[string]any {
	features := make([]map[string]any, 0, len(config))

	for _, i := range config {
		feature := map[string]any{
			"feature_name": aws.ToString(i.FeatureName),
			"feature_type": i.FeatureType,
		}

		if i.CollectionConfig != nil {
			feature["collection_config"] = flattenCollectionConfig(i.CollectionConfig.(*awstypes.CollectionConfigMemberVectorConfig))
		}

		if i.CollectionType != "" {
			feature["collection_type"] = i.CollectionType
		}

		features = append(features, feature)
	}
	return features
}
