package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenContainer(container *awstypes.ContainerDefinition) []any {
	if container == nil {
		return []any{}
	}

	cfg := make(map[string]any)

	if container.Image != nil {
		cfg["image"] = aws.ToString(container.Image)
	}

	cfg[names.AttrMode] = container.Mode

	if container.ContainerHostname != nil {
		cfg["container_hostname"] = aws.ToString(container.ContainerHostname)
	}
	if container.ModelDataUrl != nil {
		cfg["model_data_url"] = aws.ToString(container.ModelDataUrl)
	}
	if container.ModelDataSource != nil {
		cfg["model_data_source"] = flattenModelDataSource(container.ModelDataSource)
	}
	if container.ModelPackageName != nil {
		cfg["model_package_name"] = aws.ToString(container.ModelPackageName)
	}
	if container.Environment != nil {
		cfg[names.AttrEnvironment] = aws.StringMap(container.Environment)
	}

	if container.ImageConfig != nil {
		cfg["image_config"] = flattenImageConfig(container.ImageConfig)
	}

	if container.InferenceSpecificationName != nil {
		cfg["inference_specification_name"] = aws.ToString(container.InferenceSpecificationName)
	}

	if container.MultiModelConfig != nil {
		cfg["multi_model_config"] = flattenMultiModelConfig(container.MultiModelConfig)
	}

	return []any{cfg}
}
