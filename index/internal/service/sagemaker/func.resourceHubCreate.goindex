package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceHubCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	name := d.Get("hub_name").(string)
	input := &sagemaker.CreateHubInput{
		HubName:        aws.String(name),
		HubDescription: aws.String(d.Get("hub_description").(string)),
		Tags:           getTagsIn(ctx),
	}

	if v, ok := d.GetOk("hub_display_name"); ok {
		input.HubDisplayName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("hub_search_keywords"); ok {
		input.HubSearchKeywords = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	if v, ok := d.GetOk("s3_storage_config"); ok {
		input.S3StorageConfig = expandS3StorageConfig(v.([]any))
	}

	_, err := conn.CreateHub(ctx, input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SageMaker AI Hub %s: %s", name, err)
	}

	d.SetId(name)

	if _, err := waitHubInService(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for SageMaker AI Hub (%s) to be InService: %s", d.Id(), err)
	}

	return append(diags, resourceHubRead(ctx, d, meta)...)
}
