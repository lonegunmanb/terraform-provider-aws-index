package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandProductionVariants(configured []any) []awstypes.ProductionVariant {
	containers := make([]awstypes.ProductionVariant, 0, len(configured))

	for _, lRaw := range configured {
		data := lRaw.(map[string]any)

		l := awstypes.ProductionVariant{
			ModelName: aws.String(data["model_name"].(string)),
		}

		if v, ok := data["initial_instance_count"].(int); ok && v > 0 {
			l.InitialInstanceCount = aws.Int32(int32(v))
		}

		if v, ok := data["container_startup_health_check_timeout_in_seconds"].(int); ok && v > 0 {
			l.ContainerStartupHealthCheckTimeoutInSeconds = aws.Int32(int32(v))
		}

		if v, ok := data["model_data_download_timeout_in_seconds"].(int); ok && v > 0 {
			l.ModelDataDownloadTimeoutInSeconds = aws.Int32(int32(v))
		}

		if v, ok := data["volume_size_in_gb"].(int); ok && v > 0 {
			l.VolumeSizeInGB = aws.Int32(int32(v))
		}

		if v, ok := data[names.AttrInstanceType].(string); ok && v != "" {
			l.InstanceType = awstypes.ProductionVariantInstanceType(v)
		}

		if v, ok := data["variant_name"].(string); ok && v != "" {
			l.VariantName = aws.String(v)
		} else {
			l.VariantName = aws.String(id.UniqueId())
		}

		if v, ok := data["initial_variant_weight"].(float64); ok {
			l.InitialVariantWeight = aws.Float32(float32(v))
		}

		if v, ok := data["accelerator_type"].(string); ok && v != "" {
			l.AcceleratorType = awstypes.ProductionVariantAcceleratorType(v)
		}

		if v, ok := data["routing_config"].([]any); ok && len(v) > 0 {
			l.RoutingConfig = expandRoutingConfig(v)
		}

		if v, ok := data["serverless_config"].([]any); ok && len(v) > 0 {
			l.ServerlessConfig = expandServerlessConfig(v)
		}

		if v, ok := data["core_dump_config"].([]any); ok && len(v) > 0 {
			l.CoreDumpConfig = expandCoreDumpConfig(v)
		}

		if v, ok := data["enable_ssm_access"].(bool); ok {
			l.EnableSSMAccess = aws.Bool(v)
		}

		if v, ok := data["managed_instance_scaling"].([]any); ok && len(v) > 0 {
			l.ManagedInstanceScaling = expandManagedInstanceScaling(v)
		}

		if v, ok := data["inference_ami_version"].(string); ok && v != "" {
			l.InferenceAmiVersion = awstypes.ProductionVariantInferenceAmiVersion(v)
		}

		containers = append(containers, l)
	}

	return containers
}
