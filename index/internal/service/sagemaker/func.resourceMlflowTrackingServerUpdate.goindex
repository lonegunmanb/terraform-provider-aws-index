package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMlflowTrackingServerUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := sagemaker.UpdateMlflowTrackingServerInput{
			TrackingServerName: aws.String(d.Id()),
		}

		if d.HasChange("artifact_store_uri") {
			if v, ok := d.GetOk("artifact_store_uri"); ok {
				input.ArtifactStoreUri = aws.String(v.(string))
			}
		}

		if d.HasChange("automatic_model_registration") {
			if v, ok := d.GetOk("automatic_model_registration"); ok {
				input.AutomaticModelRegistration = aws.Bool(v.(bool))
			}
		}

		if d.HasChange("tracking_server_size") {
			if v, ok := d.GetOk("tracking_server_size"); ok {
				input.TrackingServerSize = awstypes.TrackingServerSize(v.(string))
			}
		}

		if d.HasChange("weekly_maintenance_window_start") {
			if v, ok := d.GetOk("weekly_maintenance_window_start"); ok {
				input.WeeklyMaintenanceWindowStart = aws.String(v.(string))
			}
		}

		_, err := conn.UpdateMlflowTrackingServer(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating SageMaker AI Mlflow Tracking Server (%s): %s", d.Id(), err)
		}

		if _, err := waitMlflowTrackingServerUpdated(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for SageMaker AI Mlflow Tracking Server (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceMlflowTrackingServerRead(ctx, d, meta)...)
}
