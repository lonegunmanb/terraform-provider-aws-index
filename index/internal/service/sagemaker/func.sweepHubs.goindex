package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
)
func sweepHubs(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.SageMakerClient(ctx)
	var input sagemaker.ListHubsInput
	sweepResources := make([]sweep.Sweepable, 0)

	err := listHubsPages(ctx, conn, &input, func(page *sagemaker.ListHubsOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		for _, v := range page.HubSummaries {
			name := aws.ToString(v.HubName)

			if !strings.HasPrefix(name, sweep.ResourcePrefix) {
				log.Printf("[INFO] Skipping SageMaker AI Hub %s", name)
				continue
			}

			r := resourceHub()
			d := r.Data(nil)
			d.SetId(name)

			sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
		}

		return !lastPage
	})

	if err != nil {
		return nil, err
	}

	return sweepResources, nil
}
