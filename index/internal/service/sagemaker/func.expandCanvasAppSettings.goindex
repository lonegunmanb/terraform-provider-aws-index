package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandCanvasAppSettings(l []any) *awstypes.CanvasAppSettings {
	if len(l) == 0 || l[0] == nil {
		return nil
	}

	m := l[0].(map[string]any)

	config := &awstypes.CanvasAppSettings{}

	if v, ok := m["direct_deploy_settings"].([]any); ok {
		config.DirectDeploySettings = expandDirectDeploySettings(v)
	}

	if v, ok := m["emr_serverless_settings"].([]any); ok {
		config.EmrServerlessSettings = expandEMRServerlessSettings(v)
	}

	if v, ok := m["generative_ai_settings"].([]any); ok {
		config.GenerativeAiSettings = expandGenerativeAiSettings(v)
	}
	if v, ok := m["identity_provider_oauth_settings"].([]any); ok {
		config.IdentityProviderOAuthSettings = expandIdentityProviderOAuthSettings(v)
	}
	if v, ok := m["kendra_settings"].([]any); ok {
		config.KendraSettings = expandKendraSettings(v)
	}
	if v, ok := m["model_register_settings"].([]any); ok {
		config.ModelRegisterSettings = expandModelRegisterSettings(v)
	}
	if v, ok := m["time_series_forecasting_settings"].([]any); ok {
		config.TimeSeriesForecastingSettings = expandTimeSeriesForecastingSettings(v)
	}
	if v, ok := m["workspace_settings"].([]any); ok {
		config.WorkspaceSettings = expandWorkspaceSettings(v)
	}

	return config
}
