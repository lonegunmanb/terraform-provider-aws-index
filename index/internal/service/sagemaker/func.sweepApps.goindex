package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
)
func sweepApps(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.SageMakerClient(ctx)
	var input sagemaker.ListAppsInput
	sweepResources := make([]sweep.Sweepable, 0)

	pages := sagemaker.NewListAppsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.Apps {
			if v.Status == awstypes.AppStatusDeleted {
				continue
			}

			r := resourceApp()
			d := r.Data(nil)
			d.SetId(aws.ToString(v.AppName))
			d.Set("app_name", v.AppName)
			d.Set("app_type", v.AppType)
			d.Set("domain_id", v.DomainId)
			d.Set("user_profile_name", v.UserProfileName)
			d.Set("space_name", v.SpaceName)

			sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
		}
	}

	return sweepResources, nil
}
