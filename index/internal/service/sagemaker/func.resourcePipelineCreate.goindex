package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePipelineCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	name := d.Get("pipeline_name").(string)
	input := &sagemaker.CreatePipelineInput{
		ClientRequestToken:  aws.String(id.UniqueId()),
		PipelineDisplayName: aws.String(d.Get("pipeline_display_name").(string)),
		PipelineName:        aws.String(name),
		RoleArn:             aws.String(d.Get(names.AttrRoleARN).(string)),
		Tags:                getTagsIn(ctx),
	}

	if v, ok := d.GetOk("parallelism_configuration"); ok {
		input.ParallelismConfiguration = expandParallelismConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("pipeline_definition"); ok {
		input.PipelineDefinition = aws.String(v.(string))
	}

	if v, ok := d.GetOk("pipeline_definition_s3_location"); ok {
		input.PipelineDefinitionS3Location = expandPipelineDefinitionS3Location(v.([]any))
	}

	if v, ok := d.GetOk("pipeline_description"); ok {
		input.PipelineDescription = aws.String(v.(string))
	}

	_, err := conn.CreatePipeline(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating SageMaker AI Pipeline (%s): %s", name, err)
	}

	d.SetId(name)

	return append(diags, resourcePipelineRead(ctx, d, meta)...)
}
