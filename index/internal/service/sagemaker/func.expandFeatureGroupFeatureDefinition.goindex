package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandFeatureGroupFeatureDefinition(l []any) []awstypes.FeatureDefinition {
	featureDefs := make([]awstypes.FeatureDefinition, 0, len(l))

	for _, lRaw := range l {
		data := lRaw.(map[string]any)

		featureDef := awstypes.FeatureDefinition{
			FeatureName: aws.String(data["feature_name"].(string)),
			FeatureType: awstypes.FeatureType(data["feature_type"].(string)),
		}

		if v, ok := data["collection_config"].([]any); ok && len(v) > 0 {
			featureDef.CollectionConfig = expandCollectionConfig(v)
		}

		if v, ok := data["collection_type"].(string); ok && v != "" {
			featureDef.CollectionType = awstypes.CollectionType(v)
		}

		featureDefs = append(featureDefs, featureDef)
	}

	return featureDefs
}
