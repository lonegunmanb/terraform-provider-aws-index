package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	awstypes "github.com/aws/aws-sdk-go-v2/service/sagemaker/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceNotebookInstanceLifeCycleConfigurationRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SageMakerClient(ctx)

	output, err := findNotebookInstanceLifecycleConfigByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[INFO] unable to find the SageMaker AI notebook instance lifecycle configuration (%s); therefore it is removed from the state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading SageMaker AI notebook instance lifecycle configuration %s: %s", d.Id(), err)
	}

	if err := d.Set(names.AttrName, output.NotebookInstanceLifecycleConfigName); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting name for SageMaker AI notebook instance lifecycle configuration (%s): %s", d.Id(), err)
	}

	if len(output.OnCreate) > 0 {
		if err := d.Set("on_create", output.OnCreate[0].Content); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting on_create for SageMaker AI notebook instance lifecycle configuration (%s): %s", d.Id(), err)
		}
	}

	if len(output.OnStart) > 0 {
		if err := d.Set("on_start", output.OnStart[0].Content); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting on_start for SageMaker AI notebook instance lifecycle configuration (%s): %s", d.Id(), err)
		}
	}

	if err := d.Set(names.AttrARN, output.NotebookInstanceLifecycleConfigArn); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting arn for SageMaker AI notebook instance lifecycle configuration (%s): %s", d.Id(), err)
	}

	return diags
}
