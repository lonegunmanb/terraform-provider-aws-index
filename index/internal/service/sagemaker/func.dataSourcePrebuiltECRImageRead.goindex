package github.com/hashicorp/terraform-provider-aws/internal/service/sagemaker
import (
	"context"
	"fmt"

	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourcePrebuiltECRImageRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	region := meta.(*conns.AWSClient).Region(ctx)
	suffix := meta.(*conns.AWSClient).DNSSuffix(ctx)
	if v, ok := d.GetOk("dns_suffix"); ok {
		suffix = v.(string)
	}
	repo := d.Get(names.AttrRepositoryName).(string)
	var id string

	switch repo {
	case repositoryBlazingText,
		repositoryImageClassification,
		repositoryObjectDetection,
		repositorySemanticSegmentation,
		repositorySeq2Seq:
		id = prebuiltECRImageIDByRegion_blazing[region]
	case repositoryClarify:
		id = prebuiltECRImageIDByRegion_clarify[region]
	case repositoryDataWrangler:
		id = prebuiltECRImageIDByRegion_dataWrangler[region]
	case repositoryDebugger:
		id = prebuiltECRImageIDByRegion_debugger[region]
	case repositoryDeepARForecasting:
		id = prebuiltECRImageIDByRegion_deepAR[region]
	case repositoryInferentiaMXNet,
		repositoryInferentiaPyTorch,
		repositoryMXNetCoach,
		repositoryNeoImageClassification,
		repositoryNeoMXNet,
		repositoryNeoPyTorch,
		repositoryNeoTensorflow,
		repositoryNeoXGBoost,
		repositoryTensorflowInferentia:
		id = prebuiltECRImageIDByRegion_inferentiaNeo[region]
	case repositoryLDA:
		id = prebuiltECRImageIDByRegion_lda[region]
	case repositoryModelMonitor:
		id = prebuiltECRImageIDByRegion_modelMonitor[region]
	case repositoryXGBoost,
		repositoryScikitLearn,
		repositorySparkML,
		repositoryHuggingFaceTEI,
		repositoryHuggingFaceTEICPU:
		id = prebuiltECRImageIDByRegion_XGBoost[region]
	case repositoryChainer,
		repositorySageMakerMXNet,
		repositorySageMakerMXNetServing,
		repositorySageMakerMXNetEIA,
		repositorySageMakerMXNetServingEIA,
		repositorySageMakerPyTorch,
		repositorySageMakerTensorFlow,
		repositorySageMakerTensorFlowEIA,
		repositorySageMakerTensorFlowScriptMode,
		repositoryTensorflowCoach,
		repositoryTensorFlowServing,
		repositoryTensorFlowServingEIA:
		id = prebuiltECRImageIDByRegion_SageMakerCustom[region]
	case repositoryAutoGluonTraining,
		repositoryAutoGluonInference,
		repositoryDJLDeepSpeed,
		repositoryHuggingFaceTensorFlowTraining,
		repositoryHuggingFacePyTorchTraining,
		repositoryHuggingFacePyTorchTrainingNeuronX,
		repositoryHuggingFacePyTorchTrainingCompiler,
		repositoryHuggingFaceTensorFlowTrainingCompiler,
		repositoryHuggingFaceTensorFlowInference,
		repositoryHuggingFacePyTorchInference,
		repositoryHuggingFacePyTorchInferenceNeuron,
		repositoryHuggingFacePyTorchInferenceNeuronX,
		repositoryHuggingFacePyTorchTGIInference,
		repositoryMXNetTraining,
		repositoryMXNetInference,
		repositoryMXNetInferenceEIA,
		repositoryPyTorchTraining,
		repositoryPyTorchTrainingNeuronX,
		repositoryPyTorchTrainingCompiler,
		repositoryPyTorchInference,
		repositoryPyTorchInferenceEIA,
		repositoryPyTorchInferenceGraviton,
		repositoryPyTorchInferenceNeuronX,
		repositoryStabilityAI,
		repositoryTensorFlowTraining,
		repositoryTensorFlowInference,
		repositoryTensorFlowInferenceEIA,
		repositoryTensorFlowInferenceGraviton,
		repositoryNVIDIATritonInference:
		id = prebuiltECRImageIDByRegion_deepLearning[region]
	case repositoryRLRayPyTorch,
		repositoryRLCoachPyTorch,
		repositoryVW:
		id = prebuiltECRImageIDByRegion_SageMakerRL[region]
	case repositorySageMakerBasePython:
		id = prebuiltECRImageIDByRegion_SageMakerBasePython[region]
	case repositorySageMakerGeospatial:
		id = prebuiltECRImageIDByRegion_SageMakerGeospatial[region]
	case repositorySpark:
		id = prebuiltECRImageIDByRegion_spark[region]
	default:
		id = prebuiltECRImageIDByRegion_factorMachines[region]
	}

	if id == "" {
		err := &retry.NotFoundError{}
		return sdkdiag.AppendErrorf(diags, "reading SageMaker Prebuilt ECR Image for Region (%s) and repository (%s): %s", region, repo, err)
	}

	d.SetId(id)
	d.Set("registry_id", id)
	d.Set("registry_path", prebuiltECRImageCreatePath(id, region, suffix, repo, d.Get("image_tag").(string)))

	return diags
}
