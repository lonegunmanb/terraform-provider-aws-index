package github.com/hashicorp/terraform-provider-aws/internal/service/rekognition
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/rekognition"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rekognition/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *projectResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	conn := r.Meta().RekognitionClient(ctx)

	var state projectResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	out, err := findProjectByName(ctx, conn, state.ID.ValueString(), awstypes.CustomizationFeature(state.Feature.ValueString()))

	if tfresource.NotFound(err) {
		resp.State.RemoveResource(ctx)
		return
	}

	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.Rekognition, create.ErrActionReading, ResNameProject, state.ID.ValueString(), err),
			err.Error(),
		)
		return
	}

	resp.Diagnostics.Append(flex.Flatten(ctx, out, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	state.Name = state.ID
	state.ARN = flex.StringToFramework(ctx, out.ProjectArn)

	if state.Feature.ValueString() == "" {
		// API returns empty string for default CUSTOM_LABELS value, so we have to set it forcibly to avoid drift
		state.Feature = fwtypes.StringEnumValue(awstypes.CustomizationFeatureCustomLabels)
	}

	// API returns empty string for default DISABLED value, so we have to set it forcibly to avoid drift
	if state.AutoUpdate.ValueString() == "" {
		if state.Feature.ValueEnum() == awstypes.CustomizationFeatureCustomLabels {
			state.AutoUpdate = fwtypes.StringEnumNull[awstypes.ProjectAutoUpdate]()
		} else {
			state.AutoUpdate = fwtypes.StringEnumValue(awstypes.ProjectAutoUpdateDisabled)
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
