package github.com/hashicorp/terraform-provider-aws/internal/service/rekognition
import (
	"context"
	"errors"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rekognition/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *streamProcessorResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	conn := r.Meta().RekognitionClient(ctx)

	var plan, state streamProcessorResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !plan.DataSharingPreference.Equal(state.DataSharingPreference) ||
		!plan.Settings.Equal(state.Settings) ||
		!plan.RegionsOfInterest.Equal(state.RegionsOfInterest) {
		in := &rekognition.UpdateStreamProcessorInput{
			Name:               plan.Name.ValueStringPointer(),
			ParametersToDelete: []awstypes.StreamProcessorParameterToDelete{},
		}

		if !plan.DataSharingPreference.Equal(state.DataSharingPreference) {
			dspPlan, dspState := unwrapListNestedObjectValueOf(ctx, resp.Diagnostics, plan.DataSharingPreference, state.DataSharingPreference)
			if resp.Diagnostics.HasError() {
				return
			}

			if !dspPlan.OptIn.Equal(dspState.OptIn) {
				in.DataSharingPreferenceForUpdate = &awstypes.StreamProcessorDataSharingPreference{
					OptIn: dspPlan.OptIn.ValueBool(),
				}
			}
		}

		if !plan.Settings.Equal(state.Settings) {
			in.SettingsForUpdate = &awstypes.StreamProcessorSettingsForUpdate{
				ConnectedHomeForUpdate: &awstypes.ConnectedHomeSettingsForUpdate{},
			}

			settingsPlan, settingsState := unwrapListNestedObjectValueOf(ctx, resp.Diagnostics, plan.Settings, state.Settings)
			if resp.Diagnostics.HasError() {
				return
			}

			connectedHomePlan, connectedHomeState := unwrapListNestedObjectValueOf(ctx, resp.Diagnostics, settingsPlan.ConnectedHome, settingsState.ConnectedHome)
			if resp.Diagnostics.HasError() {
				return
			}

			if !connectedHomePlan.MinConfidence.Equal(connectedHomeState.MinConfidence) { // nosemgrep:ci.semgrep.migrate.aws-api-context
				if !connectedHomePlan.MinConfidence.IsNull() && connectedHomeState.MinConfidence.IsNull() { // nosemgrep:ci.semgrep.migrate.aws-api-context
					in.ParametersToDelete = append(in.ParametersToDelete, awstypes.StreamProcessorParameterToDeleteConnectedHomeMinConfidence)
				}

				if !connectedHomePlan.MinConfidence.IsNull() { // nosemgrep:ci.semgrep.migrate.aws-api-context
					in.SettingsForUpdate.ConnectedHomeForUpdate.MinConfidence = aws.Float32(float32(connectedHomePlan.MinConfidence.ValueFloat64())) // nosemgrep:ci.semgrep.migrate.aws-api-context
				}
			}

			if !connectedHomePlan.Labels.Equal(connectedHomeState.Labels) { // nosemgrep:ci.semgrep.migrate.aws-api-context
				in.SettingsForUpdate.ConnectedHomeForUpdate.Labels = fwflex.ExpandFrameworkStringValueList(ctx, connectedHomePlan.Labels)
			}
		}

		if plan.RegionsOfInterest.IsNull() && !state.RegionsOfInterest.IsNull() {
			in.ParametersToDelete = append(in.ParametersToDelete, awstypes.StreamProcessorParameterToDeleteRegionsOfInterest)
		}

		if !plan.RegionsOfInterest.Equal(state.RegionsOfInterest) {
			planRegions, diags := plan.RegionsOfInterest.ToSlice(ctx)
			resp.Diagnostics.Append(diags...)

			plannedRegions := make([]awstypes.RegionOfInterest, len(planRegions))

			for i := range planRegions {
				planRegion := planRegions[i]
				plannedRegions[i] = awstypes.RegionOfInterest{}

				if !planRegion.BoundingBox.IsNull() {
					boundingBox, diags := planRegion.BoundingBox.ToPtr(ctx)
					resp.Diagnostics.Append(diags...)

					plannedRegions[i].BoundingBox = &awstypes.BoundingBox{
						Top:    aws.Float32(float32(boundingBox.Top.ValueFloat64())),
						Left:   aws.Float32(float32(boundingBox.Left.ValueFloat64())),
						Height: aws.Float32(float32(boundingBox.Height.ValueFloat64())),
						Width:  aws.Float32(float32(boundingBox.Width.ValueFloat64())),
					}
				}

				if !planRegion.Polygon.IsNull() {
					polygons, diags := planRegion.Polygon.ToSlice(ctx)
					resp.Diagnostics.Append(diags...)

					plannedPolygons := make([]awstypes.Point, len(polygons))

					for i := range polygons {
						polygon := polygons[i]
						plannedPolygons[i] = awstypes.Point{
							X: aws.Float32(float32(polygon.X.ValueFloat64())),
							Y: aws.Float32(float32(polygon.Y.ValueFloat64())),
						}
					}
					plannedRegions[i].Polygon = plannedPolygons
				}
			}
			in.RegionsOfInterestForUpdate = plannedRegions
		}

		_, err := conn.UpdateStreamProcessor(ctx, in)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.Rekognition, create.ErrActionUpdating, ResNameStreamProcessor, plan.Name.String(), err),
				err.Error(),
			)
			return
		}

		updateTimeout := r.UpdateTimeout(ctx, plan.Timeouts)
		updated, err := waitStreamProcessorUpdated(ctx, conn, plan.Name.ValueString(), updateTimeout)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.Rekognition, create.ErrActionWaitingForUpdate, ResNameStreamProcessor, plan.Name.String(), err),
				err.Error(),
			)
			return
		}

		resp.Diagnostics.Append(fwflex.Flatten(ctx, updated, &plan)...)
		if resp.Diagnostics.HasError() {
			return
		}
		plan.ARN = fwflex.StringToFramework(ctx, updated.StreamProcessorArn)

		resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
	}
}
