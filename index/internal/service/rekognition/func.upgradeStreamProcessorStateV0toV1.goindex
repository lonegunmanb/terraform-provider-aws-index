package github.com/hashicorp/terraform-provider-aws/internal/service/rekognition
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeStreamProcessorStateV0toV1(ctx context.Context, request resource.UpgradeStateRequest, response *resource.UpgradeStateResponse) {
	var streamProcessorDataV0 resourceStreamProcessorDataModelV0
	response.Diagnostics.Append(request.State.Get(ctx, &streamProcessorDataV0)...)
	if response.Diagnostics.HasError() {
		return
	}

	streamProcessorDataV1 := streamProcessorResourceModel{
		ARN:                   streamProcessorDataV0.ARN,
		DataSharingPreference: streamProcessorDataV0.DataSharingPreference,
		Input:                 streamProcessorDataV0.Input,
		KmsKeyId:              streamProcessorDataV0.KmsKeyId,
		NotificationChannel:   streamProcessorDataV0.NotificationChannel,
		Name:                  streamProcessorDataV0.Name,
		Output:                streamProcessorDataV0.Output,
		RoleARN:               streamProcessorDataV0.RoleARN,
		RegionsOfInterest:     upgradeRegionsOfInterestStateFromV0(ctx, streamProcessorDataV0.RegionsOfInterest, &response.Diagnostics),
		Settings:              streamProcessorDataV0.Settings,
		StreamProcessorARN:    streamProcessorDataV0.StreamProcessorARN,
		Tags:                  streamProcessorDataV0.Tags,
		TagsAll:               streamProcessorDataV0.TagsAll,
		Timeouts:              streamProcessorDataV0.Timeouts,
	}

	response.Diagnostics.Append(response.State.Set(ctx, streamProcessorDataV1)...)
}
