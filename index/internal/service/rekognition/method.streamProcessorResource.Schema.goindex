package github.com/hashicorp/terraform-provider-aws/internal/service/rekognition
import (
	"context"
	"errors"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/rekognition"
	awstypes "github.com/aws/aws-sdk-go-v2/service/rekognition/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *streamProcessorResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Version: 1,
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrKMSKeyID: schema.StringAttribute{
				Description: "The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 2048),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			names.AttrName: schema.StringAttribute{
				Description: "An identifier you assign to the stream processor.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(128),
					stringvalidator.RegexMatches(nameRegex, ""),
				},
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			names.AttrRoleARN: schema.StringAttribute{
				Description: "The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor.",
				CustomType:  fwtypes.ARNType,
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"stream_processor_arn": schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Computed:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				DeprecationMessage: "Use 'arn' instead. This attribute will be removed in a future version of the provider.",
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			"data_sharing_preference": schema.ListNestedBlock{
				CustomType:  fwtypes.NewListNestedObjectTypeOf[dataSharingPreferenceModel](ctx),
				Description: "Shows whether you are sharing data with Rekognition to improve model performance.",
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"opt_in": schema.BoolAttribute{
							Description: "Do you want to share data with Rekognition to improve model performance.",
							Required:    true,
						},
					},
				},
			},
			"input": schema.ListNestedBlock{
				CustomType:  fwtypes.NewListNestedObjectTypeOf[inputModel](ctx),
				Description: "Information about the source streaming video.",
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"kinesis_video_stream": schema.ListNestedBlock{
							Validators: []validator.List{
								listvalidator.IsRequired(),
								listvalidator.SizeAtMost(1),
							},
							CustomType:  fwtypes.NewListNestedObjectTypeOf[kinesisVideoStreamInputModel](ctx),
							Description: "Kinesis video stream stream that provides the source streaming video for a Amazon Rekognition Video stream processor.",
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrARN: schema.StringAttribute{
										CustomType:  fwtypes.ARNType,
										Description: "ARN of the Kinesis video stream stream that streams the source video.",
										Required:    true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
								},
							},
						},
					},
				},
			},
			"notification_channel": schema.ListNestedBlock{
				CustomType:  fwtypes.NewListNestedObjectTypeOf[notificationChannelModel](ctx),
				Description: "The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation.",
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						names.AttrSNSTopicARN: schema.StringAttribute{
							Description: "The Amazon Resource Number (ARN) of the Amazon Amazon Simple Notification Service topic to which Amazon Rekognition posts the completion status.",
							CustomType:  fwtypes.ARNType,
							Optional:    true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
					},
				},
			},
			"regions_of_interest": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[regionOfInterestModel](ctx),
				Validators: []validator.List{
					listvalidator.SizeAtMost(10),
				},
				NestedObject: schema.NestedBlockObject{
					Validators: []validator.Object{
						objectvalidator.AtLeastOneOf(path.MatchRelative().AtName("bounding_box"), path.MatchRelative().AtName("polygon")),
					},
					Blocks: map[string]schema.Block{
						"bounding_box": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[boundingBoxModel](ctx),
							Description: "The box representing a region of interest on screen.",
							Validators: []validator.List{
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("polygon")),
								listvalidator.SizeBetween(1, 1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"height": schema.Float64Attribute{
										Description: "Height of the bounding box as a ratio of the overall image height.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
									"left": schema.Float64Attribute{
										Description: "Left coordinate of the bounding box as a ratio of overall image width.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
									"top": schema.Float64Attribute{
										Description: "Top coordinate of the bounding box as a ratio of overall image height.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
									"width": schema.Float64Attribute{
										Description: "Width of the bounding box as a ratio of the overall image width.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
								},
							},
						},
						"polygon": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[polygonModel](ctx),
							Description: "Specifies a shape made of 3 to 10 Point objects that define a region of interest.",
							Validators: []validator.List{
								listvalidator.SizeBetween(3, 10),
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("bounding_box")),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"x": schema.Float64Attribute{
										Description: "The value of the X coordinate for a point on a Polygon.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
									"y": schema.Float64Attribute{
										Description: "The value of the Y coordinate for a point on a Polygon.",
										Optional:    true,
										Validators: []validator.Float64{
											float64validator.Between(0.0, 1.0),
										},
									},
								},
							},
						},
					},
				},
			},
			"output": schema.ListNestedBlock{
				CustomType:  fwtypes.NewListNestedObjectTypeOf[outputModel](ctx),
				Description: "Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results.",
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtMost(1),
					listvalidator.AtLeastOneOf(
						path.MatchRelative().AtName("kinesis_data_stream"),
						path.MatchRelative().AtName("s3_destination"),
					),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"kinesis_data_stream": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[kinesisDataStreamModel](ctx),
							Description: "The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("s3_destination")),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrARN: schema.StringAttribute{
										CustomType:  fwtypes.ARNType,
										Description: "ARN of the output Amazon Kinesis Data Streams stream.",
										Optional:    true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
								},
							},
						},
						"s3_destination": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[s3DestinationModel](ctx),
							Description: "The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("kinesis_data_stream")),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrBucket: schema.StringAttribute{
										Description: "The name of the Amazon S3 bucket you want to associate with the streaming video project.",
										Optional:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(3, 255),
										},
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
									"key_prefix": schema.StringAttribute{
										Description: "The prefix value of the location within the bucket that you want the information to be published to.",
										Optional:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(1024),
										},
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
								},
							},
						},
					},
				},
			},
			"settings": schema.ListNestedBlock{
				CustomType:  fwtypes.NewListNestedObjectTypeOf[settingsModel](ctx),
				Description: "Input parameters used in a streaming video analyzed by a stream processor.",
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtMost(1),
					listvalidator.AtLeastOneOf(
						path.MatchRelative().AtName("connected_home"),
						path.MatchRelative().AtName("face_search"),
					),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"connected_home": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[connectedHomeModel](ctx),
							Description: "Label detection settings to use on a streaming video.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("face_search")),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"labels": schema.ListAttribute{
										Description: "Specifies what you want to detect in the video, such as people, packages, or pets.",
										CustomType:  fwtypes.ListOfStringType,
										Optional:    true,
										Validators: []validator.List{
											listvalidator.SizeAtLeast(1),
											listvalidator.ValueStringsAre(stringvalidator.OneOf(labelsEnumValues()...)),
										},
									},
									"min_confidence": schema.Float64Attribute{
										Description: "The minimum confidence required to label an object in the video.",
										Validators: []validator.Float64{
											float64validator.Between(connectedHomeConfidenceMin, connectedHomeConfidenceMax),
										},
										Computed: true,
										Optional: true,
									},
								},
							},
						},
						"face_search": schema.ListNestedBlock{
							CustomType:  fwtypes.NewListNestedObjectTypeOf[faceSearchModel](ctx),
							Description: "Face search settings to use on a streaming video.",
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
								listvalidator.ConflictsWith(path.MatchRelative().AtParent().AtName("connected_home")),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"collection_id": schema.StringAttribute{
										Description: "The ID of a collection that contains faces that you want to search for.",
										Validators: []validator.String{
											stringvalidator.LengthAtMost(2048),
											stringvalidator.RegexMatches(collectionIdRegex, ""),
										},
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
									"face_match_threshold": schema.Float64Attribute{
										Description: "Minimum face match confidence score that must be met to return a result for a recognized face.",
										Validators: []validator.Float64{
											float64validator.Between(faceMatchThresholdMin, faceMatchThresholdMax),
										},
										PlanModifiers: []planmodifier.Float64{
											float64planmodifier.RequiresReplace(),
										},
										Default:  float64default.StaticFloat64(faceMatchThresholdDefault),
										Optional: true,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}
