package github.com/hashicorp/terraform-provider-aws/internal/service/rekognition
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeRegionsOfInterestStateFromV0(ctx context.Context, old fwtypes.ListNestedObjectValueOf[regionOfInterestModelV0], diags *diag.Diagnostics) fwtypes.ListNestedObjectValueOf[regionOfInterestModel] {
	if old.IsNull() {
		return fwtypes.NewListNestedObjectValueOfNull[regionOfInterestModel](ctx)
	}

	var oldElems []regionOfInterestModelV0
	diags.Append(old.ElementsAs(ctx, &oldElems, false)...)

	newElems := make([]regionOfInterestModel, len(oldElems))
	for i, oldElem := range oldElems {
		newRegion := regionOfInterestModel{
			BoundingBox: upgradeBoundingBoxModelStateFromV0(ctx, oldElem.BoundingBox, diags),
			Polygon:     oldElem.Polygon,
		}
		newElems[i] = newRegion
	}

	result, d := fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newElems)
	diags.Append(d...)

	return result
}
