package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkmediapipelines
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRealTimeAlertRule(apiRule awstypes.RealTimeAlertRule) any {
	if apiRule == (awstypes.RealTimeAlertRule{}) {
		return nil
	}
	tfMap := map[string]any{}
	tfMap[names.AttrType] = string(apiRule.Type)

	configuration := map[string]any{}

	switch apiRule.Type {
	case awstypes.RealTimeAlertRuleTypeIssueDetection:
		issueDetectionConfiguration := apiRule.IssueDetectionConfiguration
		configuration["rule_name"] = issueDetectionConfiguration.RuleName
		tfMap["issue_detection_configuration"] = []any{configuration}
	case awstypes.RealTimeAlertRuleTypeKeywordMatch:
		keywordMatchConfiguration := apiRule.KeywordMatchConfiguration
		configuration["rule_name"] = keywordMatchConfiguration.RuleName
		configuration["keywords"] = keywordMatchConfiguration.Keywords
		configuration["negate"] = keywordMatchConfiguration.Negate
		tfMap["keyword_match_configuration"] = []any{configuration}
	case awstypes.RealTimeAlertRuleTypeSentiment:
		sentimentConfiguration := apiRule.SentimentConfiguration
		configuration["rule_name"] = sentimentConfiguration.RuleName
		configuration["sentiment_type"] = sentimentConfiguration.SentimentType
		configuration["time_period"] = sentimentConfiguration.TimePeriod
		tfMap["sentiment_configuration"] = []any{configuration}
	}
	return tfMap
}
