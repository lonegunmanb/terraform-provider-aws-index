package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkmediapipelines
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMediaInsightsPipelineConfiguration() *schema.Resource {
	return &schema.Resource{

		CreateWithoutTimeout: resourceMediaInsightsPipelineConfigurationCreate,
		ReadWithoutTimeout:   resourceMediaInsightsPipelineConfigurationRead,
		UpdateWithoutTimeout: resourceMediaInsightsPipelineConfigurationUpdate,
		DeleteWithoutTimeout: resourceMediaInsightsPipelineConfigurationDelete,

		// Resource creation/update/deletion is atomic and synchronous with the API calls. The timeouts for
		// create and update are dominated by timeout waiting for IAM role changes to propagate.
		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(3 * time.Minute),
			Update: schema.DefaultTimeout(3 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Second),
		},

		Schema: map[string]*schema.Schema{
			names.AttrARN: {
				Type:     schema.TypeString,
				Computed: true,
			},
			"elements": {
				Type:     schema.TypeList,
				Required: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrType: {
							Type:             schema.TypeString,
							Required:         true,
							ValidateDiagFunc: enum.Validate[awstypes.MediaInsightsPipelineConfigurationElementType](),
						},
						"amazon_transcribe_call_analytics_processor_configuration": AmazonTranscribeCallAnalyticsProcessorConfigurationSchema(),
						"amazon_transcribe_processor_configuration":                AmazonTranscribeProcessorConfigurationSchema(),
						"kinesis_data_stream_sink_configuration":                   BasicSinkConfigurationSchema(),
						"lambda_function_sink_configuration":                       BasicSinkConfigurationSchema(),
						"sns_topic_sink_configuration":                             BasicSinkConfigurationSchema(),
						"sqs_queue_sink_configuration":                             BasicSinkConfigurationSchema(),
						"s3_recording_sink_configuration":                          S3RecordingSinkConfigurationSchema(),
						"voice_analytics_processor_configuration":                  VoiceAnalyticsProcessorConfigurationSchema(),
					},
				},
			},
			names.AttrID: {
				Type:     schema.TypeString,
				Computed: true,
			},
			names.AttrName: {
				Type:     schema.TypeString,
				Required: true,
			},
			"resource_access_role_arn": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidARN,
			},
			"real_time_alert_configuration": RealTimeAlertConfigurationSchema(),
			names.AttrTags:                  tftags.TagsSchema(),
			names.AttrTagsAll:               tftags.TagsSchemaComputed(),
		},
	}
}
