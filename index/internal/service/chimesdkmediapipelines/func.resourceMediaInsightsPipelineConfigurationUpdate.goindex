package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkmediapipelines
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceMediaInsightsPipelineConfigurationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).ChimeSDKMediaPipelinesClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		elements, err := expandElements(d.Get("elements").([]any))
		if err != nil {
			return create.AppendDiagError(diags, names.ChimeSDKMediaPipelines, create.ErrActionUpdating, ResNameMediaInsightsPipelineConfiguration, d.Id(), err)
		}

		in := &chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationInput{
			Identifier:            aws.String(d.Id()),
			ResourceAccessRoleArn: aws.String(d.Get("resource_access_role_arn").(string)),
			Elements:              elements,
		}
		if realTimeAlertConfiguration, ok := d.GetOk("real_time_alert_configuration"); ok && len(realTimeAlertConfiguration.([]any)) > 0 {
			rtac, err := expandRealTimeAlertConfiguration(realTimeAlertConfiguration.([]any)[0].(map[string]any))
			if err != nil {
				return create.AppendDiagError(diags, names.ChimeSDKMediaPipelines, create.ErrActionUpdating, ResNameMediaInsightsPipelineConfiguration, d.Id(), err)
			}
			in.RealTimeAlertConfiguration = rtac
		}

		// Retry when forbidden exception is received; iam role propagation is eventually consistent
		updateError := tfresource.Retry(ctx, iamPropagationTimeout, func(ctx context.Context) *tfresource.RetryError {
			var err error
			_, err = conn.UpdateMediaInsightsPipelineConfiguration(ctx, in)
			if err != nil {
				var forbiddenException *awstypes.ForbiddenException
				if errors.As(err, &forbiddenException) {
					return tfresource.RetryableError(err)
				}
				return tfresource.NonRetryableError(err)
			}

			return nil
		})
		if updateError != nil {
			return create.AppendDiagError(diags, names.ChimeSDKMediaPipelines, create.ErrActionUpdating, ResNameMediaInsightsPipelineConfiguration, d.Id(), updateError)
		}
	}

	return append(diags, resourceMediaInsightsPipelineConfigurationRead(ctx, d, meta)...)
}
