package github.com/hashicorp/terraform-provider-aws/internal/service/chimesdkmediapipelines
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandElement(inputElement any) (awstypes.MediaInsightsPipelineConfigurationElement, error) {
	inputMapRaw, ok := inputElement.(map[string]any)
	if !ok {
		return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
	}

	element := awstypes.MediaInsightsPipelineConfigurationElement{
		Type: awstypes.MediaInsightsPipelineConfigurationElementType(inputMapRaw[names.AttrType].(string)),
	}

	switch element.Type {
	case awstypes.MediaInsightsPipelineConfigurationElementTypeAmazonTranscribeCallAnalyticsProcessor:
		var configuration []any
		if configuration, ok = inputMapRaw["amazon_transcribe_call_analytics_processor_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.AmazonTranscribeCallAnalyticsProcessorConfiguration = &awstypes.AmazonTranscribeCallAnalyticsProcessorConfiguration{
			LanguageCode: awstypes.CallAnalyticsLanguageCode(rawConfiguration[names.AttrLanguageCode].(string)),
		}

		if callAnalyticsStreamCategories, ok := rawConfiguration["call_analytics_stream_categories"].([]any); ok && len(callAnalyticsStreamCategories) > 0 {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.CallAnalyticsStreamCategories = flex.ExpandStringValueList(callAnalyticsStreamCategories)
		}

		if contentIdentificationType, ok := rawConfiguration["content_identification_type"].(string); ok && contentIdentificationType != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.ContentIdentificationType = awstypes.ContentType(contentIdentificationType)
		}

		if contentRedactionType, ok := rawConfiguration["content_redaction_type"].(string); ok && contentRedactionType != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.ContentRedactionType = awstypes.ContentType(contentRedactionType)
		}

		if enablePartialResultsStabilization, ok := rawConfiguration["enable_partial_results_stabilization"].(bool); ok {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.EnablePartialResultsStabilization = enablePartialResultsStabilization
		}

		if filterPartialResults, ok := rawConfiguration["filter_partial_results"].(bool); ok {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.FilterPartialResults = filterPartialResults
		}

		if languageModelName, ok := rawConfiguration["language_model_name"].(string); ok && languageModelName != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.LanguageModelName = aws.String(languageModelName)
		}

		if partialResultsStability, ok := rawConfiguration["partial_results_stability"].(string); ok && partialResultsStability != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.PartialResultsStability = awstypes.PartialResultsStability(partialResultsStability)
		}

		if piiEntityTypes, ok := rawConfiguration["pii_entity_types"].(string); ok && piiEntityTypes != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.PiiEntityTypes = aws.String(piiEntityTypes)
		}

		if postCallAnalyticsSettings, ok := rawConfiguration["post_call_analytics_settings"].([]any); ok && len(postCallAnalyticsSettings) == 1 {
			rawPostCallSettings := postCallAnalyticsSettings[0].(map[string]any)

			postCallSettingsApi := &awstypes.PostCallAnalyticsSettings{
				DataAccessRoleArn: aws.String(rawPostCallSettings["data_access_role_arn"].(string)),
				OutputLocation:    aws.String(rawPostCallSettings["output_location"].(string)),
			}
			if contentRedactionOutput, ok := rawPostCallSettings["content_redaction_output"].(string); ok && len(contentRedactionOutput) > 0 {
				postCallSettingsApi.ContentRedactionOutput = awstypes.ContentRedactionOutput(contentRedactionOutput)
			}
			if outputEncryptionKMSKeyId, ok := rawPostCallSettings["output_encryption_kms_key_id"].(string); ok && len(outputEncryptionKMSKeyId) > 0 {
				postCallSettingsApi.OutputEncryptionKMSKeyId = aws.String(outputEncryptionKMSKeyId)
			}
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.PostCallAnalyticsSettings = postCallSettingsApi
		}

		if vocabularyFilterMethod, ok := rawConfiguration["vocabulary_filter_method"].(string); ok && vocabularyFilterMethod != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.VocabularyFilterMethod = awstypes.VocabularyFilterMethod(vocabularyFilterMethod)
		}

		if vocabularyFilterName, ok := rawConfiguration["vocabulary_filter_name"].(string); ok && vocabularyFilterName != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.VocabularyFilterName = aws.String(vocabularyFilterName)
		}

		if vocabularyName, ok := rawConfiguration["vocabulary_name"].(string); ok && vocabularyName != "" {
			element.AmazonTranscribeCallAnalyticsProcessorConfiguration.VocabularyName = aws.String(vocabularyName)
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeAmazonTranscribeProcessor:
		var configuration []any
		if configuration, ok = inputMapRaw["amazon_transcribe_processor_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.AmazonTranscribeProcessorConfiguration = &awstypes.AmazonTranscribeProcessorConfiguration{
			LanguageCode: awstypes.CallAnalyticsLanguageCode(rawConfiguration[names.AttrLanguageCode].(string)),
		}

		if contentIdentificationType, ok := rawConfiguration["content_identification_type"].(string); ok && contentIdentificationType != "" {
			element.AmazonTranscribeProcessorConfiguration.ContentIdentificationType = awstypes.ContentType(contentIdentificationType)
		}

		if contentRedactionType, ok := rawConfiguration["content_redaction_type"].(string); ok && contentRedactionType != "" {
			element.AmazonTranscribeProcessorConfiguration.ContentRedactionType = awstypes.ContentType(contentRedactionType)
		}

		if enablePartialResultsStabilization, ok := rawConfiguration["enable_partial_results_stabilization"].(bool); ok {
			element.AmazonTranscribeProcessorConfiguration.EnablePartialResultsStabilization = enablePartialResultsStabilization
		}

		if filterPartialResults, ok := rawConfiguration["filter_partial_results"].(bool); ok {
			element.AmazonTranscribeProcessorConfiguration.FilterPartialResults = filterPartialResults
		}

		if languageModelName, ok := rawConfiguration["language_model_name"].(string); ok && languageModelName != "" {
			element.AmazonTranscribeProcessorConfiguration.LanguageModelName = aws.String(languageModelName)
		}

		if partialResultsStability, ok := rawConfiguration["partial_results_stability"].(string); ok && partialResultsStability != "" {
			element.AmazonTranscribeProcessorConfiguration.PartialResultsStability = awstypes.PartialResultsStability(partialResultsStability)
		}

		if piiEntityTypes, ok := rawConfiguration["pii_entity_types"].(string); ok && piiEntityTypes != "" {
			element.AmazonTranscribeProcessorConfiguration.PiiEntityTypes = aws.String(piiEntityTypes)
		}

		if showSpeakerLabel, ok := rawConfiguration["show_speaker_label"].(bool); ok {
			element.AmazonTranscribeProcessorConfiguration.ShowSpeakerLabel = showSpeakerLabel
		}

		if vocabularyFilterMethod, ok := rawConfiguration["vocabulary_filter_method"].(string); ok && vocabularyFilterMethod != "" {
			element.AmazonTranscribeProcessorConfiguration.VocabularyFilterMethod = awstypes.VocabularyFilterMethod(vocabularyFilterMethod)
		}

		if vocabularyFilterName, ok := rawConfiguration["vocabulary_filter_name"].(string); ok && vocabularyFilterName != "" {
			element.AmazonTranscribeProcessorConfiguration.VocabularyFilterName = aws.String(vocabularyFilterName)
		}

		if vocabularyName, ok := rawConfiguration["vocabulary_name"].(string); ok && vocabularyName != "" {
			element.AmazonTranscribeProcessorConfiguration.VocabularyName = aws.String(vocabularyName)
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeKinesisDataStreamSink:
		var configuration []any
		if configuration, ok = inputMapRaw["kinesis_data_stream_sink_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.KinesisDataStreamSinkConfiguration = &awstypes.KinesisDataStreamSinkConfiguration{
			InsightsTarget: aws.String(rawConfiguration["insights_target"].(string)),
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeSnsTopicSink:
		var configuration []any
		if configuration, ok = inputMapRaw["sns_topic_sink_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.SnsTopicSinkConfiguration = &awstypes.SnsTopicSinkConfiguration{
			InsightsTarget: aws.String(rawConfiguration["insights_target"].(string)),
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeSqsQueueSink:
		var configuration []any
		if configuration, ok = inputMapRaw["sqs_queue_sink_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.SqsQueueSinkConfiguration = &awstypes.SqsQueueSinkConfiguration{
			InsightsTarget: aws.String(rawConfiguration["insights_target"].(string)),
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeLambdaFunctionSink:
		var configuration []any
		if configuration, ok = inputMapRaw["lambda_function_sink_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.LambdaFunctionSinkConfiguration = &awstypes.LambdaFunctionSinkConfiguration{
			InsightsTarget: aws.String(rawConfiguration["insights_target"].(string)),
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeS3RecordingSink:
		var configuration []any
		if configuration, ok = inputMapRaw["s3_recording_sink_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.S3RecordingSinkConfiguration = &awstypes.S3RecordingSinkConfiguration{
			Destination: aws.String(rawConfiguration[names.AttrDestination].(string)),
		}
	case awstypes.MediaInsightsPipelineConfigurationElementTypeVoiceAnalyticsProcessor:
		var configuration []any
		if configuration, ok = inputMapRaw["voice_analytics_processor_configuration"].([]any); !ok || len(configuration) != 1 {
			return awstypes.MediaInsightsPipelineConfigurationElement{}, errConvertingElement
		}

		rawConfiguration := configuration[0].(map[string]any)
		element.VoiceAnalyticsProcessorConfiguration = &awstypes.VoiceAnalyticsProcessorConfiguration{
			SpeakerSearchStatus:     awstypes.VoiceAnalyticsConfigurationStatus(rawConfiguration["speaker_search_status"].(string)),
			VoiceToneAnalysisStatus: awstypes.VoiceAnalyticsConfigurationStatus(rawConfiguration["voice_tone_analysis_status"].(string)),
		}
	}
	return element, nil
}
