package github.com/hashicorp/terraform-provider-aws/internal/service/account
import (
	"context"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/account"
	"github.com/aws/aws-sdk-go-v2/service/account/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRegionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AccountClient(ctx)

	var id string
	var err error
	region := d.Get("region_name").(string)
	accountID := ""
	if v, ok := d.GetOk(names.AttrAccountID); ok {
		accountID = v.(string)
		id, err = flex.FlattenResourceId([]string{accountID, region}, regionResourceIDPartCount, false)
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	} else {
		id = region
	}

	timeout := d.Timeout(schema.TimeoutCreate)
	if !d.IsNewResource() {
		timeout = d.Timeout(schema.TimeoutUpdate)
	}

	status, err := findRegionOptStatus(ctx, conn, accountID, region)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Account Region status: %s", err)
	}

	if v := d.Get(names.AttrEnabled).(bool); v {
		input := account.EnableRegionInput{
			RegionName: aws.String(region),
		}
		if accountID != "" {
			input.AccountId = aws.String(accountID)
		}

		if requiresStatusChange(status.RegionOptStatus, true) {
			_, err := conn.EnableRegion(ctx, &input)
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "enabling Account Region (%s): %s", id, err)
			}
		}

		if _, err := waitRegionEnabled(ctx, conn, accountID, region, timeout); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Account Region (%s) enable: %s", d.Id(), err)
		}
	} else {
		input := account.DisableRegionInput{
			RegionName: aws.String(region),
		}
		if accountID != "" {
			input.AccountId = aws.String(accountID)
		}

		if requiresStatusChange(status.RegionOptStatus, false) {
			_, err := conn.DisableRegion(ctx, &input)
			if err != nil {
				return sdkdiag.AppendErrorf(diags, "disabling Account Region (%s): %s", id, err)
			}
		}

		if _, err := waitRegionDisabled(ctx, conn, accountID, region, timeout); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Account Region (%s) disable: %s", d.Id(), err)
		}
	}

	if d.IsNewResource() {
		d.SetId(id)
	}

	return append(diags, resourceRegionRead(ctx, d, meta)...)
}
