package github.com/hashicorp/terraform-provider-aws/internal/service/account
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/account"
	"github.com/aws/aws-sdk-go-v2/service/account/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePrimaryContactPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AccountClient(ctx)

	id := "default"
	contactInfo := types.ContactInformation{
		AddressLine1: aws.String(d.Get("address_line_1").(string)),
		City:         aws.String(d.Get("city").(string)),
		CountryCode:  aws.String(d.Get("country_code").(string)),
		FullName:     aws.String(d.Get("full_name").(string)),
		PhoneNumber:  aws.String(d.Get("phone_number").(string)),
		PostalCode:   aws.String(d.Get("postal_code").(string)),
	}
	input := account.PutContactInformationInput{
		ContactInformation: &contactInfo,
	}

	if v, ok := d.GetOk(names.AttrAccountID); ok {
		id = v.(string)
		input.AccountId = aws.String(id)
	}

	if v, ok := d.GetOk("address_line_2"); ok {
		input.ContactInformation.AddressLine2 = aws.String(v.(string))
	}

	if v, ok := d.GetOk("address_line_3"); ok {
		input.ContactInformation.AddressLine3 = aws.String(v.(string))
	}

	if v, ok := d.GetOk("company_name"); ok {
		input.ContactInformation.CompanyName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("district_or_county"); ok {
		input.ContactInformation.DistrictOrCounty = aws.String(v.(string))
	}

	if v, ok := d.GetOk("state_or_region"); ok {
		input.ContactInformation.StateOrRegion = aws.String(v.(string))
	}

	if v, ok := d.GetOk("website_url"); ok {
		input.ContactInformation.WebsiteUrl = aws.String(v.(string))
	}

	_, err := conn.PutContactInformation(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Account Primary Contact (%s): %s", id, err)
	}

	if d.IsNewResource() {
		d.SetId(id)
	}

	return append(diags, resourcePrimaryContactRead(ctx, d, meta)...)
}
