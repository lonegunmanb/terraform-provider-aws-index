package github.com/hashicorp/terraform-provider-aws/internal/service/glacier
import (
	"context"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVaultRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlacierClient(ctx)

	output, err := findVaultByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Glacier Vault (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Glacier Vault (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, output.VaultARN)
	d.Set(names.AttrLocation, fmt.Sprintf("/%s/vaults/%s", meta.(*conns.AWSClient).AccountID(ctx), d.Id()))
	d.Set(names.AttrName, output.VaultName)

	accessPolicy, err := findVaultAccessPolicyByName(ctx, conn, d.Id())
	switch {
	case tfresource.NotFound(err):
		d.Set("access_policy", nil)
	case err != nil:
		return sdkdiag.AppendErrorf(diags, "reading Glacier Vault (%s) access policy: %s", d.Id(), err)
	default:
		policy, err := verify.PolicyToSet(d.Get("access_policy").(string), aws.ToString(accessPolicy.Policy))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		d.Set("access_policy", policy)
	}

	notificationConfig, err := findVaultNotificationsByName(ctx, conn, d.Id())
	switch {
	case tfresource.NotFound(err):
		d.Set("notification", nil)
	case err != nil:
		return sdkdiag.AppendErrorf(diags, "reading Glacier Vault (%s) notifications: %s", d.Id(), err)
	default:
		tfMap := map[string]any{}

		if v := notificationConfig.Events; v != nil {
			tfMap["events"] = v
		}

		if v := notificationConfig.SNSTopic; v != nil {
			tfMap["sns_topic"] = aws.ToString(v)
		}

		if err := d.Set("notification", []any{tfMap}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting notification: %s", err)
		}
	}

	return diags
}
