package github.com/hashicorp/terraform-provider-aws/internal/service/glacier
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVaultLockCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlacierClient(ctx)

	policy, err := structure.NormalizeJsonString(d.Get(names.AttrPolicy).(string))
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	vaultName := d.Get("vault_name").(string)
	input := glacier.InitiateVaultLockInput{
		AccountId: aws.String("-"),
		Policy: &types.VaultLockPolicy{
			Policy: aws.String(policy),
		},
		VaultName: aws.String(vaultName),
	}

	output, err := conn.InitiateVaultLock(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Glacier Vault Lock (%s): %s", vaultName, err)
	}

	d.SetId(vaultName)

	if d.Get("complete_lock").(bool) {
		input := glacier.CompleteVaultLockInput{
			LockId:    output.LockId,
			VaultName: aws.String(vaultName),
		}

		_, err := conn.CompleteVaultLock(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "completing Glacier Vault Lock (%s): %s", d.Id(), err)
		}

		if err := waitVaultLockLocked(ctx, conn, d.Id()); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Glacier Vault Lock (%s) complete: %s", d.Id(), err)
		}
	}

	return append(diags, resourceVaultLockRead(ctx, d, meta)...)
}
