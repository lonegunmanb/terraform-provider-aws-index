package github.com/hashicorp/terraform-provider-aws/internal/service/glacier
import (
	"context"
	"fmt"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glacier"
	"github.com/aws/aws-sdk-go-v2/service/glacier/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVaultCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlacierClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := glacier.CreateVaultInput{
		VaultName: aws.String(name),
	}

	_, err := conn.CreateVault(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Glacier Vault (%s): %s", name, err)
	}

	d.SetId(name)

	if err := createTags(ctx, conn, d.Id(), getTagsIn(ctx)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting Glacier Vault (%s) tags: %s", d.Id(), err)
	}

	if v, ok := d.GetOk("access_policy"); ok {
		policy, err := structure.NormalizeJsonString(v.(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := glacier.SetVaultAccessPolicyInput{
			Policy: &types.VaultAccessPolicy{
				Policy: aws.String(policy),
			},
			VaultName: aws.String(d.Id()),
		}

		_, err = conn.SetVaultAccessPolicy(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting Glacier Vault (%s) access policy: %s", d.Id(), err)
		}
	}

	if v, ok := d.GetOk("notification"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input := glacier.SetVaultNotificationsInput{
			VaultName:               aws.String(d.Id()),
			VaultNotificationConfig: expandVaultNotificationConfig(v.([]any)[0].(map[string]any)),
		}

		_, err := conn.SetVaultNotifications(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "setting Glacier Vault (%s) notifications: %s", d.Id(), err)
		}
	}

	return append(diags, resourceVaultRead(ctx, d, meta)...)
}
