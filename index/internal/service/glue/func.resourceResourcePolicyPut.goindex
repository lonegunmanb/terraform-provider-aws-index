package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResourcePolicyPut(condition awstypes.ExistCondition) func(context.Context, *schema.ResourceData, any) diag.Diagnostics {
	return func(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
		var diags diag.Diagnostics
		conn := meta.(*conns.AWSClient).GlueClient(ctx)

		policy, err := structure.NormalizeJsonString(d.Get(names.AttrPolicy).(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input := glue.PutResourcePolicyInput{
			PolicyExistsCondition: condition,
			PolicyInJson:          aws.String(policy),
		}

		if v, ok := d.GetOk("enable_hybrid"); ok {
			input.EnableHybrid = awstypes.EnableHybridValues(v.(string))
		}

		_, err = conn.PutResourcePolicy(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "putting Glue Resource Policy: %s", err)
		}

		if d.IsNewResource() {
			d.SetId(meta.(*conns.AWSClient).Region(ctx))
		}

		return append(diags, resourceResourcePolicyRead(ctx, d, meta)...)
	}
}
