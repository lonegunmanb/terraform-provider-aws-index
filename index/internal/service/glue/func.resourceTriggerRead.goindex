package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTriggerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlueClient(ctx)

	output, err := findTriggerByName(ctx, conn, d.Id())
	if err != nil {
		if errs.IsA[*awstypes.EntityNotFoundException](err) {
			log.Printf("[WARN] Glue Trigger (%s) not found, removing from state", d.Id())
			d.SetId("")
			return diags
		}
		return sdkdiag.AppendErrorf(diags, "reading Glue Trigger (%s): %s", d.Id(), err)
	}

	trigger := output.Trigger
	if trigger == nil {
		log.Printf("[WARN] Glue Trigger (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err := d.Set(names.AttrActions, flattenActions(trigger.Actions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting actions: %s", err)
	}

	triggerARN := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "glue",
		Region:    meta.(*conns.AWSClient).Region(ctx),
		AccountID: meta.(*conns.AWSClient).AccountID(ctx),
		Resource:  fmt.Sprintf("trigger/%s", d.Id()),
	}.String()
	d.Set(names.AttrARN, triggerARN)

	d.Set(names.AttrDescription, trigger.Description)

	var enabled bool
	d.Set(names.AttrState, string(trigger.State))

	if trigger.Type == awstypes.TriggerTypeOnDemand || trigger.Type == awstypes.TriggerTypeEvent {
		enabled = (trigger.State == awstypes.TriggerStateCreated || trigger.State == awstypes.TriggerStateCreating) && d.Get(names.AttrEnabled).(bool)
	} else {
		enabled = (trigger.State == awstypes.TriggerStateActivated || trigger.State == awstypes.TriggerStateActivating)
	}
	d.Set(names.AttrEnabled, enabled)

	if err := d.Set("predicate", flattenPredicate(trigger.Predicate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting predicate: %s", err)
	}

	if err := d.Set("event_batching_condition", flattenEventBatchingCondition(trigger.EventBatchingCondition)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting event_batching_condition: %s", err)
	}

	d.Set(names.AttrName, trigger.Name)
	d.Set(names.AttrSchedule, trigger.Schedule)
	d.Set(names.AttrType, trigger.Type)
	d.Set("workflow_name", trigger.WorkflowName)

	return diags
}
