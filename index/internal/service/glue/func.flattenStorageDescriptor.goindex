package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenStorageDescriptor(s *awstypes.StorageDescriptor) []map[string]any {
	if s == nil {
		storageDescriptors := make([]map[string]any, 0)
		return storageDescriptors
	}

	storageDescriptors := make([]map[string]any, 1)

	storageDescriptor := make(map[string]any)

	storageDescriptor["additional_locations"] = flex.FlattenStringValueList(s.AdditionalLocations)
	storageDescriptor["columns"] = flattenColumns(s.Columns)
	storageDescriptor[names.AttrLocation] = aws.ToString(s.Location)
	storageDescriptor["input_format"] = aws.ToString(s.InputFormat)
	storageDescriptor["output_format"] = aws.ToString(s.OutputFormat)
	storageDescriptor["compressed"] = s.Compressed
	storageDescriptor["number_of_buckets"] = s.NumberOfBuckets
	storageDescriptor["ser_de_info"] = flattenSerDeInfo(s.SerdeInfo)
	storageDescriptor["bucket_columns"] = flex.FlattenStringValueList(s.BucketColumns)
	storageDescriptor["sort_columns"] = flattenOrders(s.SortColumns)
	storageDescriptor[names.AttrParameters] = s.Parameters
	storageDescriptor["skewed_info"] = flattenSkewedInfo(s.SkewedInfo)
	storageDescriptor["stored_as_sub_directories"] = s.StoredAsSubDirectories

	if s.SchemaReference != nil {
		storageDescriptor["schema_reference"] = flattenTableSchemaReference(s.SchemaReference)
	}

	storageDescriptors[0] = storageDescriptor

	return storageDescriptors
}
