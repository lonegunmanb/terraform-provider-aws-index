package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceJobUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlueClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		jobUpdate := &awstypes.JobUpdate{
			Command: expandJobCommand(d.Get("command").([]any)),
			Role:    aws.String(d.Get(names.AttrRoleARN).(string)),
		}

		if v, ok := d.GetOk("connections"); ok {
			jobUpdate.Connections = &awstypes.ConnectionsList{
				Connections: flex.ExpandStringValueList(v.([]any)),
			}
		}

		if kv, ok := d.GetOk("default_arguments"); ok {
			jobUpdate.DefaultArguments = flex.ExpandStringValueMap(kv.(map[string]any))
		}

		if v, ok := d.GetOk(names.AttrDescription); ok {
			jobUpdate.Description = aws.String(v.(string))
		}

		if v, ok := d.GetOk("execution_class"); ok {
			jobUpdate.ExecutionClass = awstypes.ExecutionClass(v.(string))
		}

		if v, ok := d.GetOk("execution_property"); ok {
			jobUpdate.ExecutionProperty = expandExecutionProperty(v.([]any))
		}

		if v, ok := d.GetOk("glue_version"); ok {
			jobUpdate.GlueVersion = aws.String(v.(string))
		}

		if v, ok := d.GetOk("job_run_queuing_enabled"); ok {
			jobUpdate.JobRunQueuingEnabled = aws.Bool(v.(bool))
		}

		if v, ok := d.GetOk("maintenance_window"); ok {
			jobUpdate.MaintenanceWindow = aws.String(v.(string))
		}

		if v, ok := d.GetOk("max_retries"); ok {
			jobUpdate.MaxRetries = int32(v.(int))
		}

		if kv, ok := d.GetOk("non_overridable_arguments"); ok {
			jobUpdate.NonOverridableArguments = flex.ExpandStringValueMap(kv.(map[string]any))
		}

		if v, ok := d.GetOk("notification_property"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			jobUpdate.NotificationProperty = expandNotificationProperty(v.([]any)[0].(map[string]any))
		}

		if v, ok := d.GetOk("number_of_workers"); ok {
			jobUpdate.NumberOfWorkers = aws.Int32(int32(v.(int)))
		} else {
			if v, ok := d.GetOk(names.AttrMaxCapacity); ok {
				jobUpdate.MaxCapacity = aws.Float64(v.(float64))
			}
		}

		if v, ok := d.GetOk("security_configuration"); ok {
			jobUpdate.SecurityConfiguration = aws.String(v.(string))
		}

		if v, ok := d.GetOk("source_control_details"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			jobUpdate.SourceControlDetails = expandSourceControlDetails(v.([]any))
		}

		if v, ok := d.GetOk(names.AttrTimeout); ok {
			jobUpdate.Timeout = aws.Int32(int32(v.(int)))
		}

		if v, ok := d.GetOk("worker_type"); ok {
			jobUpdate.WorkerType = awstypes.WorkerType(v.(string))
		}

		input := glue.UpdateJobInput{
			JobName:   aws.String(d.Id()),
			JobUpdate: jobUpdate,
		}

		_, err := conn.UpdateJob(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Glue Job (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceJobRead(ctx, d, meta)...)
}
