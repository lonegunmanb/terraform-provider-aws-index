package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceJobRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlueClient(ctx)

	job, err := findJobByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Glue Job (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Glue Job (%s): %s", d.Id(), err)
	}

	jobARN := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "glue",
		Region:    meta.(*conns.AWSClient).Region(ctx),
		AccountID: meta.(*conns.AWSClient).AccountID(ctx),
		Resource:  fmt.Sprintf("job/%s", d.Id()),
	}.String()
	d.Set(names.AttrARN, jobARN)
	if err := d.Set("command", flattenJobCommand(job.Command)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting command: %s", err)
	}
	if err := d.Set("connections", flattenConnectionsList(job.Connections)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting connections: %s", err)
	}
	d.Set("default_arguments", job.DefaultArguments)
	d.Set(names.AttrDescription, job.Description)
	d.Set("execution_class", job.ExecutionClass)
	if err := d.Set("execution_property", flattenExecutionProperty(job.ExecutionProperty)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting execution_property: %s", err)
	}
	d.Set("glue_version", job.GlueVersion)
	d.Set("job_mode", job.JobMode)
	d.Set("job_run_queuing_enabled", job.JobRunQueuingEnabled)
	d.Set("maintenance_window", job.MaintenanceWindow)
	d.Set(names.AttrMaxCapacity, job.MaxCapacity)
	d.Set("max_retries", job.MaxRetries)
	d.Set(names.AttrName, job.Name)
	d.Set("non_overridable_arguments", job.NonOverridableArguments)
	if err := d.Set("notification_property", flattenNotificationProperty(job.NotificationProperty)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting notification_property: %s", err)
	}
	d.Set("number_of_workers", job.NumberOfWorkers)
	d.Set(names.AttrRoleARN, job.Role)
	d.Set("security_configuration", job.SecurityConfiguration)
	if err := d.Set("source_control_details", flattenSourceControlDetails(job.SourceControlDetails)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting source_control_details: %s", err)
	}
	d.Set(names.AttrTimeout, job.Timeout)
	d.Set("worker_type", job.WorkerType)

	return diags
}
