package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandConnectionInput(d *schema.ResourceData) *awstypes.ConnectionInput {
	apiObject := &awstypes.ConnectionInput{
		ConnectionType: awstypes.ConnectionType(d.Get("connection_type").(string)),
		Name:           aws.String(d.Get(names.AttrName).(string)),
	}

	if v, ok := d.GetOk("athena_properties"); ok && len(v.(map[string]any)) > 0 {
		apiObject.AthenaProperties = flex.ExpandStringValueMap(v.(map[string]any))
	}

	if v, ok := d.GetOk("connection_properties"); ok && len(v.(map[string]any)) > 0 {
		apiObject.ConnectionProperties = flex.ExpandStringValueMap(v.(map[string]any))
	} else {
		apiObject.ConnectionProperties = make(map[string]string)
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		apiObject.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("match_criteria"); ok && len(v.([]any)) > 0 {
		apiObject.MatchCriteria = flex.ExpandStringValueList(v.([]any))
	}

	if v, ok := d.GetOk("physical_connection_requirements"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		apiObject.PhysicalConnectionRequirements = expandPhysicalConnectionRequirements(v.([]any)[0].(map[string]any))
	}

	return apiObject
}
