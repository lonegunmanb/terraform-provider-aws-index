package github.com/hashicorp/terraform-provider-aws/internal/service/glue
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	awstypes "github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDataCatalogEncryptionSettingsPut(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GlueClient(ctx)

	catalogID := createCatalogID(d, meta.(*conns.AWSClient).AccountID(ctx))
	input := &glue.PutDataCatalogEncryptionSettingsInput{
		CatalogId: aws.String(catalogID),
	}

	if v, ok := d.GetOk("data_catalog_encryption_settings"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DataCatalogEncryptionSettings = expandDataCatalogEncryptionSettings(v.([]any)[0].(map[string]any))
	}

	log.Printf("[DEBUG] Putting Glue Data Catalog Encryption Settings: %+v", input)
	_, err := conn.PutDataCatalogEncryptionSettings(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "putting Glue Data Catalog Encryption Settings (%s): %s", catalogID, err)
	}

	d.SetId(catalogID)

	return append(diags, resourceDataCatalogEncryptionSettingsRead(ctx, d, meta)...)
}
