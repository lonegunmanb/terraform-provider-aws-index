package github.com/hashicorp/terraform-provider-aws/internal/service/signer
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/signer"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSigningJobCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SignerClient(ctx)

	profileName := d.Get("profile_name")
	input := signer.StartSigningJobInput{
		Destination: expandDestination(d.Get(names.AttrDestination).([]any)),
		ProfileName: aws.String(profileName.(string)),
		Source:      expandSource(d.Get(names.AttrSource).([]any)),
	}

	output, err := conn.StartSigningJob(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Signer Signing Job (%s): %s", profileName, err)
	}

	d.SetId(aws.ToString(output.JobId))

	const (
		timeout = 5 * time.Minute
	)
	_, err = waitSigningJobSucceeded(ctx, conn, d.Id(), timeout)

	if err != nil && !d.Get("ignore_signing_job_failure").(bool) {
		return sdkdiag.AppendErrorf(diags, "waiting for Signer Signing Job (%s) success: %s", d.Id(), err)
	}

	return append(diags, resourceSigningJobRead(ctx, d, meta)...)
}
