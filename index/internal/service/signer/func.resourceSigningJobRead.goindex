package github.com/hashicorp/terraform-provider-aws/internal/service/signer
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/signer"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSigningJobRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SignerClient(ctx)

	output, err := findSigningJobByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Signer Signing Job (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Signer Signing Job (%s): %s", d.Id(), err)
	}

	d.Set("completed_at", aws.ToTime(output.CompletedAt).Format(time.RFC3339))
	d.Set(names.AttrCreatedAt, aws.ToTime(output.CreatedAt).Format(time.RFC3339))
	d.Set("job_id", output.JobId)
	d.Set("job_invoker", output.JobInvoker)
	d.Set("job_owner", output.JobOwner)
	d.Set("platform_display_name", output.PlatformDisplayName)
	d.Set("platform_id", output.PlatformId)
	d.Set("profile_name", output.ProfileName)
	d.Set("profile_version", output.ProfileVersion)
	d.Set("requested_by", output.RequestedBy)
	if err := d.Set("revocation_record", flattenSigningJobRevocationRecord(output.RevocationRecord)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting revocation_record: %s", err)
	}
	signatureExpiresAt := ""
	if output.SignatureExpiresAt != nil {
		signatureExpiresAt = aws.ToTime(output.SignatureExpiresAt).Format(time.RFC3339)
	}
	d.Set("signature_expires_at", signatureExpiresAt)
	if err := d.Set("signed_object", flattenSignedObject(output.SignedObject)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting signed_object: %s", err)
	}
	if err := d.Set(names.AttrSource, flattenSource(output.Source)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting source: %s", err)
	}
	d.Set(names.AttrStatus, output.Status)
	d.Set(names.AttrStatusReason, output.StatusReason)

	return diags
}
