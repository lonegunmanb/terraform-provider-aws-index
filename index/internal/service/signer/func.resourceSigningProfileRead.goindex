package github.com/hashicorp/terraform-provider-aws/internal/service/signer
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/signer"
	"github.com/aws/aws-sdk-go-v2/service/signer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSigningProfileRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SignerClient(ctx)

	output, err := findSigningProfileByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Signer Signing Profile (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Signer Signing Profile (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, output.Arn)
	d.Set(names.AttrName, output.ProfileName)
	d.Set(names.AttrNamePrefix, create.NamePrefixFromName(aws.ToString(output.ProfileName)))
	d.Set("platform_display_name", output.PlatformDisplayName)
	d.Set("platform_id", output.PlatformId)
	if err := d.Set("revocation_record", flattenSigningProfileRevocationRecord(output.RevocationRecord)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting revocation_record: %s", err)
	}
	if v := output.SignatureValidityPeriod; v != nil {
		if err := d.Set("signature_validity_period", []any{
			map[string]any{
				names.AttrValue: v.Value,
				names.AttrType:  v.Type,
			},
		}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting signature_validity_period: %s", err)
		}
	}
	if output.SigningMaterial != nil {
		if err := d.Set("signing_material", flattenSigningMaterial(output.SigningMaterial)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting signing_material: %s", err)
		}
	}
	if output.SigningParameters != nil {
		if err := d.Set("signing_parameters", flex.FlattenStringValueMap(output.SigningParameters)); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting signing_parameters: %s", err)
		}
	}
	d.Set(names.AttrStatus, output.Status)
	d.Set(names.AttrVersion, output.ProfileVersion)
	d.Set("version_arn", output.ProfileVersionArn)

	setTagsOut(ctx, output.Tags)

	return diags
}
