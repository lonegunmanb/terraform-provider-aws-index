package github.com/hashicorp/terraform-provider-aws/internal/service/bedrockagentcore
import (
	"context"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepAgentRuntimeEndpoints(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	input := bedrockagentcorecontrol.ListAgentRuntimesInput{}
	conn := client.BedrockAgentCoreClient(ctx)
	var sweepResources []sweep.Sweepable

	pages := bedrockagentcorecontrol.NewListAgentRuntimesPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)
		if err != nil {
			return nil, smarterr.NewError(err)
		}

		for _, v := range page.AgentRuntimes {
			agentRuntimeID := aws.ToString(v.AgentRuntimeId)
			input := bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput{
				AgentRuntimeId: aws.String(agentRuntimeID),
			}

			pages := bedrockagentcorecontrol.NewListAgentRuntimeEndpointsPaginator(conn, &input)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)
				if err != nil {
					return nil, smarterr.NewError(err)
				}

				for _, v := range page.RuntimeEndpoints {
					sweepResources = append(sweepResources, framework.NewSweepResource(newAgentRuntimeEndpointResource, client,
						framework.NewAttribute("agent_runtime_id", agentRuntimeID),
						framework.NewAttribute(names.AttrName, aws.ToString(v.Name)),
					),
					)
				}
			}
		}
	}

	return sweepResources, nil
}
