package github.com/hashicorp/terraform-provider-aws/internal/service/bedrockagentcore
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"
	awstypes "github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	sdkid "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	sdkretry "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/smerr"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (m *schemaItemsLeafModel) Flatten(ctx context.Context, v any) diag.Diagnostics {
	var diags diag.Diagnostics
	switch t := v.(type) {
	case awstypes.SchemaDefinition:
		smerr.EnrichAppend(ctx, &diags, fwflex.Flatten(ctx, v, &m.schemaItemsLeafCoreModel))
		if diags.HasError() {
			return diags
		}
		// Populate ItemsJSON
		if t.Items != nil {
			jsonItems := convertToJSONSchemaDefinition(t.Items)
			s, err := tfjson.EncodeToString(jsonItems)
			if err != nil {
				diags.AddWarning("Failed to marshal items for items_json", err.Error())
				m.ItemsJSON = types.StringNull()
			} else {
				m.ItemsJSON = types.StringValue(s)
			}
		} else {
			m.ItemsJSON = types.StringNull()
		}
		// Populate PropertiesJSON
		if t.Properties != nil || len(t.Required) > 0 {
			propObj := awstypes.SchemaDefinition{
				Properties: t.Properties,
				Required:   t.Required,
			}
			jsonProps := convertToJSONSchemaDefinition(&propObj)
			s, err := tfjson.EncodeToString(jsonProps)
			if err != nil {
				diags.AddWarning("Failed to marshal properties for properties_json", err.Error())
				m.PropertiesJSON = types.StringNull()
			} else {
				m.PropertiesJSON = types.StringValue(s)
			}
		} else {
			m.PropertiesJSON = types.StringNull()
		}
	default:
		diags.AddError(
			"Unsupported Type",
			fmt.Sprintf("schema items leaf flatten: %T", v),
		)
	}
	return diags
}
