package github.com/hashicorp/terraform-provider-aws/internal/service/amplify
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/amplify"
	"github.com/aws/aws-sdk-go-v2/service/amplify/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAppRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).AmplifyClient(ctx)

	app, err := findAppByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Amplify App (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Amplify App (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, app.AppArn)
	if app.AutoBranchCreationConfig != nil {
		if err := d.Set("auto_branch_creation_config", []any{flattenAutoBranchCreationConfig(app.AutoBranchCreationConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting auto_branch_creation_config: %s", err)
		}
	} else {
		d.Set("auto_branch_creation_config", nil)
	}
	d.Set("auto_branch_creation_patterns", aws.StringSlice(app.AutoBranchCreationPatterns))
	d.Set("basic_auth_credentials", app.BasicAuthCredentials)
	d.Set("build_spec", app.BuildSpec)
	if app.CacheConfig != nil {
		if err := d.Set("cache_config", []any{flattenCacheConfig(app.CacheConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting cache_config: %s", err)
		}
	}
	d.Set("compute_role_arn", app.ComputeRoleArn)
	d.Set("custom_headers", app.CustomHeaders)
	if err := d.Set("custom_rule", flattenCustomRules(app.CustomRules)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting custom_rule: %s", err)
	}
	d.Set("default_domain", app.DefaultDomain)
	d.Set(names.AttrDescription, app.Description)
	d.Set("enable_auto_branch_creation", app.EnableAutoBranchCreation)
	d.Set("enable_basic_auth", app.EnableBasicAuth)
	d.Set("enable_branch_auto_build", app.EnableBranchAutoBuild)
	d.Set("enable_branch_auto_deletion", app.EnableBranchAutoDeletion)
	d.Set("environment_variables", aws.StringMap(app.EnvironmentVariables))
	d.Set("iam_service_role_arn", app.IamServiceRoleArn)
	if app.JobConfig != nil {
		if err := d.Set("job_config", []any{flattenJobConfig(app.JobConfig)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting job_config: %s", err)
		}
	} else {
		d.Set("job_config", nil)
	}
	d.Set(names.AttrName, app.Name)
	d.Set("platform", app.Platform)
	if app.ProductionBranch != nil {
		if err := d.Set("production_branch", []any{flattenProductionBranch(app.ProductionBranch)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting production_branch: %s", err)
		}
	} else {
		d.Set("production_branch", nil)
	}
	d.Set("repository", app.Repository)

	setTagsOut(ctx, app.Tags)

	return diags
}
