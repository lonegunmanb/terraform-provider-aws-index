package github.com/hashicorp/terraform-provider-aws/internal/service/cloudfrontkeyvaluestore
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore/types"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *keyResource) ImportState(ctx context.Context, request resource.ImportStateRequest, response *resource.ImportStateResponse) {
	// Import-by-id case
	if request.ID != "" {
		id := request.ID
		parts, err := flex.ExpandResourceId(id, keyResourceIDPartCount, false)
		if err != nil {
			response.Diagnostics.AddError(
				"Parsing Import ID",
				err.Error(),
			)
			return
		}

		_, err = arn.Parse(parts[0])
		if err != nil {
			response.Diagnostics.AddError(
				"Parsing Import ID",
				err.Error(),
			)
			return
		}

		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root("key_value_store_arn"), parts[0])...)
		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(names.AttrKey), parts[1])...)
		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(names.AttrID), request.ID)...) // nosemgrep:ci.semgrep.framework.import-state-passthrough-id

		return
	}

	if identity := request.Identity; identity != nil {
		var arn string
		identity.GetAttribute(ctx, path.Root("key_value_store_arn"), &arn)

		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root("key_value_store_arn"), arn)...)
		if response.Diagnostics.HasError() {
			return
		}

		var key string
		identity.GetAttribute(ctx, path.Root(names.AttrKey), &key)

		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(names.AttrKey), key)...)
		if response.Diagnostics.HasError() {
			return
		}

		parts := []string{
			arn,
			key,
		}
		id, _ := flex.FlattenResourceId(parts, keyResourceIDPartCount, false)

		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(names.AttrID), id)...)
	}
}
