package github.com/hashicorp/terraform-provider-aws/internal/service/detective
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/detective"
	awstypes "github.com/aws/aws-sdk-go-v2/service/detective/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceGraphCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	const (
		timeout = 4 * time.Minute
	)
	conn := meta.(*conns.AWSClient).DetectiveClient(ctx)

	input := &detective.CreateGraphInput{
		Tags: getTagsIn(ctx),
	}

	outputRaw, err := tfresource.RetryWhenIsA[*awstypes.InternalServerException](ctx, timeout, func() (any, error) {
		return conn.CreateGraph(ctx, input)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Detective Graph: %s", err)
	}

	d.SetId(aws.ToString(outputRaw.(*detective.CreateGraphOutput).GraphArn))

	return append(diags, resourceGraphRead(ctx, d, meta)...)
}
