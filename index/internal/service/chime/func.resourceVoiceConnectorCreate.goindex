package github.com/hashicorp/terraform-provider-aws/internal/service/chime
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceVoiceConnectorCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ChimeSDKVoiceClient(ctx)

	createInput := &chimesdkvoice.CreateVoiceConnectorInput{
		Name:              aws.String(d.Get(names.AttrName).(string)),
		RequireEncryption: aws.Bool(d.Get("require_encryption").(bool)),
		Tags:              getTagsIn(ctx),
	}

	if v, ok := d.GetOk("aws_region"); ok {
		createInput.AwsRegion = awstypes.VoiceConnectorAwsRegion(v.(string))
	}

	resp, err := conn.CreateVoiceConnector(ctx, createInput)
	if err != nil || resp.VoiceConnector == nil {
		return sdkdiag.AppendErrorf(diags, "creating Chime Voice connector: %s", err)
	}

	d.SetId(aws.ToString(resp.VoiceConnector.VoiceConnectorId))

	return append(diags, resourceVoiceConnectorRead(ctx, d, meta)...)
}
