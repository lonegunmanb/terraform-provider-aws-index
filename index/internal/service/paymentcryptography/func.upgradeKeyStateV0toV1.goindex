package github.com/hashicorp/terraform-provider-aws/internal/service/paymentcryptography
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/paymentcryptography/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeKeyStateV0toV1(ctx context.Context, request resource.UpgradeStateRequest, response *resource.UpgradeStateResponse) {
	var keyDataV0 resourceKeyModelV0
	response.Diagnostics.Append(request.State.Get(ctx, &keyDataV0)...)
	if response.Diagnostics.HasError() {
		return
	}

	keyDataV1 := keyResourceModel{
		KeyARN:                 keyDataV0.KeyArn,
		DeletionWindowInDays:   keyDataV0.DeletionWindowInDays,
		Enabled:                keyDataV0.Enabled,
		Exportable:             keyDataV0.Exportable,
		ID:                     keyDataV0.ID,
		KeyAttributes:          upgradeKeyAttributesStateFromV0(ctx, keyDataV0.KeyAttributes, &response.Diagnostics),
		KeyCheckValue:          keyDataV0.KeyCheckValue,
		KeyCheckValueAlgorithm: keyDataV0.KeyCheckValueAlgorithm,
		KeyOrigin:              keyDataV0.KeyOrigin,
		KeyState:               keyDataV0.KeyState,
		Tags:                   keyDataV0.Tags,
		TagsAll:                keyDataV0.TagsAll,
		Timeouts:               keyDataV0.Timeouts,
	}

	response.Diagnostics.Append(response.State.Set(ctx, keyDataV1)...)
}
