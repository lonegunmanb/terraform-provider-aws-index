package github.com/hashicorp/terraform-provider-aws/internal/service/paymentcryptography
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/paymentcryptography/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func upgradeKeyModesOfUseModelStateFromV0(ctx context.Context, old fwtypes.ObjectValueOf[keyModesOfUseModel], diags *diag.Diagnostics) fwtypes.ListNestedObjectValueOf[keyModesOfUseModel] {
	if old.IsNull() {
		return fwtypes.NewListNestedObjectValueOfNull[keyModesOfUseModel](ctx)
	}

	var oldObj keyModesOfUseModel
	diags.Append(old.As(ctx, &oldObj, basetypes.ObjectAsOptions{})...)

	newObj := []keyModesOfUseModel{
		{
			Decrypt:        oldObj.Decrypt,
			DeriveKey:      oldObj.DeriveKey,
			Encrypt:        oldObj.Encrypt,
			Generate:       oldObj.Generate,
			NoRestrictions: oldObj.NoRestrictions,
			Sign:           oldObj.Sign,
			Unwrap:         oldObj.Unwrap,
			Verify:         oldObj.Verify,
			Wrap:           oldObj.Wrap,
		},
	}

	result, d := fwtypes.NewListNestedObjectValueOfValueSlice(ctx, newObj)
	diags.Append(d...)

	return result
}
