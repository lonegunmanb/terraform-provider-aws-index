package github.com/hashicorp/terraform-provider-aws/internal/service/paymentcryptography
import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/paymentcryptography/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func keySchemaV0(ctx context.Context) schema.Schema {
	return schema.Schema{
		Version: 0,
		Attributes: map[string]schema.Attribute{
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrID:  framework.IDAttribute(),
			"deletion_window_in_days": schema.Int64Attribute{
				Optional: true,
				Computed: true,
				Default:  int64default.StaticInt64(defaultDeletionWindowInDays),
			},
			names.AttrEnabled: schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"exportable": schema.BoolAttribute{
				Required: true,
			},
			"key_check_value": schema.StringAttribute{
				Computed: true,
			},
			"key_check_value_algorithm": schema.StringAttribute{
				CustomType: fwtypes.StringEnumType[awstypes.KeyCheckValueAlgorithm](),
				Optional:   true,
				Computed:   true,
			},
			"key_origin": schema.StringAttribute{
				Computed:   true,
				CustomType: fwtypes.StringEnumType[awstypes.KeyOrigin](),
			},
			"key_state": schema.StringAttribute{
				Computed:   true,
				CustomType: fwtypes.StringEnumType[awstypes.KeyState](),
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			"key_attributes": schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
				CustomType: fwtypes.NewObjectTypeOf[keyAttributesModelV0](ctx),
				Attributes: map[string]schema.Attribute{
					"key_algorithm": schema.StringAttribute{
						Required:   true,
						CustomType: fwtypes.StringEnumType[awstypes.KeyAlgorithm](),
					},
					"key_class": schema.StringAttribute{
						Required:   true,
						CustomType: fwtypes.StringEnumType[awstypes.KeyClass](),
					},
					"key_usage": schema.StringAttribute{
						Required:   true,
						CustomType: fwtypes.StringEnumType[awstypes.KeyUsage](),
					},
				},
				Blocks: map[string]schema.Block{
					"key_modes_of_use": schema.SingleNestedBlock{ // nosemgrep:ci.avoid-SingleNestedBlock pre-existing, will be converted
						CustomType: fwtypes.NewObjectTypeOf[keyModesOfUseModel](ctx),
						Attributes: map[string]schema.Attribute{
							"decrypt": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"derive_key": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"encrypt": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"generate": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"no_restrictions": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"sign": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"unwrap": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"verify": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
							"wrap": schema.BoolAttribute{
								Optional: true,
								Computed: true,
							},
						},
					},
				},
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}
