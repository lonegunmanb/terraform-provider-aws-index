package github.com/hashicorp/terraform-provider-aws/internal/service/wafregional
import (
	"context"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/wafregional"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafregional/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWebACLUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WAFRegionalClient(ctx)
	region := meta.(*conns.AWSClient).Region(ctx)

	if d.HasChanges(names.AttrDefaultAction, names.AttrRule) {
		o, n := d.GetChange(names.AttrRule)
		oldR, newR := o.(*schema.Set).List(), n.(*schema.Set).List()

		_, err := newRetryer(conn, region).RetryWithToken(ctx, func(token *string) (any, error) {
			input := &wafregional.UpdateWebACLInput{
				ChangeToken:   token,
				DefaultAction: expandAction(d.Get(names.AttrDefaultAction).([]any)),
				Updates:       diffWebACLRules(oldR, newR),
				WebACLId:      aws.String(d.Id()),
			}

			return conn.UpdateWebACL(ctx, input)
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WAF Regional Web ACL (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrLoggingConfiguration) {
		if loggingConfiguration := d.Get(names.AttrLoggingConfiguration).([]any); len(loggingConfiguration) == 1 {
			input := &wafregional.PutLoggingConfigurationInput{
				LoggingConfiguration: expandLoggingConfiguration(loggingConfiguration, d.Get(names.AttrARN).(string)),
			}

			_, err := conn.PutLoggingConfiguration(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "putting WAF Regional Web ACL (%s) logging configuration: %s", d.Id(), err)
			}
		} else {
			input := &wafregional.DeleteLoggingConfigurationInput{
				ResourceArn: aws.String(d.Get(names.AttrARN).(string)),
			}

			_, err := conn.DeleteLoggingConfiguration(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deleting WAF Regional Web ACL (%s) logging configuration: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceWebACLRead(ctx, d, meta)...)
}
