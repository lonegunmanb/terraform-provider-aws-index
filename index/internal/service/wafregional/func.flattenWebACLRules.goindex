package github.com/hashicorp/terraform-provider-aws/internal/service/wafregional
import (
	"context"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/wafregional"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafregional/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenWebACLRules(ts []awstypes.ActivatedRule) []map[string]any {
	out := make([]map[string]any, len(ts))
	for i, r := range ts {
		m := make(map[string]any)

		switch r.Type {
		case awstypes.WafRuleTypeGroup:
			actionMap := map[string]any{
				names.AttrType: r.OverrideAction.Type,
			}
			m["override_action"] = []map[string]any{actionMap}
		default:
			actionMap := map[string]any{
				names.AttrType: r.Action.Type,
			}
			m[names.AttrAction] = []map[string]any{actionMap}
		}

		m[names.AttrPriority] = r.Priority
		m["rule_id"] = aws.ToString(r.RuleId)
		m[names.AttrType] = string(r.Type)
		out[i] = m
	}
	return out
}
