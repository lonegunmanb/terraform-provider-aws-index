package github.com/hashicorp/terraform-provider-aws/internal/service/wafregional
import (
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/wafregional"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/sdk"
)
func sweepRateBasedRules(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.WAFRegionalClient(ctx)
	input := &wafregional.ListRateBasedRulesInput{}
	sweepResources := make([]sweep.Sweepable, 0)

	err = listRateBasedRulesPages(ctx, conn, input, func(page *wafregional.ListRateBasedRulesOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		for _, v := range page.Rules {
			id := aws.ToString(v.RuleId)
			r := resourceRateBasedRule()
			d := r.Data(nil)
			d.SetId(id)
			// Refresh.
			if err := sdk.ReadResource(ctx, r, d, client); err != nil {
				log.Printf("[WARN] Skipping WAF Regional Rate Based Rule %s: %s", id, err)
				continue
			}
			if d.Id() == "" {
				continue
			}

			sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
		}

		return !lastPage
	})

	if awsv2.SkipSweepError(err) {
		log.Printf("[WARN] Skipping WAF Regional Rate Based Rule sweep for %s: %s", region, err)
		return nil
	}

	if err != nil {
		return fmt.Errorf("error listing WAF Regional Rate Based Rules (%s): %w", region, err)
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("error sweeping WAF Regional Rate Based Rules (%s): %w", region, err)
	}

	return nil
}
