package github.com/hashicorp/terraform-provider-aws/internal/service/wafregional
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/wafregional"
	awstypes "github.com/aws/aws-sdk-go-v2/service/wafregional/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenActivatedRules(activatedRules []awstypes.ActivatedRule) []any {
	out := make([]any, len(activatedRules))
	for i, ar := range activatedRules {
		rule := map[string]any{
			names.AttrPriority: aws.ToInt32(ar.Priority),
			"rule_id":          aws.ToString(ar.RuleId),
			names.AttrType:     string(ar.Type),
		}
		if ar.Action != nil {
			rule[names.AttrAction] = []any{
				map[string]any{
					names.AttrType: ar.Action.Type,
				},
			}
		}
		out[i] = rule
	}
	return out
}
