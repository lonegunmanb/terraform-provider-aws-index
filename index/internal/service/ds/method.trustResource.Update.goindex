package github.com/hashicorp/terraform-provider-aws/internal/service/ds
import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	fwvalidators "github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *trustResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new trustResourceModel
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().DSClient(ctx)

	directoryID := new.DirectoryID.ValueString()
	trustID := new.ID.ValueString()

	if !new.SelectiveAuth.IsUnknown() && !old.SelectiveAuth.Equal(new.SelectiveAuth) {
		input := &directoryservice.UpdateTrustInput{
			SelectiveAuth: new.SelectiveAuth.ValueEnum(),
			TrustId:       aws.String(trustID),
		}

		_, err := conn.UpdateTrust(ctx, input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Directory Service Trust (%s)", trustID), err.Error())

			return
		}

		const (
			timeout = 10 * time.Minute
		)
		trust, err := waitTrustUpdated(ctx, conn, directoryID, trustID, timeout)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("waiting for Directory Service Trust (%s) update", trustID), err.Error())

			return
		}

		response.Diagnostics.Append(fwflex.Flatten(ctx, trust, &new)...)
		if response.Diagnostics.HasError() {
			return
		}
	} else {
		// Set values for unknowns.
		new.LastUpdatedDateTime = old.LastUpdatedDateTime
		new.SelectiveAuth = old.SelectiveAuth
		new.StateLastUpdatedDateTime = old.StateLastUpdatedDateTime
		new.TrustState = old.TrustState
		new.TrustStateReason = old.TrustStateReason
	}

	if !new.ConditionalForwarderIPAddrs.IsUnknown() && !old.ConditionalForwarderIPAddrs.Equal(new.ConditionalForwarderIPAddrs) {
		input := &directoryservice.UpdateConditionalForwarderInput{
			DirectoryId:      aws.String(directoryID),
			DnsIpAddrs:       fwflex.ExpandFrameworkStringValueSet(ctx, new.ConditionalForwarderIPAddrs),
			RemoteDomainName: fwflex.StringFromFramework(ctx, new.RemoteDomainName),
		}

		_, err := conn.UpdateConditionalForwarder(ctx, input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("updating Directory Service Conditional Forwarder (%s)", conditionalForwarderCreateResourceID(new.DirectoryID.ValueString(), new.RemoteDomainName.ValueString())), err.Error())

			return
		}

		// Directory Trust optionally accepts a remote domain name with a trailing period.
		domainName := strings.TrimRight(new.RemoteDomainName.ValueString(), ".")
		forwarder, err := findConditionalForwarderByTwoPartKey(ctx, conn, directoryID, domainName)

		if err != nil {
			// Outputting a NotFoundError does not include the original error.
			// Retrieve it to give the user an actionalble error message.
			if nfe, ok := errs.As[*retry.NotFoundError](err); ok {
				if nfe.LastError != nil {
					err = nfe.LastError
				}
			}

			response.Diagnostics.AddError(fmt.Sprintf("reading Directory Service Conditional Forwarder (%s)", conditionalForwarderCreateResourceID(directoryID, domainName)), err.Error())

			return
		}

		new.ConditionalForwarderIPAddrs = fwflex.FlattenFrameworkStringValueSetOfString(ctx, forwarder.DnsIpAddrs)
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
