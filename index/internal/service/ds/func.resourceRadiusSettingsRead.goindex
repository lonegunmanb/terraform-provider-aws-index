package github.com/hashicorp/terraform-provider-aws/internal/service/ds
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceRadiusSettingsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DSClient(ctx)

	output, err := findRadiusSettingsByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Directory Service Directory (%s) RADIUS Settings not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Directory Service Directory (%s) RADIUS settings: %s", d.Id(), err)
	}

	d.Set("authentication_protocol", output.AuthenticationProtocol)
	d.Set("display_label", output.DisplayLabel)
	d.Set("directory_id", d.Id())
	d.Set("radius_port", output.RadiusPort)
	d.Set("radius_retries", output.RadiusRetries)
	d.Set("radius_servers", output.RadiusServers)
	d.Set("radius_timeout", output.RadiusTimeout)
	d.Set("shared_secret", output.SharedSecret)
	d.Set("use_same_username", output.UseSameUsername)

	return diags
}
