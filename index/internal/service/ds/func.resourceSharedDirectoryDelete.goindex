package github.com/hashicorp/terraform-provider-aws/internal/service/ds
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSharedDirectoryDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DSClient(ctx)

	ownerDirID, sharedDirID, err := sharedDirectoryParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	log.Printf("[DEBUG] Deleting Directory Service Shared Directory: %s", d.Id())
	input := directoryservice.UnshareDirectoryInput{
		DirectoryId:   aws.String(ownerDirID),
		UnshareTarget: expandUnshareTarget(d.Get(names.AttrTarget).([]any)[0].(map[string]any)),
	}
	_, err = conn.UnshareDirectory(ctx, &input)

	if errs.IsA[*awstypes.DirectoryNotSharedException](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting Directory Service Shared Directory (%s): %s", d.Id(), err)
	}

	if _, err := waitSharedDirectoryDeleted(ctx, conn, ownerDirID, sharedDirID, d.Timeout(schema.TimeoutDelete)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Directory Service Shared Directory (%s) delete: %s", d.Id(), err)
	}

	return diags
}
