package github.com/hashicorp/terraform-provider-aws/internal/service/ds
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/directoryservice/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceConditionalForwarderCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).DSClient(ctx)

	directoryID := d.Get("directory_id").(string)
	domainName := d.Get("remote_domain_name").(string)
	id := conditionalForwarderCreateResourceID(directoryID, domainName)
	input := &directoryservice.CreateConditionalForwarderInput{
		DirectoryId:      aws.String(directoryID),
		DnsIpAddrs:       flex.ExpandStringValueList(d.Get("dns_ips").([]any)),
		RemoteDomainName: aws.String(domainName),
	}

	_, err := conn.CreateConditionalForwarder(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Directory Service Conditional Forwarder (%s): %s", id, err)
	}

	d.SetId(id)

	const (
		timeout = 1 * time.Minute
	)
	_, err = tfresource.RetryWhenNotFound(ctx, timeout, func() (any, error) {
		return findConditionalForwarderByTwoPartKey(ctx, conn, directoryID, domainName)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Directory Service Conditional Forwarder (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceConditionalForwarderRead(ctx, d, meta)...)
}
