package github.com/hashicorp/terraform-provider-aws/internal/service/kafkaconnect
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafkaconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kafkaconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCustomPluginRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KafkaConnectClient(ctx)

	plugin, err := findCustomPluginByARN(ctx, conn, d.Id())

	if tfresource.NotFound(err) && !d.IsNewResource() {
		log.Printf("[WARN] MSK Connect Custom Plugin (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading MSK Connect Custom Plugin (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, plugin.CustomPluginArn)
	d.Set(names.AttrDescription, plugin.Description)
	d.Set(names.AttrName, plugin.Name)
	d.Set(names.AttrState, plugin.CustomPluginState)

	if plugin.LatestRevision != nil {
		d.Set(names.AttrContentType, plugin.LatestRevision.ContentType)
		d.Set("latest_revision", plugin.LatestRevision.Revision)
		if plugin.LatestRevision.Location != nil {
			if err := d.Set(names.AttrLocation, []any{flattenCustomPluginLocationDescription(plugin.LatestRevision.Location)}); err != nil {
				return sdkdiag.AppendErrorf(diags, "setting location: %s", err)
			}
		} else {
			d.Set(names.AttrLocation, nil)
		}
	} else {
		d.Set(names.AttrContentType, nil)
		d.Set("latest_revision", nil)
		d.Set(names.AttrLocation, nil)
	}

	return diags
}
