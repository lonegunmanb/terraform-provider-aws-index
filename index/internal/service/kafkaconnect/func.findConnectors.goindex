package github.com/hashicorp/terraform-provider-aws/internal/service/kafkaconnect
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafkaconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kafkaconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findConnectors(ctx context.Context, conn *kafkaconnect.Client, input *kafkaconnect.ListConnectorsInput, filter tfslices.Predicate[*awstypes.ConnectorSummary]) ([]awstypes.ConnectorSummary, error) {
	var output []awstypes.ConnectorSummary

	pages := kafkaconnect.NewListConnectorsPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.Connectors {
			if filter(&v) {
				output = append(output, v)
			}
		}
	}

	return output, nil
}
