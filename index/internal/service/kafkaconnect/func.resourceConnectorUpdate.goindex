package github.com/hashicorp/terraform-provider-aws/internal/service/kafkaconnect
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafkaconnect"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kafkaconnect/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConnectorUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).KafkaConnectClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		currentVersion := d.Get(names.AttrVersion).(string)

		if d.HasChange("capacity") {
			input := &kafkaconnect.UpdateConnectorInput{
				Capacity:       expandCapacityUpdate(d.Get("capacity").([]any)[0].(map[string]any)),
				ConnectorArn:   aws.String(d.Id()),
				CurrentVersion: aws.String(currentVersion),
			}

			_, err := conn.UpdateConnector(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating MSK Connect Connector capacity (%s): %s", d.Id(), err)
			}

			output, err := waitConnectorUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate))

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for MSK Connect Connector (%s) update: %s", d.Id(), err)
			}

			currentVersion = aws.ToString(output.CurrentVersion)
		}

		if d.HasChange("connector_configuration") {
			input := &kafkaconnect.UpdateConnectorInput{
				ConnectorConfiguration: flex.ExpandStringValueMap(d.Get("connector_configuration").(map[string]any)),
				ConnectorArn:           aws.String(d.Id()),
				CurrentVersion:         aws.String(currentVersion),
			}

			_, err := conn.UpdateConnector(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "updating MSK Connect Connector configuration (%s): %s", d.Id(), err)
			}

			if _, err := waitConnectorUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
				return sdkdiag.AppendErrorf(diags, "waiting for MSK Connect Connector (%s) update: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceConnectorRead(ctx, d, meta)...)
}
