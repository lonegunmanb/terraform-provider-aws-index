package github.com/hashicorp/terraform-provider-aws/internal/service/budgets
import (
	"context"
	"fmt"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	awstypes "github.com/aws/aws-sdk-go-v2/service/budgets/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceBudgetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BudgetsClient(ctx)

	budgetName := create.Name(d.Get(names.AttrName).(string), d.Get(names.AttrNamePrefix).(string))

	accountID := d.Get(names.AttrAccountID).(string)
	if accountID == "" {
		accountID = meta.(*conns.AWSClient).AccountID(ctx)
	}
	d.Set(names.AttrAccountID, accountID)

	budget, err := FindBudgetByTwoPartKey(ctx, conn, accountID, budgetName)
	if err != nil {
		return create.AppendDiagError(diags, names.Budgets, create.ErrActionReading, DSNameBudget, d.Id(), err)
	}

	d.SetId(fmt.Sprintf("%s:%s", accountID, budgetName))

	arn := arn.ARN{
		Partition: meta.(*conns.AWSClient).Partition(ctx),
		Service:   "budgets",
		AccountID: accountID,
		Resource:  "budget/" + budgetName,
	}
	d.Set(names.AttrARN, arn.String())

	d.Set("billing_view_arn", budget.BillingViewArn)

	d.Set("budget_type", budget.BudgetType)

	if err := d.Set("budget_limit", flattenSpend(budget.BudgetLimit)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting budget_spend: %s", err)
	}

	if err := d.Set("calculated_spend", flattenCalculatedSpend(budget.CalculatedSpend)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting calculated_spend: %s", err)
	}

	d.Set("budget_exceeded", false)
	if budget.CalculatedSpend != nil && budget.CalculatedSpend.ActualSpend != nil {
		if aws.ToString(budget.BudgetLimit.Unit) == aws.ToString(budget.CalculatedSpend.ActualSpend.Unit) {
			bLimit, err := strconv.ParseFloat(aws.ToString(budget.BudgetLimit.Amount), 64)
			if err != nil {
				return create.AppendDiagError(diags, names.Budgets, create.ErrActionReading, DSNameBudget, d.Id(), err)
			}
			bSpend, err := strconv.ParseFloat(aws.ToString(budget.CalculatedSpend.ActualSpend.Amount), 64)
			if err != nil {
				return create.AppendDiagError(diags, names.Budgets, create.ErrActionReading, DSNameBudget, d.Id(), err)
			}

			if bLimit < bSpend {
				d.Set("budget_exceeded", true)
			} else {
				d.Set("budget_exceeded", false)
			}
		}
	}

	d.Set(names.AttrName, budget.BudgetName)
	d.Set(names.AttrNamePrefix, create.NamePrefixFromName(aws.ToString(budget.BudgetName)))

	return diags
}
