package github.com/hashicorp/terraform-provider-aws/internal/service/budgets
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/budgets"
	awstypes "github.com/aws/aws-sdk-go-v2/service/budgets/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceBudgetActionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BudgetsClient(ctx)

	accountID, actionID, budgetName, err := BudgetActionParseResourceID(d.Id())

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &budgets.UpdateBudgetActionInput{
			AccountId:  aws.String(accountID),
			ActionId:   aws.String(actionID),
			BudgetName: aws.String(budgetName),
		}

		if d.HasChange("action_threshold") {
			input.ActionThreshold = expandBudgetActionActionThreshold(d.Get("action_threshold").([]any))
		}

		if d.HasChange("approval_model") {
			input.ApprovalModel = awstypes.ApprovalModel(d.Get("approval_model").(string))
		}

		if d.HasChange("definition") {
			input.Definition = expandBudgetActionActionDefinition(d.Get("definition").([]any))
		}

		if d.HasChange(names.AttrExecutionRoleARN) {
			input.ExecutionRoleArn = aws.String(d.Get(names.AttrExecutionRoleARN).(string))
		}

		if d.HasChange("notification_type") {
			input.NotificationType = awstypes.NotificationType(d.Get("notification_type").(string))
		}

		if d.HasChange("subscriber") {
			input.Subscribers = expandBudgetActionSubscriber(d.Get("subscriber").(*schema.Set))
		}

		_, err = conn.UpdateBudgetAction(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Budget Action (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceBudgetActionRead(ctx, d, meta)...)
}
