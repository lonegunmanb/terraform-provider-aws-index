package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findUserSSHKeyByThreePartKey(ctx context.Context, conn *transfer.Client, serverID, userName, sshKeyID string) (*awstypes.DescribedUser, *awstypes.SshPublicKey, error) {
	user, err := findUserByTwoPartKey(ctx, conn, serverID, userName)

	if err != nil {
		return nil, nil, err
	}

	sshKey, err := tfresource.AssertSingleValueResult(tfslices.Filter(user.SshPublicKeys, func(v awstypes.SshPublicKey) bool {
		return aws.ToString(v.SshPublicKeyId) == sshKeyID
	}))

	if err != nil {
		return nil, nil, err
	}

	if aws.ToString(sshKey.SshPublicKeyBody) == "" {
		return nil, nil, tfresource.NewEmptyResultError(nil)
	}

	return user, sshKey, nil
}
