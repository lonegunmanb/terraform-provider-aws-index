package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenDecryptStepDetails(apiObject *awstypes.DecryptStepDetails) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		"overwrite_existing": apiObject.OverwriteExisting,
		names.AttrType:       apiObject.Type,
	}

	if v := apiObject.DestinationFileLocation; v != nil {
		tfMap["destination_file_location"] = flattenInputFileLocation(v)
	}

	if v := apiObject.Name; v != nil {
		tfMap[names.AttrName] = aws.ToString(v)
	}

	if v := apiObject.SourceFileLocation; v != nil {
		tfMap["source_file_location"] = aws.ToString(v)
	}

	return []any{tfMap}
}
