package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
)
func (r *webAppCustomizationResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data webAppCustomizationResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().TransferClient(ctx)

	var input transfer.UpdateWebAppCustomizationInput
	response.Diagnostics.Append(expandUpdateWebAppCustomizationInput(ctx, &data, &input)...)
	if response.Diagnostics.HasError() {
		return
	}

	webAppID := fwflex.StringValueFromFramework(ctx, data.WebAppID)
	_, err := conn.UpdateWebAppCustomization(ctx, &input)
	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating Transfer Web App (%s) Customization", webAppID), err.Error())

		return
	}

	if data.FaviconFile.IsUnknown() {
		data.FaviconFile = types.StringNull()
	}
	if data.LogoFile.IsUnknown() {
		data.LogoFile = types.StringNull()
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
