package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDecryptStepDetails(tfMap []any) *awstypes.DecryptStepDetails {
	if tfMap == nil {
		return nil
	}

	tfMapRaw := tfMap[0].(map[string]any)

	apiObject := &awstypes.DecryptStepDetails{}

	if v, ok := tfMapRaw["destination_file_location"].([]any); ok && len(v) > 0 {
		apiObject.DestinationFileLocation = expandInputFileLocation(v)
	}

	if v, ok := tfMapRaw[names.AttrName].(string); ok && v != "" {
		apiObject.Name = aws.String(v)
	}

	if v, ok := tfMapRaw["overwrite_existing"].(string); ok && v != "" {
		apiObject.OverwriteExisting = awstypes.OverwriteExisting(v)
	}

	if v, ok := tfMapRaw["source_file_location"].(string); ok && v != "" {
		apiObject.SourceFileLocation = aws.String(v)
	}

	if v, ok := tfMapRaw[names.AttrType].(string); ok && v != "" {
		apiObject.Type = awstypes.EncryptionType(v)
	}

	return apiObject
}
