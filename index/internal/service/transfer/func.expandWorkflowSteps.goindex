package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandWorkflowSteps(tfList []any) []awstypes.WorkflowStep {
	if len(tfList) == 0 {
		return nil
	}

	var apiObjects []awstypes.WorkflowStep

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		apiObject := awstypes.WorkflowStep{
			Type: awstypes.WorkflowStepType(tfMap[names.AttrType].(string)),
		}

		if v, ok := tfMap["copy_step_details"].([]any); ok && len(v) > 0 {
			apiObject.CopyStepDetails = expandCopyStepDetails(v)
		}

		if v, ok := tfMap["custom_step_details"].([]any); ok && len(v) > 0 {
			apiObject.CustomStepDetails = expandCustomStepDetails(v)
		}

		if v, ok := tfMap["decrypt_step_details"].([]any); ok && len(v) > 0 {
			apiObject.DecryptStepDetails = expandDecryptStepDetails(v)
		}

		if v, ok := tfMap["delete_step_details"].([]any); ok && len(v) > 0 {
			apiObject.DeleteStepDetails = expandDeleteStepDetails(v)
		}

		if v, ok := tfMap["tag_step_details"].([]any); ok && len(v) > 0 {
			apiObject.TagStepDetails = expandTagStepDetails(v)
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
