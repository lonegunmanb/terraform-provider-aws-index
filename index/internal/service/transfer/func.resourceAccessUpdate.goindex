package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccessUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TransferClient(ctx)

	serverID, externalID, err := accessParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	input := &transfer.UpdateAccessInput{
		ExternalId: aws.String(externalID),
		ServerId:   aws.String(serverID),
	}

	if d.HasChange("home_directory") {
		input.HomeDirectory = aws.String(d.Get("home_directory").(string))
	}

	if d.HasChange("home_directory_mappings") {
		input.HomeDirectoryMappings = expandHomeDirectoryMapEntries(d.Get("home_directory_mappings").([]any))
	}

	if d.HasChange("home_directory_type") {
		input.HomeDirectoryType = awstypes.HomeDirectoryType(d.Get("home_directory_type").(string))
	}

	if d.HasChange(names.AttrPolicy) {
		policy, err := structure.NormalizeJsonString(d.Get(names.AttrPolicy).(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		input.Policy = aws.String(policy)
	}

	if d.HasChange("posix_profile") {
		input.PosixProfile = expandPOSIXProfile(d.Get("posix_profile").([]any))
	}

	if d.HasChange(names.AttrRole) {
		input.Role = aws.String(d.Get(names.AttrRole).(string))
	}

	_, err = conn.UpdateAccess(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Transfer Access (%s): %s", d.Id(), err)
	}

	return append(diags, resourceAccessRead(ctx, d, meta)...)
}
