package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAgreementCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TransferClient(ctx)

	serverID := d.Get("server_id").(string)
	input := &transfer.CreateAgreementInput{
		AccessRole:       aws.String(d.Get("access_role").(string)),
		BaseDirectory:    aws.String(d.Get("base_directory").(string)),
		LocalProfileId:   aws.String(d.Get("local_profile_id").(string)),
		PartnerProfileId: aws.String(d.Get("partner_profile_id").(string)),
		ServerId:         aws.String(serverID),
		Tags:             getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		input.Description = aws.String(v.(string))
	}

	output, err := conn.CreateAgreement(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Transfer Agreement: %s", err)
	}

	d.SetId(agreementCreateResourceID(serverID, aws.ToString(output.AgreementId)))

	return append(diags, resourceAgreementRead(ctx, d, meta)...)
}
