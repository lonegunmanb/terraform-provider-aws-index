package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSSHKeyCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).TransferClient(ctx)

	userName := d.Get(names.AttrUserName).(string)
	serverID := d.Get("server_id").(string)
	input := &transfer.ImportSshPublicKeyInput{
		ServerId:         aws.String(serverID),
		SshPublicKeyBody: aws.String(d.Get("body").(string)),
		UserName:         aws.String(userName),
	}

	output, err := conn.ImportSshPublicKey(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "importing Transfer SSH Key: %s", err)
	}

	d.SetId(sshKeyCreateResourceID(serverID, userName, aws.ToString(output.SshPublicKeyId)))

	return append(diags, resourceSSHKeyRead(ctx, d, meta)...)
}
