package github.com/hashicorp/terraform-provider-aws/internal/service/transfer
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/transfer/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
)
func expandUpdateWebAppCustomizationInput(ctx context.Context, data *webAppCustomizationResourceModel, apiObject *transfer.UpdateWebAppCustomizationInput) diag.Diagnostics { // nosemgrep:ci.semgrep.framework.manual-expander-functions
	var diags diag.Diagnostics

	if !data.FaviconFile.IsNull() && !data.FaviconFile.IsUnknown() {
		if v, err := inttypes.Base64Decode(fwflex.StringValueFromFramework(ctx, data.FaviconFile)); err != nil {
			diags.AddError("Favicon File Decode Error", err.Error())
		} else {
			apiObject.FaviconFile = v
		}
	}

	if !data.LogoFile.IsNull() && !data.LogoFile.IsUnknown() {
		if v, err := inttypes.Base64Decode(fwflex.StringValueFromFramework(ctx, data.LogoFile)); err != nil {
			diags.AddError("Logo File Decode Error", err.Error())
		} else {
			apiObject.LogoFile = v
		}
	}

	if !data.Title.IsNull() {
		apiObject.Title = fwflex.StringFromFramework(ctx, data.Title)
	} else {
		apiObject.Title = aws.String("")
	}

	apiObject.WebAppId = fwflex.StringFromFramework(ctx, data.WebAppID)

	return diags
}
