package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandDataTrafficPolicyLocationDoc(tfMap map[string]any) *trafficPolicyGeolocationRule {
	if tfMap == nil {
		return nil
	}

	apiObject := &trafficPolicyGeolocationRule{}

	if v, ok := tfMap["endpoint_reference"]; ok && v.(string) != "" {
		apiObject.EndpointReference = v.(string)
	}
	if v, ok := tfMap["rule_reference"]; ok && v.(string) != "" {
		apiObject.RuleReference = v.(string)
	}
	if v, ok := tfMap["is_default"]; ok && v.(bool) {
		apiObject.IsDefault = aws.Bool(v.(bool))
	}
	if v, ok := tfMap["continent"]; ok && v.(string) != "" {
		apiObject.Continent = v.(string)
	}
	if v, ok := tfMap["country"]; ok && v.(string) != "" {
		apiObject.Country = v.(string)
	}
	if v, ok := tfMap["subdivision"]; ok && v.(string) != "" {
		apiObject.Subdivision = v.(string)
	}
	if v, ok := tfMap["evaluate_target_health"]; ok && v.(bool) {
		apiObject.EvaluateTargetHealth = aws.Bool(v.(bool))
	}
	if v, ok := tfMap[names.AttrHealthCheck]; ok && v.(string) != "" {
		apiObject.HealthCheck = v.(string)
	}

	return apiObject
}
