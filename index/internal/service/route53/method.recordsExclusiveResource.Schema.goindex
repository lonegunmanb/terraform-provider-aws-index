package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *recordsExclusiveResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"zone_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"resource_record_set": schema.SetNestedBlock{
				CustomType: fwtypes.NewSetNestedObjectTypeOf[resourceRecordSetModel](ctx),
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"failover": schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.ResourceRecordSetFailover](),
							Optional:   true,
						},
						"health_check_id": schema.StringAttribute{
							Optional: true,
						},
						"multi_value_answer": schema.BoolAttribute{
							Optional: true,
						},
						names.AttrName: schema.StringAttribute{
							CustomType: fwtypes.DNSNameStringType,
							Required:   true,
							Validators: []validator.String{
								stringvalidator.LengthAtMost(1024),
							},
						},
						names.AttrRegion: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.ResourceRecordSetRegion](),
							Optional:   true,
						},
						"set_identifier": schema.StringAttribute{
							Optional: true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 128),
							},
						},
						"traffic_policy_instance_id": schema.StringAttribute{
							Optional: true,
							Validators: []validator.String{
								stringvalidator.LengthBetween(1, 36),
							},
						},
						"ttl": schema.Int64Attribute{
							Optional: true,
							Validators: []validator.Int64{
								int64validator.Between(0, 2147483647),
							},
						},
						names.AttrType: schema.StringAttribute{
							CustomType: fwtypes.StringEnumType[awstypes.RRType](),
							Optional:   true,
						},
						names.AttrWeight: schema.Int64Attribute{
							Optional: true,
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
						},
					},
					Blocks: map[string]schema.Block{
						"alias_target": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[aliasTargetModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrDNSName: schema.StringAttribute{
										CustomType: fwtypes.DNSNameStringType,
										Required:   true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(1024),
										},
									},
									"evaluate_target_health": schema.BoolAttribute{
										Required: true,
									},
									names.AttrHostedZoneID: schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(32),
										},
									},
								},
							},
						},
						"cidr_routing_config": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[cidrRoutingConfigModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"collection_id": schema.StringAttribute{
										Required: true,
									},
									"location_name": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 16),
										},
									},
								},
							},
						},
						"geolocation": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[geoLocationModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"continent_code": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(2, 2),
										},
									},
									"country_code": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 2),
										},
									},
									"subdivision_code": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 3),
										},
									},
								},
							},
						},
						"geoproximity_location": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[geoProximityLocationModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"aws_region": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 64),
										},
									},
									"bias": schema.Int64Attribute{
										Optional: true,
										Validators: []validator.Int64{
											int64validator.Between(-99, 99),
										},
									},
									"local_zone_group": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 64),
										},
									},
								},
								Blocks: map[string]schema.Block{
									"coordinates": schema.ListNestedBlock{
										CustomType: fwtypes.NewListNestedObjectTypeOf[coordinatesModel](ctx),
										Validators: []validator.List{
											listvalidator.SizeAtMost(1),
										},
										NestedObject: schema.NestedBlockObject{
											Attributes: map[string]schema.Attribute{
												"latitude": schema.StringAttribute{
													Required: true,
												},
												"longitude": schema.StringAttribute{
													Required: true,
												},
											},
										},
									},
								},
							},
						},
						"resource_records": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[resourceRecordModel](ctx),
							Validators: []validator.List{
								listvalidator.SizeAtLeast(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									names.AttrValue: schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(4000),
										},
									},
								},
							},
						},
					},
				},
			},
			names.AttrTimeouts: timeouts.Block(ctx, timeouts.Opts{
				Create: true,
				Update: true,
			}),
		},
	}
}
