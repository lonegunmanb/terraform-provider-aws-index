package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepQueryLogs(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)
	if err != nil {
		return fmt.Errorf("getting client: %w", err)
	}
	conn := client.Route53Client(ctx)
	input := &route53.ListQueryLoggingConfigsInput{}
	sweepResources := make([]sweep.Sweepable, 0)

	pages := route53.NewListQueryLoggingConfigsPaginator(conn, input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		// In unsupported AWS partitions, the API may return an error even the SDK cannot handle.
		// Reference: https://github.com/aws/aws-sdk-go/issues/3313
		if awsv2.SkipSweepError(err) || tfawserr.ErrMessageContains(err, errCodeSerializationError, "failed to unmarshal error message") || tfawserr.ErrMessageContains(err, errCodeAccessDenied, "Unable to determine service/operation name to be authorized") {
			log.Printf("[WARN] Skipping Route53 Query Logging Config sweep for %s: %s", region, err)
			return nil
		}

		if err != nil {
			return fmt.Errorf("listing Route 53 Query Logging Configs (%s): %w", region, err)
		}

		for _, v := range page.QueryLoggingConfigs {
			id := aws.ToString(v.Id)

			r := resourceQueryLog()
			d := r.Data(nil)
			d.SetId(id)

			sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
		}
	}

	err = sweep.SweepOrchestrator(ctx, sweepResources)

	if err != nil {
		return fmt.Errorf("sweeping Route 53  Query Logging Configs (%s): %w", region, err)
	}

	return nil
}
