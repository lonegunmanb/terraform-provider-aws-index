package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRecordUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53Client(ctx)

	// Route 53 supports CREATE, DELETE, and UPSERT actions. We use UPSERT, and
	// AWS dynamically determines if a record should be created or updated.
	// Amazon Route 53 can update an existing resource record set only when all
	// of the following values match: Name, Type and SetIdentifier
	// See http://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html.

	if !d.HasChange(names.AttrType) && !d.HasChange("set_identifier") {
		// If neither type nor set_identifier changed we use UPSERT,
		// for resource update here we simply fall through to
		// our resource create function.
		return append(diags, resourceRecordCreate(ctx, d, meta)...)
	}

	// Otherwise, we delete the existing record and create a new record within
	// a transactional change.
	zoneID := cleanZoneID(d.Get("zone_id").(string))
	zoneRecord, err := findHostedZoneByID(ctx, conn, zoneID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Route 53 Hosted Zone (%s): %s", zoneID, err)
	}

	// Build the to be deleted record
	en := expandRecordName(d.Get(names.AttrName).(string), aws.ToString(zoneRecord.HostedZone.Name))
	oldRRType, _ := d.GetChange(names.AttrType)

	oldRec := &awstypes.ResourceRecordSet{
		Name: aws.String(en),
		Type: awstypes.RRType(oldRRType.(string)),
	}

	// If the old record has any of the following, we need to pass that in
	// here because otherwise the API will give us an error:
	// - cidr_routing_policy
	// - failover_routing_policy
	// - geolocation_routing_policy
	// - latency_routing_policy
	// - multivalue_answer_routing_policy
	// - weighted_routing_policy

	if v, _ := d.GetChange("cidr_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.CidrRoutingConfig = &awstypes.CidrRoutingConfig{
						CollectionId: nilString(v["collection_id"].(string)),
						LocationName: nilString(v["location_name"].(string)),
					}
				}
			}
		}
	}

	if v, _ := d.GetChange("failover_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.Failover = awstypes.ResourceRecordSetFailover(v[names.AttrType].(string))
				}
			}
		}
	}

	if v, _ := d.GetChange("geolocation_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.GeoLocation = &awstypes.GeoLocation{
						ContinentCode:   nilString(v["continent"].(string)),
						CountryCode:     nilString(v["country"].(string)),
						SubdivisionCode: nilString(v["subdivision"].(string)),
					}
				}
			}
		}
	}

	if v, _ := d.GetChange("geoproximity_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.GeoProximityLocation = &awstypes.GeoProximityLocation{
						AWSRegion:      nilString(v["aws_region"].(string)),
						Bias:           aws.Int32(int32(v["bias"].(int))),
						Coordinates:    expandCoordinates(v["coordinates"].(*schema.Set).List()),
						LocalZoneGroup: nilString(v["local_zone_group"].(string)),
					}
				}
			}
		}
	}

	if v, _ := d.GetChange("latency_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.Region = awstypes.ResourceRecordSetRegion(v[names.AttrRegion].(string))
				}
			}
		}
	}

	if v, _ := d.GetChange("multivalue_answer_routing_policy"); v != nil && v.(bool) {
		oldRec.MultiValueAnswer = aws.Bool(v.(bool))
	}

	if v, _ := d.GetChange("weighted_routing_policy"); v != nil {
		if o, ok := v.([]any); ok {
			if len(o) == 1 {
				if v, ok := o[0].(map[string]any); ok {
					oldRec.Weight = aws.Int64(int64(v[names.AttrWeight].(int)))
				}
			}
		}
	}

	// Resource records
	if v, _ := d.GetChange("records"); v != nil {
		if v.(*schema.Set).Len() > 0 {
			oldRec.ResourceRecords = expandResourceRecords(flex.ExpandStringValueSet(v.(*schema.Set)), awstypes.RRType(oldRRType.(string)))

			// TTL and ResourceRecords
			if v := d.GetRawState().GetAttr("ttl"); !v.IsNull() {
				v, _ := v.AsBigFloat().Int64()
				oldRec.TTL = aws.Int64(v)
			}
		}
	}

	// Alias record
	if v, _ := d.GetChange(names.AttrAlias); v != nil {
		aliases := v.([]any)
		if len(aliases) == 1 {
			alias := aliases[0].(map[string]any)
			oldRec.AliasTarget = &awstypes.AliasTarget{
				DNSName:              aws.String(alias[names.AttrName].(string)),
				EvaluateTargetHealth: alias["evaluate_target_health"].(bool),
				HostedZoneId:         aws.String(alias["zone_id"].(string)),
			}
		}
	}

	// If health check id is present send that to AWS
	if v, _ := d.GetChange("health_check_id"); v.(string) != "" {
		oldRec.HealthCheckId = aws.String(v.(string))
	}

	if v, _ := d.GetChange("set_identifier"); v.(string) != "" {
		oldRec.SetIdentifier = aws.String(v.(string))
	}

	// Delete the old and create the new records in a single batch.
	input := &route53.ChangeResourceRecordSetsInput{
		ChangeBatch: &awstypes.ChangeBatch{
			Changes: []awstypes.Change{
				{
					Action:            awstypes.ChangeActionDelete,
					ResourceRecordSet: oldRec,
				},
				{
					Action:            awstypes.ChangeActionCreate,
					ResourceRecordSet: expandResourceRecordSet(d, aws.ToString(zoneRecord.HostedZone.Name)),
				},
			},
			Comment: aws.String("Managed by Terraform"),
		},
		HostedZoneId: aws.String(cleanZoneID(aws.ToString(zoneRecord.HostedZone.Id))),
	}

	output, err := conn.ChangeResourceRecordSets(ctx, input)

	if v, ok := errs.As[*awstypes.InvalidChangeBatch](err); ok && len(v.Messages) > 0 {
		err = fmt.Errorf("%s: %w", v.ErrorCode(), errors.Join(tfslices.ApplyToAll(v.Messages, errors.New)...))
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Route53 Record (%s): %s", d.Id(), err)
	}

	if output.ChangeInfo != nil {
		if _, err := waitChangeInsync(ctx, conn, aws.ToString(output.ChangeInfo.Id), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Route 53 Record (%s) synchronize: %s", d.Id(), err)
		}
	}

	// Generate a new ID.
	vars := []string{
		zoneID,
		strings.ToLower(d.Get(names.AttrName).(string)),
		d.Get(names.AttrType).(string),
	}
	if v, ok := d.GetOk("set_identifier"); ok {
		vars = append(vars, v.(string))
	}
	d.SetId(strings.Join(vars, "_"))

	return append(diags, resourceRecordRead(ctx, d, meta)...)
}
