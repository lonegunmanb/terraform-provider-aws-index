package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceTrafficPolicyDocumentRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	trafficDoc := &route53TrafficPolicyDoc{}

	if v, ok := d.GetOk(names.AttrEndpoint); ok {
		trafficDoc.Endpoints = expandDataTrafficPolicyEndpointsDoc(v.(*schema.Set).List())
	}
	if v, ok := d.GetOk("record_type"); ok {
		trafficDoc.RecordType = v.(string)
	}
	if v, ok := d.GetOk(names.AttrRule); ok {
		trafficDoc.Rules = expandDataTrafficPolicyRulesDoc(v.(*schema.Set).List())
	}
	if v, ok := d.GetOk("start_endpoint"); ok {
		trafficDoc.StartEndpoint = v.(string)
	}
	if v, ok := d.GetOk("start_rule"); ok {
		trafficDoc.StartRule = v.(string)
	}
	if v, ok := d.GetOk(names.AttrVersion); ok {
		trafficDoc.AWSPolicyFormatVersion = v.(string)
	}

	jsonDoc, err := json.Marshal(trafficDoc)
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}
	jsonString := string(jsonDoc)

	d.Set(names.AttrJSON, jsonString)

	d.SetId(strconv.Itoa(schema.HashString(jsonString)))

	return diags
}
