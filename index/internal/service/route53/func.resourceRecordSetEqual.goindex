package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-provider-aws/internal/dns"
)
func resourceRecordSetEqual(s1, s2 awstypes.ResourceRecordSet) bool {
	return resourceRecordSetIdentifiersEqual(s1, s2) &&
		// Root level attributes
		(s1.Failover == "" && s2.Failover == "" || s1.Failover == s2.Failover) &&
		aws.ToString(s1.HealthCheckId) == aws.ToString(s2.HealthCheckId) &&
		aws.ToBool(s1.MultiValueAnswer) == aws.ToBool(s2.MultiValueAnswer) &&
		(s1.Region == "" && s2.Region == "" || s1.Region == s2.Region) &&
		aws.ToString(s1.TrafficPolicyInstanceId) == aws.ToString(s2.TrafficPolicyInstanceId) &&
		aws.ToInt64(s1.TTL) == aws.ToInt64(s2.TTL) &&
		aws.ToInt64(s1.Weight) == aws.ToInt64(s2.Weight) &&
		// Nested attributes
		aliasTargetEqual(s1.AliasTarget, s2.AliasTarget) &&
		cidrRoutingConfigEqual(s1.CidrRoutingConfig, s2.CidrRoutingConfig) &&
		geolocationEqual(s1.GeoLocation, s2.GeoLocation) &&
		geoProximityLocationEqual(s1.GeoProximityLocation, s2.GeoProximityLocation) &&
		resourceRecordsEqual(s1.ResourceRecords, s2.ResourceRecords)
}
