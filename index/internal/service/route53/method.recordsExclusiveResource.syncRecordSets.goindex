package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *recordsExclusiveResource) syncRecordSets(ctx context.Context, plan recordsExclusiveResourceModel, timeout time.Duration) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := r.Meta().Route53Client(ctx)

	have, err := findResourceRecordSetsForHostedZone(ctx, conn, plan.ZoneID.ValueString())
	if err != nil {
		diags.AddError(
			create.ProblemStandardMessage(names.Route53, "Syncronizing", ResNameRecordsExclusive, plan.ZoneID.String(), err),
			err.Error(),
		)
		return diags
	}

	var want []awstypes.ResourceRecordSet
	diags.Append(flex.Expand(ctx, plan.ResourceRecordSet, &want)...)
	if diags.HasError() {
		return diags
	}

	// Amazon Route 53 can update an existing resource record set only when all
	// of the following values match: Name, Type and SetIdentifier.
	// Ref: http://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html.
	add, remove, modify, _ := intflex.DiffSlicesWithModify(have, want, resourceRecordSetEqual, resourceRecordSetIdentifiersEqual)

	var changes []awstypes.Change
	for _, r := range remove {
		changes = append(changes, awstypes.Change{
			Action:            awstypes.ChangeActionDelete,
			ResourceRecordSet: &r,
		})
	}
	for _, r := range add {
		changes = append(changes, awstypes.Change{
			Action:            awstypes.ChangeActionCreate,
			ResourceRecordSet: &r,
		})
	}
	for _, r := range modify {
		changes = append(changes, awstypes.Change{
			Action:            awstypes.ChangeActionUpsert,
			ResourceRecordSet: &r,
		})
	}

	if len(changes) > 0 {
		input := route53.ChangeResourceRecordSetsInput{
			HostedZoneId: plan.ZoneID.ValueStringPointer(),
			ChangeBatch: &awstypes.ChangeBatch{
				Changes: changes,
			},
		}
		out, err := conn.ChangeResourceRecordSets(ctx, &input)
		if err != nil {
			diags.AddError(
				create.ProblemStandardMessage(names.Route53, create.ErrActionCreating, ResNameRecordsExclusive, plan.ZoneID.String(), err),
				err.Error(),
			)
			return diags
		}
		if out == nil || out.ChangeInfo == nil || out.ChangeInfo.Id == nil {
			diags.AddError(
				create.ProblemStandardMessage(names.Route53, create.ErrActionCreating, ResNameRecordsExclusive, plan.ZoneID.String(), nil),
				errors.New("empty output").Error(),
			)
			return diags
		}

		if _, err := waitChangeInsync(ctx, conn, aws.ToString(out.ChangeInfo.Id), timeout); err != nil {
			diags.AddError(
				create.ProblemStandardMessage(names.Route53, create.ErrActionWaitingForCreation, ResNameRecordsExclusive, plan.ZoneID.String(), nil),
				err.Error(),
			)
			return diags
		}
	}

	return diags
}
