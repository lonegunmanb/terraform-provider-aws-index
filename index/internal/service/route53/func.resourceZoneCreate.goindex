package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceZoneCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53Client(ctx)

	name := d.Get(names.AttrName).(string)
	input := &route53.CreateHostedZoneInput{
		CallerReference: aws.String(id.UniqueId()),
		Name:            aws.String(name),
		HostedZoneConfig: &awstypes.HostedZoneConfig{
			Comment: aws.String(d.Get(names.AttrComment).(string)),
		},
	}

	if v, ok := d.GetOk("delegation_set_id"); ok {
		input.DelegationSetId = aws.String(v.(string))
	}

	// Private Route53 Hosted Zones can only be created with their first VPC association,
	// however we need to associate the remaining after creation.
	vpcs := expandVPCs(d.Get("vpc").(*schema.Set).List(), meta.(*conns.AWSClient).Region(ctx))
	if len(vpcs) > 0 {
		input.VPC = vpcs[0]
	}

	output, err := conn.CreateHostedZone(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Route53 Hosted Zone (%s): %s", name, err)
	}

	d.SetId(cleanZoneID(aws.ToString(output.HostedZone.Id)))

	timeout := d.Timeout(schema.TimeoutCreate)
	if output.ChangeInfo != nil {
		if _, err := waitChangeInsync(ctx, conn, aws.ToString(output.ChangeInfo.Id), timeout); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Route 53 Hosted Zone (%s) synchronize: %s", d.Id(), err)
		}
	}

	if err := createTags(ctx, conn, d.Id(), string(awstypes.TagResourceTypeHostedzone), getTagsIn(ctx)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting Route53 Zone (%s) tags: %s", d.Id(), err)
	}

	// Associate additional VPCs beyond the first.
	if len(vpcs) > 1 {
		for _, v := range vpcs[1:] {
			if err := hostedZoneAssociateVPC(ctx, conn, d.Id(), v, timeout); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	return append(diags, resourceZoneRead(ctx, d, meta)...)
}
