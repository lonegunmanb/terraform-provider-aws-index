package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findTrafficPolicyByID(ctx context.Context, conn *route53.Client, id string) (*awstypes.TrafficPolicy, error) {
	inputLTP := &route53.ListTrafficPoliciesInput{}
	trafficPolicy, err := findTrafficPolicy(ctx, conn, inputLTP, func(v *awstypes.TrafficPolicySummary) bool {
		return aws.ToString(v.Id) == id
	})

	if err != nil {
		return nil, err
	}

	inputGTP := &route53.GetTrafficPolicyInput{
		Id:      aws.String(id),
		Version: trafficPolicy.LatestVersion,
	}

	output, err := conn.GetTrafficPolicy(ctx, inputGTP)

	if errs.IsA[*awstypes.NoSuchTrafficPolicy](err) {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: inputLTP,
		}
	}

	if err != nil {
		return nil, err
	}

	if output == nil || output.TrafficPolicy == nil {
		return nil, tfresource.NewEmptyResultError(inputLTP)
	}

	return output.TrafficPolicy, nil
}
