package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceTrafficPolicyDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53Client(ctx)

	input := &route53.ListTrafficPolicyVersionsInput{
		Id: aws.String(d.Id()),
	}
	output, err := findTrafficPolicyVersions(ctx, conn, input)

	if tfresource.NotFound(err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Route 53 Traffic Policy (%s) versions: %s", d.Id(), err)
	}

	for _, v := range output {
		version := aws.ToInt32(v.Version)

		log.Printf("[INFO] Deleting Route53 Traffic Policy (%s) version: %d", d.Id(), version)
		_, err := conn.DeleteTrafficPolicy(ctx, &route53.DeleteTrafficPolicyInput{
			Id:      aws.String(d.Id()),
			Version: aws.Int32(version),
		})

		if errs.IsA[*awstypes.NoSuchTrafficPolicy](err) {
			continue
		}

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "deleting Route 53 Traffic Policy (%s) version (%d): %s", d.Id(), version, err)
		}
	}

	return diags
}
