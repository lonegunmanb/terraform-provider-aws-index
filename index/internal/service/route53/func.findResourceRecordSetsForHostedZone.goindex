package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	intflex "github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findResourceRecordSetsForHostedZone(ctx context.Context, conn *route53.Client, zoneID string) ([]awstypes.ResourceRecordSet, error) {
	hostedZone, err := findHostedZoneByID(ctx, conn, zoneID)
	if err != nil {
		return nil, err
	}
	hostedZoneName := aws.ToString(hostedZone.HostedZone.Name)

	input := route53.ListResourceRecordSetsInput{
		HostedZoneId: aws.String(zoneID),
	}
	morePages := tfslices.PredicateTrue[*route53.ListResourceRecordSetsOutput]() // exhaust all pages
	filter := func(v *awstypes.ResourceRecordSet) bool {
		// Zone NS & SOA records are created by default and not managed by this resource
		if normalizeDomainName(v.Name) == normalizeDomainName(hostedZoneName) && (v.Type == awstypes.RRTypeNs || v.Type == awstypes.RRTypeSoa) {
			return false
		}
		return true
	}

	return findResourceRecordSets(ctx, conn, &input, morePages, filter)
}
