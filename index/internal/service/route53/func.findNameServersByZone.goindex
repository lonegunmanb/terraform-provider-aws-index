package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findNameServersByZone(ctx context.Context, conn *route53.Client, zoneID, zoneName string) ([]string, error) {
	rrType := awstypes.RRTypeNs
	input := &route53.ListResourceRecordSetsInput{
		HostedZoneId:    aws.String(zoneID),
		StartRecordName: aws.String(zoneName),
		StartRecordType: rrType,
	}
	output, err := findResourceRecordSets(ctx, conn, input, resourceRecordsFor(zoneName, rrType), tfslices.PredicateTrue[*awstypes.ResourceRecordSet]())

	if err != nil {
		return nil, err
	}
	if len(output) == 0 {
		return nil, nil
	}
	records := output[0].ResourceRecords

	ns := tfslices.ApplyToAll(records, func(v awstypes.ResourceRecord) string {
		return aws.ToString(v.Value)
	})
	slices.Sort(ns)

	return ns, nil
}
