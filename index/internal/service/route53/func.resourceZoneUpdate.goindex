package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceZoneUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53Client(ctx)

	if d.HasChange(names.AttrComment) {
		input := route53.UpdateHostedZoneCommentInput{
			Comment: aws.String(d.Get(names.AttrComment).(string)),
			Id:      aws.String(d.Id()),
		}

		_, err := conn.UpdateHostedZoneComment(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Route53 Hosted Zone (%s) comment: %s", d.Id(), err)
		}
	}

	if d.HasChange("vpc") {
		region := meta.(*conns.AWSClient).Region(ctx)
		timeout := d.Timeout(schema.TimeoutUpdate)
		o, n := d.GetChange("vpc")
		os, ns := o.(*schema.Set), n.(*schema.Set)

		// VPCs cannot be empty, so add first and then remove.
		for _, tfMapRaw := range ns.Difference(os).List() {
			tfMap, ok := tfMapRaw.(map[string]any)
			if !ok {
				continue
			}

			if err := hostedZoneAssociateVPC(ctx, conn, d.Id(), expandVPC(tfMap, region), timeout); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}

		for _, tfMapRaw := range os.Difference(ns).List() {
			tfMap, ok := tfMapRaw.(map[string]any)
			if !ok {
				continue
			}

			if err := hostedZoneDisassociateVPC(ctx, conn, d.Id(), expandVPC(tfMap, region), timeout); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	return append(diags, resourceZoneRead(ctx, d, meta)...)
}
