package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceZoneAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).Route53Client(ctx)

	vpcRegion := meta.(*conns.AWSClient).Region(ctx)
	if v, ok := d.GetOk("vpc_region"); ok {
		vpcRegion = v.(string)
	}
	vpcID := d.Get(names.AttrVPCID).(string)
	zoneID := d.Get("zone_id").(string)
	id := zoneAssociationCreateResourceID(zoneID, vpcID, vpcRegion)
	input := &route53.AssociateVPCWithHostedZoneInput{
		Comment:      aws.String("Managed by Terraform"),
		HostedZoneId: aws.String(zoneID),
		VPC: &awstypes.VPC{
			VPCId:     aws.String(vpcID),
			VPCRegion: awstypes.VPCRegion(vpcRegion),
		},
	}

	output, err := conn.AssociateVPCWithHostedZone(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Route 53 Zone Association (%s): %s", id, err)
	}

	d.SetId(id)

	if output.ChangeInfo != nil {
		if _, err := waitChangeInsync(ctx, conn, aws.ToString(output.ChangeInfo.Id), d.Timeout(schema.TimeoutCreate)); err != nil {
			// AccessDenied errors likely due to cross-account issue.
			if !tfawserr.ErrCodeEquals(err, errCodeAccessDenied) {
				return sdkdiag.AppendErrorf(diags, "waiting for Route 53 Zone Association (%s) synchronize: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceZoneAssociationRead(ctx, d, meta)...)
}
