package github.com/hashicorp/terraform-provider-aws/internal/service/route53
import (
	"context"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	awstypes "github.com/aws/aws-sdk-go-v2/service/route53/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRecord() *schema.Resource {
	//lintignore:R011
	return &schema.Resource{
		CreateWithoutTimeout: resourceRecordCreate,
		ReadWithoutTimeout:   resourceRecordRead,
		UpdateWithoutTimeout: resourceRecordUpdate,
		DeleteWithoutTimeout: resourceRecordDelete,

		SchemaVersion: 2,
		MigrateState:  recordMigrateState,

		Schema: map[string]*schema.Schema{
			names.AttrAlias: {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"evaluate_target_health": {
							Type:     schema.TypeBool,
							Required: true,
						},
						names.AttrName: {
							Type:             schema.TypeString,
							Required:         true,
							StateFunc:        normalizeAliasDomainName,
							DiffSuppressFunc: sdkv2.SuppressEquivalentStringCaseInsensitive,
							ValidateFunc:     validation.StringLenBetween(1, 1024),
						},
						"zone_id": {
							Type:         schema.TypeString,
							Required:     true,
							ValidateFunc: validation.StringLenBetween(1, 32),
						},
					},
				},
				ExactlyOneOf:  []string{names.AttrAlias, "records"},
				ConflictsWith: []string{"ttl"},
			},
			"allow_overwrite": {
				Type:     schema.TypeBool,
				Optional: true,
				Computed: true,
			},
			"cidr_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"collection_id": {
							Type:     schema.TypeString,
							Required: true,
						},
						"location_name": {
							Type:     schema.TypeString,
							Required: true,
						},
					},
				},
				ConflictsWith: []string{
					"failover_routing_policy",
					"geolocation_routing_policy",
					"geoproximity_routing_policy",
					"latency_routing_policy",
					"multivalue_answer_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"failover_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrType: {
							Type:             schema.TypeString,
							Required:         true,
							ValidateDiagFunc: enum.Validate[awstypes.ResourceRecordSetFailover](),
						},
					},
				},
				ConflictsWith: []string{
					"cidr_routing_policy",
					"geolocation_routing_policy",
					"geoproximity_routing_policy",
					"latency_routing_policy",
					"multivalue_answer_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"fqdn": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"geolocation_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"continent": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"country": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"subdivision": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
				ConflictsWith: []string{
					"cidr_routing_policy",
					"failover_routing_policy",
					"geoproximity_routing_policy",
					"latency_routing_policy",
					"multivalue_answer_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"geoproximity_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"aws_region": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"bias": {
							Type:         schema.TypeInt,
							Optional:     true,
							ValidateFunc: validation.IntBetween(-99, 99),
						},
						"coordinates": {
							Type: schema.TypeSet,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"latitude": {
										Type:     schema.TypeString,
										Required: true,
									},
									"longitude": {
										Type:     schema.TypeString,
										Required: true,
									},
								},
							},
							Optional: true,
						},
						"local_zone_group": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
				ConflictsWith: []string{
					"cidr_routing_policy",
					"failover_routing_policy",
					"geolocation_routing_policy",
					"latency_routing_policy",
					"multivalue_answer_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"health_check_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"latency_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrRegion: {
							Type:             schema.TypeString,
							Required:         true,
							ValidateDiagFunc: enum.Validate[awstypes.ResourceRecordSetRegion](),
						},
					},
				},
				ConflictsWith: []string{
					"cidr_routing_policy",
					"failover_routing_policy",
					"geolocation_routing_policy",
					"geoproximity_routing_policy",
					"multivalue_answer_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"multivalue_answer_routing_policy": {
				Type:     schema.TypeBool,
				Optional: true,
				ConflictsWith: []string{
					"cidr_routing_policy",
					"failover_routing_policy",
					"geolocation_routing_policy",
					"geoproximity_routing_policy",
					"latency_routing_policy",
					"weighted_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			names.AttrName: {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
				StateFunc: func(v any) string {
					// AWS Provider aws_acm_certification.domain_validation_options.resource_record_name
					// references (and perhaps others) contain a trailing period, requiring a custom StateFunc
					// to trim the string to prevent Route53 API error.
					value := strings.TrimSuffix(v.(string), ".")
					return strings.ToLower(value)
				},
			},
			"records": {
				Type:         schema.TypeSet,
				Optional:     true,
				Elem:         &schema.Schema{Type: schema.TypeString},
				ExactlyOneOf: []string{names.AttrAlias, "records"},
			},
			"set_identifier": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"ttl": {
				Type:          schema.TypeInt,
				Optional:      true,
				ConflictsWith: []string{names.AttrAlias},
				RequiredWith:  []string{"records", "ttl"},
			},
			names.AttrType: {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				ValidateDiagFunc: enum.Validate[awstypes.RRType](),
			},
			"weighted_routing_policy": {
				Type:     schema.TypeList,
				MaxItems: 1,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						names.AttrWeight: {
							Type:     schema.TypeInt,
							Required: true,
						},
					},
				},
				ConflictsWith: []string{
					"cidr_routing_policy",
					"failover_routing_policy",
					"geolocation_routing_policy",
					"geoproximity_routing_policy",
					"latency_routing_policy",
					"multivalue_answer_routing_policy",
				},
				RequiredWith: []string{"set_identifier"},
			},
			"zone_id": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.NoZeroValues,
			},
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},
	}
}
