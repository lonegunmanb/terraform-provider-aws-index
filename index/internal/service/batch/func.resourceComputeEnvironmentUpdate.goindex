package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceComputeEnvironmentUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BatchClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &batch.UpdateComputeEnvironmentInput{
			ComputeEnvironment: aws.String(d.Id()),
		}

		if d.HasChange(names.AttrServiceRole) {
			input.ServiceRole = aws.String(d.Get(names.AttrServiceRole).(string))
		}

		if d.HasChange(names.AttrState) {
			input.State = awstypes.CEState(d.Get(names.AttrState).(string))
		}

		if d.HasChange("update_policy") {
			input.UpdatePolicy = expandComputeEnvironmentUpdatePolicy(d.Get("update_policy").([]any))
		}

		if computeEnvironmentType := strings.ToUpper(d.Get(names.AttrType).(string)); computeEnvironmentType == string(awstypes.CETypeManaged) {
			// "At least one compute-resources attribute must be specified"
			computeResourceUpdate := &awstypes.ComputeResourceUpdate{
				MaxvCpus: aws.Int32(int32(d.Get("compute_resources.0.max_vcpus").(int))),
			}

			if d.HasChange("compute_resources.0.security_group_ids") {
				computeResourceUpdate.SecurityGroupIds = flex.ExpandStringValueSet(d.Get("compute_resources.0.security_group_ids").(*schema.Set))
			}

			if d.HasChange("compute_resources.0.subnets") {
				computeResourceUpdate.Subnets = flex.ExpandStringValueSet(d.Get("compute_resources.0.subnets").(*schema.Set))
			}

			if d.HasChange("compute_resources.0.allocation_strategy") {
				if allocationStrategy, ok := d.GetOk("compute_resources.0.allocation_strategy"); ok {
					computeResourceUpdate.AllocationStrategy = awstypes.CRUpdateAllocationStrategy(allocationStrategy.(string))
				} else {
					computeResourceUpdate.AllocationStrategy = ""
				}
			}

			computeResourceEnvironmentType := awstypes.CRType(d.Get("compute_resources.0.type").(string))

			if d.HasChange("compute_resources.0.type") {
				computeResourceUpdate.Type = computeResourceEnvironmentType
			}

			if !isFargateType(computeResourceEnvironmentType) {
				if d.HasChange("compute_resources.0.desired_vcpus") {
					if desiredvCpus, ok := d.GetOk("compute_resources.0.desired_vcpus"); ok {
						computeResourceUpdate.DesiredvCpus = aws.Int32(int32(desiredvCpus.(int)))
					} else {
						computeResourceUpdate.DesiredvCpus = aws.Int32(0)
					}
				}

				if d.HasChange("compute_resources.0.min_vcpus") {
					if minVcpus, ok := d.GetOk("compute_resources.0.min_vcpus"); ok {
						computeResourceUpdate.MinvCpus = aws.Int32(int32(minVcpus.(int)))
					} else {
						computeResourceUpdate.MinvCpus = aws.Int32(0)
					}
				}

				if d.HasChange("compute_resources.0.bid_percentage") {
					if bidPercentage, ok := d.GetOk("compute_resources.0.bid_percentage"); ok {
						computeResourceUpdate.BidPercentage = aws.Int32(int32(bidPercentage.(int)))
					} else {
						computeResourceUpdate.BidPercentage = aws.Int32(0)
					}
				}

				if d.HasChange("compute_resources.0.ec2_configuration") {
					defaultImageType := "ECS_AL2"
					if _, ok := d.GetOk("eks_configuration.#"); ok {
						defaultImageType = "EKS_AL2"
					}
					ec2Configuration := d.Get("compute_resources.0.ec2_configuration").([]any)
					computeResourceUpdate.Ec2Configuration = expandEC2ConfigurationsUpdate(ec2Configuration, defaultImageType)
				}

				if d.HasChange("compute_resources.0.ec2_key_pair") {
					if keyPair, ok := d.GetOk("compute_resources.0.ec2_key_pair"); ok {
						computeResourceUpdate.Ec2KeyPair = aws.String(keyPair.(string))
					} else {
						computeResourceUpdate.Ec2KeyPair = aws.String("")
					}
				}

				if d.HasChange("compute_resources.0.image_id") {
					if imageId, ok := d.GetOk("compute_resources.0.image_id"); ok {
						computeResourceUpdate.ImageId = aws.String(imageId.(string))
					} else {
						computeResourceUpdate.ImageId = aws.String("")
					}
				}

				if d.HasChange("compute_resources.0.instance_role") {
					if instanceRole, ok := d.GetOk("compute_resources.0.instance_role"); ok {
						computeResourceUpdate.InstanceRole = aws.String(instanceRole.(string))
					} else {
						computeResourceUpdate.InstanceRole = aws.String("")
					}
				}

				if d.HasChange("compute_resources.0.instance_type") {
					computeResourceUpdate.InstanceTypes = flex.ExpandStringValueSet(d.Get("compute_resources.0.instance_type").(*schema.Set))
				}

				if d.HasChange("compute_resources.0.launch_template") {
					launchTemplate := d.Get("compute_resources.0.launch_template").([]any)
					computeResourceUpdate.LaunchTemplate = expandLaunchTemplateSpecificationUpdate(launchTemplate)
				}

				if d.HasChange("compute_resources.0.tags") {
					if tags, ok := d.GetOk("compute_resources.0.tags"); ok {
						computeResourceUpdate.Tags = svcTags(tftags.New(ctx, tags.(map[string]any)).IgnoreAWS())
					} else {
						computeResourceUpdate.Tags = map[string]string{}
					}
				}
			}

			input.ComputeResources = computeResourceUpdate
		}

		_, err := conn.UpdateComputeEnvironment(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Batch Compute Environment (%s): %s", d.Id(), err)
		}

		if _, err := waitComputeEnvironmentUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Batch Compute Environment (%s) update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceComputeEnvironmentRead(ctx, d, meta)...)
}
