package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func needsJobDefUpdate(d *schema.ResourceDiff) bool {
	if d.HasChange("container_properties") {
		o, n := d.GetChange("container_properties")

		equivalent, err := equivalentContainerPropertiesJSON(o.(string), n.(string))
		if err != nil {
			return false
		}

		if !equivalent {
			return true
		}
	}

	if d.HasChange("ecs_properties") {
		o, n := d.GetChange("ecs_properties")

		equivalent, err := equivalentECSPropertiesJSON(o.(string), n.(string))
		if err != nil {
			return false
		}

		if !equivalent {
			return true
		}
	}

	if d.HasChange("node_properties") {
		o, n := d.GetChange("node_properties")

		equivalent, err := equivalentNodePropertiesJSON(o.(string), n.(string))
		if err != nil {
			return false
		}

		if !equivalent {
			return true
		}
	}

	if d.HasChange("eks_properties") {
		o, n := d.GetChange("eks_properties")
		if len(o.([]any)) == 0 && len(n.([]any)) == 0 {
			return false
		}

		if awstypes.JobDefinitionType(d.Get(names.AttrType).(string)) != awstypes.JobDefinitionTypeContainer {
			return false
		}

		var oeks, neks *awstypes.EksPodProperties
		if len(o.([]any)) > 0 && o.([]any)[0] != nil {
			oProps := o.([]any)[0].(map[string]any)
			if opodProps, ok := oProps["pod_properties"].([]any); ok && len(opodProps) > 0 {
				oeks = expandEKSPodProperties(opodProps[0].(map[string]any))
			}
		}

		if len(n.([]any)) > 0 && n.([]any)[0] != nil {
			nProps := n.([]any)[0].(map[string]any)
			if npodProps, ok := nProps["pod_properties"].([]any); ok && len(npodProps) > 0 {
				neks = expandEKSPodProperties(npodProps[0].(map[string]any))
			}
		}

		return !reflect.DeepEqual(oeks, neks)
	}

	if d.HasChange("retry_strategy") {
		o, n := d.GetChange("retry_strategy")
		if len(o.([]any)) == 0 && len(n.([]any)) == 0 {
			return false
		}

		var ors, nrs *awstypes.RetryStrategy
		if len(o.([]any)) > 0 && o.([]any)[0] != nil {
			oProps := o.([]any)[0].(map[string]any)
			ors = expandRetryStrategy(oProps)
		}

		if len(n.([]any)) > 0 && n.([]any)[0] != nil {
			nProps := n.([]any)[0].(map[string]any)
			nrs = expandRetryStrategy(nProps)
		}

		return !reflect.DeepEqual(ors, nrs)
	}

	if d.HasChange(names.AttrTimeout) {
		o, n := d.GetChange(names.AttrTimeout)
		if len(o.([]any)) == 0 && len(n.([]any)) == 0 {
			return false
		}

		var ors, nrs *awstypes.JobTimeout
		if len(o.([]any)) > 0 && o.([]any)[0] != nil {
			oProps := o.([]any)[0].(map[string]any)
			ors = expandJobTimeout(oProps)
		}

		if len(n.([]any)) > 0 && n.([]any)[0] != nil {
			nProps := n.([]any)[0].(map[string]any)
			nrs = expandJobTimeout(nProps)
		}

		return !reflect.DeepEqual(ors, nrs)
	}

	if d.HasChanges(
		names.AttrPropagateTags,
		names.AttrParameters,
		"platform_capabilities",
		"scheduling_priority",
		names.AttrType,
	) {
		return true
	}

	return false
}
