package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenEKSContainers(apiObjects []awstypes.EksContainer) []any {
	var tfList []any

	for _, apiObject := range apiObjects {
		tfMap := map[string]any{}

		if v := apiObject.Args; v != nil {
			tfMap["args"] = v
		}

		if v := apiObject.Command; v != nil {
			tfMap["command"] = v
		}

		if v := apiObject.Env; v != nil {
			tfMap["env"] = flattenEKSContainerEnvironmentVariables(v)
		}

		if v := apiObject.Image; v != nil {
			tfMap["image"] = aws.ToString(v)
		}

		if v := apiObject.ImagePullPolicy; v != nil {
			tfMap["image_pull_policy"] = aws.ToString(v)
		}

		if v := apiObject.Name; v != nil {
			tfMap[names.AttrName] = aws.ToString(v)
		}

		if v := apiObject.Resources; v != nil {
			tfMap[names.AttrResources] = []map[string]any{{
				"limits":   v.Limits,
				"requests": v.Requests,
			}}
		}

		if v := apiObject.SecurityContext; v != nil {
			tfMap["security_context"] = []map[string]any{{
				"privileged":                 aws.ToBool(v.Privileged),
				"read_only_root_file_system": aws.ToBool(v.ReadOnlyRootFilesystem),
				"run_as_group":               aws.ToInt64(v.RunAsGroup),
				"run_as_non_root":            aws.ToBool(v.RunAsNonRoot),
				"run_as_user":                aws.ToInt64(v.RunAsUser),
			}}
		}

		if v := apiObject.VolumeMounts; v != nil {
			tfMap["volume_mounts"] = flattenEKSContainerVolumeMounts(v)
		}

		tfList = append(tfList, tfMap)
	}

	return tfList
}
