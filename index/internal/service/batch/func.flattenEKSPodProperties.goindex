package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenEKSPodProperties(apiObject *awstypes.EksPodProperties) []any {
	var tfList []any
	tfMap := make(map[string]any, 0)

	if v := apiObject.Containers; v != nil {
		tfMap["containers"] = flattenEKSContainers(v)
	}

	if v := apiObject.DnsPolicy; v != nil {
		tfMap["dns_policy"] = aws.ToString(v)
	}

	if v := apiObject.HostNetwork; v != nil {
		tfMap["host_network"] = aws.ToBool(v)
	}

	if v := apiObject.ImagePullSecrets; v != nil {
		tfMap["image_pull_secret"] = flattenImagePullSecrets(v)
	}

	if v := apiObject.InitContainers; v != nil {
		tfMap["init_containers"] = flattenEKSContainers(v)
	}

	if v := apiObject.Metadata; v != nil {
		metadata := make([]map[string]any, 0)

		if v := v.Labels; v != nil {
			metadata = append(metadata, map[string]any{
				"labels": v,
			})
		}

		tfMap["metadata"] = metadata
	}

	if v := apiObject.ServiceAccountName; v != nil {
		tfMap["service_account_name"] = aws.ToString(v)
	}

	if v := apiObject.ShareProcessNamespace; v != nil {
		tfMap["share_process_namespace"] = aws.ToBool(v)
	}

	if v := apiObject.Volumes; v != nil {
		tfMap["volumes"] = flattenEKSVolumes(v)
	}

	tfList = append(tfList, tfMap)

	return tfList
}
