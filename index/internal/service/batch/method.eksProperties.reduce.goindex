package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"cmp"
	"slices"
	_ "unsafe" // Required for go:linkname

	"github.com/aws/aws-sdk-go-v2/aws"
	_ "github.com/aws/aws-sdk-go-v2/service/batch" // Required for go:linkname
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
)
func (ep *eksProperties) reduce() {
	if ep.PodProperties == nil {
		return
	}
	ep.orderContainers()
	ep.orderEnvironmentVariables()

	// Set all empty slices to nil.
	if len(ep.PodProperties.Containers) == 0 {
		ep.PodProperties.Containers = nil
	} else {
		for j, container := range ep.PodProperties.Containers {
			if len(container.Args) == 0 {
				container.Args = nil
			}
			if len(container.Command) == 0 {
				container.Command = nil
			}
			if len(container.Env) == 0 {
				container.Env = nil
			}
			if len(container.VolumeMounts) == 0 {
				container.VolumeMounts = nil
			}
			ep.PodProperties.Containers[j] = container
		}
	}
	if len(ep.PodProperties.InitContainers) == 0 {
		ep.PodProperties.InitContainers = nil
	} else {
		for j, container := range ep.PodProperties.InitContainers {
			if len(container.Args) == 0 {
				container.Args = nil
			}
			if len(container.Command) == 0 {
				container.Command = nil
			}
			if len(container.Env) == 0 {
				container.Env = nil
			}
			if len(container.VolumeMounts) == 0 {
				container.VolumeMounts = nil
			}
			ep.PodProperties.InitContainers[j] = container
		}
	}
	if ep.PodProperties.DnsPolicy == nil {
		ep.PodProperties.DnsPolicy = aws.String("ClusterFirst")
	}
	if ep.PodProperties.HostNetwork == nil {
		ep.PodProperties.HostNetwork = aws.Bool(true)
	}
	if len(ep.PodProperties.Volumes) == 0 {
		ep.PodProperties.Volumes = nil
	}
	if len(ep.PodProperties.ImagePullSecrets) == 0 {
		ep.PodProperties.ImagePullSecrets = nil
	}
}
