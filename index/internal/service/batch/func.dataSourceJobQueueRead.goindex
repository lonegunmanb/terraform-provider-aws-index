package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceJobQueueRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).BatchClient(ctx)

	jobQueue, err := findJobQueueByID(ctx, conn, d.Get(names.AttrName).(string))

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("Batch Job Queue", err))
	}

	arn := aws.ToString(jobQueue.JobQueueArn)
	d.SetId(arn)
	d.Set(names.AttrARN, arn)
	d.Set(names.AttrName, jobQueue.JobQueueName)
	d.Set(names.AttrPriority, jobQueue.Priority)
	d.Set("scheduling_policy_arn", jobQueue.SchedulingPolicyArn)
	d.Set(names.AttrState, jobQueue.State)
	d.Set(names.AttrStatus, jobQueue.Status)
	d.Set(names.AttrStatusReason, jobQueue.StatusReason)

	tfList := make([]any, 0)
	for _, apiObject := range jobQueue.ComputeEnvironmentOrder {
		tfMap := map[string]any{}
		tfMap["compute_environment"] = aws.ToString(apiObject.ComputeEnvironment)
		tfMap["order"] = aws.ToInt32(apiObject.Order)
		tfList = append(tfList, tfMap)
	}
	if err := d.Set("compute_environment_order", tfList); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting compute_environment_order: %s", err)
	}

	tfList = make([]any, 0)
	for _, apiObject := range jobQueue.JobStateTimeLimitActions {
		tfMap := map[string]any{}
		tfMap[names.AttrAction] = apiObject.Action
		tfMap["max_time_seconds"] = aws.ToInt32(apiObject.MaxTimeSeconds)
		tfMap["reason"] = aws.ToString(apiObject.Reason)
		tfMap[names.AttrState] = apiObject.State
		tfList = append(tfList, tfMap)
	}
	if err := d.Set("job_state_time_limit_action", tfList); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting job_state_time_limit_action: %s", err)
	}

	setTagsOut(ctx, jobQueue.Tags)

	return diags
}
