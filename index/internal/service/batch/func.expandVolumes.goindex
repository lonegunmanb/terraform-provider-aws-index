package github.com/hashicorp/terraform-provider-aws/internal/service/batch
import (
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	awstypes "github.com/aws/aws-sdk-go-v2/service/batch/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVolumes(tfList []any) []awstypes.EksVolume {
	var apiObjects []awstypes.EksVolume

	for _, tfMapRaw := range tfList {
		apiObject := awstypes.EksVolume{}
		tfMap := tfMapRaw.(map[string]any)

		if v, ok := tfMap["empty_dir"].([]any); ok && len(v) > 0 {
			if v, ok := v[0].(map[string]any); ok {
				apiObject.EmptyDir = &awstypes.EksEmptyDir{
					Medium:    aws.String(v["medium"].(string)),
					SizeLimit: aws.String(v["size_limit"].(string)),
				}
			}
		}

		if v, ok := tfMap[names.AttrName].(string); ok {
			apiObject.Name = aws.String(v)
		}

		if v, ok := tfMap["host_path"].([]any); ok && len(v) > 0 {
			apiObject.HostPath = &awstypes.EksHostPath{}

			if v, ok := v[0].(map[string]any); ok {
				if v, ok := v[names.AttrPath]; ok {
					apiObject.HostPath.Path = aws.String(v.(string))
				}
			}
		}

		if v, ok := tfMap["secret"].([]any); ok && len(v) > 0 {
			apiObject.Secret = &awstypes.EksSecret{}

			if v := v[0].(map[string]any); ok {
				if v, ok := v["optional"]; ok {
					apiObject.Secret.Optional = aws.Bool(v.(bool))
				}

				if v, ok := v["secret_name"]; ok {
					apiObject.Secret.SecretName = aws.String(v.(string))
				}
			}
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
