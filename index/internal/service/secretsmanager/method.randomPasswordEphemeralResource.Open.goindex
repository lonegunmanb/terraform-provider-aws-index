package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (e *randomPasswordEphemeralResource) Open(ctx context.Context, req ephemeral.OpenRequest, resp *ephemeral.OpenResponse) {
	conn := e.Meta().SecretsManagerClient(ctx)

	var data randomPasswordEphemeralResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	input := secretsmanager.GetRandomPasswordInput{}
	resp.Diagnostics.Append(fwflex.Expand(ctx, data, &input)...)
	if resp.Diagnostics.HasError() {
		return
	}

	output, err := conn.GetRandomPassword(ctx, &input)
	if err != nil {
		resp.Diagnostics.AddError(
			create.ProblemStandardMessage(names.SecretsManager, create.ErrActionOpening, ERNameRandomPassword, "", err),
			err.Error(),
		)
		return
	}

	data.RandomPassword = fwflex.StringToFramework(ctx, output.RandomPassword)

	resp.Diagnostics.Append(resp.Result.Set(ctx, &data)...)
}
