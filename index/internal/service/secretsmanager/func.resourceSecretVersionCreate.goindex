package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecretVersionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecretsManagerClient(ctx)

	secretID := d.Get("secret_id").(string)
	input := &secretsmanager.PutSecretValueInput{
		ClientRequestToken: aws.String(id.UniqueId()), // Needed because we're handling our own retries
		SecretId:           aws.String(secretID),
	}

	if v, ok := d.GetOk("secret_binary"); ok {
		var err error
		input.SecretBinary, err = inttypes.Base64Decode(v.(string))
		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if v, ok := d.GetOk("secret_string"); ok {
		input.SecretString = aws.String(v.(string))
	}

	secretStringWO, di := flex.GetWriteOnlyStringValue(d, cty.GetAttrPath("secret_string_wo"))
	diags = append(diags, di...)
	if diags.HasError() {
		return diags
	}

	if secretStringWO != "" {
		input.SecretString = aws.String(secretStringWO)
	}

	if v, ok := d.GetOk("version_stages"); ok && v.(*schema.Set).Len() > 0 {
		input.VersionStages = flex.ExpandStringValueSet(v.(*schema.Set))
	}

	output, err := conn.PutSecretValue(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "putting Secrets Manager Secret (%s) value: %s", secretID, err)
	}

	versionID := aws.ToString(output.VersionId)
	d.SetId(secretVersionCreateResourceID(secretID, versionID))

	_, err = tfresource.RetryWhenNotFound(ctx, propagationTimeout, func(ctx context.Context) (any, error) {
		return findSecretVersionByTwoPartKey(ctx, conn, secretID, versionID)
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Secrets Manager Secret Version (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceSecretVersionRead(ctx, d, meta)...)
}
