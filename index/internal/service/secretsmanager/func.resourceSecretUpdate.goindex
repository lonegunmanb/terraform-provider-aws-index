package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfiam "github.com/hashicorp/terraform-provider-aws/internal/service/iam"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecretUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecretsManagerClient(ctx)

	if d.HasChange("replica") {
		o, n := d.GetChange("replica")
		os, ns := o.(*schema.Set), n.(*schema.Set)

		if del := os.Difference(ns).List(); len(del) > 0 {
			if err := removeSecretReplicas(ctx, conn, d.Id(), expandReplicaRegionTypes(del)); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}

		if add := ns.Difference(os).List(); len(add) > 0 {
			if err := addSecretReplicas(ctx, conn, d.Id(), d.Get("force_overwrite_replica_secret").(bool), expandReplicaRegionTypes(add)); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	if d.HasChanges(names.AttrDescription, names.AttrKMSKeyID) {
		input := &secretsmanager.UpdateSecretInput{
			ClientRequestToken: aws.String(id.UniqueId()), // Needed because we're handling our own retries
			Description:        aws.String(d.Get(names.AttrDescription).(string)),
			SecretId:           aws.String(d.Id()),
		}

		if v, ok := d.GetOk(names.AttrKMSKeyID); ok {
			input.KmsKeyId = aws.String(v.(string))
		}

		_, err := conn.UpdateSecret(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Secrets Manager Secret (%s): %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrPolicy) {
		if v, ok := d.GetOk(names.AttrPolicy); ok && v.(string) != "" && v.(string) != "{}" {
			policy, err := structure.NormalizeJsonString(v.(string))
			if err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}

			input := &secretsmanager.PutResourcePolicyInput{
				ResourcePolicy: aws.String(policy),
				SecretId:       aws.String(d.Id()),
			}

			if _, err := putSecretPolicy(ctx, conn, input); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		} else {
			if err := deleteSecretPolicy(ctx, conn, d.Id()); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}
		}
	}

	return append(diags, resourceSecretRead(ctx, d, meta)...)
}
