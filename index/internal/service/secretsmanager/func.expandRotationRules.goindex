package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandRotationRules(l []any) *types.RotationRulesType {
	if len(l) == 0 {
		return nil
	}
	rules := &types.RotationRulesType{}

	tfMap := l[0].(map[string]any)

	if v, ok := tfMap[names.AttrScheduleExpression].(string); ok && v != "" {
		rules.ScheduleExpression = aws.String(v)
	} else if v, ok := tfMap["automatically_after_days"].(int); ok && v != 0 {
		rules.AutomaticallyAfterDays = aws.Int64(int64(v))
	}

	if v, ok := tfMap[names.AttrDuration].(string); ok && v != "" {
		rules.Duration = aws.String(v)
	}

	return rules
}
