package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecretRotationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecretsManagerClient(ctx)

	secretID := d.Get("secret_id").(string)
	input := &secretsmanager.RotateSecretInput{
		ClientRequestToken: aws.String(id.UniqueId()), // Needed because we're handling our own retries
		RotateImmediately:  aws.Bool(d.Get("rotate_immediately").(bool)),
		RotationRules:      expandRotationRules(d.Get("rotation_rules").([]any)),
		SecretId:           aws.String(secretID),
	}

	if v, ok := d.GetOk("rotation_lambda_arn"); ok {
		input.RotationLambdaARN = aws.String(v.(string))
	}

	// AccessDeniedException: Secrets Manager cannot invoke the specified Lambda function.
	outputRaw, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, 1*time.Minute, func(ctx context.Context) (any, error) {
		return conn.RotateSecret(ctx, input)
	}, "AccessDeniedException")

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Secrets Manager Secret Rotation (%s): %s", secretID, err)
	}

	d.SetId(aws.ToString(outputRaw.(*secretsmanager.RotateSecretOutput).ARN))

	return append(diags, resourceSecretRotationRead(ctx, d, meta)...)
}
