package github.com/hashicorp/terraform-provider-aws/internal/service/secretsmanager
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSecretVersionUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SecretsManagerClient(ctx)

	secretID, versionID, err := secretVersionParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	o, n := d.GetChange("version_stages")
	os, ns := o.(*schema.Set), n.(*schema.Set)
	add, del := flex.ExpandStringValueSet(ns.Difference(os)), flex.ExpandStringValueSet(os.Difference(ns))

	var listedVersionIDs bool
	for _, stage := range add {
		inputU := &secretsmanager.UpdateSecretVersionStageInput{
			MoveToVersionId: aws.String(versionID),
			SecretId:        aws.String(secretID),
			VersionStage:    aws.String(stage),
		}

		if !listedVersionIDs {
			if stage == secretVersionStageCurrent {
				inputL := &secretsmanager.ListSecretVersionIdsInput{
					SecretId: aws.String(secretID),
				}
				var versionStageCurrentVersionID string

				paginator := secretsmanager.NewListSecretVersionIdsPaginator(conn, inputL)
			listVersionIDs:
				for paginator.HasMorePages() {
					page, err := paginator.NextPage(ctx)

					if err != nil {
						return sdkdiag.AppendErrorf(diags, "listing Secrets Manager Secret (%s) version IDs: %s", secretID, err)
					}

					for _, version := range page.Versions {
						for _, versionStage := range version.VersionStages {
							if versionStage == secretVersionStageCurrent {
								versionStageCurrentVersionID = aws.ToString(version.VersionId)
								break listVersionIDs
							}
						}
					}
				}

				inputU.RemoveFromVersionId = aws.String(versionStageCurrentVersionID)
				listedVersionIDs = true
			}
		}

		_, err := conn.UpdateSecretVersionStage(ctx, inputU)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "adding Secrets Manager Secret Version (%s) stage (%s): %s", d.Id(), stage, err)
		}
	}

	for _, stage := range del {
		// InvalidParameterException: You can only move staging label AWSCURRENT to a different secret version. It canâ€™t be completely removed.
		if stage == secretVersionStageCurrent {
			log.Printf("[INFO] Skipping removal of AWSCURRENT staging label for secret %q version %q", secretID, versionID)
			continue
		}

		// If we added AWSCURRENT to this version then any AWSPREVIOUS label will have been moved to another version.
		if listedVersionIDs && stage == secretVersionStagePrevious {
			continue
		}

		input := &secretsmanager.UpdateSecretVersionStageInput{
			RemoveFromVersionId: aws.String(versionID),
			SecretId:            aws.String(secretID),
			VersionStage:        aws.String(stage),
		}

		_, err := conn.UpdateSecretVersionStage(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "deleting Secrets Manager Secret Version (%s) stage (%s): %s", d.Id(), stage, err)
		}
	}

	return append(diags, resourceSecretVersionRead(ctx, d, meta)...)
}
