package github.com/hashicorp/terraform-provider-aws/internal/service/kinesis
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kinesis"
	awstypes "github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *kinesis.Client, identifier string, oldTagsMap, newTagsMap any, optFns ...func(*kinesis.Options)) error {
	oldTags := tftags.New(ctx, oldTagsMap)
	newTags := tftags.New(ctx, newTagsMap)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.Kinesis)
	if len(removedTags) > 0 {
		for _, removedTags := range removedTags.Chunks(10) {
			input := kinesis.RemoveTagsFromStreamInput{
				StreamName: aws.String(identifier),
				TagKeys:    removedTags.Keys(),
			}

			_, err := conn.RemoveTagsFromStream(ctx, &input, optFns...)

			if err != nil {
				return fmt.Errorf("untagging resource (%s): %w", identifier, err)
			}
		}
	}

	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.Kinesis)
	if len(updatedTags) > 0 {
		for _, updatedTags := range updatedTags.Chunks(10) {
			input := kinesis.AddTagsToStreamInput{
				StreamName: aws.String(identifier),
				Tags:       updatedTags.IgnoreAWS().Map(),
			}

			_, err := conn.AddTagsToStream(ctx, &input, optFns...)

			if err != nil {
				return fmt.Errorf("tagging resource (%s): %w", identifier, err)
			}
		}
	}

	return nil
}
