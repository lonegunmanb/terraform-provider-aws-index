package github.com/hashicorp/terraform-provider-aws/internal/service/xray
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSamplingRuleRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).XRayClient(ctx)

	samplingRule, err := findSamplingRuleByName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] XRay Sampling Rule (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading XRay Sampling Rule (%s): %s", d.Id(), err)
	}

	d.Set(names.AttrARN, samplingRule.RuleARN)
	d.Set(names.AttrAttributes, samplingRule.Attributes)
	d.Set("fixed_rate", samplingRule.FixedRate)
	d.Set("host", samplingRule.Host)
	d.Set("http_method", samplingRule.HTTPMethod)
	d.Set(names.AttrPriority, samplingRule.Priority)
	d.Set("reservoir_size", samplingRule.ReservoirSize)
	d.Set(names.AttrResourceARN, samplingRule.ResourceARN)
	d.Set("rule_name", samplingRule.RuleName)
	d.Set(names.AttrServiceName, samplingRule.ServiceName)
	d.Set("service_type", samplingRule.ServiceType)
	d.Set("url_path", samplingRule.URLPath)
	d.Set(names.AttrVersion, samplingRule.Version)

	return diags
}
