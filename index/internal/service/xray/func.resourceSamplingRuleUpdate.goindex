package github.com/hashicorp/terraform-provider-aws/internal/service/xray
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceSamplingRuleUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).XRayClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		samplingRuleUpdate := &types.SamplingRuleUpdate{
			FixedRate:     aws.Float64(d.Get("fixed_rate").(float64)),
			Host:          aws.String(d.Get("host").(string)),
			HTTPMethod:    aws.String(d.Get("http_method").(string)),
			Priority:      aws.Int32(int32(d.Get(names.AttrPriority).(int))),
			ReservoirSize: aws.Int32(int32(d.Get("reservoir_size").(int))),
			ResourceARN:   aws.String(d.Get(names.AttrResourceARN).(string)),
			RuleName:      aws.String(d.Id()),
			ServiceName:   aws.String(d.Get(names.AttrServiceName).(string)),
			ServiceType:   aws.String(d.Get("service_type").(string)),
			URLPath:       aws.String(d.Get("url_path").(string)),
		}

		if d.HasChange(names.AttrAttributes) {
			samplingRuleUpdate.Attributes = flex.ExpandStringValueMap(d.Get(names.AttrAttributes).(map[string]any))
		}

		input := xray.UpdateSamplingRuleInput{
			SamplingRuleUpdate: samplingRuleUpdate,
		}

		_, err := conn.UpdateSamplingRule(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating XRay Sampling Rule (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceSamplingRuleRead(ctx, d, meta)...)
}
