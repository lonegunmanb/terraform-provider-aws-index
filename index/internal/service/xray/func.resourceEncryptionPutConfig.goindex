package github.com/hashicorp/terraform-provider-aws/internal/service/xray
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/aws/aws-sdk-go-v2/service/xray/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEncryptionPutConfig(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).XRayClient(ctx)

	input := xray.PutEncryptionConfigInput{
		Type: types.EncryptionType(d.Get(names.AttrType).(string)),
	}

	if v, ok := d.GetOk(names.AttrKeyID); ok {
		input.KeyId = aws.String(v.(string))
	}

	_, err := conn.PutEncryptionConfig(ctx, &input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating XRay Encryption Config: %s", err)
	}

	d.SetId(meta.(*conns.AWSClient).Region(ctx))

	if _, err := waitEncryptionConfigAvailable(ctx, conn); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for XRay Encryption Config (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceEncryptionConfigRead(ctx, d, meta)...)
}
