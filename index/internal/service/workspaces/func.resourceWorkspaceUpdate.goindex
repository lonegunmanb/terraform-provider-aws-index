package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWorkspaceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	// IMPORTANT: Only one workspace property could be changed in a time.
	// I've create AWS Support feature request to allow multiple properties modification in a time.
	// https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html

	if key := "workspace_properties.0.compute_type_name"; d.HasChange(key) {
		if err := workspacePropertyUpdate(ctx, conn, d, key); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if key := "workspace_properties.0.root_volume_size_gib"; d.HasChange(key) {
		if err := workspacePropertyUpdate(ctx, conn, d, key); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if key := "workspace_properties.0.running_mode"; d.HasChange(key) {
		if err := workspacePropertyUpdate(ctx, conn, d, key); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if key := "workspace_properties.0.running_mode_auto_stop_timeout_in_minutes"; d.HasChange(key) {
		if err := workspacePropertyUpdate(ctx, conn, d, key); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	if key := "workspace_properties.0.user_volume_size_gib"; d.HasChange(key) {
		if err := workspacePropertyUpdate(ctx, conn, d, key); err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}
	}

	return append(diags, resourceWorkspaceRead(ctx, d, meta)...)
}
