package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWorkspaceCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	req := types.WorkspaceRequest{
		BundleId:                    aws.String(d.Get("bundle_id").(string)),
		DirectoryId:                 aws.String(d.Get("directory_id").(string)),
		RootVolumeEncryptionEnabled: aws.Bool(d.Get("root_volume_encryption_enabled").(bool)),
		Tags:                        getTagsIn(ctx),
		UserName:                    aws.String(d.Get(names.AttrUserName).(string)),
		UserVolumeEncryptionEnabled: aws.Bool(d.Get("user_volume_encryption_enabled").(bool)),
		WorkspaceProperties:         expandWorkspaceProperties(d.Get("workspace_properties").([]any)),
	}

	if v, ok := d.GetOk("volume_encryption_key"); ok {
		req.VolumeEncryptionKey = aws.String(v.(string))
	}

	input := workspaces.CreateWorkspacesInput{
		Workspaces: []types.WorkspaceRequest{req},
	}
	output, err := conn.CreateWorkspaces(ctx, &input)

	if err == nil && len(output.FailedRequests) > 0 {
		v := output.FailedRequests[0]
		err = fmt.Errorf("%s: %s", aws.ToString(v.ErrorCode), aws.ToString(v.ErrorMessage))
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating WorkSpaces Workspace: %s", err)
	}

	d.SetId(aws.ToString(output.PendingRequests[0].WorkspaceId))

	if _, err := waitWorkspaceAvailable(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for WorkSpaces Workspace (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceWorkspaceRead(ctx, d, meta)...)
}
