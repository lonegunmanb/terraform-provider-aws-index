package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceDirectoryRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	directoryID := d.Get("directory_id").(string)
	directory, err := findDirectoryByID(ctx, conn, directoryID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading WorkSpaces Directory (%s): %s", directoryID, err)
	}

	d.SetId(directoryID)
	if err := d.Set("active_directory_config", flattenActiveDirectoryConfig(directory.ActiveDirectoryConfig)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting active_directory_config: %s", err)
	}
	d.Set(names.AttrAlias, directory.Alias)
	if err := d.Set("certificate_based_auth_properties", flattenCertificateBasedAuthProperties(directory.CertificateBasedAuthProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting certificate_based_auth_properties: %s", err)
	}
	d.Set("directory_id", directory.DirectoryId)
	d.Set("directory_name", directory.DirectoryName)
	d.Set("directory_type", directory.DirectoryType)
	d.Set("dns_ip_addresses", directory.DnsIpAddresses)
	d.Set("iam_role_id", directory.IamRoleId)
	d.Set("ip_group_ids", directory.IpGroupIds)
	d.Set("registration_code", directory.RegistrationCode)
	if err := d.Set("self_service_permissions", flattenSelfservicePermissions(directory.SelfservicePermissions)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting self_service_permissions: %s", err)
	}
	if err := d.Set("saml_properties", flattenSAMLProperties(directory.SamlProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting saml_properties: %s", err)
	}
	d.Set(names.AttrSubnetIDs, directory.SubnetIds)
	d.Set("user_identity_type", directory.UserIdentityType)
	if err := d.Set("workspace_access_properties", flattenWorkspaceAccessProperties(directory.WorkspaceAccessProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting workspace_access_properties: %s", err)
	}
	if err := d.Set("workspace_creation_properties", flattenDefaultWorkspaceCreationProperties(directory.WorkspaceCreationProperties)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting workspace_creation_properties: %s", err)
	}
	d.Set("workspace_directory_description", directory.WorkspaceDirectoryDescription)
	d.Set("workspace_directory_name", directory.WorkspaceDirectoryName)
	d.Set("workspace_security_group_id", directory.WorkspaceSecurityGroupId)
	d.Set("workspace_type", directory.WorkspaceType)

	return diags
}
