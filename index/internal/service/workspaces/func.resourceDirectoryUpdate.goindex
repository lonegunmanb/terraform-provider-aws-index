package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDirectoryUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	if d.HasChange("saml_properties") {
		tfList := d.Get("saml_properties").([]any)
		tfMap := tfList[0].(map[string]any)

		var dels []types.DeletableSamlProperty
		if tfMap["relay_state_parameter_name"].(string) == "" {
			dels = append(dels, types.DeletableSamlPropertySamlPropertiesRelayStateParameterName)
		}
		if tfMap["user_access_url"].(string) == "" {
			dels = append(dels, types.DeletableSamlPropertySamlPropertiesUserAccessUrl)
		}

		input := workspaces.ModifySamlPropertiesInput{
			PropertiesToDelete: dels,
			ResourceId:         aws.String(d.Id()),
			SamlProperties:     expandSAMLProperties(tfList),
		}

		_, err := conn.ModifySamlProperties(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WorkSpaces Directory (%s) SAML properties: %s", d.Id(), err)
		}
	}

	// SAML needs to be enabled for directory before enabling certificate based authentication
	if d.HasChange("certificate_based_auth_properties") {
		tfList := d.Get("certificate_based_auth_properties").([]any)
		tfMap := tfList[0].(map[string]any)

		var dels []types.DeletableCertificateBasedAuthProperty
		if tfMap["certificate_authority_arn"].(string) == "" {
			dels = append(dels, types.DeletableCertificateBasedAuthPropertyCertificateBasedAuthPropertiesCertificateAuthorityArn)
		}

		input := &workspaces.ModifyCertificateBasedAuthPropertiesInput{
			CertificateBasedAuthProperties: expandCertificateBasedAuthProperties(tfList),
			PropertiesToDelete:             dels,
			ResourceId:                     aws.String(d.Id()),
		}

		_, err := conn.ModifyCertificateBasedAuthProperties(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WorkSpaces Directory (%s) certificate-based authentication properties: %s", d.Id(), err)
		}
	}

	if d.HasChange("self_service_permissions") {
		input := workspaces.ModifySelfservicePermissionsInput{
			ResourceId:             aws.String(d.Id()),
			SelfservicePermissions: expandSelfservicePermissions(d.Get("self_service_permissions").([]any)),
		}

		_, err := conn.ModifySelfservicePermissions(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WorkSpaces Directory (%s) self-service permissions: %s", d.Id(), err)
		}
	}

	if d.HasChange("workspace_access_properties") {
		input := workspaces.ModifyWorkspaceAccessPropertiesInput{
			ResourceId:                aws.String(d.Id()),
			WorkspaceAccessProperties: expandWorkspaceAccessProperties(d.Get("workspace_access_properties").([]any)),
		}

		_, err := conn.ModifyWorkspaceAccessProperties(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WorkSpaces Directory (%s) access properties: %s", d.Id(), err)
		}
	}

	if d.HasChange("workspace_creation_properties") {
		input := workspaces.ModifyWorkspaceCreationPropertiesInput{
			ResourceId:                  aws.String(d.Id()),
			WorkspaceCreationProperties: expandWorkspaceCreationProperties(d.Get("workspace_creation_properties").([]any), types.WorkspaceType(d.Get("workspace_type").(string))),
		}

		_, err := conn.ModifyWorkspaceCreationProperties(ctx, &input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating WorkSpaces Directory (%s) creation properties: %s", d.Id(), err)
		}
	}

	if d.HasChange("ip_group_ids") {
		o, n := d.GetChange("ip_group_ids")
		os, ns := o.(*schema.Set), n.(*schema.Set)
		add, del := ns.Difference(os), os.Difference(ns)

		if add.Len() > 0 {
			input := workspaces.AssociateIpGroupsInput{
				DirectoryId: aws.String(d.Id()),
				GroupIds:    flex.ExpandStringValueSet(add),
			}

			_, err := conn.AssociateIpGroups(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "associating WorkSpaces Directory (%s) IP Groups: %s", d.Id(), err)
			}
		}

		if del.Len() > 0 {
			input := workspaces.DisassociateIpGroupsInput{
				DirectoryId: aws.String(d.Id()),
				GroupIds:    flex.ExpandStringValueSet(del),
			}

			_, err := conn.DisassociateIpGroups(ctx, &input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "disassociating WorkSpaces Directory (%s) IP Groups: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceDirectoryRead(ctx, d, meta)...)
}
