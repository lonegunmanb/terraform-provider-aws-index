package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIPGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &workspaces.CreateIpGroupInput{
		GroupDesc: aws.String(d.Get(names.AttrDescription).(string)),
		GroupName: aws.String(name),
		Tags:      getTagsIn(ctx),
		UserRules: expandIPRuleItems(d.Get("rules").(*schema.Set).List()),
	}

	output, err := conn.CreateIpGroup(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating WorkSpaces IP Group (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.GroupId))

	return append(diags, resourceIPGroupRead(ctx, d, meta)...)
}
