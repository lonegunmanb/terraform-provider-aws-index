package github.com/hashicorp/terraform-provider-aws/internal/service/workspaces
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspaces/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceIPGroupDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WorkSpacesClient(ctx)

	describeInput := &workspaces.DescribeWorkspaceDirectoriesInput{}
	directories, err := findDirectories(ctx, conn, describeInput)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading WorkSpaces Directories: %s", err)
	}

	for _, v := range directories {
		directoryID := aws.ToString(v.DirectoryId)
		for _, v := range v.IpGroupIds {
			if v == d.Id() {
				input := &workspaces.DisassociateIpGroupsInput{
					DirectoryId: aws.String(directoryID),
					GroupIds:    []string{d.Id()},
				}

				_, err := conn.DisassociateIpGroups(ctx, input)

				if err != nil {
					return sdkdiag.AppendErrorf(diags, "disassociating WorkSpaces Directory (%s) IP Group (%s): %s", directoryID, d.Id(), err)
				}
			}
		}
	}

	log.Printf("[DEBUG] Deleting WorkSpaces IP Group (%s)", d.Id())
	deleteInput := workspaces.DeleteIpGroupInput{
		GroupId: aws.String(d.Id()),
	}
	_, err = conn.DeleteIpGroup(ctx, &deleteInput)

	if errs.IsA[*types.ResourceNotFoundException](err) {
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "deleting WorkSpaces IP Group (%s): %s", d.Id(), err)
	}

	return diags
}
