package github.com/hashicorp/terraform-provider-aws/internal/service/grafana
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/grafana"
	awstypes "github.com/aws/aws-sdk-go-v2/service/grafana/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWorkspaceUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GrafanaClient(ctx)

	if d.HasChangesExcept(names.AttrConfiguration, "grafana_version", names.AttrTags, names.AttrTagsAll) {
		input := &grafana.UpdateWorkspaceInput{
			WorkspaceId: aws.String(d.Id()),
		}

		if d.HasChange("account_access_type") {
			input.AccountAccessType = awstypes.AccountAccessType(d.Get("account_access_type").(string))
		}

		if d.HasChange("data_sources") {
			input.WorkspaceDataSources = flex.ExpandStringyValueList[awstypes.DataSourceType](d.Get("data_sources").([]any))
		}

		if d.HasChange(names.AttrDescription) {
			input.WorkspaceDescription = aws.String(d.Get(names.AttrDescription).(string))
		}

		if d.HasChange(names.AttrName) {
			input.WorkspaceName = aws.String(d.Get(names.AttrName).(string))
		}

		if d.HasChange("network_access_control") {
			if v, ok := d.Get("network_access_control").([]any); ok {
				if len(v) > 0 {
					input.NetworkAccessControl = expandNetworkAccessControl(v)
				} else {
					input.RemoveNetworkAccessConfiguration = aws.Bool(true)
				}
			}
		}

		if d.HasChange("notification_destinations") {
			input.WorkspaceNotificationDestinations = flex.ExpandStringyValueList[awstypes.NotificationDestinationType](d.Get("notification_destinations").([]any))
		}

		if d.HasChange("organization_role_name") {
			input.OrganizationRoleName = aws.String(d.Get("organization_role_name").(string))
		}

		if d.HasChange("organizational_units") {
			input.WorkspaceOrganizationalUnits = flex.ExpandStringValueList(d.Get("organizational_units").([]any))
		}

		if d.HasChange("permission_type") {
			input.PermissionType = awstypes.PermissionType(d.Get("permission_type").(string))
		}

		if d.HasChange(names.AttrRoleARN) {
			input.WorkspaceRoleArn = aws.String(d.Get(names.AttrRoleARN).(string))
		}

		if d.HasChange("stack_set_name") {
			input.StackSetName = aws.String(d.Get("stack_set_name").(string))
		}

		if d.HasChange(names.AttrVPCConfiguration) {
			if v, ok := d.Get(names.AttrVPCConfiguration).([]any); ok {
				if len(v) > 0 {
					input.VpcConfiguration = expandVPCConfiguration(v)
				} else {
					input.RemoveVpcConfiguration = aws.Bool(true)
				}
			}
		}

		_, err := conn.UpdateWorkspace(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Grafana Workspace (%s): %s", d.Id(), err)
		}

		if _, err := waitWorkspaceUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Grafana Workspace (%s) update: %s", d.Id(), err)
		}
	}

	if d.HasChanges(names.AttrConfiguration, "grafana_version") {
		input := &grafana.UpdateWorkspaceConfigurationInput{
			Configuration: aws.String(d.Get(names.AttrConfiguration).(string)),
			WorkspaceId:   aws.String(d.Id()),
		}

		if d.HasChange("grafana_version") {
			input.GrafanaVersion = aws.String(d.Get("grafana_version").(string))
		}

		_, err := conn.UpdateWorkspaceConfiguration(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Grafana Workspace (%s) configuration: %s", d.Id(), err)
		}

		if _, err := waitWorkspaceUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return sdkdiag.AppendErrorf(diags, "waiting for Grafana Workspace (%s) configuration update: %s", d.Id(), err)
		}
	}

	return append(diags, resourceWorkspaceRead(ctx, d, meta)...)
}
