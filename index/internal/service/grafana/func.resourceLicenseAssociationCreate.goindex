package github.com/hashicorp/terraform-provider-aws/internal/service/grafana
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/grafana"
	awstypes "github.com/aws/aws-sdk-go-v2/service/grafana/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceLicenseAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).GrafanaClient(ctx)

	workspaceID := d.Get("workspace_id").(string)
	input := &grafana.AssociateLicenseInput{
		LicenseType: awstypes.LicenseType(d.Get("license_type").(string)),
		WorkspaceId: aws.String(workspaceID),
	}

	if v, ok := d.GetOk("grafana_token"); ok {
		input.GrafanaToken = aws.String(v.(string))
	}

	output, err := conn.AssociateLicense(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Grafana License Association (%s): %s", workspaceID, err)
	}

	d.SetId(aws.ToString(output.Workspace.Id))

	if _, err := waitLicenseAssociationCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Grafana License Association (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceLicenseAssociationRead(ctx, d, meta)...)
}
