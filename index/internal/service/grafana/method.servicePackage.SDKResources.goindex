package github.com/hashicorp/terraform-provider-aws/internal/service/grafana
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/grafana"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceLicenseAssociation,
			TypeName: "aws_grafana_license_association",
			Name:     "License Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceRoleAssociation,
			TypeName: "aws_grafana_role_association",
			Name:     "Workspace Role Association",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceWorkspace,
			TypeName: "aws_grafana_workspace",
			Name:     "Workspace",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceWorkspaceAPIKey,
			TypeName: "aws_grafana_workspace_api_key",
			Name:     "Workspace API Key",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceWorkspaceSAMLConfiguration,
			TypeName: "aws_grafana_workspace_saml_configuration",
			Name:     "Grafana Workspace SAML Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
