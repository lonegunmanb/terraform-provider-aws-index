package github.com/hashicorp/terraform-provider-aws/internal/service/ce
import (
	"context"
	"encoding/json"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAnomalyMonitorCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CEClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &costexplorer.CreateAnomalyMonitorInput{
		AnomalyMonitor: &awstypes.AnomalyMonitor{
			MonitorName: aws.String(name),
			MonitorType: awstypes.MonitorType(d.Get("monitor_type").(string)),
		},
		ResourceTags: getTagsIn(ctx),
	}

	switch awstypes.MonitorType(d.Get("monitor_type").(string)) {
	case awstypes.MonitorTypeDimensional:
		if v, ok := d.GetOk("monitor_dimension"); ok {
			input.AnomalyMonitor.MonitorDimension = awstypes.MonitorDimension(v.(string))
		} else {
			return sdkdiag.AppendErrorf(diags, "If Monitor Type is %s, dimension attrribute is required", awstypes.MonitorTypeDimensional)
		}
	case awstypes.MonitorTypeCustom:
		if v, ok := d.GetOk("monitor_specification"); ok {
			expression := &awstypes.Expression{}

			if err := json.Unmarshal([]byte(v.(string)), expression); err != nil {
				return sdkdiag.AppendFromErr(diags, err)
			}

			input.AnomalyMonitor.MonitorSpecification = expression
		} else {
			return sdkdiag.AppendErrorf(diags, "If Monitor Type is %s, dimension attrribute is required", awstypes.MonitorTypeCustom)
		}
	}

	output, err := conn.CreateAnomalyMonitor(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cost Explorer Anomaly Monitor (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.MonitorArn))

	return append(diags, resourceAnomalyMonitorRead(ctx, d, meta)...)
}
