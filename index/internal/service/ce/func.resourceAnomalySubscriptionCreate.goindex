package github.com/hashicorp/terraform-provider-aws/internal/service/ce
import (
	"context"
	"log"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAnomalySubscriptionCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CEClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &costexplorer.CreateAnomalySubscriptionInput{
		AnomalySubscription: &awstypes.AnomalySubscription{
			Frequency:        awstypes.AnomalySubscriptionFrequency(d.Get("frequency").(string)),
			MonitorArnList:   flex.ExpandStringValueList(d.Get("monitor_arn_list").([]any)),
			Subscribers:      expandSubscribers(d.Get("subscriber").(*schema.Set).List()),
			SubscriptionName: aws.String(name),
		},
		ResourceTags: getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrAccountID); ok {
		input.AnomalySubscription.AccountId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("threshold_expression"); ok {
		input.AnomalySubscription.ThresholdExpression = expandExpression(v.([]any)[0].(map[string]any))
	}

	output, err := conn.CreateAnomalySubscription(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cost Explorer Anomaly Subscription (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.SubscriptionArn))

	return append(diags, resourceAnomalySubscriptionRead(ctx, d, meta)...)
}
