package github.com/hashicorp/terraform-provider-aws/internal/service/ce
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer"
	awstypes "github.com/aws/aws-sdk-go-v2/service/costexplorer/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandExpression(tfMap map[string]any) *awstypes.Expression {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.Expression{}

	if v, ok := tfMap["and"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.And = expandExpressions(v.List())
	}

	if v, ok := tfMap["cost_category"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.CostCategories = expandCostCategoryValues(v[0].(map[string]any))
	}

	if v, ok := tfMap["dimension"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Dimensions = expandDimensionValues(v[0].(map[string]any))
	}

	if v, ok := tfMap["not"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Not = expandExpression(v[0].(map[string]any))
	}

	if v, ok := tfMap["or"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.Or = expandExpressions(v.List())
	}

	if v, ok := tfMap[names.AttrTags].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.Tags = expandTagValues(v[0].(map[string]any))
	}

	return apiObject
}
