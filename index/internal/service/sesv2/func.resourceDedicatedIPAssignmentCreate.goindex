package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDedicatedIPAssignmentCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	ip, destinationPoolName := d.Get("ip").(string), d.Get("destination_pool_name").(string)
	id := dedicatedIPAssignmentCreateResourceID(ip, destinationPoolName)
	input := &sesv2.PutDedicatedIpInPoolInput{
		DestinationPoolName: aws.String(destinationPoolName),
		Ip:                  aws.String(ip),
	}

	_, err := conn.PutDedicatedIpInPool(ctx, input)

	if err != nil {
		return create.AppendDiagError(diags, names.SESV2, create.ErrActionCreating, resNameDedicatedIPAssignment, d.Get("ip").(string), err)
	}

	d.SetId(id)

	return append(diags, resourceDedicatedIPAssignmentRead(ctx, d, meta)...)
}
