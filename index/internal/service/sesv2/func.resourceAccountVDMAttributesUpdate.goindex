package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"errors"
	"log"

	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceAccountVDMAttributesUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	in := &sesv2.PutAccountVdmAttributesInput{
		VdmAttributes: &types.VdmAttributes{
			VdmEnabled: types.FeatureStatus(d.Get("vdm_enabled").(string)),
		},
	}

	if v, ok := d.GetOk("dashboard_attributes"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.VdmAttributes.DashboardAttributes = expandDashboardAttributes(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("guardian_attributes"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.VdmAttributes.GuardianAttributes = expandGuardianAttributes(v.([]any)[0].(map[string]any))
	}

	out, err := conn.PutAccountVdmAttributes(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.SESV2, create.ErrActionCreating, resNameAccountVDMAttributes, "", err)
	}

	if out == nil {
		return create.AppendDiagError(diags, names.SESV2, create.ErrActionCreating, resNameAccountVDMAttributes, "", errors.New("empty output"))
	}

	if d.IsNewResource() {
		d.SetId("ses-account-vdm-attributes")
	}

	return append(diags, resourceAccountVDMAttributesRead(ctx, d, meta)...)
}
