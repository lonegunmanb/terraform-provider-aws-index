package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandEventDestinationDefinition(tfMap map[string]any) *types.EventDestinationDefinition {
	if tfMap == nil {
		return nil
	}

	apiObject := &types.EventDestinationDefinition{}

	if v, ok := tfMap["cloud_watch_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.CloudWatchDestination = expandCloudWatchDestination(v[0].(map[string]any))
	}

	if v, ok := tfMap[names.AttrEnabled].(bool); ok {
		apiObject.Enabled = v
	}

	if v, ok := tfMap["event_bridge_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.EventBridgeDestination = expandEventBridgeDestination(v[0].(map[string]any))
	}

	if v, ok := tfMap["kinesis_firehose_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.KinesisFirehoseDestination = expandKinesisFirehoseDestination(v[0].(map[string]any))
	}

	if v, ok := tfMap["matching_event_types"].(*schema.Set); ok && v.Len() > 0 {
		apiObject.MatchingEventTypes = flex.ExpandStringyValueSet[types.EventType](v)
	}

	if v, ok := tfMap["pinpoint_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.PinpointDestination = expandPinpointDestinaton(v[0].(map[string]any))
	}

	if v, ok := tfMap["sns_destination"].([]any); ok && len(v) > 0 && v[0] != nil {
		apiObject.SnsDestination = expandSNSDestination(v[0].(map[string]any))
	}

	return apiObject
}
