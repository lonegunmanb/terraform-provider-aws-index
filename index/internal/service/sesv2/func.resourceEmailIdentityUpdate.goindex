package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEmailIdentityUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	if d.HasChanges("configuration_set_name") {
		in := &sesv2.PutEmailIdentityConfigurationSetAttributesInput{
			EmailIdentity: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("configuration_set_name"); ok {
			in.ConfigurationSetName = aws.String(v.(string))
		}

		_, err := conn.PutEmailIdentityConfigurationSetAttributes(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameEmailIdentity, d.Id(), err)
		}
	}

	if d.HasChanges("dkim_signing_attributes") {
		in := &sesv2.PutEmailIdentityDkimSigningAttributesInput{
			EmailIdentity:           aws.String(d.Id()),
			SigningAttributesOrigin: types.DkimSigningAttributesOriginAwsSes,
		}

		if v, ok := d.GetOk("dkim_signing_attributes"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			in.SigningAttributes = expandDKIMSigningAttributes(v.([]any)[0].(map[string]any))
			in.SigningAttributesOrigin = getSigningAttributesOrigin(v.([]any)[0].(map[string]any))
		}

		_, err := conn.PutEmailIdentityDkimSigningAttributes(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameEmailIdentity, d.Id(), err)
		}
	}

	return append(diags, resourceEmailIdentityRead(ctx, d, meta)...)
}
