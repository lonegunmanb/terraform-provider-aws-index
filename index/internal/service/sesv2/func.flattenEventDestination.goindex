package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"errors"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenEventDestination(apiObject *types.EventDestination) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{
		names.AttrEnabled: apiObject.Enabled,
	}

	if v := apiObject.CloudWatchDestination; v != nil {
		tfMap["cloud_watch_destination"] = []any{flattenCloudWatchDestination(v)}
	}

	if v := apiObject.EventBridgeDestination; v != nil {
		tfMap["event_bridge_destination"] = []any{flattenEventBridgeDestination(v)}
	}

	if v := apiObject.KinesisFirehoseDestination; v != nil {
		tfMap["kinesis_firehose_destination"] = []any{flattenKinesisFirehoseDestination(v)}
	}

	if v := apiObject.MatchingEventTypes; v != nil {
		tfMap["matching_event_types"] = enum.Slice(apiObject.MatchingEventTypes...)
	}

	if v := apiObject.PinpointDestination; v != nil {
		tfMap["pinpoint_destination"] = []any{flattenPinpointDestination(v)}
	}

	if v := apiObject.SnsDestination; v != nil {
		tfMap["sns_destination"] = []any{flattenSNSDestination(v)}
	}

	return tfMap
}
