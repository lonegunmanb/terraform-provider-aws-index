package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findDedicatedIPByTwoPartKey(ctx context.Context, conn *sesv2.Client, ip, destinationPoolName string) (*types.DedicatedIp, error) {
	input := &sesv2.GetDedicatedIpInput{
		Ip: aws.String(ip),
	}

	output, err := findDedicatedIP(ctx, conn, input)

	if err != nil {
		return nil, err
	}

	if aws.ToString(output.PoolName) != destinationPoolName {
		return nil, &retry.NotFoundError{
			LastRequest: input,
		}
	}

	return output, nil
}
