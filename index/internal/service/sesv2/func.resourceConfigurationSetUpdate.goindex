package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationSetUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	if d.HasChanges("delivery_options") {
		input := &sesv2.PutConfigurationSetDeliveryOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("delivery_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["max_delivery_seconds"].(int); ok && v != 0 {
				input.MaxDeliverySeconds = aws.Int64(int64(v))
			}

			if v, ok := tfMap["sending_pool_name"].(string); ok && v != "" {
				input.SendingPoolName = aws.String(v)
			}

			if v, ok := tfMap["tls_policy"].(string); ok && v != "" {
				input.TlsPolicy = types.TlsPolicy(v)
			}
		}

		_, err := conn.PutConfigurationSetDeliveryOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	if d.HasChanges("reputation_options") {
		input := &sesv2.PutConfigurationSetReputationOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("reputation_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["reputation_metrics_enabled"].(bool); ok {
				input.ReputationMetricsEnabled = v
			}
		}

		_, err := conn.PutConfigurationSetReputationOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	if d.HasChanges("sending_options") {
		input := &sesv2.PutConfigurationSetSendingOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("sending_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["sending_enabled"].(bool); ok {
				input.SendingEnabled = v
			}
		}

		_, err := conn.PutConfigurationSetSendingOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	if d.HasChanges("suppression_options") {
		input := &sesv2.PutConfigurationSetSuppressionOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("suppression_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["suppressed_reasons"].([]any); ok && len(v) > 0 {
				input.SuppressedReasons = flex.ExpandStringyValueList[types.SuppressionListReason](v)
			}
		}

		_, err := conn.PutConfigurationSetSuppressionOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	if d.HasChanges("tracking_options") {
		input := &sesv2.PutConfigurationSetTrackingOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("tracking_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			tfMap := v.([]any)[0].(map[string]any)

			if v, ok := tfMap["custom_redirect_domain"].(string); ok && v != "" {
				input.CustomRedirectDomain = aws.String(v)
			}

			if v, ok := tfMap["https_policy"].(string); ok && v != "" {
				input.HttpsPolicy = types.HttpsPolicy(v)
			}
		}

		_, err := conn.PutConfigurationSetTrackingOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	if d.HasChanges("vdm_options") {
		input := &sesv2.PutConfigurationSetVdmOptionsInput{
			ConfigurationSetName: aws.String(d.Id()),
		}

		if v, ok := d.GetOk("vdm_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
			input.VdmOptions = expandVDMOptions(v.([]any)[0].(map[string]any))
		}

		_, err := conn.PutConfigurationSetVdmOptions(ctx, input)

		if err != nil {
			return create.AppendDiagError(diags, names.SESV2, create.ErrActionUpdating, resNameConfigurationSet, d.Id(), err)
		}
	}

	return append(diags, resourceConfigurationSetRead(ctx, d, meta)...)
}
