package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationSetRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	output, err := findConfigurationSetByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] SESV2 ConfigurationSet (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return create.AppendDiagError(diags, names.SESV2, create.ErrActionReading, resNameConfigurationSet, d.Id(), err)
	}

	d.Set(names.AttrARN, configurationSetARN(ctx, meta.(*conns.AWSClient), aws.ToString(output.ConfigurationSetName)))
	d.Set("configuration_set_name", output.ConfigurationSetName)
	if output.DeliveryOptions != nil {
		if err := d.Set("delivery_options", []any{flattenDeliveryOptions(output.DeliveryOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting delivery_options: %s", err)
		}
	} else {
		d.Set("delivery_options", nil)
	}
	if output.ReputationOptions != nil {
		if err := d.Set("reputation_options", []any{flattenReputationOptions(output.ReputationOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting reputation_options: %s", err)
		}
	} else {
		d.Set("reputation_options", nil)
	}
	if output.SendingOptions != nil {
		if err := d.Set("sending_options", []any{flattenSendingOptions(output.SendingOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting sending_options: %s", err)
		}
	} else {
		d.Set("sending_options", nil)
	}
	if output.SuppressionOptions != nil {
		if err := d.Set("suppression_options", []any{flattenSuppressionOptions(output.SuppressionOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting suppression_options: %s", err)
		}
	} else {
		d.Set("suppression_options", nil)
	}
	if output.TrackingOptions != nil {
		if err := d.Set("tracking_options", []any{flattenTrackingOptions(output.TrackingOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting tracking_options: %s", err)
		}
	} else {
		d.Set("tracking_options", nil)
	}
	if output.VdmOptions != nil {
		if err := d.Set("vdm_options", []any{flattenVDMOptions(output.VdmOptions)}); err != nil {
			return sdkdiag.AppendErrorf(diags, "setting vdm_options: %s", err)
		}
	} else {
		d.Set("vdm_options", nil)
	}

	return diags
}
