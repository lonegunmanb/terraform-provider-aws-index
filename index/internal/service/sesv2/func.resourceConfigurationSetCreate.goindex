package github.com/hashicorp/terraform-provider-aws/internal/service/sesv2
import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sesv2/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceConfigurationSetCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).SESV2Client(ctx)

	name := d.Get("configuration_set_name").(string)
	input := &sesv2.CreateConfigurationSetInput{
		ConfigurationSetName: aws.String(name),
		Tags:                 getTagsIn(ctx),
	}

	if v, ok := d.GetOk("delivery_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.DeliveryOptions = expandDeliveryOptions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("reputation_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ReputationOptions = expandReputationOptions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("sending_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.SendingOptions = expandSendingOptions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetRawConfig().AsValueMap()["suppression_options"]; ok && v.LengthInt() > 0 {
		if v, ok := v.Index(cty.NumberIntVal(0)).AsValueMap()["suppressed_reasons"]; ok && !v.IsNull() {
			tfMap := map[string]any{
				"suppressed_reasons": []any{},
			}

			for _, v := range v.AsValueSlice() {
				tfMap["suppressed_reasons"] = append(tfMap["suppressed_reasons"].([]any), v.AsString())
			}

			input.SuppressionOptions = expandSuppressionOptions(tfMap)
		}
	}

	if v, ok := d.GetOk("tracking_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.TrackingOptions = expandTrackingOptions(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("vdm_options"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.VdmOptions = expandVDMOptions(v.([]any)[0].(map[string]any))
	}

	_, err := conn.CreateConfigurationSet(ctx, input)

	if err != nil {
		return create.AppendDiagError(diags, names.SESV2, create.ErrActionCreating, resNameConfigurationSet, name, err)
	}

	d.SetId(name)

	return append(diags, resourceConfigurationSetRead(ctx, d, meta)...)
}
