package github.com/hashicorp/terraform-provider-aws/internal/service/applicationinsights
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/applicationinsights"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationinsights/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ApplicationInsightsClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &applicationinsights.UpdateApplicationInput{
			ResourceGroupName: aws.String(d.Id()),
		}

		if d.HasChange("auto_config_enabled") {
			input.AutoConfigEnabled = aws.Bool(d.Get("auto_config_enabled").(bool))
		}

		if d.HasChange("cwe_monitor_enabled") {
			input.CWEMonitorEnabled = aws.Bool(d.Get("cwe_monitor_enabled").(bool))
		}

		if d.HasChange("ops_center_enabled") {
			input.OpsCenterEnabled = aws.Bool(d.Get("ops_center_enabled").(bool))
		}

		if d.HasChange("ops_item_sns_topic_arn") {
			if _, n := d.GetChange("ops_item_sns_topic_arn"); n != nil {
				input.OpsItemSNSTopicArn = aws.String(n.(string))
			} else {
				input.RemoveSNSTopic = aws.Bool(true)
			}
		}

		_, err := conn.UpdateApplication(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating ApplicationInsights Application (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceApplicationRead(ctx, d, meta)...)
}
