package github.com/hashicorp/terraform-provider-aws/internal/service/applicationinsights
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/applicationinsights"
	awstypes "github.com/aws/aws-sdk-go-v2/service/applicationinsights/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceApplicationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ApplicationInsightsClient(ctx)

	input := &applicationinsights.CreateApplicationInput{
		AutoConfigEnabled: aws.Bool(d.Get("auto_config_enabled").(bool)),
		AutoCreate:        aws.Bool(d.Get("auto_create").(bool)),
		CWEMonitorEnabled: aws.Bool(d.Get("cwe_monitor_enabled").(bool)),
		OpsCenterEnabled:  aws.Bool(d.Get("ops_center_enabled").(bool)),
		ResourceGroupName: aws.String(d.Get("resource_group_name").(string)),
		Tags:              getTagsIn(ctx),
	}

	if v, ok := d.GetOk("grouping_type"); ok {
		input.GroupingType = awstypes.GroupingType(v.(string))
	}

	if v, ok := d.GetOk("ops_item_sns_topic_arn"); ok {
		input.OpsItemSNSTopicArn = aws.String(v.(string))
	}

	output, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, 2*time.Minute, func(ctx context.Context) (*applicationinsights.CreateApplicationOutput, error) {
		return conn.CreateApplication(ctx, input)
	})
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ApplicationInsights Application: %s", err)
	}

	d.SetId(aws.ToString(output.ApplicationInfo.ResourceGroupName))

	if _, err := waitApplicationCreated(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for ApplicationInsights Application (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceApplicationRead(ctx, d, meta)...)
}
