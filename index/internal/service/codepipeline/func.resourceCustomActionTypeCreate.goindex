package github.com/hashicorp/terraform-provider-aws/internal/service/codepipeline
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCustomActionTypeCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CodePipelineClient(ctx)

	category := d.Get("category").(string)
	provider := d.Get(names.AttrProviderName).(string)
	version := d.Get(names.AttrVersion).(string)
	id := CustomActionTypeCreateResourceID(category, provider, version)
	input := &codepipeline.CreateCustomActionTypeInput{
		Category: types.ActionCategory(category),
		Provider: aws.String(provider),
		Tags:     getTagsIn(ctx),
		Version:  aws.String(version),
	}

	if v, ok := d.GetOk("configuration_property"); ok && len(v.([]any)) > 0 {
		input.ConfigurationProperties = expandActionConfigurationProperties(v.([]any))
	}

	if v, ok := d.GetOk("input_artifact_details"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.InputArtifactDetails = expandArtifactDetails(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("output_artifact_details"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.OutputArtifactDetails = expandArtifactDetails(v.([]any)[0].(map[string]any))
	}

	if v, ok := d.GetOk("settings"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.Settings = expandActionTypeSettings(v.([]any)[0].(map[string]any))
	}

	_, err := conn.CreateCustomActionType(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating CodePipeline Custom Action Type (%s): %s", id, err)
	}

	d.SetId(id)

	return append(diags, resourceCustomActionTypeRead(ctx, d, meta)...)
}
