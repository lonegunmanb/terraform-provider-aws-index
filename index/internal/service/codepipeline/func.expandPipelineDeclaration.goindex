package github.com/hashicorp/terraform-provider-aws/internal/service/codepipeline
import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"log"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline/types"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandPipelineDeclaration(d *schema.ResourceData) (*types.PipelineDeclaration, error) {
	pipelineType := types.PipelineType(d.Get("pipeline_type").(string))
	apiObject := &types.PipelineDeclaration{
		Name:         aws.String(d.Get(names.AttrName).(string)),
		PipelineType: pipelineType,
		RoleArn:      aws.String(d.Get(names.AttrRoleARN).(string)),
		Stages:       expandStageDeclarations(d.Get(names.AttrStage).([]any)),
	}

	if v, ok := d.GetOk("artifact_store"); ok && v.(*schema.Set).Len() > 0 {
		artifactStores := expandArtifactStores(v.(*schema.Set).List())

		switch n := len(artifactStores); n {
		case 1:
			for region, v := range artifactStores {
				if region != "" {
					return nil, errors.New("region cannot be set for a single-region CodePipeline Pipeline")
				}
				apiObject.ArtifactStore = &v
			}

		default:
			for region := range artifactStores {
				if region == "" {
					return nil, errors.New("region must be set for a cross-region CodePipeline Pipeline")
				}
			}
			if n != v.(*schema.Set).Len() {
				return nil, errors.New("only one Artifact Store can be defined per region for a cross-region CodePipeline Pipeline")
			}
			apiObject.ArtifactStores = artifactStores
		}
	}

	if v, ok := d.GetOk("execution_mode"); ok {
		apiObject.ExecutionMode = types.ExecutionMode(v.(string))
	}

	// explicitly send trigger for all V2 pipelines (even when unset) to ensure
	// removed custom triggers are handled correctly
	if v, ok := d.GetOk("trigger"); (ok && len(v.([]any)) > 0) || pipelineType == types.PipelineTypeV2 {
		apiObject.Triggers = expandTriggerDeclarations(v.([]any))
	}

	if v, ok := d.GetOk("variable"); ok && len(v.([]any)) > 0 {
		apiObject.Variables = expandVariableDeclarations(v.([]any))
	}

	return apiObject, nil
}
