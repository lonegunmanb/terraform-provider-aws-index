package github.com/hashicorp/terraform-provider-aws/internal/service/notificationscontacts
import (
	"context"
	"fmt"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/notificationscontacts"
	awstypes "github.com/aws/aws-sdk-go-v2/service/notificationscontacts/types"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *emailContactResource) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data emailContactResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().NotificationsContactsClient(ctx)

	var inputCEC notificationscontacts.CreateEmailContactInput
	response.Diagnostics.Append(fwflex.Expand(ctx, data, &inputCEC)...)
	if response.Diagnostics.HasError() {
		return
	}
	inputCEC.Tags = getTagsIn(ctx)

	output, err := conn.CreateEmailContact(ctx, &inputCEC)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("creating User Notifications Contacts Email Contact (%s)", data.Name.ValueString()), err.Error())

		return
	}

	// Set values for unknowns.
	arn := aws.ToString(output.Arn)
	data.ARN = fwflex.StringValueToFramework(ctx, arn)

	inputSAC := notificationscontacts.SendActivationCodeInput{
		Arn: aws.String(arn),
	}
	_, err = conn.SendActivationCode(ctx, &inputSAC)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("activating User Notifications Contacts Email Contact (%s)", arn), err.Error())

		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, data)...)
}
