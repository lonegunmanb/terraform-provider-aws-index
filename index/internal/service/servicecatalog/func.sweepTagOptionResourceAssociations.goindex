package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
)
func sweepTagOptionResourceAssociations(region string) error {
	ctx := sweep.Context(region)
	client, err := sweep.SharedRegionalSweepClient(ctx, region)

	if err != nil {
		return fmt.Errorf("error getting client: %w", err)
	}

	conn := client.ServiceCatalogClient(ctx)
	sweepResources := make([]sweep.Sweepable, 0)
	var sweeperErrs *multierror.Error

	pages := servicecatalog.NewListTagOptionsPaginator(conn, &servicecatalog.ListTagOptionsInput{})
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if errs.IsA[*awstypes.TagOptionNotMigratedException](err) {
			log.Printf("[WARN] Skipping Service Catalog Tag Option Resource Associations sweep for %s: %s", region, err)
			return nil
		}

		if err != nil {
			sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error describing Service Catalog Tag Options for %s: %w", region, err))
		}

		for _, tag := range page.TagOptionDetails {
			input := &servicecatalog.ListResourcesForTagOptionInput{
				TagOptionId: tag.Id,
			}

			pages := servicecatalog.NewListResourcesForTagOptionPaginator(conn, input)
			for pages.HasMorePages() {
				page, err := pages.NextPage(ctx)

				if errs.IsA[*awstypes.TagOptionNotMigratedException](err) {
					log.Printf("[WARN] Skipping Service Catalog Tag Option Resource Associations sweep for %s: %s", region, err)
					return nil
				}

				if err != nil {
					sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error describing Service Catalog Tag Option Resource Associations for %s: %w", region, err))
				}

				for _, resource := range page.ResourceDetails {
					r := resourceTagOptionResourceAssociation()
					d := r.Data(nil)
					d.SetId(aws.ToString(resource.Id))

					sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
				}
			}
		}
	}

	if err = sweep.SweepOrchestrator(ctx, sweepResources); err != nil {
		sweeperErrs = multierror.Append(sweeperErrs, fmt.Errorf("error sweeping Service Catalog Tag Option Resource Associations for %s: %w", region, err))
	}

	if awsv2.SkipSweepError(sweeperErrs.ErrorOrNil()) {
		log.Printf("[WARN] Skipping Service Catalog Tag Option Resource Associations sweep for %s: %s", region, sweeperErrs)
		return nil
	}

	return sweeperErrs.ErrorOrNil()
}
