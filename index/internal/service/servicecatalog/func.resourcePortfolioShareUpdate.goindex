package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourcePortfolioShareUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ServiceCatalogClient(ctx)

	input := servicecatalog.UpdatePortfolioShareInput{
		PortfolioId:    aws.String(d.Get("portfolio_id").(string)),
		AcceptLanguage: aws.String(d.Get("accept_language").(string)),
	}

	if d.HasChange("share_principals") {
		input.SharePrincipals = aws.Bool(d.Get("share_principals").(bool))
	}

	if d.HasChange("share_tag_options") {
		input.ShareTagOptions = aws.Bool(d.Get("share_tag_options").(bool))
	}

	if v, ok := d.GetOk(names.AttrType); ok && v.(string) == string(awstypes.DescribePortfolioShareTypeAccount) {
		input.AccountId = aws.String(d.Get("principal_id").(string))
	} else {
		orgNode := &awstypes.OrganizationNode{}
		orgNode.Value = aws.String(d.Get("principal_id").(string))

		if v.(string) == string(awstypes.DescribePortfolioShareTypeOrganizationMemberAccount) {
			// portfolio_share type ORGANIZATION_MEMBER_ACCOUNT = org node type ACCOUNT
			orgNode.Type = awstypes.OrganizationNodeTypeAccount
		} else {
			orgNode.Type = awstypes.OrganizationNodeType(d.Get(names.AttrType).(string))
		}

		input.OrganizationNode = orgNode
	}

	err := tfresource.Retry(ctx, d.Timeout(schema.TimeoutUpdate), func(ctx context.Context) *tfresource.RetryError {
		_, err := conn.UpdatePortfolioShare(ctx, &input)

		if errs.IsAErrorMessageContains[*awstypes.InvalidParametersException](err, "profile does not exist") {
			return tfresource.RetryableError(err)
		}

		if err != nil {
			return tfresource.NonRetryableError(err)
		}

		return nil
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Service Catalog Portfolio Share (%s): %s", d.Id(), err)
	}

	return append(diags, resourcePortfolioShareRead(ctx, d, meta)...)
}
