package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenServiceActionDefinition(apiObject map[string]string, definitionType awstypes.ServiceActionDefinitionType) map[string]any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v, ok := apiObject[string(awstypes.ServiceActionDefinitionKeyAssumeRole)]; ok && v != "" {
		tfMap["assume_role"] = v
	}

	if v, ok := apiObject[string(awstypes.ServiceActionDefinitionKeyName)]; ok && v != "" {
		tfMap[names.AttrName] = v
	}

	if v, ok := apiObject[string(awstypes.ServiceActionDefinitionKeyParameters)]; ok && v != "" {
		tfMap[names.AttrParameters] = v
	}

	if v, ok := apiObject[string(awstypes.ServiceActionDefinitionKeyVersion)]; ok && v != "" {
		tfMap[names.AttrVersion] = v
	}

	if definitionType != "" {
		tfMap[names.AttrType] = definitionType
	}

	return tfMap
}
