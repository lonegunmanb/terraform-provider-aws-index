package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProductImport(ctx context.Context, d *schema.ResourceData, meta any) ([]*schema.ResourceData, error) {
	conn := meta.(*conns.AWSClient).ServiceCatalogClient(ctx)

	productData, err := findProductByID(ctx, conn, d.Id())

	if err != nil {
		return []*schema.ResourceData{d}, err
	}

	// import the last entry in the summary
	if len(productData.ProvisioningArtifactSummaries) > 0 {
		provisioningArtifact := slices.MaxFunc(productData.ProvisioningArtifactSummaries, func(a, b awstypes.ProvisioningArtifactSummary) int {
			return aws.ToTime(a.CreatedTime).Compare(aws.ToTime(b.CreatedTime))
		})
		in := &servicecatalog.DescribeProvisioningArtifactInput{
			ProductId:              aws.String(d.Id()),
			ProvisioningArtifactId: provisioningArtifact.Id,
		}

		// Find additional artifact details.
		artifactData, err := conn.DescribeProvisioningArtifact(ctx, in)

		if err != nil {
			return []*schema.ResourceData{d}, err
		}

		d.Set("provisioning_artifact_parameters", flattenProvisioningArtifactParameters(artifactData))
	}

	return []*schema.ResourceData{d}, nil
}
