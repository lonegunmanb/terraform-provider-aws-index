package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceConstraint,
			TypeName: "aws_servicecatalog_constraint",
			Name:     "Constraint",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceLaunchPaths,
			TypeName: "aws_servicecatalog_launch_paths",
			Name:     "Launch Paths",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourcePortfolio,
			TypeName: "aws_servicecatalog_portfolio",
			Name:     "Portfolio",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourcePortfolioConstraints,
			TypeName: "aws_servicecatalog_portfolio_constraints",
			Name:     "Portfolio Constraints",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceProduct,
			TypeName: "aws_servicecatalog_product",
			Name:     "Product",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceProvisioningArtifacts,
			TypeName: "aws_servicecatalog_provisioning_artifacts",
			Name:     "Provisioning Artifacts",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
