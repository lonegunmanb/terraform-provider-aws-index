package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProvisionedProductUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ServiceCatalogClient(ctx)

	input := servicecatalog.UpdateProvisionedProductInput{
		ProvisionedProductId: aws.String(d.Id()),
		UpdateToken:          aws.String(id.UniqueId()),
	}

	if v, ok := d.GetOk("accept_language"); ok {
		input.AcceptLanguage = aws.String(v.(string))
	}

	if v, ok := d.GetOk("path_id"); ok {
		input.PathId = aws.String(v.(string))
	} else if v, ok := d.GetOk("path_name"); ok {
		input.PathName = aws.String(v.(string))
	}

	// check product_name first. product_id is optional/computed and will always be
	// set by the time update is called
	if v, ok := d.GetOk("product_name"); ok {
		input.ProductName = aws.String(v.(string))
	} else if v, ok := d.GetOk("product_id"); ok {
		input.ProductId = aws.String(v.(string))
	}

	// check provisioning_artifact_name first. provisioning_artrifact_id is optional/computed
	// and will always be set by the time update is called
	// Reference: https://github.com/hashicorp/terraform-provider-aws/issues/26271
	if v, ok := d.GetOk("provisioning_artifact_name"); ok {
		input.ProvisioningArtifactName = aws.String(v.(string))
	} else if v, ok := d.GetOk("provisioning_artifact_id"); ok {
		input.ProvisioningArtifactId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("provisioning_parameters"); ok && len(v.([]any)) > 0 {
		input.ProvisioningParameters = expandUpdateProvisioningParameters(v.([]any))
	}

	if v, ok := d.GetOk("stack_set_provisioning_preferences"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.ProvisioningPreferences = expandUpdateProvisioningPreferences(v.([]any)[0].(map[string]any))
	}

	// Send tags each time the resource is updated. This is necessary to automatically apply tags
	// to provisioned AWS objects during update if the tags don't change.
	input.Tags = getTagsIn(ctx)

	_, err := tfresource.RetryWhen(ctx, d.Timeout(schema.TimeoutUpdate),
		func(ctx context.Context) (any, error) {
			return conn.UpdateProvisionedProduct(ctx, &input)
		},
		func(err error) (bool, error) {
			if errs.IsAErrorMessageContains[*awstypes.InvalidParametersException](err, "profile does not exist") {
				return true, err
			}

			return false, err
		},
	)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "updating Service Catalog Provisioned Product (%s): %s", d.Id(), err)
	}

	if _, err := waitProvisionedProductReady(ctx, conn, d.Id(), d.Get("accept_language").(string), d.Timeout(schema.TimeoutUpdate)); err != nil {
		if failureErr, ok := errs.As[*provisionedProductFailureError](err); ok {
			log.Printf("[WARN] Service Catalog Provisioned Product (%s) update failed with status %s, refreshing state", d.Id(), failureErr.Status)
			refreshDiags := resourceProvisionedProductRead(ctx, d, meta)
			if refreshDiags.HasError() {
				// If refresh fails, return both errors
				return append(refreshDiags, sdkdiag.AppendErrorf(diags, "waiting for Service Catalog Provisioned Product (%s) update: %s", d.Id(), err)...)
			}

			if d.HasChange("provisioning_parameters") {
				// If parameters were changed, rollback to previous values.
				//
				// The read APIs used to refresh state above do not return parameter values, and therefore
				// will not reflect that the planned updates did not take effect. Explicitly rolling back
				// ensures the planned parameter changes are attempted again on a subsequent apply.
				oldParams, _ := d.GetChange("provisioning_parameters")
				d.Set("provisioning_parameters", oldParams)
			}
		}

		return sdkdiag.AppendErrorf(diags, "waiting for Service Catalog Provisioned Product (%s) update: %s", d.Id(), err)
	}

	return append(diags, resourceProvisionedProductRead(ctx, d, meta)...)
}
