package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceProvisioningArtifactsRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ServiceCatalogClient(ctx)

	productID := d.Get("product_id").(string)
	input := &servicecatalog.ListProvisioningArtifactsInput{
		AcceptLanguage: aws.String(d.Get("accept_language").(string)),
		ProductId:      aws.String(productID),
	}

	output, err := conn.ListProvisioningArtifacts(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "listing Service Catalog Provisioning Artifacts: %s", err)
	}

	d.SetId(productID)
	if err := d.Set("provisioning_artifact_details", flattenProvisioningArtifactDetails(output.ProvisioningArtifactDetails)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting provisioning_artifact_details: %s", err)
	}

	return diags
}
