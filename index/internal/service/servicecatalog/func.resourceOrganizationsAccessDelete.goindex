package github.com/hashicorp/terraform-provider-aws/internal/service/servicecatalog
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	awstypes "github.com/aws/aws-sdk-go-v2/service/servicecatalog/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceOrganizationsAccessDelete(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ServiceCatalogClient(ctx)

	// During create, if enabled = "true", then Enable Access and vice versa
	// During delete, the opposite

	if _, ok := d.GetOk(names.AttrEnabled); !ok {
		_, err := conn.EnableAWSOrganizationsAccess(ctx, &servicecatalog.EnableAWSOrganizationsAccessInput{})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "enabling Service Catalog AWS Organizations Access: %s", err)
		}

		return diags
	}

	_, err := conn.DisableAWSOrganizationsAccess(ctx, &servicecatalog.DisableAWSOrganizationsAccessInput{})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "disabling Service Catalog AWS Organizations Access: %s", err)
	}

	return diags
}
