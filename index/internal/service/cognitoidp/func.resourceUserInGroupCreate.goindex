package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserInGroupCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CognitoIDPClient(ctx)

	groupName := d.Get(names.AttrGroupName).(string)
	userPoolId := d.Get(names.AttrUserPoolID).(string)
	username := d.Get(names.AttrUsername).(string)
	idParts := []string{userPoolId, groupName, username}

	input := cognitoidentityprovider.AdminAddUserToGroupInput{
		GroupName:  aws.String(groupName),
		UserPoolId: aws.String(userPoolId),
		Username:   aws.String(username),
	}

	_, err := conn.AdminAddUserToGroup(ctx, &input)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cognito Group User: %s", err)
	}

	id, err := flex.FlattenResourceId(idParts, userInGroupIDPartCount, false)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Cognito Group User: %s", err)
	}
	d.SetId(id)

	return append(diags, resourceUserInGroupRead(ctx, d, meta)...)
}
