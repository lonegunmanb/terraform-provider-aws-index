package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceResourceServerRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CognitoIDPClient(ctx)

	userPoolID, identifier, err := resourceServerParseResourceID(d.Id())
	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	resourceServer, err := findResourceServerByTwoPartKey(ctx, conn, userPoolID, identifier)

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Cognito Resource Server %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Cognito Resource Server (%s): %s", d.Id(), err)
	}

	identifier = aws.ToString(resourceServer.Identifier)
	d.Set(names.AttrIdentifier, identifier)
	d.Set(names.AttrName, resourceServer.Name)
	scopes := flattenResourceServerScopeTypes(resourceServer.Scopes)
	if err := d.Set(names.AttrScope, scopes); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting scope: %s", err)
	}
	d.Set("scope_identifiers", tfslices.ApplyToAll(scopes, func(tfMap map[string]any) string {
		return identifier + "/" + tfMap["scope_name"].(string)
	}))
	d.Set(names.AttrUserPoolID, resourceServer.UserPoolId)

	return diags
}
