package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserPoolSchemaHash(v any) int {
	var buf bytes.Buffer
	m, ok := v.(map[string]any)
	if !ok {
		return 0
	}

	fmt.Fprintf(&buf, "%s-", m[names.AttrName].(string))
	fmt.Fprintf(&buf, "%s-", m["attribute_data_type"].(string))
	fmt.Fprintf(&buf, "%t-", m["developer_only_attribute"].(bool))
	fmt.Fprintf(&buf, "%t-", m["mutable"].(bool))
	fmt.Fprintf(&buf, "%t-", m["required"].(bool))

	if v, ok := m["string_attribute_constraints"]; ok {
		data := v.([]any)

		if len(data) > 0 {
			buf.WriteString("string_attribute_constraints-")
			m, _ := data[0].(map[string]any)
			if ok {
				if l, ok := m["min_length"]; ok && l.(string) != "" {
					fmt.Fprintf(&buf, "%s-", l.(string))
				}

				if l, ok := m["max_length"]; ok && l.(string) != "" {
					fmt.Fprintf(&buf, "%s-", l.(string))
				}
			}
		}
	}

	if v, ok := m["number_attribute_constraints"]; ok {
		data := v.([]any)

		if len(data) > 0 {
			buf.WriteString("number_attribute_constraints-")
			m, _ := data[0].(map[string]any)
			if ok {
				if l, ok := m["min_value"]; ok && l.(string) != "" {
					fmt.Fprintf(&buf, "%s-", l.(string))
				}

				if l, ok := m["max_value"]; ok && l.(string) != "" {
					fmt.Fprintf(&buf, "%s-", l.(string))
				}
			}
		}
	}
	return create.StringHashcode(buf.String())
}
