package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (d *userGroupsDataSource) Read(ctx context.Context, request datasource.ReadRequest, response *datasource.ReadResponse) {
	var data userGroupsDataSourceModel
	response.Diagnostics.Append(request.Config.Get(ctx, &data)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := d.Meta().CognitoIDPClient(ctx)

	groups, err := findGroupsByUserPoolID(ctx, conn, data.UserPoolID.ValueString())

	if err != nil {
		response.Diagnostics.AddError("reading Cognito User Groups", err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, groups, &data.Groups)...)
	if response.Diagnostics.HasError() {
		return
	}

	data.ID = types.StringValue(data.UserPoolID.ValueString())

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}
