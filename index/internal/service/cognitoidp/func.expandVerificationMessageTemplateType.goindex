package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVerificationMessageTemplateType(tfMap map[string]any) *awstypes.VerificationMessageTemplateType {
	apiObject := &awstypes.VerificationMessageTemplateType{}

	if v, ok := tfMap["default_email_option"]; ok && v.(string) != "" {
		apiObject.DefaultEmailOption = awstypes.DefaultEmailOptionType(v.(string))
	}

	if v, ok := tfMap["email_message"]; ok && v.(string) != "" {
		apiObject.EmailMessage = aws.String(v.(string))
	}

	if v, ok := tfMap["email_message_by_link"]; ok && v.(string) != "" {
		apiObject.EmailMessageByLink = aws.String(v.(string))
	}

	if v, ok := tfMap["email_subject"]; ok && v.(string) != "" {
		apiObject.EmailSubject = aws.String(v.(string))
	}

	if v, ok := tfMap["email_subject_by_link"]; ok && v.(string) != "" {
		apiObject.EmailSubjectByLink = aws.String(v.(string))
	}

	if v, ok := tfMap["sms_message"]; ok && v.(string) != "" {
		apiObject.SmsMessage = aws.String(v.(string))
	}

	return apiObject
}
