package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLambdaConfigType(tfMap map[string]any) *awstypes.LambdaConfigType {
	apiObject := &awstypes.LambdaConfigType{}

	if v, ok := tfMap["create_auth_challenge"]; ok && v.(string) != "" {
		apiObject.CreateAuthChallenge = aws.String(v.(string))
	}

	if v, ok := tfMap["custom_email_sender"].([]any); ok && len(v) > 0 {
		if v, ok := v[0].(map[string]any); ok && v != nil {
			apiObject.CustomEmailSender = expandCustomEmailLambdaVersionConfigType(v)
		}
	}

	if v, ok := tfMap["custom_message"]; ok && v.(string) != "" {
		apiObject.CustomMessage = aws.String(v.(string))
	}

	if v, ok := tfMap["custom_sms_sender"].([]any); ok && len(v) > 0 {
		if v, ok := v[0].(map[string]any); ok && v != nil {
			apiObject.CustomSMSSender = expandCustomSMSLambdaVersionConfigType(v)
		}
	}

	if v, ok := tfMap["define_auth_challenge"]; ok && v.(string) != "" {
		apiObject.DefineAuthChallenge = aws.String(v.(string))
	}

	if v, ok := tfMap[names.AttrKMSKeyID]; ok && v.(string) != "" {
		apiObject.KMSKeyID = aws.String(v.(string))
	}

	if v, ok := tfMap["post_authentication"]; ok && v.(string) != "" {
		apiObject.PostAuthentication = aws.String(v.(string))
	}

	if v, ok := tfMap["post_confirmation"]; ok && v.(string) != "" {
		apiObject.PostConfirmation = aws.String(v.(string))
	}

	if v, ok := tfMap["pre_authentication"]; ok && v.(string) != "" {
		apiObject.PreAuthentication = aws.String(v.(string))
	}

	if v, ok := tfMap["pre_sign_up"]; ok && v.(string) != "" {
		apiObject.PreSignUp = aws.String(v.(string))
	}

	if v, ok := tfMap["pre_token_generation"]; ok && v.(string) != "" {
		apiObject.PreTokenGeneration = aws.String(v.(string))
	}

	if v, ok := tfMap["pre_token_generation_config"].([]any); ok && len(v) > 0 {
		if v, ok := v[0].(map[string]any); ok && v != nil {
			apiObject.PreTokenGenerationConfig = expandPreTokenGenerationVersionConfigType(v)
		}
	}

	if v, ok := tfMap["user_migration"]; ok && v.(string) != "" {
		apiObject.UserMigration = aws.String(v.(string))
	}

	if v, ok := tfMap["verify_auth_challenge_response"]; ok && v.(string) != "" {
		apiObject.VerifyAuthChallengeResponse = aws.String(v.(string))
	}

	return apiObject
}
