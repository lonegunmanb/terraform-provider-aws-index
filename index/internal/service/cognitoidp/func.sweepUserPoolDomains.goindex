package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepUserPoolDomains(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.CognitoIDPClient(ctx)
	input := cognitoidentityprovider.ListUserPoolsInput{
		MaxResults: aws.Int32(50),
	}
	sweepResources := make([]sweep.Sweepable, 0)

	pages := cognitoidentityprovider.NewListUserPoolsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.UserPools {
			userPoolID := aws.ToString(v.Id)
			userPool, err := findUserPoolByID(ctx, conn, userPoolID)

			if err != nil {
				continue
			}

			if domain := aws.ToString(userPool.Domain); domain != "" {
				r := resourceUserPoolDomain()
				d := r.Data(nil)
				d.SetId(domain)
				d.Set(names.AttrUserPoolID, userPoolID)

				sweepResources = append(sweepResources, sweep.NewSweepResource(r, d, client))
			}
		}
	}

	return sweepResources, nil
}
