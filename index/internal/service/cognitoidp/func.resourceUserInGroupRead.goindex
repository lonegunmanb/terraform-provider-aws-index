package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceUserInGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CognitoIDPClient(ctx)

	parts, err := flex.ExpandResourceId(d.Id(), userInGroupIDPartCount, false)
	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Cognito Group User (%s): %s", d.Id(), err)
	}
	userPoolId := parts[0]
	groupName := parts[1]
	username := parts[2]

	err = findGroupUserByThreePartKey(ctx, conn, groupName, userPoolId, username)
	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Cognito Group User %s not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Cognito Group User (%s): %s", d.Id(), err)
	}

	// Set attributes explicitly to support import from ID
	d.Set(names.AttrGroupName, groupName)
	d.Set(names.AttrUserPoolID, userPoolId)
	d.Set(names.AttrUsername, username)

	return diags
}
