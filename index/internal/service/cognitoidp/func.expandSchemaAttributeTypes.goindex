package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"bytes"
	"context"
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandSchemaAttributeTypes(tfList []any) []awstypes.SchemaAttributeType {
	apiObjects := make([]awstypes.SchemaAttributeType, len(tfList))

	for i, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)
		apiObject := awstypes.SchemaAttributeType{}

		if v, ok := tfMap["attribute_data_type"]; ok {
			apiObject.AttributeDataType = awstypes.AttributeDataType(v.(string))
		}

		if v, ok := tfMap["developer_only_attribute"]; ok {
			apiObject.DeveloperOnlyAttribute = aws.Bool(v.(bool))
		}

		if v, ok := tfMap["mutable"]; ok {
			apiObject.Mutable = aws.Bool(v.(bool))
		}

		if v, ok := tfMap[names.AttrName]; ok {
			apiObject.Name = aws.String(v.(string))
		}

		if v, ok := tfMap["number_attribute_constraints"]; ok {
			if tfList := v.([]any); len(tfList) > 0 {
				if tfMap, ok := tfList[0].(map[string]any); ok {
					nact := &awstypes.NumberAttributeConstraintsType{}

					if v, ok := tfMap["max_value"]; ok && v.(string) != "" {
						nact.MaxValue = aws.String(v.(string))
					}

					if v, ok := tfMap["min_value"]; ok && v.(string) != "" {
						nact.MinValue = aws.String(v.(string))
					}

					apiObject.NumberAttributeConstraints = nact
				}
			}
		}

		if v, ok := tfMap["required"]; ok {
			apiObject.Required = aws.Bool(v.(bool))
		}

		if v, ok := tfMap["string_attribute_constraints"]; ok {
			if tfList := v.([]any); len(tfList) > 0 {
				if tfMap, ok := tfList[0].(map[string]any); ok {
					sact := &awstypes.StringAttributeConstraintsType{}

					if v, ok := tfMap["max_length"]; ok && v.(string) != "" {
						sact.MaxLength = aws.String(v.(string))
					}

					if v, ok := tfMap["min_length"]; ok && v.(string) != "" {
						sact.MinLength = aws.String(v.(string))
					}

					if sact.MinLength == nil && sact.MaxLength == nil {
						apiObject.StringAttributeConstraints = nil
					} else {
						apiObject.StringAttributeConstraints = sact
					}
				}
			}
		}

		apiObjects[i] = apiObject
	}

	return apiObjects
}
