package github.com/hashicorp/terraform-provider-aws/internal/service/cognitoidp
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceUserPoolClientRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CognitoIDPClient(ctx)

	clientID := d.Get(names.AttrClientID).(string)
	userPoolClient, err := findUserPoolClientByTwoPartKey(ctx, conn, d.Get(names.AttrUserPoolID).(string), clientID)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Cognito User Pool Client (%s): %s", clientID, err)
	}

	d.SetId(clientID)
	d.Set("access_token_validity", userPoolClient.AccessTokenValidity)
	d.Set("allowed_oauth_flows", userPoolClient.AllowedOAuthFlows)
	d.Set("allowed_oauth_flows_user_pool_client", userPoolClient.AllowedOAuthFlowsUserPoolClient)
	d.Set("allowed_oauth_scopes", userPoolClient.AllowedOAuthScopes)
	if err := d.Set("analytics_configuration", flattenUserPoolClientAnalyticsConfig(userPoolClient.AnalyticsConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting analytics_configuration: %s", err)
	}
	d.Set("callback_urls", userPoolClient.CallbackURLs)
	d.Set(names.AttrClientSecret, userPoolClient.ClientSecret)
	d.Set("default_redirect_uri", userPoolClient.DefaultRedirectURI)
	d.Set("enable_propagate_additional_user_context_data", userPoolClient.EnablePropagateAdditionalUserContextData)
	d.Set("enable_token_revocation", userPoolClient.EnableTokenRevocation)
	d.Set("explicit_auth_flows", userPoolClient.ExplicitAuthFlows)
	d.Set("id_token_validity", userPoolClient.IdTokenValidity)
	d.Set("logout_urls", userPoolClient.LogoutURLs)
	d.Set(names.AttrName, userPoolClient.ClientName)
	d.Set("prevent_user_existence_errors", userPoolClient.PreventUserExistenceErrors)
	d.Set("read_attributes", userPoolClient.ReadAttributes)
	if err := d.Set("refresh_token_rotation", flattenUserPoolClientRefreshTokenRotation(userPoolClient.RefreshTokenRotation)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting refresh_token_rotation: %s", err)
	}
	d.Set("refresh_token_validity", userPoolClient.RefreshTokenValidity)
	d.Set("supported_identity_providers", userPoolClient.SupportedIdentityProviders)
	if err := d.Set("token_validity_units", flattenUserPoolClientTokenValidityUnitsType(userPoolClient.TokenValidityUnits)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting token_validity_units: %s", err)
	}

	d.Set(names.AttrUserPoolID, userPoolClient.UserPoolId)
	d.Set("write_attributes", userPoolClient.WriteAttributes)

	return diags
}
