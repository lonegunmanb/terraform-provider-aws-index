package github.com/hashicorp/terraform-provider-aws/internal/service/ram
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ram"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfiam "github.com/hashicorp/terraform-provider-aws/internal/service/iam"
	tforganizations "github.com/hashicorp/terraform-provider-aws/internal/service/organizations"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func findSharingWithOrganization(ctx context.Context, awsClient *conns.AWSClient) error {
	// See https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs.
	// Check for IAM role and Organizations trusted access.
	_, err := tfiam.FindRoleByName(ctx, awsClient.IAMClient(ctx), sharingWithOrganizationRoleName)

	if err != nil {
		return fmt.Errorf("reading IAM Role (%s): %w", sharingWithOrganizationRoleName, err)
	}

	servicePrincipalNames, err := tforganizations.FindEnabledServicePrincipalNames(ctx, awsClient.OrganizationsClient(ctx))

	if err != nil {
		return fmt.Errorf("reading Organization service principals: %w", err)
	}

	if !slices.Contains(servicePrincipalNames, servicePrincipalName) {
		return &retry.NotFoundError{
			Message: fmt.Sprintf("Organization service principal (%s) not enabled", servicePrincipalName),
		}
	}

	return nil
}
