package github.com/hashicorp/terraform-provider-aws/internal/service/ram
import (
	"context"
	"errors"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ram"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ram/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findMaybeResourceShareInvitationRetry(ctx context.Context, conn *ram.Client, input *ram.GetResourceShareInvitationsInput, filter tfslices.Predicate[*awstypes.ResourceShareInvitation]) (option.Option[awstypes.ResourceShareInvitation], error) {
	// Retry for RAM resource share invitation eventual consistency.
	errNotFound := errors.New("not found")
	var output option.Option[awstypes.ResourceShareInvitation]
	err := tfresource.Retry(ctx, resourceShareInvitationPropagationTimeout, func(ctx context.Context) *tfresource.RetryError {
		var err error
		output, err = findMaybeResourceShareInvitation(ctx, conn, input, filter)

		if err != nil {
			return tfresource.NonRetryableError(err)
		}

		if output.IsNone() {
			return tfresource.RetryableError(errNotFound)
		}

		return nil
	})

	if errors.Is(err, errNotFound) {
		output, err = option.None[awstypes.ResourceShareInvitation](), nil
	}

	return output, err
}
