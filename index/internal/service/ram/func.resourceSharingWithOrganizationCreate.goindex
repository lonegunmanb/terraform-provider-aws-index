package github.com/hashicorp/terraform-provider-aws/internal/service/ram
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ram"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfiam "github.com/hashicorp/terraform-provider-aws/internal/service/iam"
	tforganizations "github.com/hashicorp/terraform-provider-aws/internal/service/organizations"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceSharingWithOrganizationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).RAMClient(ctx)

	output, err := conn.EnableSharingWithAwsOrganization(ctx, &ram.EnableSharingWithAwsOrganizationInput{})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "enabling RAM Sharing With Organization: %s", err)
	}

	if !aws.ToBool(output.ReturnValue) {
		return sdkdiag.AppendErrorf(diags, "RAM Sharing With Organization failed")
	}

	d.SetId(meta.(*conns.AWSClient).AccountID(ctx))

	return append(diags, resourceSharingWithOrganizationRead(ctx, d, meta)...)
}
