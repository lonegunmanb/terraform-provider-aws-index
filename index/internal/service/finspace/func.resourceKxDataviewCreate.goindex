package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceKxDataviewCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FinSpaceClient(ctx)

	environmentID := d.Get("environment_id").(string)
	databaseName := d.Get(names.AttrDatabaseName).(string)
	name := d.Get(names.AttrName).(string)

	idParts := []string{
		environmentID,
		databaseName,
		name,
	}
	rId, err := flex.FlattenResourceId(idParts, kxDataviewIdPartCount, false)
	if err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionFlatteningResourceId, ResNameKxDataview, d.Get(names.AttrName).(string), err)
	}
	d.SetId(rId)

	in := &finspace.CreateKxDataviewInput{
		DatabaseName:  aws.String(databaseName),
		DataviewName:  aws.String(name),
		EnvironmentId: aws.String(environmentID),
		AutoUpdate:    d.Get("auto_update").(bool),
		AzMode:        types.KxAzMode(d.Get("az_mode").(string)),
		ClientToken:   aws.String(id.UniqueId()),
		Tags:          getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		in.Description = aws.String(v.(string))
	}

	if v, ok := d.GetOk("changeset_id"); ok {
		in.ChangesetId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("availability_zone_id"); ok {
		in.AvailabilityZoneId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("segment_configurations"); ok && len(v.([]any)) > 0 {
		in.SegmentConfigurations = expandSegmentConfigurations(v.([]any))
	}

	if v, ok := d.GetOk("read_write"); ok {
		in.ReadWrite = v.(bool)
	}

	out, err := conn.CreateKxDataview(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionCreating, ResNameKxDataview, d.Get(names.AttrName).(string), err)
	}
	if out == nil || out.DataviewName == nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionCreating, ResNameKxDataview, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	if _, err := waitKxDataviewCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionWaitingForCreation, ResNameKxDataview, d.Get(names.AttrName).(string), err)
	}

	return append(diags, resourceKxDataviewRead(ctx, d, meta)...)
}
