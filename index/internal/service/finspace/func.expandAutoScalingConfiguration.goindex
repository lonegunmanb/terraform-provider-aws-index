package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAutoScalingConfiguration(tfList []any) *types.AutoScalingConfiguration {
	if len(tfList) == 0 || tfList[0] == nil {
		return nil
	}

	tfMap := tfList[0].(map[string]any)

	a := &types.AutoScalingConfiguration{}

	if v, ok := tfMap["auto_scaling_metric"].(string); ok && v != "" {
		a.AutoScalingMetric = types.AutoScalingMetric(v)
	}

	if v, ok := tfMap["min_node_count"].(int); ok && v != 0 {
		a.MinNodeCount = aws.Int32(int32(v))
	}

	if v, ok := tfMap["max_node_count"].(int); ok && v != 0 {
		a.MaxNodeCount = aws.Int32(int32(v))
	}

	if v, ok := tfMap["metric_target"].(float64); ok && v != 0 {
		a.MetricTarget = aws.Float64(v)
	}

	if v, ok := tfMap["scale_in_cooldown_seconds"].(float64); ok && v != 0 {
		a.ScaleInCooldownSeconds = aws.Float64(v)
	}

	if v, ok := tfMap["scale_out_cooldown_seconds"].(float64); ok && v != 0 {
		a.ScaleOutCooldownSeconds = aws.Float64(v)
	}

	return a
}
