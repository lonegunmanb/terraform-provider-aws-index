package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandAttachmentNetworkACLConfiguration(tfMap map[string]any) *types.NetworkACLEntry {
	if tfMap == nil {
		return nil
	}

	a := &types.NetworkACLEntry{}
	if v, ok := tfMap["rule_number"].(int); ok && v > 0 {
		a.RuleNumber = aws.Int32(int32(v))
	}
	if v, ok := tfMap[names.AttrProtocol].(string); ok && v != "" {
		a.Protocol = &v
	}
	if v, ok := tfMap["rule_action"].(string); ok && v != "" {
		a.RuleAction = types.RuleAction(v)
	}
	if v, ok := tfMap[names.AttrCIDRBlock].(string); ok && v != "" {
		a.CidrBlock = &v
	}
	if v, ok := tfMap["port_range"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		a.PortRange = expandPortRange(v.([]any))
	}
	if v, ok := tfMap["icmp_type_code"]; ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		a.IcmpTypeCode = expandIcmpTypeCode(v.([]any))
	}

	return a
}
