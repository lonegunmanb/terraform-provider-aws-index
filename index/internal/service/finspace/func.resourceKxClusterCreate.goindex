package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceKxClusterCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FinSpaceClient(ctx)

	environmentId := d.Get("environment_id").(string)
	clusterName := d.Get(names.AttrName).(string)
	idParts := []string{
		environmentId,
		clusterName,
	}
	rID, err := flex.FlattenResourceId(idParts, kxClusterIDPartCount, false)
	if err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionFlatteningResourceId, ResNameKxCluster, d.Get(names.AttrName).(string), err)
	}
	d.SetId(rID)

	in := &finspace.CreateKxClusterInput{
		EnvironmentId: aws.String(environmentId),
		ClusterName:   aws.String(clusterName),
		ClusterType:   types.KxClusterType(d.Get(names.AttrType).(string)),
		ReleaseLabel:  aws.String(d.Get("release_label").(string)),
		AzMode:        types.KxAzMode(d.Get("az_mode").(string)),
		ClientToken:   aws.String(id.UniqueId()),
		Tags:          getTagsIn(ctx),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok {
		in.ClusterDescription = aws.String(v.(string))
	}

	if v, ok := d.GetOk("initialization_script"); ok {
		in.InitializationScript = aws.String(v.(string))
	}

	if v, ok := d.GetOk("execution_role"); ok {
		in.ExecutionRole = aws.String(v.(string))
	}

	if v, ok := d.GetOk("availability_zone_id"); ok {
		in.AvailabilityZoneId = aws.String(v.(string))
	}

	if v, ok := d.GetOk("capacity_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.CapacityConfiguration = expandCapacityConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("command_line_arguments"); ok && len(v.(map[string]any)) > 0 {
		in.CommandLineArguments = expandCommandLineArguments(v.(map[string]any))
	}

	if v, ok := d.GetOk(names.AttrVPCConfiguration); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.VpcConfiguration = expandVPCConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("auto_scaling_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.AutoScalingConfiguration = expandAutoScalingConfiguration(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrDatabase); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.Databases = expandDatabases(v.([]any))
	}

	if v, ok := d.GetOk("savedown_storage_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.SavedownStorageConfiguration = expandSavedownStorageConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("cache_storage_configurations"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.CacheStorageConfigurations = expandCacheStorageConfigurations(v.([]any))
	}

	if v, ok := d.GetOk("code"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.Code = expandCode(v.([]any))
	}

	if v, ok := d.GetOk("scaling_group_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.ScalingGroupConfiguration = expandScalingGroupConfiguration(v.([]any))
	}

	if v, ok := d.GetOk("tickerplant_log_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		in.TickerplantLogConfiguration = expandTickerplantLogConfiguration(v.([]any))
	}

	out, err := conn.CreateKxCluster(ctx, in)
	if err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionCreating, ResNameKxCluster, d.Get(names.AttrName).(string), err)
	}

	if out == nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionCreating, ResNameKxCluster, d.Get(names.AttrName).(string), errors.New("empty output"))
	}

	if _, err := waitKxClusterCreated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutCreate)); err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionWaitingForCreation, ResNameKxCluster, d.Id(), err)
	}

	return append(diags, resourceKxClusterRead(ctx, d, meta)...)
}
