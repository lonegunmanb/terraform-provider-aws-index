package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceKxEnvironmentUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FinSpaceClient(ctx)

	update := false

	in := &finspace.UpdateKxEnvironmentInput{
		EnvironmentId: aws.String(d.Id()),
		Name:          aws.String(d.Get(names.AttrName).(string)),
	}

	if d.HasChanges(names.AttrDescription) {
		in.Description = aws.String(d.Get(names.AttrDescription).(string))
	}

	if d.HasChanges(names.AttrName) || d.HasChanges(names.AttrDescription) {
		update = true
		log.Printf("[DEBUG] Updating FinSpace KxEnvironment (%s): %#v", d.Id(), in)
		_, err := conn.UpdateKxEnvironment(ctx, in)
		if err != nil {
			return create.AppendDiagError(diags, names.FinSpace, create.ErrActionUpdating, ResNameKxEnvironment, d.Id(), err)
		}
	}

	if d.HasChanges("transit_gateway_configuration") || d.HasChanges("custom_dns_configuration") {
		update = true
		if err := updateKxEnvironmentNetwork(ctx, d, conn); err != nil {
			return create.AppendDiagError(diags, names.FinSpace, create.ErrActionUpdating, ResNameKxEnvironment, d.Id(), err)
		}
	}

	if !update {
		return diags
	}
	return append(diags, resourceKxEnvironmentRead(ctx, d, meta)...)
}
