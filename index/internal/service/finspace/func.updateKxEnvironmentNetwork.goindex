package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateKxEnvironmentNetwork(ctx context.Context, d *schema.ResourceData, client *finspace.Client) error {
	transitGatewayConfigIn := &finspace.UpdateKxEnvironmentNetworkInput{
		EnvironmentId: aws.String(d.Id()),
		ClientToken:   aws.String(id.UniqueId()),
	}

	customDnsConfigIn := &finspace.UpdateKxEnvironmentNetworkInput{
		EnvironmentId: aws.String(d.Id()),
		ClientToken:   aws.String(id.UniqueId()),
	}

	updateTransitGatewayConfig := false
	updateCustomDnsConfig := false

	if v, ok := d.GetOk("transit_gateway_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil &&
		d.HasChanges("transit_gateway_configuration") {
		transitGatewayConfigIn.TransitGatewayConfiguration = expandTransitGatewayConfiguration(v.([]any))
		updateTransitGatewayConfig = true
	}

	if v, ok := d.GetOk("custom_dns_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil &&
		d.HasChanges("custom_dns_configuration") {
		customDnsConfigIn.CustomDNSConfiguration = expandCustomDNSConfigurations(v.([]any))
		updateCustomDnsConfig = true
	}

	if updateTransitGatewayConfig {
		if _, err := client.UpdateKxEnvironmentNetwork(ctx, transitGatewayConfigIn); err != nil {
			return err
		}

		if _, err := waitTransitGatewayConfigurationUpdated(ctx, client, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return err
		}
	}

	if updateCustomDnsConfig {
		if _, err := client.UpdateKxEnvironmentNetwork(ctx, customDnsConfigIn); err != nil {
			return err
		}

		if _, err := waitCustomDNSConfigurationUpdated(ctx, client, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
			return err
		}
	}

	return nil
}
