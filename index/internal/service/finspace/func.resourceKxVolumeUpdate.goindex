package github.com/hashicorp/terraform-provider-aws/internal/service/finspace
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/finspace/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceKxVolumeUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).FinSpaceClient(ctx)

	updateVolume := false

	in := &finspace.UpdateKxVolumeInput{
		EnvironmentId: aws.String(d.Get("environment_id").(string)),
		VolumeName:    aws.String(d.Get(names.AttrName).(string)),
	}

	if v, ok := d.GetOk(names.AttrDescription); ok && d.HasChanges(names.AttrDescription) {
		in.Description = aws.String(v.(string))
		updateVolume = true
	}

	if v, ok := d.GetOk("nas1_configuration"); ok && len(v.([]any)) > 0 && d.HasChanges("nas1_configuration") {
		in.Nas1Configuration = expandNas1Configuration(v.([]any))
		updateVolume = true
	}

	if !updateVolume {
		return diags
	}

	log.Printf("[DEBUG] Updating FinSpace KxVolume (%s): %#v", d.Id(), in)

	if _, err := conn.UpdateKxVolume(ctx, in); err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionUpdating, ResNameKxVolume, d.Id(), err)
	}
	if _, err := waitKxVolumeUpdated(ctx, conn, d.Id(), d.Timeout(schema.TimeoutUpdate)); err != nil {
		return create.AppendDiagError(diags, names.FinSpace, create.ErrActionUpdating, ResNameKxVolume, d.Id(), err)
	}

	return append(diags, resourceKxVolumeRead(ctx, d, meta)...)
}
