package github.com/hashicorp/terraform-provider-aws/internal/service/elb
import (
	"context"
	"fmt"
	"log"
	"slices"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)
func resourceAttachmentCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBClient(ctx)

	lbName := d.Get("elb").(string)
	instance := d.Get("instance").(string)
	input := &elasticloadbalancing.RegisterInstancesWithLoadBalancerInput{
		Instances:        expandInstances([]any{instance}),
		LoadBalancerName: aws.String(lbName),
	}

	const (
		timeout = 10 * time.Minute
	)
	_, err := tfresource.RetryWhenAWSErrCodeEquals(ctx, timeout, func() (any, error) {
		return conn.RegisterInstancesWithLoadBalancer(ctx, input)
	}, errCodeInvalidTarget)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating ELB Classic Attachment (%s/%s): %s", lbName, instance, err)
	}

	//lintignore:R016 // Allow legacy unstable ID usage in managed resource
	d.SetId(id.PrefixedUniqueId(fmt.Sprintf("%s-", lbName)))

	return diags
}
