package github.com/hashicorp/terraform-provider-aws/internal/service/elb
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
)
func expandRemoveProxyProtocolPolicyInputs(policyName string, ports []string, backendPolicies map[int32][]string) []*elasticloadbalancing.SetLoadBalancerPoliciesForBackendServerInput {
	apiObjects := make([]*elasticloadbalancing.SetLoadBalancerPoliciesForBackendServerInput, 0, len(ports))

	for _, p := range ports {
		port := flex.StringValueToInt32Value(p)

		newPolicies := []string{}
		curPolicies, found := backendPolicies[port]
		if !found {
			// No policy for this instance port found, just skip it.
			continue
		}

		for _, p := range curPolicies {
			if p == policyName {
				// remove the policy
				continue
			}
			newPolicies = append(newPolicies, p)
		}

		apiObjects = append(apiObjects, &elasticloadbalancing.SetLoadBalancerPoliciesForBackendServerInput{
			InstancePort: aws.Int32(port),
			PolicyNames:  newPolicies,
		})
	}

	return apiObjects
}
