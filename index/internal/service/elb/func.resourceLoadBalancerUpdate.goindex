package github.com/hashicorp/terraform-provider-aws/internal/service/elb
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"bytes"
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceLoadBalancerUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ELBClient(ctx)

	if d.HasChange("listener") {
		o, n := d.GetChange("listener")
		os, ns := o.(*schema.Set), n.(*schema.Set)
		del, _ := expandListeners(os.Difference(ns).List())
		add, err := expandListeners(ns.Difference(os).List())

		if err != nil {
			return sdkdiag.AppendFromErr(diags, err)
		}

		if len(del) > 0 {
			ports := make([]int32, 0, len(del))
			for _, listener := range del {
				ports = append(ports, listener.LoadBalancerPort)
			}

			input := &elasticloadbalancing.DeleteLoadBalancerListenersInput{
				LoadBalancerName:  aws.String(d.Id()),
				LoadBalancerPorts: ports,
			}

			_, err := conn.DeleteLoadBalancerListeners(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deleting ELB Classic Load Balancer (%s) listeners: %s", d.Id(), err)
			}
		}

		if len(add) > 0 {
			input := &elasticloadbalancing.CreateLoadBalancerListenersInput{
				Listeners:        add,
				LoadBalancerName: aws.String(d.Id()),
			}

			// Occasionally AWS will error with a 'duplicate listener', without any
			// other listeners on the ELB. Retry here to eliminate that.
			_, err := tfresource.RetryWhen(ctx, d.Timeout(schema.TimeoutUpdate),
				func() (any, error) {
					return conn.CreateLoadBalancerListeners(ctx, input)
				},
				func(err error) (bool, error) {
					if errs.IsA[*awstypes.DuplicateListenerException](err) {
						return true, err
					}
					if errs.IsAErrorMessageContains[*awstypes.CertificateNotFoundException](err, "Server Certificate not found for the key: arn") {
						return true, err
					}

					return false, err
				})

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "creating ELB Classic Load Balancer (%s) listeners: %s", d.Id(), err)
			}
		}
	}

	// If we currently have instances, or did have instances,
	// we want to figure out what to add and remove from the load
	// balancer
	if d.HasChange("instances") {
		o, n := d.GetChange("instances")
		os, ns := o.(*schema.Set), n.(*schema.Set)
		add, del := expandInstances(ns.Difference(os).List()), expandInstances(os.Difference(ns).List())

		if len(add) > 0 {
			input := &elasticloadbalancing.RegisterInstancesWithLoadBalancerInput{
				Instances:        add,
				LoadBalancerName: aws.String(d.Id()),
			}

			_, err := conn.RegisterInstancesWithLoadBalancer(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "registering ELB Classic Load Balancer (%s) instances: %s", d.Id(), err)
			}
		}

		if len(del) > 0 {
			input := &elasticloadbalancing.DeregisterInstancesFromLoadBalancerInput{
				Instances:        del,
				LoadBalancerName: aws.String(d.Id()),
			}

			_, err := conn.DeregisterInstancesFromLoadBalancer(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "deregistering ELB Classic Load Balancer (%s) instances: %s", d.Id(), err)
			}
		}
	}

	if d.HasChanges("cross_zone_load_balancing", "idle_timeout", "access_logs", "desync_mitigation_mode") {
		input := &elasticloadbalancing.ModifyLoadBalancerAttributesInput{
			LoadBalancerAttributes: &awstypes.LoadBalancerAttributes{
				AdditionalAttributes: []awstypes.AdditionalAttribute{
					{
						Key:   aws.String(loadBalancerAttributeDesyncMitigationMode),
						Value: aws.String(d.Get("desync_mitigation_mode").(string)),
					},
				},
				CrossZoneLoadBalancing: &awstypes.CrossZoneLoadBalancing{
					Enabled: d.Get("cross_zone_load_balancing").(bool),
				},
				ConnectionSettings: &awstypes.ConnectionSettings{
					IdleTimeout: aws.Int32(int32(d.Get("idle_timeout").(int))),
				},
			},
			LoadBalancerName: aws.String(d.Id()),
		}

		if v := d.Get("access_logs").([]any); len(v) == 1 {
			tfMap := v[0].(map[string]any)
			input.LoadBalancerAttributes.AccessLog = &awstypes.AccessLog{
				Enabled:        tfMap[names.AttrEnabled].(bool),
				EmitInterval:   aws.Int32(int32(tfMap[names.AttrInterval].(int))),
				S3BucketName:   aws.String(tfMap[names.AttrBucket].(string)),
				S3BucketPrefix: aws.String(tfMap[names.AttrBucketPrefix].(string)),
			}
		} else if len(v) == 0 {
			// disable access logs
			input.LoadBalancerAttributes.AccessLog = &awstypes.AccessLog{
				Enabled: false,
			}
		}

		_, err := conn.ModifyLoadBalancerAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying ELB Classic Load Balancer (%s) attributes: %s", d.Id(), err)
		}
	}

	// We have to do these changes separately from everything else since
	// they have some weird undocumented rules. You can't set the timeout
	// without having connection draining to true, so we set that to true,
	// set the timeout, then reset it to false if requested.
	if d.HasChanges("connection_draining", "connection_draining_timeout") {
		// We do timeout changes first since they require us to set draining
		// to true for a hot second.
		if d.HasChange("connection_draining_timeout") {
			input := &elasticloadbalancing.ModifyLoadBalancerAttributesInput{
				LoadBalancerAttributes: &awstypes.LoadBalancerAttributes{
					ConnectionDraining: &awstypes.ConnectionDraining{
						Enabled: true,
						Timeout: aws.Int32(int32(d.Get("connection_draining_timeout").(int))),
					},
				},
				LoadBalancerName: aws.String(d.Id()),
			}

			_, err := conn.ModifyLoadBalancerAttributes(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "modifying ELB Classic Load Balancer (%s) attributes: %s", d.Id(), err)
			}
		}

		// Then we always set connection draining even if there is no change.
		// This lets us reset to "false" if requested even with a timeout
		// change.
		input := &elasticloadbalancing.ModifyLoadBalancerAttributesInput{
			LoadBalancerAttributes: &awstypes.LoadBalancerAttributes{
				ConnectionDraining: &awstypes.ConnectionDraining{
					Enabled: d.Get("connection_draining").(bool),
				},
			},
			LoadBalancerName: aws.String(d.Id()),
		}

		_, err := conn.ModifyLoadBalancerAttributes(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "modifying ELB Classic Load Balancer (%s) attributes: %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrHealthCheck) {
		if v := d.Get(names.AttrHealthCheck).([]any); len(v) > 0 {
			tfMap := v[0].(map[string]any)
			input := &elasticloadbalancing.ConfigureHealthCheckInput{
				HealthCheck: &awstypes.HealthCheck{
					HealthyThreshold:   aws.Int32(int32(tfMap["healthy_threshold"].(int))),
					Interval:           aws.Int32(int32(tfMap[names.AttrInterval].(int))),
					Target:             aws.String(tfMap[names.AttrTarget].(string)),
					Timeout:            aws.Int32(int32(tfMap[names.AttrTimeout].(int))),
					UnhealthyThreshold: aws.Int32(int32(tfMap["unhealthy_threshold"].(int))),
				},
				LoadBalancerName: aws.String(d.Id()),
			}
			_, err := conn.ConfigureHealthCheck(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "configuring ELB Classic Load Balancer (%s) health check: %s", d.Id(), err)
			}
		}
	}

	if d.HasChange(names.AttrSecurityGroups) {
		input := &elasticloadbalancing.ApplySecurityGroupsToLoadBalancerInput{
			LoadBalancerName: aws.String(d.Id()),
			SecurityGroups:   flex.ExpandStringValueSet(d.Get(names.AttrSecurityGroups).(*schema.Set)),
		}

		_, err := conn.ApplySecurityGroupsToLoadBalancer(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "applying ELB Classic Load Balancer (%s) security groups: %s", d.Id(), err)
		}
	}

	if d.HasChange(names.AttrAvailabilityZones) {
		o, n := d.GetChange(names.AttrAvailabilityZones)
		os, ns := o.(*schema.Set), n.(*schema.Set)
		add, del := flex.ExpandStringValueSet(ns.Difference(os)), flex.ExpandStringValueSet(os.Difference(ns))

		if len(add) > 0 {
			input := &elasticloadbalancing.EnableAvailabilityZonesForLoadBalancerInput{
				AvailabilityZones: add,
				LoadBalancerName:  aws.String(d.Id()),
			}

			_, err := conn.EnableAvailabilityZonesForLoadBalancer(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "enabling ELB Classic Load Balancer (%s) Availability Zones: %s", d.Id(), err)
			}
		}

		if len(del) > 0 {
			input := &elasticloadbalancing.DisableAvailabilityZonesForLoadBalancerInput{
				AvailabilityZones: del,
				LoadBalancerName:  aws.String(d.Id()),
			}

			_, err := conn.DisableAvailabilityZonesForLoadBalancer(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "enabling ELB Classic Load Balancer (%s) Availability Zones: %s", d.Id(), err)
			}
		}
	}

	if d.HasChange(names.AttrSubnets) {
		o, n := d.GetChange(names.AttrSubnets)
		os, ns := o.(*schema.Set), n.(*schema.Set)
		add, del := flex.ExpandStringValueSet(ns.Difference(os)), flex.ExpandStringValueSet(os.Difference(ns))

		if len(del) > 0 {
			input := &elasticloadbalancing.DetachLoadBalancerFromSubnetsInput{
				LoadBalancerName: aws.String(d.Id()),
				Subnets:          del,
			}

			_, err := conn.DetachLoadBalancerFromSubnets(ctx, input)

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "detaching ELB Classic Load Balancer (%s) from subnets: %s", d.Id(), err)
			}
		}

		if len(add) > 0 {
			input := &elasticloadbalancing.AttachLoadBalancerToSubnetsInput{
				LoadBalancerName: aws.String(d.Id()),
				Subnets:          add,
			}

			_, err := tfresource.RetryWhenIsAErrorMessageContains[*awstypes.InvalidConfigurationRequestException](ctx, d.Timeout(schema.TimeoutUpdate), func() (any, error) {
				return conn.AttachLoadBalancerToSubnets(ctx, input)
			}, "cannot be attached to multiple subnets in the same AZ")

			if err != nil {
				return sdkdiag.AppendErrorf(diags, "attaching ELB Classic Load Balancer (%s) to subnets: %s", d.Id(), err)
			}
		}
	}

	return append(diags, resourceLoadBalancerRead(ctx, d, meta)...)
}
