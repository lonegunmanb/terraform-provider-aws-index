package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandVolumes(tfList []any) []awstypes.Volume {
	apiObjects := make([]awstypes.Volume, 0, len(tfList))

	for _, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)

		apiObject := awstypes.Volume{
			Name: aws.String(tfMap[names.AttrName].(string)),
		}

		if v, ok := tfMap["configure_at_launch"].(bool); ok {
			apiObject.ConfiguredAtLaunch = aws.Bool(v)
		}

		if v, ok := tfMap["docker_volume_configuration"].([]any); ok && len(v) > 0 {
			apiObject.DockerVolumeConfiguration = expandDockerVolumeConfiguration(v)
		}

		if v, ok := tfMap["efs_volume_configuration"].([]any); ok && len(v) > 0 {
			apiObject.EfsVolumeConfiguration = expandEFSVolumeConfiguration(v)
		}

		if v, ok := tfMap["fsx_windows_file_server_volume_configuration"].([]any); ok && len(v) > 0 {
			apiObject.FsxWindowsFileServerVolumeConfiguration = expandFSxWindowsFileServerVolumeConfiguration(v)
		}

		if v := tfMap["host_path"].(string); v != "" {
			apiObject.Host = &awstypes.HostVolumeProperties{
				SourcePath: aws.String(v),
			}
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
