package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenInstanceLaunchTemplate(template *awstypes.InstanceLaunchTemplate) []map[string]any {
	if template == nil {
		return nil
	}

	tfMap := map[string]any{
		"ec2_instance_profile_arn": aws.ToString(template.Ec2InstanceProfileArn),
		"monitoring":               string(template.Monitoring),
	}

	if template.InstanceRequirements != nil {
		tfMap["instance_requirements"] = flattenInstanceRequirementsRequest(template.InstanceRequirements)
	}

	if template.NetworkConfiguration != nil {
		networkConfig := map[string]any{
			names.AttrSubnets: template.NetworkConfiguration.Subnets,
		}
		if template.NetworkConfiguration.SecurityGroups != nil {
			networkConfig[names.AttrSecurityGroups] = template.NetworkConfiguration.SecurityGroups
		}
		tfMap[names.AttrNetworkConfiguration] = []map[string]any{networkConfig}
	}

	if template.StorageConfiguration != nil {
		tfMap["storage_configuration"] = []map[string]any{{
			"storage_size_gib": aws.ToInt32(template.StorageConfiguration.StorageSizeGiB),
		}}
	}

	return []map[string]any{tfMap}
}
