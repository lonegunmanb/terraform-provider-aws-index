package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"errors"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandManagedInstancesProviderUpdate(configured any) *awstypes.UpdateManagedInstancesProviderConfiguration {
	if configured == nil {
		return nil
	}

	if len(configured.([]any)) == 0 {
		return nil
	}

	tfMap := configured.([]any)[0].(map[string]any)
	apiObject := &awstypes.UpdateManagedInstancesProviderConfiguration{}

	if v, ok := tfMap["infrastructure_role_arn"].(string); ok && v != "" {
		apiObject.InfrastructureRoleArn = aws.String(v)
	}

	if v, ok := tfMap["instance_launch_template"].([]any); ok && len(v) > 0 {
		apiObject.InstanceLaunchTemplate = expandInstanceLaunchTemplateUpdate(v)
	}

	if v, ok := tfMap[names.AttrPropagateTags].(string); ok && v != "" {
		apiObject.PropagateTags = awstypes.PropagateMITags(v)
	}

	return apiObject
}
