package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandEBSTagSpecifications(ctx context.Context, tfList []any) []awstypes.EBSTagSpecification {
	if len(tfList) == 0 {
		return []awstypes.EBSTagSpecification{}
	}

	var apiObjects []awstypes.EBSTagSpecification

	for _, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)
		if !ok {
			continue
		}

		var apiObject awstypes.EBSTagSpecification

		if v, ok := tfMap[names.AttrPropagateTags].(string); ok && v != "" {
			apiObject.PropagateTags = awstypes.PropagateTags(v)
		}
		if v, ok := tfMap[names.AttrResourceType].(string); ok && v != "" {
			apiObject.ResourceType = awstypes.EBSResourceType(v)
		}
		if v, ok := tfMap[names.AttrTags].(map[string]any); ok && len(v) > 0 {
			if v := tftags.New(ctx, v).IgnoreAWS(); len(v) > 0 {
				apiObject.Tags = svcTags(v)
			}
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
