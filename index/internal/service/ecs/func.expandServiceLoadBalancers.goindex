package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"math"
	"slices"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	"github.com/aws/aws-sdk-go-v2/service/ecs/document"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/smithy"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandServiceLoadBalancers(tfList []any) []awstypes.LoadBalancer {
	apiObjects := make([]awstypes.LoadBalancer, 0, len(tfList))

	for _, tfMapRaw := range tfList {
		tfMap := tfMapRaw.(map[string]any)

		apiObject := awstypes.LoadBalancer{
			ContainerName: aws.String(tfMap["container_name"].(string)),
			ContainerPort: aws.Int32(int32(tfMap["container_port"].(int))),
		}

		if v, ok := tfMap["elb_name"]; ok && v.(string) != "" {
			apiObject.LoadBalancerName = aws.String(v.(string))
		}

		if v, ok := tfMap["target_group_arn"]; ok && v.(string) != "" {
			apiObject.TargetGroupArn = aws.String(v.(string))
		}

		if advConfig, ok := tfMap["advanced_configuration"].([]any); ok && len(advConfig) > 0 && advConfig[0] != nil {
			config := advConfig[0].(map[string]any)
			apiObject.AdvancedConfiguration = &awstypes.AdvancedConfiguration{
				AlternateTargetGroupArn: aws.String(config["alternate_target_group_arn"].(string)),
				ProductionListenerRule:  aws.String(config["production_listener_rule"].(string)),
				RoleArn:                 aws.String(config[names.AttrRoleARN].(string)),
			}
			if v, ok := config["test_listener_rule"].(string); ok && v != "" {
				apiObject.AdvancedConfiguration.TestListenerRule = aws.String(v)
			}
		}

		apiObjects = append(apiObjects, apiObject)
	}

	return apiObjects
}
