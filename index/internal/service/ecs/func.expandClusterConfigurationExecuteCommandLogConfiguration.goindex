package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandClusterConfigurationExecuteCommandLogConfiguration(tfList []any) *awstypes.ExecuteCommandLogConfiguration {
	if len(tfList) == 0 || tfList[0] == nil {
		return &awstypes.ExecuteCommandLogConfiguration{}
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.ExecuteCommandLogConfiguration{}

	if v, ok := tfMap["cloud_watch_log_group_name"].(string); ok && v != "" {
		apiObject.CloudWatchLogGroupName = aws.String(v)
	}

	if v, ok := tfMap[names.AttrS3BucketName].(string); ok && v != "" {
		apiObject.S3BucketName = aws.String(v)
	}

	if v, ok := tfMap[names.AttrS3KeyPrefix].(string); ok && v != "" {
		apiObject.S3KeyPrefix = aws.String(v)
	}

	if v, ok := tfMap["cloud_watch_encryption_enabled"].(bool); ok {
		apiObject.CloudWatchEncryptionEnabled = v
	}

	if v, ok := tfMap["s3_bucket_encryption_enabled"].(bool); ok {
		apiObject.S3EncryptionEnabled = v
	}

	return apiObject
}
