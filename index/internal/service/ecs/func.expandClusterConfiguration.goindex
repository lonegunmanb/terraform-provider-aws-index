package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandClusterConfiguration(tfList []any) *awstypes.ClusterConfiguration {
	if len(tfList) == 0 || tfList[0] == nil {
		return &awstypes.ClusterConfiguration{}
	}

	tfMap := tfList[0].(map[string]any)
	apiObject := &awstypes.ClusterConfiguration{}

	if v, ok := tfMap["execute_command_configuration"].([]any); ok && len(v) > 0 {
		apiObject.ExecuteCommandConfiguration = expandClusterConfigurationExecuteCommandConfiguration(v)
	}

	if v, ok := tfMap["managed_storage_configuration"].([]any); ok && len(v) > 0 {
		apiObject.ManagedStorageConfiguration = expandManagedStorageConfiguration(v)
	}

	return apiObject
}
