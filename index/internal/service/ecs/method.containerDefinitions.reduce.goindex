package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"cmp"
	"fmt"
	"slices"
	_ "unsafe" // Required for go:linkname

	"github.com/aws/aws-sdk-go-v2/aws"
	_ "github.com/aws/aws-sdk-go-v2/service/ecs" // Required for go:linkname
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	smithyjson "github.com/aws/smithy-go/encoding/json"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tfjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
)
func (cd containerDefinitions) reduce(isAWSVPC bool) {
	// Deal with fields which may be re-ordered in the API.
	cd.orderContainers()
	cd.orderEnvironmentVariables()
	cd.orderSecrets()

	// Compact any sparse lists.
	cd.compactArrays()

	// Deal with special fields which have defaults.
	// See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definitions.
	for i, def := range cd {
		if def.Essential == nil {
			cd[i].Essential = aws.Bool(true)
		}

		if hc := def.HealthCheck; hc != nil {
			if hc.Interval == nil {
				hc.Interval = aws.Int32(30)
			}
			if hc.Retries == nil {
				hc.Retries = aws.Int32(3)
			}
			if hc.Timeout == nil {
				hc.Timeout = aws.Int32(5)
			}
		}

		for j, pm := range def.PortMappings {
			if pm.Protocol == awstypes.TransportProtocolTcp {
				cd[i].PortMappings[j].Protocol = ""
			}
			if aws.ToInt32(pm.HostPort) == 0 {
				cd[i].PortMappings[j].HostPort = nil
			}
			if isAWSVPC && cd[i].PortMappings[j].HostPort == nil {
				cd[i].PortMappings[j].HostPort = cd[i].PortMappings[j].ContainerPort
			}
		}

		// Set all empty slices to nil.
		if len(def.Command) == 0 {
			cd[i].Command = nil
		}
		if len(def.CredentialSpecs) == 0 {
			cd[i].CredentialSpecs = nil
		}
		if len(def.DependsOn) == 0 {
			cd[i].DependsOn = nil
		}
		if len(def.DnsSearchDomains) == 0 {
			cd[i].DnsSearchDomains = nil
		}
		if len(def.DnsServers) == 0 {
			cd[i].DnsServers = nil
		}
		if len(def.DockerSecurityOptions) == 0 {
			cd[i].DockerSecurityOptions = nil
		}
		if len(def.EntryPoint) == 0 {
			cd[i].EntryPoint = nil
		}
		if len(def.Environment) == 0 {
			cd[i].Environment = nil
		}
		if len(def.EnvironmentFiles) == 0 {
			cd[i].EnvironmentFiles = nil
		}
		if len(def.ExtraHosts) == 0 {
			cd[i].ExtraHosts = nil
		}
		if len(def.Links) == 0 {
			cd[i].Links = nil
		}
		if len(def.MountPoints) == 0 {
			cd[i].MountPoints = nil
		}
		if len(def.PortMappings) == 0 {
			cd[i].PortMappings = nil
		}
		if len(def.ResourceRequirements) == 0 {
			cd[i].ResourceRequirements = nil
		}
		if len(def.Secrets) == 0 {
			cd[i].Secrets = nil
		}
		if len(def.SystemControls) == 0 {
			cd[i].SystemControls = nil
		}
		if len(def.Ulimits) == 0 {
			cd[i].Ulimits = nil
		}
		if len(def.VolumesFrom) == 0 {
			cd[i].VolumesFrom = nil
		}
	}
}
