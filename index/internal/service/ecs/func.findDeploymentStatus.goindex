package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findDeploymentStatus(ctx context.Context, conn *ecs.Client, deploymentArn string) (string, error) {
	input := ecs.DescribeServiceDeploymentsInput{
		ServiceDeploymentArns: []string{deploymentArn},
	}

	output, err := conn.DescribeServiceDeployments(ctx, &input)
	if err != nil {
		return "", err
	}

	if len(output.ServiceDeployments) == 0 {
		return serviceStatusPending, nil
	}

	deployment := output.ServiceDeployments[0]

	switch deployment.Status {
	case awstypes.ServiceDeploymentStatusSuccessful:
		return serviceStatusStable, nil
	case awstypes.ServiceDeploymentStatusInProgress:
		return serviceStatusPending, nil
	case awstypes.ServiceDeploymentStatusStopped,
		awstypes.ServiceDeploymentStatusRollbackFailed,
		awstypes.ServiceDeploymentStatusRollbackSuccessful:
		message := "Deployment failed"
		if deployment.StatusReason != nil {
			message = aws.ToString(deployment.StatusReason)
		}
		return "", errors.New(message)
	default:
		return serviceStatusPending, nil
	}
}
