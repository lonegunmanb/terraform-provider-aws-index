package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"errors"
	"fmt"
	"log"
	"math"
	"slices"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func statusServiceWaitForStable(ctx context.Context, conn *ecs.Client, serviceName, clusterNameOrARN string, sigintConfig *rollbackState, operationTime time.Time) retry.StateRefreshFunc {
	var primaryTaskSet *awstypes.Deployment
	var primaryDeploymentArn *string
	var isNewPrimaryDeployment bool

	return func() (any, string, error) {
		outputRaw, serviceStatus, err := statusService(ctx, conn, serviceName, clusterNameOrARN)()

		if err != nil {
			return nil, "", err
		}

		if serviceStatus != serviceStatusActive {
			return outputRaw, serviceStatus, nil
		}

		output := outputRaw.(*awstypes.Service)

		if primaryTaskSet == nil {
			primaryTaskSet = findPrimaryTaskSet(output.Deployments)

			if primaryTaskSet != nil && primaryTaskSet.CreatedAt != nil {
				createdAtUTC := primaryTaskSet.CreatedAt.UTC()
				isNewPrimaryDeployment = createdAtUTC.After(operationTime)
			}
		}

		isNewECSDeployment := output.DeploymentController != nil &&
			output.DeploymentController.Type == awstypes.DeploymentControllerTypeEcs &&
			isNewPrimaryDeployment

		// For new deployments with ECS deployment controller, check the deployment status
		if isNewECSDeployment {
			if primaryDeploymentArn == nil {
				serviceArn := aws.ToString(output.ServiceArn)

				var err error
				primaryDeploymentArn, err = findPrimaryDeploymentARN(ctx, conn, primaryTaskSet, serviceArn, clusterNameOrARN, operationTime)
				if err != nil {
					return nil, "", err
				}
				if primaryDeploymentArn == nil {
					return output, serviceStatusPending, nil
				}
			}

			if sigintConfig.rollbackConfigured && !sigintConfig.rollbackRoutineStarted {
				sigintConfig.waitGroup.Add(1)
				go rollbackRoutine(ctx, conn, sigintConfig, primaryDeploymentArn)
				sigintConfig.rollbackRoutineStarted = true
			}

			deploymentStatus, err := findDeploymentStatus(ctx, conn, *primaryDeploymentArn)
			if err != nil {
				return nil, "", err
			}
			return output, deploymentStatus, nil
		}

		// For other deployment controllers or in-place updates, check based on desired count
		if n, dc, rc := len(output.Deployments), output.DesiredCount, output.RunningCount; n == 1 && dc == rc {
			serviceStatus = serviceStatusStable
		} else {
			serviceStatus = serviceStatusPending
		}

		return output, serviceStatus, nil
	}
}
