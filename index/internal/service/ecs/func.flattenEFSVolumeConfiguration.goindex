package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenEFSVolumeConfiguration(apiObject *awstypes.EFSVolumeConfiguration) []any {
	var tfList []any
	tfMap := make(map[string]any)

	if apiObject != nil {
		if v := apiObject.AuthorizationConfig; v != nil {
			tfMap["authorization_config"] = flattenEFSAuthorizationConfig(v)
		}

		if v := apiObject.FileSystemId; v != nil {
			tfMap[names.AttrFileSystemID] = aws.ToString(v)
		}

		if v := apiObject.RootDirectory; v != nil {
			tfMap["root_directory"] = aws.ToString(v)
		}

		tfMap["transit_encryption"] = apiObject.TransitEncryption

		if v := apiObject.TransitEncryptionPort; v != nil {
			tfMap["transit_encryption_port"] = aws.ToInt32(v)
		}
	}

	tfList = append(tfList, tfMap)

	return tfList
}
