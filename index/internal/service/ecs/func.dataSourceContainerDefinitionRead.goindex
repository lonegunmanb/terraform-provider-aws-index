package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func dataSourceContainerDefinitionRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ECSClient(ctx)

	taskDefinition := d.Get("task_definition").(string)
	def, err := findContainerDefinitionByTwoPartKey(ctx, conn, taskDefinition, d.Get("container_name").(string))

	if err != nil {
		return sdkdiag.AppendFromErr(diags, tfresource.SingularDataSourceFindError("ECS Container Definition", err))
	}

	d.SetId(fmt.Sprintf("%s/%s", taskDefinition, aws.ToString(def.Name)))
	d.Set("cpu", def.Cpu)
	d.Set("disable_networking", def.DisableNetworking)
	d.Set("docker_labels", def.DockerLabels)
	var environment = map[string]string{}
	for _, v := range def.Environment {
		environment[aws.ToString(v.Name)] = aws.ToString(v.Value)
	}
	d.Set(names.AttrEnvironment, environment)
	image := aws.ToString(def.Image)
	d.Set("image", image)
	if strings.Contains(image, ":") {
		d.Set("image_digest", strings.Split(image, ":")[1])
	}
	d.Set("memory", def.Memory)
	d.Set("memory_reservation", def.MemoryReservation)

	return diags
}
