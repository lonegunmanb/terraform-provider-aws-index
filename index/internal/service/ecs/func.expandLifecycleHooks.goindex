package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"math"
	"slices"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	"github.com/aws/aws-sdk-go-v2/service/ecs/document"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types/nullable"
	"github.com/hashicorp/terraform-provider-aws/internal/smithy"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandLifecycleHooks(tfList []any) []awstypes.DeploymentLifecycleHook {
	apiObject := make([]awstypes.DeploymentLifecycleHook, 0, len(tfList))

	for _, tfMapRaw := range tfList {
		if tfMapRaw == nil {
			continue
		}

		tfMap := tfMapRaw.(map[string]any)

		hook := awstypes.DeploymentLifecycleHook{}

		if v, ok := tfMap["hook_target_arn"].(string); ok && v != "" {
			hook.HookTargetArn = aws.String(v)
		}

		if v, ok := tfMap[names.AttrRoleARN].(string); ok && v != "" {
			hook.RoleArn = aws.String(v)
		}

		if v, ok := tfMap["lifecycle_stages"].([]any); ok && len(v) > 0 {
			stages := make([]awstypes.DeploymentLifecycleHookStage, 0, len(v))
			for _, stage := range v {
				if stageStr, ok := stage.(string); ok && stageStr != "" {
					stages = append(stages, awstypes.DeploymentLifecycleHookStage(stageStr))
				}
			}
			hook.LifecycleStages = stages
		}

		if v, ok := tfMap["hook_details"].(string); ok && v != "" {
			var jsonValue any
			if err := json.Unmarshal([]byte(v), &jsonValue); err == nil {
				hook.HookDetails = document.NewLazyDocument(jsonValue)
			}
		}

		apiObject = append(apiObject, hook)
	}

	return apiObject
}
