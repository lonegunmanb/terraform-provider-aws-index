package github.com/hashicorp/terraform-provider-aws/internal/service/ecs
import (
	"context"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandContainerOverride(tfList []any) []awstypes.ContainerOverride {
	if len(tfList) == 0 {
		return nil
	}
	apiObject := make([]awstypes.ContainerOverride, 0)

	for _, item := range tfList {
		tfMap := item.(map[string]any)
		co := awstypes.ContainerOverride{
			Name: aws.String(tfMap[names.AttrName].(string)),
		}
		if v, ok := tfMap["command"]; ok {
			commandStrings := v.([]any)
			co.Command = flex.ExpandStringValueList(commandStrings)
		}
		if v, ok := tfMap["cpu"]; ok {
			co.Cpu = aws.Int32(int32(v.(int)))
		}
		if v, ok := tfMap[names.AttrEnvironment]; ok {
			co.Environment = expandTaskEnvironment(v.(*schema.Set))
		}
		if v, ok := tfMap["memory"]; ok {
			co.Memory = aws.Int32(int32(v.(int)))
		}
		if v, ok := tfMap["memory_reservation"]; ok {
			co.MemoryReservation = aws.Int32(int32(v.(int)))
		}
		if v, ok := tfMap["resource_requirements"]; ok {
			co.ResourceRequirements = expandResourceRequirements(v.(*schema.Set))
		}
		apiObject = append(apiObject, co)
	}

	return apiObject
}
