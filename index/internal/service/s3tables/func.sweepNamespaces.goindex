package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepNamespaces(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.S3TablesClient(ctx)

	var sweepResources []sweep.Sweepable

	tableBuckets := s3tables.NewListTableBucketsPaginator(conn, &s3tables.ListTableBucketsInput{})
	for tableBuckets.HasMorePages() {
		page, err := tableBuckets.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, bucket := range page.TableBuckets {
			namespaces := s3tables.NewListNamespacesPaginator(conn, &s3tables.ListNamespacesInput{
				TableBucketARN: bucket.Arn,
			})
			for namespaces.HasMorePages() {
				page, err := namespaces.NextPage(ctx)
				if err != nil {
					return nil, err
				}

				for _, namespace := range page.Namespaces {
					sweepResources = append(sweepResources, framework.NewSweepResource(newNamespaceResource, client,
						framework.NewAttribute("table_bucket_arn", aws.ToString(bucket.Arn)),
						framework.NewAttribute(names.AttrNamespace, namespace.Namespace[0]),
					))
				}
			}
		}
	}

	return sweepResources, nil
}
