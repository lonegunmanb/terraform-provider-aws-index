package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newNamespaceResource,
			TypeName: "aws_s3tables_namespace",
			Name:     "Namespace",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTableResource,
			TypeName: "aws_s3tables_table",
			Name:     "Table",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTableBucketResource,
			TypeName: "aws_s3tables_table_bucket",
			Name:     "Table Bucket",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTableBucketPolicyResource,
			TypeName: "aws_s3tables_table_bucket_policy",
			Name:     "Table Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newTablePolicyResource,
			TypeName: "aws_s3tables_table_policy",
			Name:     "Table Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}
