package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3tables/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *tableBucketResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var state, plan tableBucketResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().S3TablesClient(ctx)

	if !plan.EncryptionConfiguration.Equal(state.EncryptionConfiguration) {
		ec, d := plan.EncryptionConfiguration.ToPtr(ctx)
		resp.Diagnostics.Append(d...)
		if resp.Diagnostics.HasError() {
			return
		}

		input := s3tables.PutTableBucketEncryptionInput{
			TableBucketARN: plan.ARN.ValueStringPointer(),
		}

		var encryptionConfiguration awstypes.EncryptionConfiguration

		resp.Diagnostics.Append(flex.Expand(ctx, ec, &encryptionConfiguration)...)
		if resp.Diagnostics.HasError() {
			return
		}

		input.EncryptionConfiguration = &encryptionConfiguration

		_, err := conn.PutTableBucketEncryption(ctx, &input)
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.S3Tables, create.ErrActionUpdating, resNameTableBucket, plan.Name.String(), err),
				err.Error(),
			)
			return
		}
	}

	if !state.MaintenanceConfiguration.Equal(plan.MaintenanceConfiguration) {
		mc, d := plan.MaintenanceConfiguration.ToPtr(ctx)
		resp.Diagnostics.Append(d...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !mc.IcebergUnreferencedFileRemovalSettings.IsNull() {
			input := s3tables.PutTableBucketMaintenanceConfigurationInput{
				TableBucketARN: state.ARN.ValueStringPointer(),
				Type:           awstypes.TableBucketMaintenanceTypeIcebergUnreferencedFileRemoval,
			}

			value, d := expandTableBucketMaintenanceIcebergUnreferencedFileRemoval(ctx, mc.IcebergUnreferencedFileRemovalSettings)
			resp.Diagnostics.Append(d...)
			if resp.Diagnostics.HasError() {
				return
			}

			input.Value = &value

			_, err := conn.PutTableBucketMaintenanceConfiguration(ctx, &input)
			if err != nil {
				resp.Diagnostics.AddError(
					create.ProblemStandardMessage(names.S3Tables, create.ErrActionUpdating, resNameTableBucket, plan.Name.String(), err),
					err.Error(),
				)
				return
			}
		}

		awsMaintenanceConfig, err := conn.GetTableBucketMaintenanceConfiguration(ctx, &s3tables.GetTableBucketMaintenanceConfigurationInput{
			TableBucketARN: state.ARN.ValueStringPointer(),
		})
		if err != nil {
			resp.Diagnostics.AddError(
				create.ProblemStandardMessage(names.S3Tables, create.ErrActionUpdating, resNameTableBucket, plan.Name.String(), err),
				err.Error(),
			)
		}
		maintenanceConfiguration, d := flattenTableBucketMaintenanceConfiguration(ctx, awsMaintenanceConfig)
		resp.Diagnostics.Append(d...)
		if resp.Diagnostics.HasError() {
			return
		}
		plan.MaintenanceConfiguration = maintenanceConfiguration
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}
