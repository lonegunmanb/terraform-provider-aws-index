package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3tables/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework/validators"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *tableBucketResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new tableBucketResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().S3TablesClient(ctx)

	name, tableBucketARN := fwflex.StringValueFromFramework(ctx, new.Name), fwflex.StringValueFromFramework(ctx, new.ARN)

	if !new.EncryptionConfiguration.Equal(old.EncryptionConfiguration) {
		ec, diags := new.EncryptionConfiguration.ToPtr(ctx)
		response.Diagnostics.Append(diags...)
		if response.Diagnostics.HasError() {
			return
		}

		input := s3tables.PutTableBucketEncryptionInput{
			TableBucketARN: aws.String(tableBucketARN),
		}

		var encryptionConfiguration awstypes.EncryptionConfiguration
		response.Diagnostics.Append(fwflex.Expand(ctx, ec, &encryptionConfiguration)...)
		if response.Diagnostics.HasError() {
			return
		}
		input.EncryptionConfiguration = &encryptionConfiguration

		_, err := conn.PutTableBucketEncryption(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("putting S3 Tables Table Bucket (%s) encryption configuration", name), err.Error())

			return
		}
	}

	if !old.MaintenanceConfiguration.Equal(new.MaintenanceConfiguration) {
		mc, d := new.MaintenanceConfiguration.ToPtr(ctx)
		response.Diagnostics.Append(d...)
		if response.Diagnostics.HasError() {
			return
		}

		if !mc.IcebergUnreferencedFileRemovalSettings.IsNull() {
			typ := awstypes.TableBucketMaintenanceTypeIcebergUnreferencedFileRemoval
			input := s3tables.PutTableBucketMaintenanceConfigurationInput{
				TableBucketARN: aws.String(tableBucketARN),
				Type:           typ,
			}

			value, d := expandTableBucketMaintenanceIcebergUnreferencedFileRemoval(ctx, mc.IcebergUnreferencedFileRemovalSettings)
			response.Diagnostics.Append(d...)
			if response.Diagnostics.HasError() {
				return
			}
			input.Value = &value

			_, err := conn.PutTableBucketMaintenanceConfiguration(ctx, &input)

			if err != nil {
				response.Diagnostics.AddError(fmt.Sprintf("putting S3 Tables Table Bucket (%s) maintenance configuration (%s)", name, typ), err.Error())

				return
			}
		}

		outputGTBMC, err := findTableBucketMaintenanceConfigurationByARN(ctx, conn, tableBucketARN)

		switch {
		case tfresource.NotFound(err):
		case err != nil:
			response.Diagnostics.AddError(fmt.Sprintf("reading S3 Tables Table Bucket (%s) maintenance configuration", name), err.Error())

			return
		default:
			value, d := flattenTableBucketMaintenanceConfiguration(ctx, outputGTBMC)
			response.Diagnostics.Append(d...)
			if response.Diagnostics.HasError() {
				return
			}
			new.MaintenanceConfiguration = value
		}
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
