package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3tables/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (r *tableResource) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var new, old tableResourceModel
	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)
	if response.Diagnostics.HasError() {
		return
	}
	response.Diagnostics.Append(request.State.Get(ctx, &old)...)
	if response.Diagnostics.HasError() {
		return
	}

	conn := r.Meta().S3TablesClient(ctx)

	// New name and namespace.
	name, namespace, tableBucketARN := fwflex.StringValueFromFramework(ctx, new.Name), fwflex.StringValueFromFramework(ctx, new.Namespace), fwflex.StringValueFromFramework(ctx, new.TableBucketARN)

	if !new.Name.Equal(old.Name) || !new.Namespace.Equal(old.Namespace) {
		input := s3tables.RenameTableInput{
			Name:           old.Name.ValueStringPointer(),
			Namespace:      old.Namespace.ValueStringPointer(),
			TableBucketARN: aws.String(tableBucketARN),
		}

		if !new.Name.Equal(old.Name) {
			input.NewName = aws.String(name)
		}

		if !new.Namespace.Equal(old.Namespace) {
			input.NewNamespaceName = aws.String(namespace)
		}

		_, err := conn.RenameTable(ctx, &input)

		if err != nil {
			response.Diagnostics.AddError(fmt.Sprintf("renaming S3 Tables Table (%s)", name), err.Error())

			return
		}
	}

	if !new.MaintenanceConfiguration.Equal(old.MaintenanceConfiguration) {
		newMC, d := new.MaintenanceConfiguration.ToPtr(ctx)
		response.Diagnostics.Append(d...)
		if response.Diagnostics.HasError() {
			return
		}

		oldMC, d := old.MaintenanceConfiguration.ToPtr(ctx)
		response.Diagnostics.Append(d...)
		if response.Diagnostics.HasError() {
			return
		}

		if !newMC.IcebergCompaction.Equal(oldMC.IcebergCompaction) {
			typ := awstypes.TableMaintenanceTypeIcebergCompaction
			input := s3tables.PutTableMaintenanceConfigurationInput{
				Name:           aws.String(name),
				Namespace:      aws.String(namespace),
				TableBucketARN: aws.String(tableBucketARN),
				Type:           typ,
			}

			value, diags := expandTableMaintenanceIcebergCompaction(ctx, newMC.IcebergCompaction)
			response.Diagnostics.Append(diags...)
			if response.Diagnostics.HasError() {
				return
			}
			input.Value = &value

			_, err := conn.PutTableMaintenanceConfiguration(ctx, &input)

			if err != nil {
				response.Diagnostics.AddError(fmt.Sprintf("putting S3 Tables Table (%s) maintenance configuration (%s)", name, typ), err.Error())

				return
			}
		}

		if !newMC.IcebergSnapshotManagement.Equal(oldMC.IcebergSnapshotManagement) {
			typ := awstypes.TableMaintenanceTypeIcebergSnapshotManagement
			input := s3tables.PutTableMaintenanceConfigurationInput{
				Name:           aws.String(name),
				Namespace:      aws.String(namespace),
				TableBucketARN: aws.String(tableBucketARN),
				Type:           typ,
			}

			value, d := expandTableMaintenanceIcebergSnapshotManagement(ctx, newMC.IcebergSnapshotManagement)
			response.Diagnostics.Append(d...)
			if response.Diagnostics.HasError() {
				return
			}
			input.Value = &value

			_, err := conn.PutTableMaintenanceConfiguration(ctx, &input)

			if err != nil {
				response.Diagnostics.AddError(fmt.Sprintf("putting S3 Tables Table (%s) maintenance configuration (%s)", name, typ), err.Error())

				return
			}
		}
	}

	outputGT, err := findTableByThreePartKey(ctx, conn, tableBucketARN, namespace, name)

	if err != nil {
		response.Diagnostics.AddError(fmt.Sprintf("reading S3 Tables Table (%s)", name), err.Error())

		return
	}

	response.Diagnostics.Append(fwflex.Flatten(ctx, outputGT, &new, fwflex.WithFieldNamePrefix("Table"))...)
	if response.Diagnostics.HasError() {
		return
	}
	new.Namespace = types.StringValue(outputGT.Namespace[0])

	outputGTMC, err := findTableMaintenanceConfigurationByThreePartKey(ctx, conn, tableBucketARN, namespace, name)

	switch {
	case tfresource.NotFound(err):
	case err != nil:
		response.Diagnostics.AddError(fmt.Sprintf("reading S3 Tables Table (%s) maintenance configuration", name), err.Error())

		return
	default:
		value, diags := flattenTableMaintenanceConfiguration(ctx, outputGTMC)
		response.Diagnostics.Append(diags...)
		if response.Diagnostics.HasError() {
			return
		}
		new.MaintenanceConfiguration = value
	}

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}
