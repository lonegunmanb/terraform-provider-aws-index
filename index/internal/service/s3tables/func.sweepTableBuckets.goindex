package github.com/hashicorp/terraform-provider-aws/internal/service/s3tables
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3tables/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/awsv2"
	"github.com/hashicorp/terraform-provider-aws/internal/sweep/framework"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func sweepTableBuckets(ctx context.Context, client *conns.AWSClient) ([]sweep.Sweepable, error) {
	conn := client.S3TablesClient(ctx)
	var input s3tables.ListTableBucketsInput
	sweepResources := make([]sweep.Sweepable, 0)

	pages := s3tables.NewListTableBucketsPaginator(conn, &input)
	for pages.HasMorePages() {
		page, err := pages.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, v := range page.TableBuckets {
			tableBucketARN := aws.ToString(v.Arn)

			if typ := v.Type; typ != awstypes.TableBucketTypeCustomer {
				log.Printf("[INFO] Skipping S3 Tables Table Bucket %s: Type=%s", tableBucketARN, typ)
				continue
			}

			sweepResources = append(sweepResources, framework.NewSweepResource(newTableBucketResource, client,
				framework.NewAttribute(names.AttrARN, tableBucketARN),
			))
		}
	}

	return sweepResources, nil
}
