package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenApplicationResourceLifecycleConfig(apiObject *awstypes.ApplicationResourceLifecycleConfig) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if apiObject := apiObject.VersionLifecycleConfig; apiObject != nil {
		if apiObject := apiObject.MaxAgeRule; apiObject != nil && aws.ToBool(apiObject.Enabled) {
			if v := apiObject.DeleteSourceFromS3; v != nil {
				tfMap["delete_source_from_s3"] = aws.ToBool(v)
			}

			if v := apiObject.MaxAgeInDays; v != nil {
				tfMap["max_age_in_days"] = aws.ToInt32(v)
			}
		}

		if apiObject := apiObject.MaxCountRule; apiObject != nil && aws.ToBool(apiObject.Enabled) {
			if v := apiObject.DeleteSourceFromS3; v != nil {
				tfMap["delete_source_from_s3"] = aws.ToBool(v)
			}

			if v := apiObject.MaxCount; v != nil {
				tfMap["max_count"] = aws.ToInt32(v)
			}
		}
	}

	if len(tfMap) == 0 {
		return nil
	}

	if v := apiObject.ServiceRole; v != nil {
		tfMap[names.AttrServiceRole] = aws.ToString(v)
	}

	return []any{tfMap}
}
