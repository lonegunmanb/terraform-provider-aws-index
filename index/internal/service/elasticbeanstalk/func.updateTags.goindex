package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import (
	"context"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *elasticbeanstalk.Client, identifier string, oldTagsMap, newTagsMap any, optFns ...func(*elasticbeanstalk.Options)) error {
	oldTags := tftags.New(ctx, oldTagsMap)
	newTags := tftags.New(ctx, newTagsMap)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.ElasticBeanstalk)
	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.ElasticBeanstalk)

	// Ensure we do not send empty requests.
	if len(removedTags) == 0 && len(updatedTags) == 0 {
		return nil
	}

	input := elasticbeanstalk.UpdateTagsForResourceInput{
		ResourceArn: aws.String(identifier),
	}

	if len(updatedTags) > 0 {
		input.TagsToAdd = svcTags(updatedTags)
	}

	if len(removedTags) > 0 {
		input.TagsToRemove = removedTags.Keys()
	}

	_, err := conn.UpdateTagsForResource(ctx, &input, optFns...)

	if err != nil {
		return smarterr.NewError(err)
	}

	return nil
}
