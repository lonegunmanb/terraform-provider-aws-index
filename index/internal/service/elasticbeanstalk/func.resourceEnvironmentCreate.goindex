package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	sdktypes "github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEnvironmentCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).ElasticBeanstalkClient(ctx)

	name := d.Get(names.AttrName).(string)
	input := &elasticbeanstalk.CreateEnvironmentInput{
		ApplicationName: aws.String(d.Get("application").(string)),
		EnvironmentName: aws.String(name),
		Tags:            getTagsIn(ctx),
	}

	if v := d.Get(names.AttrDescription); v.(string) != "" {
		input.Description = aws.String(v.(string))
	}

	if v := d.Get("platform_arn"); v.(string) != "" {
		input.PlatformArn = aws.String(v.(string))
	}

	if v, ok := d.GetOk("setting"); ok && v.(*schema.Set).Len() > 0 {
		input.OptionSettings = expandConfigurationOptionSettings(v.(*schema.Set).List())
	}

	if v := d.Get("solution_stack_name"); v.(string) != "" {
		input.SolutionStackName = aws.String(v.(string))
	}

	if v := d.Get("template_name"); v.(string) != "" {
		input.TemplateName = aws.String(v.(string))
	}

	if v := d.Get("version_label"); v.(string) != "" {
		input.VersionLabel = aws.String(v.(string))
	}

	tier := d.Get("tier").(string)

	if v := d.Get("cname_prefix"); v.(string) != "" {
		if tier != environmentTierWebServer {
			return sdkdiag.AppendErrorf(diags, "cname_prefix conflicts with tier: %s", tier)
		}

		input.CNAMEPrefix = aws.String(v.(string))
	}

	var tierType string
	switch tier {
	case environmentTierWebServer:
		tierType = environmentTierTypeStandard
	case environmentTierWorker:
		tierType = environmentTierTypeSQSHTTP
	}
	input.Tier = &awstypes.EnvironmentTier{
		Name: aws.String(tier),
		Type: aws.String(tierType),
	}

	opTime := time.Now()
	output, err := conn.CreateEnvironment(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Elastic Beanstalk Environment (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.EnvironmentId))

	waitForReadyTimeOut, _, err := sdktypes.Duration(d.Get("wait_for_ready_timeout").(string)).Value()

	if err != nil {
		return sdkdiag.AppendFromErr(diags, err)
	}

	pollInterval, _, err := sdktypes.Duration(d.Get("poll_interval").(string)).Value()

	if err != nil {
		pollInterval = 0
	}

	if _, err := waitEnvironmentReady(ctx, conn, d.Id(), pollInterval, waitForReadyTimeOut); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Elastic Beanstalk Environment (%s) create: %s", d.Id(), err)
	}

	err = findEnvironmentErrorsByID(ctx, conn, d.Id(), opTime)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Elastic Beanstalk Environment (%s): %s", d.Id(), err)
	}

	return append(diags, resourceEnvironmentRead(ctx, d, meta)...)
}
