package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func findConfigurationSettingses(ctx context.Context, conn *elasticbeanstalk.Client, input *elasticbeanstalk.DescribeConfigurationSettingsInput) ([]awstypes.ConfigurationSettingsDescription, error) {
	output, err := conn.DescribeConfigurationSettings(ctx, input)

	if tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "No Configuration Template named") ||
		tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "No Application named") ||
		tfawserr.ErrMessageContains(err, errCodeInvalidParameterValue, "No Platform named") {
		return nil, &retry.NotFoundError{
			LastError:   err,
			LastRequest: input,
		}
	}

	if err != nil {
		return nil, err
	}

	if output == nil {
		return nil, tfresource.NewEmptyResultError(input)
	}

	return output.ConfigurationSettings, nil
}
