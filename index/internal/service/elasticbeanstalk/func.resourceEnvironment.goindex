package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import ( // nosemgrep:ci.semgrep.aws.multiple-service-imports
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	sdktypes "github.com/hashicorp/terraform-provider-aws/internal/sdkv2/types"
	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceEnvironment() *schema.Resource {
	//lintignore:R011
	return &schema.Resource{
		CreateWithoutTimeout: resourceEnvironmentCreate,
		ReadWithoutTimeout:   resourceEnvironmentRead,
		UpdateWithoutTimeout: resourceEnvironmentUpdate,
		DeleteWithoutTimeout: resourceEnvironmentDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		SchemaVersion: 1,
		MigrateState:  EnvironmentMigrateState,

		SchemaFunc: func() map[string]*schema.Schema {
			return map[string]*schema.Schema{
				"all_settings": {
					Type:     schema.TypeSet,
					Computed: true,
					Elem:     settingSchema(),
					Set:      hashSettingsValue,
				},
				"application": {
					Type:     schema.TypeString,
					Required: true,
				},
				names.AttrARN: {
					Type:     schema.TypeString,
					Computed: true,
				},
				"autoscaling_groups": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"cname": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"cname_prefix": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
					ForceNew: true,
				},
				names.AttrDescription: {
					Type:     schema.TypeString,
					Optional: true,
				},
				"endpoint_url": {
					Type:     schema.TypeString,
					Computed: true,
				},
				"instances": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"launch_configurations": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"load_balancers": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				names.AttrName: {
					Type:     schema.TypeString,
					Required: true,
					ForceNew: true,
				},
				"platform_arn": {
					Type:          schema.TypeString,
					Optional:      true,
					Computed:      true,
					ConflictsWith: []string{"solution_stack_name", "template_name"},
				},
				"poll_interval": {
					Type:             schema.TypeString,
					Optional:         true,
					ValidateDiagFunc: sdktypes.ValidateDurationBetween(10*time.Second, 3*time.Minute), //nolint:mnd // these are the limits set by AWS
				},
				"queues": {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"setting": {
					Type:     schema.TypeSet,
					Optional: true,
					Elem:     settingSchema(),
					Set:      hashSettingsValue,
				},
				"solution_stack_name": {
					Type:          schema.TypeString,
					Optional:      true,
					Computed:      true,
					ConflictsWith: []string{"platform_arn", "template_name"},
				},
				names.AttrTags:    tftags.TagsSchema(),
				names.AttrTagsAll: tftags.TagsSchemaComputed(),
				"template_name": {
					Type:          schema.TypeString,
					Optional:      true,
					ConflictsWith: []string{"solution_stack_name", "platform_arn"},
				},
				"tier": {
					Type:         schema.TypeString,
					Optional:     true,
					ForceNew:     true,
					Default:      environmentTierWebServer,
					ValidateFunc: validation.StringInSlice(environmentTier_Values(), false),
				},
				names.AttrTriggers: {
					Type:     schema.TypeList,
					Computed: true,
					Elem:     &schema.Schema{Type: schema.TypeString},
				},
				"version_label": {
					Type:     schema.TypeString,
					Optional: true,
					Computed: true,
				},
				"wait_for_ready_timeout": {
					Type:             schema.TypeString,
					Optional:         true,
					Default:          "20m",
					ValidateDiagFunc: sdktypes.ValidateDuration,
				},
			}
		},
	}
}
