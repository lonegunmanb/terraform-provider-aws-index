package github.com/hashicorp/terraform-provider-aws/internal/service/elasticbeanstalk
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func expandApplicationResourceLifecycleConfig(tfMap map[string]any) *awstypes.ApplicationResourceLifecycleConfig {
	if tfMap == nil {
		return nil
	}

	apiObject := &awstypes.ApplicationResourceLifecycleConfig{
		VersionLifecycleConfig: &awstypes.ApplicationVersionLifecycleConfig{
			MaxAgeRule: &awstypes.MaxAgeRule{
				Enabled: aws.Bool(false),
			},
			MaxCountRule: &awstypes.MaxCountRule{
				Enabled: aws.Bool(false),
			},
		},
	}

	if v, ok := tfMap[names.AttrServiceRole].(string); ok && v != "" {
		apiObject.ServiceRole = aws.String(v)
	}

	if v, ok := tfMap["max_age_in_days"].(int); ok && v != 0 {
		apiObject.VersionLifecycleConfig.MaxAgeRule = &awstypes.MaxAgeRule{
			DeleteSourceFromS3: aws.Bool(tfMap["delete_source_from_s3"].(bool)),
			Enabled:            aws.Bool(true),
			MaxAgeInDays:       aws.Int32(int32(v)),
		}
	}

	if v, ok := tfMap["max_count"].(int); ok && v != 0 {
		apiObject.VersionLifecycleConfig.MaxCountRule = &awstypes.MaxCountRule{
			DeleteSourceFromS3: aws.Bool(tfMap["delete_source_from_s3"].(bool)),
			Enabled:            aws.Bool(true),
			MaxCount:           aws.Int32(int32(v)),
		}
	}

	return apiObject
}
