package github.com/hashicorp/terraform-provider-aws/internal/service/elasticsearch
import (
	"context"

	"github.com/YakDriver/smarterr"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/elasticsearchservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticsearchservice/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func updateTags(ctx context.Context, conn *elasticsearchservice.Client, identifier string, oldTagsMap, newTagsMap any, optFns ...func(*elasticsearchservice.Options)) error {
	oldTags := tftags.New(ctx, oldTagsMap)
	newTags := tftags.New(ctx, newTagsMap)

	ctx = tflog.SetField(ctx, logging.KeyResourceId, identifier)

	removedTags := oldTags.Removed(newTags)
	removedTags = removedTags.IgnoreSystem(names.Elasticsearch)
	if len(removedTags) > 0 {
		input := elasticsearchservice.RemoveTagsInput{
			ARN:     aws.String(identifier),
			TagKeys: removedTags.Keys(),
		}

		_, err := conn.RemoveTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	updatedTags := oldTags.Updated(newTags)
	updatedTags = updatedTags.IgnoreSystem(names.Elasticsearch)
	if len(updatedTags) > 0 {
		input := elasticsearchservice.AddTagsInput{
			ARN:     aws.String(identifier),
			TagList: svcTags(updatedTags),
		}

		_, err := conn.AddTags(ctx, &input, optFns...)

		if err != nil {
			return smarterr.NewError(err)
		}
	}

	return nil
}
