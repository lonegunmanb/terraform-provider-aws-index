package github.com/hashicorp/terraform-provider-aws/internal/service/elasticsearch
import (
	"context"
	"fmt"
	"log"
	"slices"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	elasticsearch "github.com/aws/aws-sdk-go-v2/service/elasticsearchservice"
	awstypes "github.com/aws/aws-sdk-go-v2/service/elasticsearchservice/types"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/semver"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenElasticsearchClusterConfig(apiObject *awstypes.ElasticsearchClusterConfig) []any { // nosemgrep:ci.elasticsearch-in-func-name
	tfMap := map[string]any{
		"zone_awareness_config":  flattenZoneAwarenessConfig(apiObject.ZoneAwarenessConfig),
		"zone_awareness_enabled": aws.ToBool(apiObject.ZoneAwarenessEnabled),
	}

	if apiObject.ColdStorageOptions != nil {
		tfMap["cold_storage_options"] = flattenColdStorageOptions(apiObject.ColdStorageOptions)
	}
	if apiObject.DedicatedMasterCount != nil {
		tfMap["dedicated_master_count"] = aws.ToInt32(apiObject.DedicatedMasterCount)
	}
	if apiObject.DedicatedMasterEnabled != nil {
		tfMap["dedicated_master_enabled"] = aws.ToBool(apiObject.DedicatedMasterEnabled)
	}
	tfMap["dedicated_master_type"] = apiObject.DedicatedMasterType
	if apiObject.InstanceCount != nil {
		tfMap[names.AttrInstanceCount] = aws.ToInt32(apiObject.InstanceCount)
	}
	tfMap[names.AttrInstanceType] = apiObject.InstanceType
	if apiObject.WarmEnabled != nil {
		tfMap["warm_enabled"] = aws.ToBool(apiObject.WarmEnabled)
	}
	if apiObject.WarmCount != nil {
		tfMap["warm_count"] = aws.ToInt32(apiObject.WarmCount)
	}
	tfMap["warm_type"] = string(apiObject.WarmType)

	return []any{tfMap}
}
