package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProfileRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CustomerProfilesClient(ctx)

	domainName := d.Get(names.AttrDomainName).(string)
	output, err := FindProfileByTwoPartKey(ctx, conn, d.Id(), domainName)

	if !d.IsNewResource() && retry.NotFound(err) {
		log.Printf("[WARN] Customer Profiles Profile (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Customer Profiles Profile: (%s) %s", d.Id(), err)
	}

	d.Set("account_number", output.AccountNumber)
	d.Set("additional_information", output.AdditionalInformation)
	d.Set(names.AttrAddress, flattenAddress(output.Address))
	d.Set("account_number", output.AccountNumber)
	d.Set(names.AttrAttributes, output.Attributes)
	d.Set("billing_address", flattenAddress(output.BillingAddress))
	d.Set("birth_date", output.BirthDate)
	d.Set("business_email_address", output.BusinessEmailAddress)
	d.Set("business_name", output.BusinessName)
	d.Set("business_phone_number", output.BusinessPhoneNumber)
	d.Set("email_address", output.EmailAddress)
	d.Set("first_name", output.FirstName)
	d.Set("gender_string", output.GenderString)
	d.Set("home_phone_number", output.HomePhoneNumber)
	d.Set("last_name", output.LastName)
	d.Set("mailing_address", flattenAddress(output.MailingAddress))
	d.Set("middle_name", output.MiddleName)
	d.Set("mobile_phone_number", output.MobilePhoneNumber)
	d.Set("party_type_string", output.PartyTypeString)
	d.Set("personal_email_address", output.PersonalEmailAddress)
	d.Set("phone_number", output.PhoneNumber)
	d.Set("shipping_address", flattenAddress(output.ShippingAddress))

	return diags
}
