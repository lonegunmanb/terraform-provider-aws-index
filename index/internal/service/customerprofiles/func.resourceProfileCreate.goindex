package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceProfileCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CustomerProfilesClient(ctx)

	input := &customerprofiles.CreateProfileInput{
		DomainName: aws.String(d.Get(names.AttrDomainName).(string)),
	}

	if v, ok := d.GetOk("account_number"); ok {
		input.AccountNumber = aws.String(v.(string))
	}

	if v, ok := d.GetOk("additional_information"); ok {
		input.AdditionalInformation = aws.String(v.(string))
	}

	if v, ok := d.GetOk(names.AttrAddress); ok {
		input.Address = expandAddress(v.([]any))
	}

	if v, ok := d.GetOk(names.AttrAttributes); ok {
		input.Attributes = flex.ExpandStringValueMap(v.(map[string]any))
	}

	if v, ok := d.GetOk("billing_address"); ok {
		input.BillingAddress = expandAddress(v.([]any))
	}

	if v, ok := d.GetOk("birth_date"); ok {
		input.BirthDate = aws.String(v.(string))
	}

	if v, ok := d.GetOk("business_email_address"); ok {
		input.BusinessEmailAddress = aws.String(v.(string))
	}

	if v, ok := d.GetOk("business_name"); ok {
		input.BusinessName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("business_phone_number"); ok {
		input.BusinessPhoneNumber = aws.String(v.(string))
	}

	if v, ok := d.GetOk("email_address"); ok {
		input.EmailAddress = aws.String(v.(string))
	}

	if v, ok := d.GetOk("first_name"); ok {
		input.FirstName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("gender_string"); ok {
		input.GenderString = aws.String(v.(string))
	}

	if v, ok := d.GetOk("home_phone_number"); ok {
		input.HomePhoneNumber = aws.String(v.(string))
	}

	if v, ok := d.GetOk("last_name"); ok {
		input.LastName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("mailing_address"); ok {
		input.MailingAddress = expandAddress(v.([]any))
	}

	if v, ok := d.GetOk("middle_name"); ok {
		input.MiddleName = aws.String(v.(string))
	}

	if v, ok := d.GetOk("mobile_phone_number"); ok {
		input.MobilePhoneNumber = aws.String(v.(string))
	}

	if v, ok := d.GetOk("party_type_string"); ok {
		input.PartyTypeString = aws.String(v.(string))
	}

	if v, ok := d.GetOk("personal_email_address"); ok {
		input.PersonalEmailAddress = aws.String(v.(string))
	}

	if v, ok := d.GetOk("phone_number"); ok {
		input.PhoneNumber = aws.String(v.(string))
	}

	if v, ok := d.GetOk("shipping_address"); ok {
		input.ShippingAddress = expandAddress(v.([]any))
	}

	output, err := conn.CreateProfile(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Customer Profiles Profile: %s", err)
	}

	d.SetId(aws.ToString(output.ProfileId))

	_, err = tfresource.RetryWhenNotFound(ctx, d.Timeout(schema.TimeoutCreate), func(ctx context.Context) (any, error) {
		return FindProfileByTwoPartKey(ctx, conn, d.Id(), d.Get(names.AttrDomainName).(string))
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for Customer Profiles Profile (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceProfileRead(ctx, d, meta)...)
}
