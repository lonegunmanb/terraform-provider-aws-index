package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CustomerProfilesClient(ctx)

	name := d.Get(names.AttrDomainName).(string)
	input := &customerprofiles.CreateDomainInput{
		DomainName: aws.String(name),
		Tags:       getTagsIn(ctx),
	}

	if v, ok := d.GetOk("dead_letter_queue_url"); ok {
		input.DeadLetterQueueUrl = aws.String(v.(string))
	}

	if v, ok := d.GetOk("default_encryption_key"); ok {
		input.DefaultEncryptionKey = aws.String(v.(string))
	}

	if v, ok := d.GetOk("default_expiration_days"); ok {
		input.DefaultExpirationDays = aws.Int32(int32(v.(int)))
	}

	if v, ok := d.GetOk("matching"); ok {
		input.Matching = expandMatching(v.([]any))
	}

	if v, ok := d.GetOk("rule_based_matching"); ok {
		input.RuleBasedMatching = expandRuleBasedMatching(v.([]any))
	}

	output, err := conn.CreateDomain(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating Customer Profiles Domain (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.DomainName))

	return append(diags, resourceDomainRead(ctx, d, meta)...)
}
