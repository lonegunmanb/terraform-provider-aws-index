package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenAddress(apiObject *types.Address) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.Address1; v != nil {
		tfMap["address_1"] = aws.ToString(v)
	}

	if v := apiObject.Address2; v != nil {
		tfMap["address_2"] = aws.ToString(v)
	}

	if v := apiObject.Address3; v != nil {
		tfMap["address_3"] = aws.ToString(v)
	}

	if v := apiObject.Address4; v != nil {
		tfMap["address_4"] = aws.ToString(v)
	}

	if v := apiObject.City; v != nil {
		tfMap["city"] = aws.ToString(v)
	}

	if v := apiObject.Country; v != nil {
		tfMap["country"] = aws.ToString(v)
	}

	if v := apiObject.County; v != nil {
		tfMap["county"] = aws.ToString(v)
	}

	if v := apiObject.PostalCode; v != nil {
		tfMap["postal_code"] = aws.ToString(v)
	}

	if v := apiObject.Province; v != nil {
		tfMap["province"] = aws.ToString(v)
	}

	if v := apiObject.State; v != nil {
		tfMap[names.AttrState] = aws.ToString(v)
	}

	return []any{tfMap}
}
