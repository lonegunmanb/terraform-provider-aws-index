package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func flattenRuleBasedMatching(apiObject *types.RuleBasedMatchingResponse) []any {
	if apiObject == nil {
		return nil
	}

	tfMap := map[string]any{}

	if v := apiObject.AttributeTypesSelector; v != nil {
		tfMap["attribute_types_selector"] = flattenAttributeTypesSelector(v)
	}

	if v := apiObject.ConflictResolution; v != nil {
		tfMap["conflict_resolution"] = flattenConflictResolution(v)
	}

	if v := apiObject.Enabled; v != nil {
		tfMap[names.AttrEnabled] = aws.ToBool(v)
	}

	if v := apiObject.ExportingConfig; v != nil {
		tfMap["exporting_config"] = flattenExportingConfig(v)
	}

	if v := apiObject.MatchingRules; v != nil {
		tfMap["matching_rules"] = flattenMatchingRules(v)
	}

	if v := apiObject.MaxAllowedRuleLevelForMatching; v != nil {
		tfMap["max_allowed_rule_level_for_matching"] = aws.ToInt32(v)
	}

	if v := apiObject.MaxAllowedRuleLevelForMerging; v != nil {
		tfMap["max_allowed_rule_level_for_merging"] = aws.ToInt32(v)
	}

	tfMap[names.AttrStatus] = types.IdentityResolutionJobStatus(apiObject.Status)

	return []any{tfMap}
}
