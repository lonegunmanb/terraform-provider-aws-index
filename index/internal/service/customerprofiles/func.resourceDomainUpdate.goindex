package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainUpdate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CustomerProfilesClient(ctx)

	if d.HasChangesExcept(names.AttrTags, names.AttrTagsAll) {
		input := &customerprofiles.UpdateDomainInput{
			DomainName: aws.String(d.Get(names.AttrDomainName).(string)),
		}

		if d.HasChange("dead_letter_queue_url") {
			input.DeadLetterQueueUrl = aws.String(d.Get("dead_letter_queue_url").(string))
		}

		if d.HasChange("default_encryption_key") {
			input.DefaultEncryptionKey = aws.String(d.Get("default_encryption_key").(string))
		}

		if d.HasChange("default_expiration_days") {
			input.DefaultExpirationDays = aws.Int32(int32(d.Get("default_expiration_days").(int)))
		}

		if d.HasChange("matching") {
			input.Matching = expandMatching(d.Get("matching").([]any))
		}

		if d.HasChange("rule_based_matching") {
			input.RuleBasedMatching = expandRuleBasedMatching(d.Get("rule_based_matching").([]any))
		}

		_, err := conn.UpdateDomain(ctx, input)

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "updating Customer Profiles Domain (%s): %s", d.Id(), err)
		}
	}

	return append(diags, resourceDomainRead(ctx, d, meta)...)
}
