package github.com/hashicorp/terraform-provider-aws/internal/service/customerprofiles
import (
	"context"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceDomainRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).CustomerProfilesClient(ctx)

	output, err := FindDomainByDomainName(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] Customer Profiles Domain with DomainName (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading Customer Profiles Domain: (%s) %s", d.Id(), err)
	}

	d.Set(names.AttrARN, domainARN(ctx, meta.(*conns.AWSClient), d.Id()))
	d.Set(names.AttrDomainName, output.DomainName)
	d.Set("dead_letter_queue_url", output.DeadLetterQueueUrl)
	d.Set("default_encryption_key", output.DefaultEncryptionKey)
	d.Set("default_expiration_days", output.DefaultExpirationDays)
	d.Set("matching", flattenMatching(output.Matching))
	d.Set("rule_based_matching", flattenRuleBasedMatching(output.RuleBasedMatching))

	setTagsOut(ctx, output.Tags)

	return diags
}
