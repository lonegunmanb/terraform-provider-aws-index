package github.com/hashicorp/terraform-provider-aws/internal/service/apprunner
import (
	"context"
	"log"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apprunner"
	"github.com/aws/aws-sdk-go-v2/service/apprunner/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceObservabilityConfigurationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AppRunnerClient(ctx)

	name := d.Get("observability_configuration_name").(string)
	input := &apprunner.CreateObservabilityConfigurationInput{
		ObservabilityConfigurationName: aws.String(name),
		Tags:                           getTagsIn(ctx),
	}

	if v, ok := d.GetOk("trace_configuration"); ok && len(v.([]any)) > 0 && v.([]any)[0] != nil {
		input.TraceConfiguration = expandTraceConfiguration(v.([]any))
	}

	output, err := conn.CreateObservabilityConfiguration(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating App Runner Observability Configuration (%s): %s", name, err)
	}

	d.SetId(aws.ToString(output.ObservabilityConfiguration.ObservabilityConfigurationArn))

	if _, err := waitObservabilityConfigurationCreated(ctx, conn, d.Id()); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for App Runner Observability Configuration (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceObservabilityConfigurationRead(ctx, d, meta)...)
}
