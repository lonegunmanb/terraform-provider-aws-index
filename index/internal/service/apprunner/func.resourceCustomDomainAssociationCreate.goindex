package github.com/hashicorp/terraform-provider-aws/internal/service/apprunner
import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apprunner"
	"github.com/aws/aws-sdk-go-v2/service/apprunner/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceCustomDomainAssociationCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AppRunnerClient(ctx)

	domainName := d.Get(names.AttrDomainName).(string)
	serviceARN := d.Get("service_arn").(string)
	id := customDomainAssociationCreateResourceID(domainName, serviceARN)
	input := &apprunner.AssociateCustomDomainInput{
		DomainName:         aws.String(domainName),
		EnableWWWSubdomain: aws.Bool(d.Get("enable_www_subdomain").(bool)),
		ServiceArn:         aws.String(serviceARN),
	}

	output, err := conn.AssociateCustomDomain(ctx, input)

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "creating App Runner Custom Domain Association (%s): %s", id, err)
	}

	d.SetId(id)
	d.Set("dns_target", output.DNSTarget)

	if _, err := waitCustomDomainAssociationCreated(ctx, conn, domainName, serviceARN); err != nil {
		return sdkdiag.AppendErrorf(diags, "waiting for App Runner Custom Domain Association (%s) create: %s", d.Id(), err)
	}

	return append(diags, resourceCustomDomainAssociationRead(ctx, d, meta)...)
}
