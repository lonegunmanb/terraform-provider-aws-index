package github.com/hashicorp/terraform-provider-aws/internal/service/apprunner
import (
	"context"
	"log"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/apprunner"
	"github.com/aws/aws-sdk-go-v2/service/apprunner/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	"github.com/hashicorp/terraform-provider-aws/internal/flex"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/internal/verify"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceServiceRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics

	conn := meta.(*conns.AWSClient).AppRunnerClient(ctx)

	service, err := findServiceByARN(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] App Runner Service (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading App Runner Service (%s): %s", d.Id(), err)
	}

	serviceURL := aws.ToString(service.ServiceUrl)

	if serviceURL == "" {
		// Alternate lookup required for private services.
		input := &apprunner.DescribeCustomDomainsInput{
			ServiceArn: aws.String(d.Id()),
		}

		err := forEachCustomDomainPage(ctx, conn, input, func(page *apprunner.DescribeCustomDomainsOutput) {
			serviceURL = aws.ToString(page.DNSTarget)
		})

		if err != nil {
			return sdkdiag.AppendErrorf(diags, "reading App Runner Service (%s) custom domains: %s", d.Id(), err)
		}
	}

	d.Set(names.AttrARN, service.ServiceArn)
	if service.AutoScalingConfigurationSummary != nil {
		d.Set("auto_scaling_configuration_arn", service.AutoScalingConfigurationSummary.AutoScalingConfigurationArn)
	} else {
		d.Set("auto_scaling_configuration_arn", nil)
	}
	if err := d.Set(names.AttrEncryptionConfiguration, flattenServiceEncryptionConfiguration(service.EncryptionConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting encryption_configuration: %s", err)
	}
	if err := d.Set("health_check_configuration", flattenServiceHealthCheckConfiguration(service.HealthCheckConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting health_check_configuration: %s", err)
	}
	if err := d.Set("instance_configuration", flattenServiceInstanceConfiguration(service.InstanceConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting instance_configuration: %s", err)
	}
	if err := d.Set(names.AttrNetworkConfiguration, flattenNetworkConfiguration(service.NetworkConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting network_configuration: %s", err)
	}
	if err := d.Set("observability_configuration", flattenServiceObservabilityConfiguration(service.ObservabilityConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting observability_configuration: %s", err)
	}
	d.Set("service_id", service.ServiceId)
	d.Set(names.AttrServiceName, service.ServiceName)
	d.Set("service_url", serviceURL)
	if err := d.Set("source_configuration", flattenServiceSourceConfiguration(service.SourceConfiguration)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting source_configuration: %s", err)
	}
	d.Set(names.AttrStatus, service.Status)

	return diags
}
