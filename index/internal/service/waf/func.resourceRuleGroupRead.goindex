package github.com/hashicorp/terraform-provider-aws/internal/service/waf
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/waf"
	awstypes "github.com/aws/aws-sdk-go-v2/service/waf/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceRuleGroupRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WAFClient(ctx)

	ruleGroup, err := findRuleGroupByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] WAF Rule Group (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading WAF Rule Group (%s): %s", d.Id(), err)
	}

	var activatedRules []awstypes.ActivatedRule
	input := &waf.ListActivatedRulesInRuleGroupInput{
		RuleGroupId: aws.String(d.Id()),
	}

	err = listActivatedRulesInRuleGroupPages(ctx, conn, input, func(page *waf.ListActivatedRulesInRuleGroupOutput, lastPage bool) bool {
		if page == nil {
			return !lastPage
		}

		activatedRules = append(activatedRules, page.ActivatedRules...)

		return !lastPage
	})

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "listing WAF Rule Group (%s) activated rules: %s", d.Id(), err)
	}

	if err := d.Set("activated_rule", flattenActivatedRules(activatedRules)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting activated_rule: %s", err)
	}
	d.Set(names.AttrARN, ruleGroupARN(ctx, meta.(*conns.AWSClient), d.Id()))
	d.Set(names.AttrMetricName, ruleGroup.MetricName)
	d.Set(names.AttrName, ruleGroup.Name)

	return diags
}
