package github.com/hashicorp/terraform-provider-aws/internal/service/waf
import (
	"context"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/waf"
	awstypes "github.com/aws/aws-sdk-go-v2/service/waf/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func resourceWebACLRead(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	var diags diag.Diagnostics
	conn := meta.(*conns.AWSClient).WAFClient(ctx)

	webACL, err := findWebACLByID(ctx, conn, d.Id())

	if !d.IsNewResource() && tfresource.NotFound(err) {
		log.Printf("[WARN] WAF Web ACL (%s) not found, removing from state", d.Id())
		d.SetId("")
		return diags
	}

	if err != nil {
		return sdkdiag.AppendErrorf(diags, "reading WAF Web ACL (%s): %s", d.Id(), err)
	}

	arn := aws.ToString(webACL.WebACLArn)
	d.Set(names.AttrARN, arn)
	if err := d.Set(names.AttrDefaultAction, flattenAction(webACL.DefaultAction)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting default_action: %s", err)
	}
	d.Set(names.AttrMetricName, webACL.MetricName)
	d.Set(names.AttrName, webACL.Name)
	if err := d.Set("rules", flattenWebACLRules(webACL.Rules)); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting rules: %s", err)
	}

	input := &waf.GetLoggingConfigurationInput{
		ResourceArn: aws.String(arn),
	}

	output, err := conn.GetLoggingConfiguration(ctx, input)

	loggingConfiguration := []any{}
	switch {
	case err == nil:
		loggingConfiguration = flattenLoggingConfiguration(output.LoggingConfiguration)
	case errs.IsA[*awstypes.WAFNonexistentItemException](err):
	default:
		return sdkdiag.AppendErrorf(diags, "reading WAF Web ACL (%s) logging configuration: %s", d.Id(), err)
	}

	if err := d.Set(names.AttrLoggingConfiguration, loggingConfiguration); err != nil {
		return sdkdiag.AppendErrorf(diags, "setting logging_configuration: %s", err)
	}

	return diags
}
