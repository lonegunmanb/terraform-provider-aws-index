package github.com/hashicorp/terraform-provider-aws/internal/service/waf
import (
	"context"
	"fmt"
	"log"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/waf"
	awstypes "github.com/aws/aws-sdk-go-v2/service/waf/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func diffRuleGroupActivatedRules(oldRules, newRules []any) []awstypes.RuleGroupUpdate {
	updates := make([]awstypes.RuleGroupUpdate, 0)

	for _, op := range oldRules {
		rule := op.(map[string]any)

		if idx, contains := sliceContainsMap(newRules, rule); contains {
			newRules = slices.Delete(newRules, idx, idx+1)
			continue
		}

		updates = append(updates, awstypes.RuleGroupUpdate{
			Action:        awstypes.ChangeActionDelete,
			ActivatedRule: expandActivatedRule(rule),
		})
	}

	for _, np := range newRules {
		rule := np.(map[string]any)

		updates = append(updates, awstypes.RuleGroupUpdate{
			Action:        awstypes.ChangeActionInsert,
			ActivatedRule: expandActivatedRule(rule),
		})
	}
	return updates
}
