package github.com/hashicorp/terraform-provider-aws/internal/service/waf
import (
	"context"
	"log"
	"slices"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/waf"
	awstypes "github.com/aws/aws-sdk-go-v2/service/waf/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func diffWebACLRules(oldR, newR []any) []awstypes.WebACLUpdate {
	updates := make([]awstypes.WebACLUpdate, 0)

	for _, or := range oldR {
		aclRule := or.(map[string]any)

		if idx, contains := sliceContainsMap(newR, aclRule); contains {
			newR = slices.Delete(newR, idx, idx+1)
			continue
		}
		updates = append(updates, expandWebACLUpdate(string(awstypes.ChangeActionDelete), aclRule))
	}

	for _, nr := range newR {
		aclRule := nr.(map[string]any)
		updates = append(updates, expandWebACLUpdate(string(awstypes.ChangeActionInsert), aclRule))
	}
	return updates
}
