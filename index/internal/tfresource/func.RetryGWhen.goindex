package github.com/hashicorp/terraform-provider-aws/internal/tfresource
import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"

	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	sdkretry "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-provider-aws/internal/backoff"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/retry"
)
func RetryGWhen[T any](ctx context.Context, timeout time.Duration, f func() (T, error), retryable Retryable) (T, error) {
	var output T

	err := Retry(ctx, timeout, func() *sdkretry.RetryError {
		var err error
		var again bool

		output, err = f()
		again, err = retryable(err)

		if again {
			return sdkretry.RetryableError(err)
		}

		if err != nil {
			return sdkretry.NonRetryableError(err)
		}

		return nil
	})

	if TimedOut(err) {
		output, err = f()
	}

	if err != nil {
		var zero T
		return zero, err
	}

	return output, nil
}
