package github.com/hashicorp/terraform-provider-aws/internal/framework
import (
	"context"
	"unique"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/list"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (l *ListResourceWithSDKv2Resource) SetResult(ctx context.Context, awsClient *conns.AWSClient, includeResource bool, result *list.ListResult, rd *schema.ResourceData) {
	err := l.setResourceIdentity(ctx, awsClient, rd)
	if err != nil {
		result.Diagnostics.Append(diag.NewErrorDiagnostic(
			"Error Listing Remote Resources",
			"An unexpected error occurred setting resource identity. "+
				"This is always an error in the provider. "+
				"Please report the following to the provider developer:\n\n"+
				"Error: "+err.Error(),
		))
		return
	}

	tfTypeIdentity, err := rd.TfTypeIdentityState()
	if err != nil {
		result.Diagnostics.Append(diag.NewErrorDiagnostic(
			"Error Listing Remote Resources",
			"An unexpected error occurred converting identity state. "+
				"This is always an error in the provider. "+
				"Please report the following to the provider developer:\n\n"+
				"Error: "+err.Error(),
		))
		return
	}

	result.Diagnostics.Append(result.Identity.Set(ctx, *tfTypeIdentity)...)
	if result.Diagnostics.HasError() {
		return
	}

	if includeResource {
		if !tfunique.IsHandleNil(l.regionSpec) && l.regionSpec.Value().IsOverrideEnabled {
			if err := rd.Set(names.AttrRegion, awsClient.Region(ctx)); err != nil {
				result.Diagnostics.Append(diag.NewErrorDiagnostic(
					"Error Listing Remote Resources",
					"An unexpected error occurred. "+
						"This is always an error in the provider. "+
						"Please report the following to the provider developer:\n\n"+
						"Error: "+err.Error(),
				))
				return
			}
		}

		tfTypeResource, err := rd.TfTypeResourceState()
		if err != nil {
			result.Diagnostics.Append(diag.NewErrorDiagnostic(
				"Error Listing Remote Resources",
				"An unexpected error occurred converting resource state. "+
					"This is always an error in the provider. "+
					"Please report the following to the provider developer:\n\n"+
					"Error: "+err.Error(),
			))
			return
		}

		result.Diagnostics.Append(result.Resource.Set(ctx, *tfTypeResource)...)
		if result.Diagnostics.HasError() {
			return
		}
	}
}
