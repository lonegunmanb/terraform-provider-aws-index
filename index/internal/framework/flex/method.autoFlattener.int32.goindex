package github.com/hashicorp/terraform-provider-aws/internal/framework/flex
import (
	"context"
	"fmt"
	"iter"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	smithyjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfreflect "github.com/hashicorp/terraform-provider-aws/internal/reflect"
	"github.com/shopspring/decimal"
)
func (flattener autoFlattener) int32(ctx context.Context, vFrom reflect.Value, isNullFrom bool, tTo attr.Type, vTo reflect.Value, fieldOpts fieldOpts) diag.Diagnostics {
	var diags diag.Diagnostics

	switch tTo := tTo.(type) {
	case basetypes.Int64Typable:
		//
		// int32/int64 -> types.Int64.
		//
		var int64Value types.Int64
		if fieldOpts.legacy {
			tflog.SubsystemDebug(ctx, subsystemName, "Using legacy flattener")
			if isNullFrom {
				int64Value = types.Int64Value(0)
			} else {
				int64Value = types.Int64Value(vFrom.Int())
			}
		} else {
			if isNullFrom {
				int64Value = types.Int64Null()
			} else {
				int64Value = types.Int64Value(vFrom.Int())
			}
		}
		v, d := tTo.ValueFromInt64(ctx, int64Value)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}

		vTo.Set(reflect.ValueOf(v))
		return diags

	case basetypes.Int32Typable:
		//
		// int32/int64 -> types.Int32.
		//
		var int32Value basetypes.Int32Value
		if fieldOpts.legacy {
			tflog.SubsystemDebug(ctx, subsystemName, "Using legacy flattener")
			if isNullFrom {
				int32Value = types.Int32Value(0)
			} else {
				int32Value = types.Int32Value(int32(vFrom.Int()))
			}
		} else {
			if isNullFrom {
				int32Value = types.Int32Null()
			} else {
				int32Value = types.Int32Value(int32(vFrom.Int()))
			}
		}
		v, d := tTo.ValueFromInt32(ctx, int32Value)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}

		vTo.Set(reflect.ValueOf(v))
		return diags
	}

	tflog.SubsystemError(ctx, subsystemName, "AutoFlex Flatten; incompatible types", map[string]any{
		"from": vFrom.Kind(),
		"to":   tTo,
	})

	return diags
}
