package github.com/hashicorp/terraform-provider-aws/internal/framework/flex
import (
	"context"
	"fmt"
	"iter"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	smithyjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfreflect "github.com/hashicorp/terraform-provider-aws/internal/reflect"
	"github.com/shopspring/decimal"
)
func setMapBlockKey(ctx context.Context, to any, key reflect.Value) diag.Diagnostics {
	var diags diag.Diagnostics

	valTo := reflect.ValueOf(to)
	if kind := valTo.Kind(); kind == reflect.Pointer {
		valTo = valTo.Elem()
	}

	ctx = tflog.SubsystemSetField(ctx, subsystemName, logAttrKeyTargetType, fullTypeName(valueType(valTo)))

	if valTo.Kind() != reflect.Struct {
		diags.AddError("AutoFlEx", fmt.Sprintf("wrong type (%T), expected struct", valTo))
		return diags
	}

	for field := range tfreflect.ExportedStructFields(valTo.Type()) {
		if field.Name != mapBlockKeyFieldName {
			continue
		}

		fieldVal := valTo.FieldByIndex(field.Index)           // vTo
		fieldAttrVal, ok := fieldVal.Interface().(attr.Value) // valTo
		if !ok {
			tflog.SubsystemError(ctx, subsystemName, "Target does not implement attr.Value")
			diags.Append(diagFlatteningTargetDoesNotImplementAttrValue(reflect.TypeOf(fieldVal.Interface())))
			return diags
		}
		tTo := fieldAttrVal.Type(ctx)

		switch tTo := tTo.(type) {
		case basetypes.StringTypable:
			v, d := tTo.ValueFromString(ctx, types.StringValue(key.String()))
			diags.Append(d...)
			if diags.HasError() {
				return diags
			}
			fieldVal.Set(reflect.ValueOf(v))
		}

		return diags
	}

	tflog.SubsystemError(ctx, subsystemName, "Target has no map block key")
	diags.Append(diagFlatteningNoMapBlockKey(valTo.Type()))

	return diags
}
