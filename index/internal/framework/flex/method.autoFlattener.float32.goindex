package github.com/hashicorp/terraform-provider-aws/internal/framework/flex
import (
	"context"
	"fmt"
	"iter"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	smithyjson "github.com/hashicorp/terraform-provider-aws/internal/json"
	tfreflect "github.com/hashicorp/terraform-provider-aws/internal/reflect"
	"github.com/shopspring/decimal"
)
func (flattener autoFlattener) float32(ctx context.Context, vFrom reflect.Value, isNullFrom bool, tTo attr.Type, vTo reflect.Value, fieldOpts fieldOpts) diag.Diagnostics {
	var diags diag.Diagnostics

	switch tTo := tTo.(type) {
	case basetypes.Float64Typable:
		//
		// float32 -> types.Float64.
		//
		var float64Value types.Float64
		if fieldOpts.legacy {
			tflog.SubsystemDebug(ctx, subsystemName, "Using legacy flattener")
			if isNullFrom {
				float64Value = types.Float64Value(0)
			} else {
				// Avoid loss of equivalence.
				from := vFrom.Interface().(float32)
				float64Value = types.Float64Value(decimal.NewFromFloat32(from).InexactFloat64())
			}
		} else {
			if isNullFrom {
				float64Value = types.Float64Null()
			} else {
				// Avoid loss of equivalence.
				from := vFrom.Interface().(float32)
				float64Value = types.Float64Value(decimal.NewFromFloat32(from).InexactFloat64())
			}
		}
		v, d := tTo.ValueFromFloat64(ctx, float64Value)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}

		vTo.Set(reflect.ValueOf(v))
		return diags

	case basetypes.Float32Typable:
		//
		// float32/float64 -> types.Float32.
		//
		var float32Value types.Float32
		if fieldOpts.legacy {
			tflog.SubsystemDebug(ctx, subsystemName, "Using legacy flattener")
			if isNullFrom {
				float32Value = types.Float32Value(0)
			} else {
				// Avoid loss of equivalence.
				from := vFrom.Interface().(float32)
				float32Value = types.Float32Value(float32(decimal.NewFromFloat32(from).InexactFloat64()))
			}
		} else {
			if isNullFrom {
				float32Value = types.Float32Null()
			} else {
				// Avoid loss of equivalence.
				from := vFrom.Interface().(float32)
				float32Value = types.Float32Value(float32(decimal.NewFromFloat32(from).InexactFloat64()))
			}
		}
		v, d := tTo.ValueFromFloat32(ctx, float32Value)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}

		vTo.Set(reflect.ValueOf(v))
		return diags
	}

	tflog.SubsystemError(ctx, subsystemName, "AutoFlex Flatten; incompatible types", map[string]any{
		"from": vFrom.Kind(),
		"to":   tTo,
	})

	return diags
}
