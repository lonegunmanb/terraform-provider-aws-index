package github.com/hashicorp/terraform-provider-aws/internal/framework/types
import (
	"context"
	"fmt"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
	tfreflect "github.com/hashicorp/terraform-provider-aws/internal/reflect"
)
func NullOutObjectPtrFields[T any](ctx context.Context, t *T) diag.Diagnostics {
	var diags diag.Diagnostics
	val := reflect.ValueOf(t)
	typ := val.Type().Elem()

	if typ.Kind() != reflect.Struct {
		return diags
	}

	val = val.Elem()

	for field := range tfreflect.StructFields(val.Type()) {
		fieldVal := val.FieldByIndex(field.Index)
		if !fieldVal.CanInterface() {
			continue
		}

		attrValue, err := NullValueOf(ctx, fieldVal.Interface())

		if err != nil {
			diags.Append(diag.NewErrorDiagnostic("attr.Type.ValueFromTerraform", err.Error()))
			return diags
		}

		if attrValue == nil {
			continue
		}

		fieldVal.Set(reflect.ValueOf(attrValue))
	}

	return diags
}
