package github.com/hashicorp/terraform-provider-aws/internal/framework/types
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/fwdiag"
)
func (t mapTypeOf[T]) ValueFromMap(ctx context.Context, in basetypes.MapValue) (basetypes.MapValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if in.IsNull() {
		return NewMapValueOfNull[T](ctx), diags
	}

	if in.IsUnknown() {
		return NewMapValueOfUnknown[T](ctx), diags
	}

	// Here marks the spot where countless hours were spent all over the
	// internal organs of framework and autoflex only to discover the
	// first argument in this call should be an element type not the map
	// type.
	mapValue, d := basetypes.NewMapValue(newAttrTypeOf[T](ctx), in.Elements())
	diags.Append(d...)
	if diags.HasError() {
		return NewMapValueOfUnknown[T](ctx), diags
	}

	return MapValueOf[T]{MapValue: mapValue}, diags
}
