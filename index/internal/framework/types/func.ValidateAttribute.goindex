package github.com/hashicorp/terraform-provider-aws/internal/framework/types
import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/attr/xattr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/defaults"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-provider-aws/internal/enum"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
)
func (v StringEnum[T]) ValidateAttribute(ctx context.Context, req xattr.ValidateAttributeRequest, resp *xattr.ValidateAttributeResponse) {
	if v.IsNull() || v.IsUnknown() {
		return
	}

	vs := v.ValueString()
	validValues := tfslices.AppendUnique(v.ValueEnum().Values(), "")

	for _, enumVal := range validValues {
		if vs == string(enumVal) {
			return
		}
	}

	resp.Diagnostics.AddAttributeError(
		req.Path,
		"Invalid String Enum Value",
		"The provided value does not match any valid values.\n\n"+
			"Path: "+req.Path.String()+"\n"+
			"Given Value: "+vs+"\n"+
			"Valid Values: "+fmt.Sprintf("%s", validValues),
	)
}
