package github.com/hashicorp/terraform-provider-aws/internal/verify
import (
	"encoding/json"
	"fmt"
	"net"
	"regexp"
	"slices"
	"strconv"
	"strings"
	"time"

	"github.com/YakDriver/regexache"
	"github.com/aws/aws-sdk-go-v2/aws/arn"
	basevalidation "github.com/hashicorp/aws-sdk-go-base/v2/validation"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	tfmaps "github.com/hashicorp/terraform-provider-aws/internal/maps"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/types/timestamp"
)
func MapKeyNoMatch(r *regexp.Regexp, message string) schema.SchemaValidateDiagFunc {
	return func(v any, path cty.Path) diag.Diagnostics {
		var diags diag.Diagnostics
		m := v.(map[string]any)
		keys := tfmaps.Keys(m)

		slices.Sort(keys)
		for _, k := range keys {
			if ok := r.MatchString(k); ok {
				var detail string
				if message != "" {
					detail = fmt.Sprintf("Map key '%s' %s", k, message)
				} else {
					detail = fmt.Sprintf("Map key '%s' must not match regular expression '%s'", k, r)
				}
				diags = append(diags, diag.Diagnostic{
					Severity:      diag.Error,
					Summary:       "Bad map key",
					Detail:        detail,
					AttributePath: path,
				})
			}
		}

		return diags
	}
}
