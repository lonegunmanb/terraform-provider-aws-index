package github.com/hashicorp/terraform-provider-aws/internal/verify
import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"strings"

	"github.com/YakDriver/regexache"
	awspolicy "github.com/hashicorp/awspolicyequivalence"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
)
func SecondJSONUnlessEquivalent(old, new string) (string, error) {
	// valid empty JSON is "{}" not "" so handle special case to avoid
	// Error unmarshaling policy: unexpected end of JSON input
	if strings.TrimSpace(new) == "" {
		return "", nil
	}

	if strings.TrimSpace(new) == "{}" {
		return "{}", nil
	}

	if strings.TrimSpace(old) == "" || strings.TrimSpace(old) == "{}" {
		return new, nil
	}

	equivalent, err := awspolicy.PoliciesAreEquivalent(old, new)

	if err != nil {
		// Plugin SDK V2 based resources can set malformed policy content in state
		// despite a failed update. In these cases, parsing the "old" content
		// will fail. Surfacing this error during read operations causes a
		// persistent plan-time validation error, so return the "new" content
		// read directly from the remote resource instead.
		//
		// Ref: https://github.com/hashicorp/terraform-provider-aws/issues/39833
		if errs.Contains(err, "parsing policy 1") {
			return new, nil
		}

		return "", err
	}

	if equivalent {
		return old, nil
	}

	return new, nil
}
