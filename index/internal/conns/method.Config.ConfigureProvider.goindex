package github.com/hashicorp/terraform-provider-aws/internal/conns
import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
	awsbase "github.com/hashicorp/aws-sdk-go-base/v2"
	basediag "github.com/hashicorp/aws-sdk-go-base/v2/diag"
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
	"github.com/hashicorp/aws-sdk-go-base/v2/logging"
	basevalidation "github.com/hashicorp/aws-sdk-go-base/v2/validation"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/errs/sdkdiag"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
	"github.com/hashicorp/terraform-provider-aws/version"
)
func (c *Config) ConfigureProvider(ctx context.Context, client *AWSClient) (*AWSClient, diag.Diagnostics) {
	var diags diag.Diagnostics

	ctx, logger := logging.NewTfLogger(ctx)

	const (
		maxBackoff = 300 * time.Second // AWS SDK for Go v1 DefaultRetryerMaxRetryDelay: https://github.com/aws/aws-sdk-go/blob/9f6e3bb9f523aef97fa1cd5c5f8ba8ecf212e44e/aws/client/default_retryer.go#L48-L49.
	)
	awsbaseConfig := awsbase.Config{
		AccessKey:         c.AccessKey,
		AllowedAccountIds: c.AllowedAccountIds,
		APNInfo: &awsbase.APNInfo{
			PartnerName: "HashiCorp",
			Products: []awsbase.UserAgentProduct{
				{Name: "Terraform", Version: c.TerraformVersion, Comment: "+https://www.terraform.io"},
				{Name: "terraform-provider-aws", Version: version.ProviderVersion, Comment: "+https://registry.terraform.io/providers/hashicorp/aws"},
			},
		},
		AssumeRole:                     c.AssumeRole,
		AssumeRoleWithWebIdentity:      c.AssumeRoleWithWebIdentity,
		Backoff:                        &v1CompatibleBackoff{maxRetryDelay: maxBackoff},
		CallerDocumentationURL:         "https://registry.terraform.io/providers/hashicorp/aws",
		CallerName:                     "Terraform AWS Provider",
		EC2MetadataServiceEnableState:  c.EC2MetadataServiceEnableState,
		ForbiddenAccountIds:            c.ForbiddenAccountIds,
		IamEndpoint:                    c.Endpoints[names.IAM],
		Insecure:                       c.Insecure,
		HTTPClient:                     client.HTTPClient(ctx),
		HTTPProxy:                      c.HTTPProxy,
		HTTPSProxy:                     c.HTTPSProxy,
		HTTPProxyMode:                  awsbase.HTTPProxyModeLegacy,
		Logger:                         logger,
		MaxBackoff:                     maxBackoff,
		MaxRetries:                     c.MaxRetries,
		NoProxy:                        c.NoProxy,
		Profile:                        c.Profile,
		Region:                         c.Region,
		RetryMode:                      c.RetryMode,
		SecretKey:                      c.SecretKey,
		SkipCredsValidation:            c.SkipCredsValidation,
		SkipRequestingAccountId:        c.SkipRequestingAccountId,
		SsoEndpoint:                    c.Endpoints[names.SSO],
		StsEndpoint:                    c.Endpoints[names.STS],
		SuppressDebugLog:               c.SuppressDebugLog,
		Token:                          c.Token,
		TokenBucketRateLimiterCapacity: c.TokenBucketRateLimiterCapacity,
		UseDualStackEndpoint:           c.UseDualStackEndpoint,
		UseFIPSEndpoint:                c.UseFIPSEndpoint,
	}

	if c.CustomCABundle != "" {
		awsbaseConfig.CustomCABundle = c.CustomCABundle
	}

	if c.EC2MetadataServiceEndpoint != "" {
		awsbaseConfig.EC2MetadataServiceEndpoint = c.EC2MetadataServiceEndpoint
		awsbaseConfig.EC2MetadataServiceEndpointMode = c.EC2MetadataServiceEndpointMode
	}

	if len(c.SharedConfigFiles) != 0 {
		awsbaseConfig.SharedConfigFiles = c.SharedConfigFiles
	}

	if len(c.SharedCredentialsFiles) != 0 {
		awsbaseConfig.SharedCredentialsFiles = c.SharedCredentialsFiles
	}

	if c.STSRegion != "" {
		awsbaseConfig.StsRegion = c.STSRegion
	}

	// Avoid duplicate calls to STS by enabling SkipCredsValidation for the call to GetAwsConfig
	// and then restoring the configured value for the call to GetAwsAccountIDAndPartition.
	skipCredsValidation := awsbaseConfig.SkipCredsValidation
	awsbaseConfig.SkipCredsValidation = true

	tflog.Debug(ctx, "Configuring Terraform AWS Provider")
	ctx, cfg, awsDiags := awsbase.GetAwsConfig(ctx, &awsbaseConfig)

	for _, d := range awsDiags {
		diags = append(diags, diag.Diagnostic{
			Severity: baseSeverityToSDKSeverity(d.Severity()),
			Summary:  d.Summary(),
			Detail:   d.Detail(),
		})
	}

	if diags.HasError() {
		return nil, diags
	}

	if !c.SkipRegionValidation {
		if err := basevalidation.SupportedRegion(cfg.Region); err != nil {
			return nil, sdkdiag.AppendFromErr(diags, err)
		}
	}
	c.Region = cfg.Region

	awsbaseConfig.SkipCredsValidation = skipCredsValidation

	tflog.Debug(ctx, "Retrieving AWS account details")
	accountID, partitionID, awsDiags := awsbase.GetAwsAccountIDAndPartition(ctx, cfg, &awsbaseConfig)
	for _, d := range awsDiags {
		diags = append(diags, diag.Diagnostic{
			Severity: baseSeverityToSDKSeverity(d.Severity()),
			Summary:  fmt.Sprintf("Retrieving AWS account details: %s", d.Summary()),
			Detail:   d.Detail(),
		})
	}

	if accountID == "" && !awsbaseConfig.SkipRequestingAccountId {
		diags = append(diags, errs.NewWarningDiagnostic(
			"AWS account ID not found for provider",
			"See https://registry.terraform.io/providers/hashicorp/aws/latest/docs#skip_requesting_account_id for implications."))
	}

	err := awsbaseConfig.VerifyAccountIDAllowed(accountID)
	if err != nil {
		return nil, sdkdiag.AppendErrorf(diags, "%s", err.Error())
	}

	for _, partition := range endpoints.DefaultPartitions() {
		if partition.ID() == partitionID {
			client.partition = partition
		}
	}

	client.accountID = accountID
	client.defaultTagsConfig = c.DefaultTagsConfig
	client.ignoreTagsConfig = c.IgnoreTagsConfig
	client.terraformVersion = c.TerraformVersion

	// Used for lazy-loading AWS API clients.
	client.awsConfig = &cfg
	client.clients = make(map[string]map[string]any, 0)
	client.endpoints = c.Endpoints
	client.logger = logger
	client.s3UsePathStyle = c.S3UsePathStyle
	client.s3USEast1RegionalEndpoint = c.S3USEast1RegionalEndpoint
	client.stsRegion = c.STSRegion

	return client, diags
}
