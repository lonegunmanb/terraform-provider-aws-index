package github.com/hashicorp/terraform-provider-aws/internal/experimental/depgraph
import (
	"fmt"
	"slices"
	"strings"

	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/types/stack"
)
func depthFirstSearch(edges map[string][]string) func(s string) ([]string, error) {
	type todoValue struct {
		node      string
		processed bool
	}

	visited := make([]string, 0)

	return func(s string) ([]string, error) {
		results := make([]string, 0)

		if slices.Contains(visited, s) {
			return results, nil
		}

		inCurrentPath := make(map[string]struct{})
		currentPath := make([]string, 0)
		todo := stack.New[*todoValue]()

		todo.Push(&todoValue{
			node: s,
		})

		for todo.Len() > 0 {
			current := todo.Peek().MustUnwrap()
			node := current.node

			if !current.processed {
				// Visit edges.
				if slices.Contains(visited, node) {
					todo.Pop()

					continue
				}

				if _, ok := inCurrentPath[node]; ok {
					return nil, dependencyCycleError(append(currentPath, node))
				}

				inCurrentPath[node] = struct{}{}
				currentPath = append(currentPath, node)

				nodeEdges := edges[node]

				for i := len(nodeEdges) - 1; i >= 0; i-- {
					todo.Push(&todoValue{
						node: nodeEdges[i],
					})
				}

				current.processed = true
			} else {
				// Edges have been visited.
				// Unroll the stack.
				todo.Pop()
				if n := len(currentPath); n > 0 {
					currentPath = currentPath[:n-1]
				}
				delete(inCurrentPath, node)
				visited = append(visited, node)
				results = append(results, node)
			}
		}

		return results, nil
	}
}
