package github.com/hashicorp/terraform-provider-aws/internal/experimental/depgraph
import (
	"fmt"
	"slices"
	"strings"

	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	"github.com/hashicorp/terraform-provider-aws/internal/types/stack"
)
func (g *Graph) OverallOrder() ([]string, error) {
	// Look for cycles.
	cycleDfs := depthFirstSearch(g.outgoingEdges)

	for _, node := range g.nodes {
		if _, err := cycleDfs(node); err != nil {
			return nil, err
		}
	}

	order := make([]string, 0)

	if g.Len() != 0 {
		dfs := depthFirstSearch(g.outgoingEdges)

		// Find all potential starting points (nodes with nothing depending on them)
		// and run the DFS starting at each of these points.
		for _, node := range g.nodes {
			if len(g.incomingEdges[node]) == 0 {
				result, err := dfs(node)

				if err != nil {
					return nil, err
				}

				order = append(order, result...)
			}
		}
	}

	return order, nil
}
