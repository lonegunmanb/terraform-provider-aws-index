package github.com/hashicorp/terraform-provider-aws/internal/provider/interceptors
import (
	"context"
	"unique"

	"github.com/hashicorp/aws-sdk-go-base/v2/tfawserr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/internal/sdkv2"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (h HTags) UpdateTags(ctx context.Context, sp conns.ServicePackage, c taggingAWSClient, identifier string, oldTags, newTags any) error {
	var err error

	resourceType := h.value().ResourceType
	if v, ok := sp.(tftags.ServiceTagUpdater); ok {
		err = v.UpdateTags(ctx, c, identifier, oldTags, newTags)
	} else if v, ok := sp.(tftags.ResourceTypeTagUpdater); ok {
		if resourceType == "" {
			tflog.Error(ctx, "UpdateTags method requires ResourceType but none set", map[string]any{
				"ServicePackage": sp.ServicePackageName(),
			})
		} else {
			err = v.UpdateTags(ctx, c, identifier, resourceType, oldTags, newTags)
		}
	} else {
		tflog.Warn(ctx, "No UpdateTags method found", map[string]any{
			"ServicePackage": sp.ServicePackageName(),
			"ResourceType":   resourceType,
		})
	}

	// ISO partitions may not support tagging, giving error.
	if errs.IsUnsupportedOperationInPartitionError(c.Partition(ctx), err) {
		err = nil
	}

	return err
}
