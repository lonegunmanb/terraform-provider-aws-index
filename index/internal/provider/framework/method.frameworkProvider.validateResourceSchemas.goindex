package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"
	"errors"
	"fmt"
	"iter"
	"log"
	"slices"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwflex "github.com/hashicorp/terraform-provider-aws/internal/framework/flex"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tffunction "github.com/hashicorp/terraform-provider-aws/internal/function"
	"github.com/hashicorp/terraform-provider-aws/internal/logging"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *frameworkProvider) validateResourceSchemas(ctx context.Context) error {
	var errs []error

	for sp := range p.servicePackages {
		for _, v := range sp.FrameworkDataSources(ctx) {
			typeName := v.TypeName
			ds, err := v.Factory(ctx)

			if err != nil {
				errs = append(errs, fmt.Errorf("creating data source (%s): %w", typeName, err))
				continue
			}

			schemaResponse := datasource.SchemaResponse{}
			ds.Schema(ctx, datasource.SchemaRequest{}, &schemaResponse)

			if v := v.Region; !tfunique.IsHandleNil(v) && v.Value().IsOverrideEnabled {
				if _, ok := schemaResponse.Schema.Attributes[names.AttrRegion]; ok {
					errs = append(errs, fmt.Errorf("`%s` attribute is defined: %s data source", names.AttrRegion, typeName))
					continue
				}
			}

			if !tfunique.IsHandleNil(v.Tags) {
				// The data source has opted in to transparent tagging.
				// Ensure that the schema look OK.
				if v, ok := schemaResponse.Schema.Attributes[names.AttrTags]; ok {
					if !v.IsComputed() {
						errs = append(errs, fmt.Errorf("`%s` attribute must be Computed: %s data source", names.AttrTags, typeName))
						continue
					}
				} else {
					errs = append(errs, fmt.Errorf("no `%s` attribute defined in schema: %s data source", names.AttrTags, typeName))
					continue
				}
			}
		}

		if v, ok := sp.(conns.ServicePackageWithEphemeralResources); ok {
			for _, v := range v.EphemeralResources(ctx) {
				typeName := v.TypeName
				er, err := v.Factory(ctx)

				if err != nil {
					errs = append(errs, fmt.Errorf("creating ephemeral resource (%s): %w", typeName, err))
					continue
				}

				schemaResponse := ephemeral.SchemaResponse{}
				er.Schema(ctx, ephemeral.SchemaRequest{}, &schemaResponse)

				if v := v.Region; !tfunique.IsHandleNil(v) && v.Value().IsOverrideEnabled {
					if _, ok := schemaResponse.Schema.Attributes[names.AttrRegion]; ok {
						errs = append(errs, fmt.Errorf("`%s` attribute is defined: %s ephemeral resource", names.AttrRegion, typeName))
						continue
					}
				}
			}
		}

		for _, v := range sp.FrameworkResources(ctx) {
			typeName := v.TypeName
			r, err := v.Factory(ctx)

			if err != nil {
				errs = append(errs, fmt.Errorf("creating resource (%s): %w", typeName, err))
				continue
			}

			schemaResponse := resource.SchemaResponse{}
			r.Schema(ctx, resource.SchemaRequest{}, &schemaResponse)

			if v := v.Region; !tfunique.IsHandleNil(v) && v.Value().IsOverrideEnabled {
				if _, ok := schemaResponse.Schema.Attributes[names.AttrRegion]; ok {
					errs = append(errs, fmt.Errorf("`%s` attribute is defined: %s resource", names.AttrRegion, typeName))
					continue
				}
			}

			if !tfunique.IsHandleNil(v.Tags) {
				// The resource has opted in to transparent tagging.
				// Ensure that the schema look OK.
				if v, ok := schemaResponse.Schema.Attributes[names.AttrTags]; ok {
					if v.IsComputed() {
						errs = append(errs, fmt.Errorf("`%s` attribute cannot be Computed: %s resource", names.AttrTags, typeName))
						continue
					}
				} else {
					errs = append(errs, fmt.Errorf("no `%s` attribute defined in schema: %s resource", names.AttrTags, typeName))
					continue
				}
				if v, ok := schemaResponse.Schema.Attributes[names.AttrTagsAll]; ok {
					if !v.IsComputed() {
						errs = append(errs, fmt.Errorf("`%s` attribute must be Computed: %s resource", names.AttrTagsAll, typeName))
						continue
					}
				} else {
					errs = append(errs, fmt.Errorf("no `%s` attribute defined in schema: %s resource", names.AttrTagsAll, typeName))
					continue
				}
			}
		}
	}

	return errors.Join(errs...)
}
