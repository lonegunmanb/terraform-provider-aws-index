package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"
	"errors"
	"fmt"
	"iter"
	"log"
	"reflect"
	"slices"
	"sync"
	"unique"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	datasourceschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	empemeralschema "github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	resourceschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tffunction "github.com/hashicorp/terraform-provider-aws/internal/function"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *frameworkProvider) validateResourceSchemas(ctx context.Context) error {
	var errs []error

	for sp := range p.servicePackages {
		for _, dataSourceSpec := range sp.FrameworkDataSources(ctx) {
			typeName := dataSourceSpec.TypeName
			inner, err := dataSourceSpec.Factory(ctx)

			if err != nil {
				errs = append(errs, fmt.Errorf("creating data source type (%s): %w", typeName, err))
				continue
			}

			schemaResponse := datasource.SchemaResponse{}
			inner.Schema(ctx, datasource.SchemaRequest{}, &schemaResponse)

			if err := validateSchemaRegionForDataSource(dataSourceSpec.Region, schemaResponse.Schema); err != nil {
				errs = append(errs, fmt.Errorf("data source type %q: %w", typeName, err))
				continue
			}

			if err := validateSchemaTagsForDataSource(dataSourceSpec.Tags, schemaResponse.Schema); err != nil {
				errs = append(errs, fmt.Errorf("data source type %q: %w", typeName, err))
				continue
			}
		}

		if v, ok := sp.(conns.ServicePackageWithEphemeralResources); ok {
			for _, ephemeralResourceSpec := range v.EphemeralResources(ctx) {
				typeName := ephemeralResourceSpec.TypeName
				inner, err := ephemeralResourceSpec.Factory(ctx)

				if err != nil {
					errs = append(errs, fmt.Errorf("creating ephemeral resource type (%s): %w", typeName, err))
					continue
				}

				schemaResponse := ephemeral.SchemaResponse{}
				inner.Schema(ctx, ephemeral.SchemaRequest{}, &schemaResponse)

				if err := validateSchemaRegionForEphemeralResource(ephemeralResourceSpec.Region, schemaResponse.Schema); err != nil {
					errs = append(errs, fmt.Errorf("ephemeral resource type %q: %w", typeName, err))
					continue
				}
			}
		}

		for _, resourceSpec := range sp.FrameworkResources(ctx) {
			typeName := resourceSpec.TypeName
			inner, err := resourceSpec.Factory(ctx)

			if err != nil {
				errs = append(errs, fmt.Errorf("creating resource type (%s): %w", typeName, err))
				continue
			}

			schemaResponse := resource.SchemaResponse{}
			inner.Schema(ctx, resource.SchemaRequest{}, &schemaResponse)

			if err := validateSchemaRegionForResource(resourceSpec.Region, schemaResponse.Schema); err != nil {
				errs = append(errs, fmt.Errorf("resource type %q: %w", typeName, err))
				continue
			}

			if err := validateSchemaTagsForResource(resourceSpec.Tags, schemaResponse.Schema); err != nil {
				errs = append(errs, fmt.Errorf("resource type %q: %w", typeName, err))
				continue
			}

			if resourceSpec.Import.WrappedImport {
				if resourceSpec.Import.SetIDAttr {
					if _, ok := resourceSpec.Import.ImportID.(inttypes.FrameworkImportIDCreator); !ok {
						errs = append(errs, fmt.Errorf("resource type %q: importer sets `%s` attribute, but creator isn't configured", resourceSpec.TypeName, names.AttrID))
						continue
					}
				}

				if _, ok := inner.(framework.ImportByIdentityer); !ok {
					errs = append(errs, fmt.Errorf("resource type %q: cannot configure importer, does not implement %q", resourceSpec.TypeName, reflect.TypeFor[framework.ImportByIdentityer]()))
					continue
				}
			}
		}
	}

	return errors.Join(errs...)
}
