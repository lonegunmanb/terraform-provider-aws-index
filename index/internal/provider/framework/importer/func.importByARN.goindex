package github.com/hashicorp/terraform-provider-aws/internal/provider/framework/importer
import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws/arn"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func importByARN(ctx context.Context, client AWSClient, request resource.ImportStateRequest, identitySpec *inttypes.Identity, response *resource.ImportStateResponse) arn.ARN {
	var (
		arnARN arn.ARN
		arnVal string
	)
	if arnVal = request.ID; arnVal != "" {
		var err error
		arnARN, err = arn.Parse(arnVal)
		if err != nil {
			response.Diagnostics.Append(InvalidResourceImportIDError(
				"could not be parsed as an ARN.\n\n" +
					fmt.Sprintf("Value: %q\nError: %s", arnVal, err),
			))
			return arn.ARN{}
		}
	} else if identity := request.Identity; identity != nil {
		arnPath := path.Root(identitySpec.IdentityAttribute)
		identity.GetAttribute(ctx, arnPath, &arnVal)

		var err error
		arnARN, err = arn.Parse(arnVal)
		if err != nil {
			response.Diagnostics.Append(InvalidIdentityAttributeError(
				arnPath,
				"could not be parsed as an ARN.\n\n"+
					fmt.Sprintf("Value: %q\nError: %s", arnVal, err),
			))
			return arn.ARN{}
		}
	}

	accountID := client.AccountID(ctx)
	if arnARN.AccountID != accountID {
		if request.ID != "" {
			response.Diagnostics.Append(InvalidResourceImportIDError(
				fmt.Sprintf("contains an Account ID %q which does not match the provider's %q.\n\nValue: %q", arnARN.AccountID, accountID, arnVal),
			))
		} else {
			arnPath := path.Root(identitySpec.IdentityAttribute)
			response.Diagnostics.Append(InvalidIdentityAttributeError(
				arnPath,
				fmt.Sprintf("contains an Account ID %q which does not match the provider's %q.\n\nValue: %q", arnARN.AccountID, accountID, arnVal),
			))
		}
		return arn.ARN{}
	}

	response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(identitySpec.IdentityAttribute), arnVal)...)
	for _, attr := range identitySpec.IdentityDuplicateAttrs {
		response.Diagnostics.Append(response.State.SetAttribute(ctx, path.Root(attr), arnVal)...)
	}

	if identity := response.Identity; identity != nil {
		response.Diagnostics.Append(identity.SetAttribute(ctx, path.Root(identitySpec.IdentityAttribute), arnVal)...)
	}

	return arnARN
}
