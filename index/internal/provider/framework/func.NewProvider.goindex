package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"
	"errors"
	"fmt"
	"iter"
	"log"
	"reflect"
	"slices"
	"sync"
	"unique"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/action"
	aschema "github.com/hashicorp/terraform-plugin-framework/action/schema"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	datasourceschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	empemeralschema "github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/list"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	resourceschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tffunction "github.com/hashicorp/terraform-provider-aws/internal/function"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func NewProvider(ctx context.Context, primary interface{ Meta() any }) (provider.Provider, error) {
	log.Printf("Creating Terraform AWS Provider (Framework-style)...")

	provider := &frameworkProvider{
		actions:            make([]func() action.Action, 0),
		dataSources:        make([]func() datasource.DataSource, 0),
		ephemeralResources: make([]func() ephemeral.EphemeralResource, 0),
		primary:            primary,
		resources:          make([]func() resource.Resource, 0),
		servicePackages:    primary.Meta().(*conns.AWSClient).ServicePackages(ctx),
	}

	// Because we try and share resource schemas as much as possible,
	// we need to ensure that we only validate the resource schemas once.
	var err error
	resourceSchemasValidated.Do(func() {
		err = provider.validateResourceSchemas(ctx)
	})
	if err != nil {
		return nil, err
	}

	provider.initialize(ctx)

	return provider, nil
}
