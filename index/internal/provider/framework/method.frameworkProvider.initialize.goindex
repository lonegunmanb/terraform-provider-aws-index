package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"
	"errors"
	"fmt"
	"iter"
	"log"
	"reflect"
	"slices"
	"sync"
	"unique"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/action"
	aschema "github.com/hashicorp/terraform-plugin-framework/action/schema"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	datasourceschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	empemeralschema "github.com/hashicorp/terraform-plugin-framework/ephemeral/schema"
	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/list"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	resourceschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tffunction "github.com/hashicorp/terraform-provider-aws/internal/function"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	tfunique "github.com/hashicorp/terraform-provider-aws/internal/unique"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func (p *frameworkProvider) initialize(ctx context.Context) {
	log.Printf("Initializing Terraform AWS Provider (Framework-style)...")

	for sp := range p.servicePackages {
		servicePackageName := sp.ServicePackageName()

		for _, dataSourceSpec := range sp.FrameworkDataSources(ctx) {
			p.dataSources = append(p.dataSources, func() datasource.DataSource { //nolint:contextcheck // must be a func()
				return newWrappedDataSource(dataSourceSpec, servicePackageName)
			})
		}

		if v, ok := sp.(conns.ServicePackageWithEphemeralResources); ok {
			for _, ephemeralResourceSpec := range v.EphemeralResources(ctx) {
				p.ephemeralResources = append(p.ephemeralResources, func() ephemeral.EphemeralResource { //nolint:contextcheck // must be a func()
					return newWrappedEphemeralResource(ephemeralResourceSpec, servicePackageName)
				})
			}
		}

		if v, ok := sp.(conns.ServicePackageWithFrameworkListResources); ok {
			for listResourceSpec := range v.FrameworkListResources(ctx) {
				p.listResources = append(p.listResources, func() list.ListResource { //nolint:contextcheck // must be a func()
					return newWrappedListResourceFramework(listResourceSpec, servicePackageName)
				})
			}
		}
		if v, ok := sp.(conns.ServicePackageWithSDKListResources); ok {
			for listResourceSpec := range v.SDKListResources(ctx) {
				p.listResources = append(p.listResources, func() list.ListResource { //nolint:contextcheck // must be a func()
					return newWrappedListResourceSDK(listResourceSpec, servicePackageName)
				})
			}
		}

		for _, resourceSpec := range sp.FrameworkResources(ctx) {
			p.resources = append(p.resources, func() resource.Resource { //nolint:contextcheck // must be a func()
				return newWrappedResource(resourceSpec, servicePackageName)
			})
		}

		if v, ok := sp.(conns.ServicePackageWithActions); ok {
			for _, actionSpec := range v.Actions(ctx) {
				p.actions = append(p.actions, func() action.Action { //nolint:contextcheck // must be a func()
					return newWrappedAction(actionSpec, servicePackageName)
				})
			}
		}
	}
}
