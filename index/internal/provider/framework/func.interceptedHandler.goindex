package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
)
func interceptedHandler[Request interceptedRequest, Response interceptedResponse](interceptors []interceptorFunc[Request, Response], f func(context.Context, *Request, *Response) diag.Diagnostics, c *conns.AWSClient) func(context.Context, *Request, *Response) diag.Diagnostics {
	return func(ctx context.Context, request *Request, response *Response) diag.Diagnostics {
		var diags diag.Diagnostics
		// Before interceptors are run first to last.
		forward := interceptors

		when := Before
		for _, v := range forward {
			opts := interceptorOptions[Request, Response]{
				c:        c,
				request:  request,
				response: response,
				when:     when,
			}
			diags.Append(v(ctx, opts)...)

			// Short circuit if any Before interceptor errors.
			if diags.HasError() {
				return diags
			}
		}

		// All other interceptors are run last to first.
		reverse := tfslices.Reverse(forward)
		diags = f(ctx, request, response)

		if diags.HasError() {
			when = OnError
		} else {
			when = After
		}
		for _, v := range reverse {
			opts := interceptorOptions[Request, Response]{
				c:        c,
				request:  request,
				response: response,
				when:     when,
			}
			diags.Append(v(ctx, opts)...)
		}

		when = Finally
		for _, v := range reverse {
			opts := interceptorOptions[Request, Response]{
				c:        c,
				request:  request,
				response: response,
				when:     when,
			}
			diags.Append(v(ctx, opts)...)
		}

		return diags
	}
}
