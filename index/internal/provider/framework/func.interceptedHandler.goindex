package github.com/hashicorp/terraform-provider-aws/internal/provider/framework
import (
	"context"
	"slices"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tfslices "github.com/hashicorp/terraform-provider-aws/internal/slices"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
)
func interceptedHandler[Request interceptedRequest, Response interceptedResponse](interceptors []interceptorFunc[Request, Response], f innerFunc[Request, Response], hasError hasErrorFn[Response], c awsClient) func(context.Context, Request, *Response) {
	return func(ctx context.Context, request Request, response *Response) {
		opts := interceptorOptions[Request, Response]{
			c:        c,
			request:  &request,
			response: response,
		}

		// Before interceptors are run first to last.
		opts.when = Before
		for v := range slices.Values(interceptors) {
			v(ctx, opts)

			// Short circuit if any Before interceptor errors.
			if hasError(response) {
				return
			}
		}

		f(ctx, request, response)

		// All other interceptors are run last to first.
		if hasError(response) {
			opts.when = OnError
		} else {
			opts.when = After
		}
		for v := range tfslices.BackwardValues(interceptors) {
			v(ctx, opts)
		}

		opts.when = Finally
		for v := range tfslices.BackwardValues(interceptors) {
			v(ctx, opts)
		}
	}
}
