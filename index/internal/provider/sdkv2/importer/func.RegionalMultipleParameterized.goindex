package github.com/hashicorp/terraform-provider-aws/internal/provider/sdkv2/importer
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)
func RegionalMultipleParameterized(ctx context.Context, rd *schema.ResourceData, identitySpec inttypes.Identity, importSpec *inttypes.SDKv2Import, client AWSClient) error {
	if rd.Id() != "" {
		id, parts, err := importSpec.ImportID.Parse(rd.Id())
		if err != nil {
			return err
		}

		rd.SetId(id)
		for attr, val := range parts {
			rd.Set(attr, val)
		}
	} else {
		identity, err := rd.Identity()
		if err != nil {
			return err
		}

		if err := validateAccountID(identity, client.AccountID(ctx)); err != nil {
			return err
		}

		if err := setRegion(ctx, identity, rd, client); err != nil {
			return err
		}

		for _, attr := range identitySpec.Attributes {
			switch attr.Name() {
			case names.AttrAccountID, names.AttrRegion:
				// Do nothing

			default:
				valRaw, ok := identity.GetOk(attr.Name())
				if attr.Required() && !ok {
					return fmt.Errorf("identity attribute %q is required", attr.Name())
				}
				val, ok := valRaw.(string)
				if !ok {
					return fmt.Errorf("identity attribute %q: expected string, got %T", attr.Name(), valRaw)
				}
				setAttribute(rd, attr.ResourceAttributeName(), val)
			}
		}

		rd.SetId(importSpec.ImportID.Create(rd))
	}

	return nil
}
